
SDIO_TEST_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3ec  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002198c  0800d570  0800d570  0001d570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802eefc  0802eefc  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802eefc  0802eefc  0003eefc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ef04  0802ef04  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ef04  0802ef04  0003ef04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ef08  0802ef08  0003ef08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802ef0c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023b0  200001e0  0802f0ec  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002590  0802f0ec  00042590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff1a  00000000  00000000  00040209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004736  00000000  00000000  00060123  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001600  00000000  00000000  00064860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  00065e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026143  00000000  00000000  00067238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016c2a  00000000  00000000  0008d37b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce6b0  00000000  00000000  000a3fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af4  00000000  00000000  001726d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800d558 	.word	0x0800d558

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	0800d558 	.word	0x0800d558

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d013      	beq.n	8000508 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00b      	beq.n	8000508 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004f0:	e000      	b.n	80004f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f9      	beq.n	80004f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <TFT_ShieldDetect>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static ShieldStatus TFT_ShieldDetect(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable GPIO clock */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <TFT_ShieldDetect+0x54>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <TFT_ShieldDetect+0x54>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <TFT_ShieldDetect+0x54>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000536:	2304      	movs	r3, #4
 8000538:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800053e:	2302      	movs	r3, #2
 8000540:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4619      	mov	r1, r3
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <TFT_ShieldDetect+0x58>)
 8000548:	f001 ff38 	bl	80023bc <HAL_GPIO_Init>

	if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2) != 0)
 800054c:	2104      	movs	r1, #4
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <TFT_ShieldDetect+0x58>)
 8000550:	f002 f8d2 	bl	80026f8 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <TFT_ShieldDetect+0x4a>
	{
		return SHIELD_DETECTED;
 800055a:	2301      	movs	r3, #1
 800055c:	e000      	b.n	8000560 <TFT_ShieldDetect+0x4c>
	}
	else
	{
		return SHIELD_NOT_DETECTED;
 800055e:	2300      	movs	r3, #0
	}
}
 8000560:	4618      	mov	r0, r3
 8000562:	3718      	adds	r7, #24
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40023800 	.word	0x40023800
 800056c:	40021800 	.word	0x40021800

08000570 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000580:	d022      	beq.n	80005c8 <HAL_GPIO_EXTI_Callback+0x58>
 8000582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000586:	dc04      	bgt.n	8000592 <HAL_GPIO_EXTI_Callback+0x22>
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d009      	beq.n	80005a0 <HAL_GPIO_EXTI_Callback+0x30>
 800058c:	2b80      	cmp	r3, #128	; 0x80
 800058e:	d011      	beq.n	80005b4 <HAL_GPIO_EXTI_Callback+0x44>
		break;
	case GPIO_PIN_14:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		break;
	}
}
 8000590:	e02a      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x78>
	switch (GPIO_Pin)
 8000592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000596:	d01c      	beq.n	80005d2 <HAL_GPIO_EXTI_Callback+0x62>
 8000598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800059c:	d01e      	beq.n	80005dc <HAL_GPIO_EXTI_Callback+0x6c>
}
 800059e:	e023      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('6');
 80005a0:	2036      	movs	r0, #54	; 0x36
 80005a2:	f7ff ff91 	bl	80004c8 <ITM_SendChar>
		ITM_SendChar('\r');
 80005a6:	200d      	movs	r0, #13
 80005a8:	f7ff ff8e 	bl	80004c8 <ITM_SendChar>
		ITM_SendChar('\n');
 80005ac:	200a      	movs	r0, #10
 80005ae:	f7ff ff8b 	bl	80004c8 <ITM_SendChar>
		break;
 80005b2:	e019      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('7');
 80005b4:	2037      	movs	r0, #55	; 0x37
 80005b6:	f7ff ff87 	bl	80004c8 <ITM_SendChar>
		ITM_SendChar('\r');
 80005ba:	200d      	movs	r0, #13
 80005bc:	f7ff ff84 	bl	80004c8 <ITM_SendChar>
		ITM_SendChar('\n');
 80005c0:	200a      	movs	r0, #10
 80005c2:	f7ff ff81 	bl	80004c8 <ITM_SendChar>
		break;
 80005c6:	e00f      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x80>)
 80005cc:	f002 f8c3 	bl	8002756 <HAL_GPIO_TogglePin>
		break;
 80005d0:	e00a      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005d2:	2101      	movs	r1, #1
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x80>)
 80005d6:	f002 f8be 	bl	8002756 <HAL_GPIO_TogglePin>
		break;
 80005da:	e005      	b.n	80005e8 <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x80>)
 80005e2:	f002 f8b8 	bl	8002756 <HAL_GPIO_TogglePin>
		break;
 80005e6:	bf00      	nop
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020400 	.word	0x40020400

080005f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b0a6      	sub	sp, #152	; 0x98
 80005f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 80005fa:	4b5e      	ldr	r3, [pc, #376]	; (8000774 <main+0x180>)
 80005fc:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	682b      	ldr	r3, [r5, #0]
 800060c:	7023      	strb	r3, [r4, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800060e:	f000 fdd3 	bl	80011b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000612:	f000 f8bf 	bl	8000794 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000616:	f000 f9bf 	bl	8000998 <MX_GPIO_Init>
	MX_DMA_Init();
 800061a:	f000 f995 	bl	8000948 <MX_DMA_Init>
	MX_ETH_Init();
 800061e:	f000 f901 	bl	8000824 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000622:	f000 f967 	bl	80008f4 <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 8000626:	f00c f9c5 	bl	800c9b4 <MX_USB_DEVICE_Init>
	MX_SDIO_SD_Init();
 800062a:	f000 f943 	bl	80008b4 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 800062e:	f007 fc1f 	bl	8007e70 <MX_FATFS_Init>
	 "아 하하하ㅏ하하하하하ㅏ하하하\r\n";

	 f_write(&temp, tmp, strlen(tmp), &res);
	 f_close(&temp);
	 */
	if (TFT_ShieldDetect() != SHIELD_DETECTED)
 8000632:	f7ff ff6f 	bl	8000514 <TFT_ShieldDetect>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d001      	beq.n	8000640 <main+0x4c>
	{
		Error_Handler();
 800063c:	f000 fa94 	bl	8000b68 <Error_Handler>
	}

	/*##-1- Link the SD disk I/O driver ########################################*/
	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8000640:	494d      	ldr	r1, [pc, #308]	; (8000778 <main+0x184>)
 8000642:	484e      	ldr	r0, [pc, #312]	; (800077c <main+0x188>)
 8000644:	f00b ffd0 	bl	800c5e8 <FATFS_LinkDriver>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d17d      	bne.n	800074a <main+0x156>
	{
		/*##-2- Register the file system object to the FatFs module ##############*/
		if (f_mount(&SDFatFS, SDPath, 1) != FR_OK)
 800064e:	2201      	movs	r2, #1
 8000650:	4949      	ldr	r1, [pc, #292]	; (8000778 <main+0x184>)
 8000652:	484b      	ldr	r0, [pc, #300]	; (8000780 <main+0x18c>)
 8000654:	f00b f98e 	bl	800b974 <f_mount>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d007      	beq.n	800066e <main+0x7a>
		{
			/* FatFs Initialization Error */
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2101      	movs	r1, #1
 8000662:	4848      	ldr	r0, [pc, #288]	; (8000784 <main+0x190>)
 8000664:	f002 f85f 	bl	8002726 <HAL_GPIO_WritePin>
			Error_Handler();
 8000668:	f000 fa7e 	bl	8000b68 <Error_Handler>
 800066c:	e06d      	b.n	800074a <main+0x156>
			 HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
			 Error_Handler();
			 }*/

			/*##-4- Create and Open a new text file object with write access #####*/
			if (f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 800066e:	220a      	movs	r2, #10
 8000670:	4945      	ldr	r1, [pc, #276]	; (8000788 <main+0x194>)
 8000672:	4846      	ldr	r0, [pc, #280]	; (800078c <main+0x198>)
 8000674:	f00b f9c6 	bl	800ba04 <f_open>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d007      	beq.n	800068e <main+0x9a>
					!= FR_OK)
			{
				/* 'STM32.TXT' file Open for write Error */
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	4840      	ldr	r0, [pc, #256]	; (8000784 <main+0x190>)
 8000684:	f002 f84f 	bl	8002726 <HAL_GPIO_WritePin>
				Error_Handler();
 8000688:	f000 fa6e 	bl	8000b68 <Error_Handler>
 800068c:	e05d      	b.n	800074a <main+0x156>
			}
			else
			{
				/*##-5- Write data to the text file ################################*/
				res = f_write(&MyFile, wtext, sizeof(wtext),
 800068e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000692:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000696:	2221      	movs	r2, #33	; 0x21
 8000698:	483c      	ldr	r0, [pc, #240]	; (800078c <main+0x198>)
 800069a:	f00b fd02 	bl	800c0a2 <f_write>
 800069e:	4603      	mov	r3, r0
 80006a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						(void*) &byteswritten);

				if ((byteswritten == 0) || (res != FR_OK))
 80006a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d003      	beq.n	80006b4 <main+0xc0>
 80006ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d007      	beq.n	80006c4 <main+0xd0>
				{
					/* 'STM32.TXT' file Write or EOF Error */
					HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4832      	ldr	r0, [pc, #200]	; (8000784 <main+0x190>)
 80006ba:	f002 f834 	bl	8002726 <HAL_GPIO_WritePin>
					Error_Handler();
 80006be:	f000 fa53 	bl	8000b68 <Error_Handler>
 80006c2:	e042      	b.n	800074a <main+0x156>
				}
				else
				{
					/*##-6- Close the open text file #################################*/
					f_close(&MyFile);
 80006c4:	4831      	ldr	r0, [pc, #196]	; (800078c <main+0x198>)
 80006c6:	f00b ff1d 	bl	800c504 <f_close>

					/*##-7- Open the text file object with read access ###############*/
					if (f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 80006ca:	2201      	movs	r2, #1
 80006cc:	492e      	ldr	r1, [pc, #184]	; (8000788 <main+0x194>)
 80006ce:	482f      	ldr	r0, [pc, #188]	; (800078c <main+0x198>)
 80006d0:	f00b f998 	bl	800ba04 <f_open>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d007      	beq.n	80006ea <main+0xf6>
					{
						/* 'STM32.TXT' file Open for read Error */
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	4829      	ldr	r0, [pc, #164]	; (8000784 <main+0x190>)
 80006e0:	f002 f821 	bl	8002726 <HAL_GPIO_WritePin>
						Error_Handler();
 80006e4:	f000 fa40 	bl	8000b68 <Error_Handler>
 80006e8:	e02f      	b.n	800074a <main+0x156>
					}
					else
					{
						/*##-8- Read data from the text file ###########################*/
						res = f_read(&MyFile, rtext, sizeof(rtext),
 80006ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006ee:	1d39      	adds	r1, r7, #4
 80006f0:	2264      	movs	r2, #100	; 0x64
 80006f2:	4826      	ldr	r0, [pc, #152]	; (800078c <main+0x198>)
 80006f4:	f00b fb6a 	bl	800bdcc <f_read>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
								(UINT*) &bytesread);

						if ((bytesread == 0) || (res != FR_OK)) /* EOF or Error */
 80006fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000702:	2b00      	cmp	r3, #0
 8000704:	d003      	beq.n	800070e <main+0x11a>
 8000706:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800070a:	2b00      	cmp	r3, #0
 800070c:	d007      	beq.n	800071e <main+0x12a>
						{
							/* 'STM32.TXT' file Read or EOF Error */
							HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2101      	movs	r1, #1
 8000712:	481c      	ldr	r0, [pc, #112]	; (8000784 <main+0x190>)
 8000714:	f002 f807 	bl	8002726 <HAL_GPIO_WritePin>
							Error_Handler();
 8000718:	f000 fa26 	bl	8000b68 <Error_Handler>
 800071c:	e015      	b.n	800074a <main+0x156>
						}
						else
						{
							/*##-9- Close the open text file #############################*/
							f_close(&MyFile);
 800071e:	481b      	ldr	r0, [pc, #108]	; (800078c <main+0x198>)
 8000720:	f00b fef0 	bl	800c504 <f_close>

							/*##-10- Compare read data with the expected data ############*/
							if ((bytesread != byteswritten))
 8000724:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800072c:	429a      	cmp	r2, r3
 800072e:	d007      	beq.n	8000740 <main+0x14c>
							{
								/* Read data is different from the expected data */
								HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <main+0x190>)
 8000736:	f001 fff6 	bl	8002726 <HAL_GPIO_WritePin>
								Error_Handler();
 800073a:	f000 fa15 	bl	8000b68 <Error_Handler>
 800073e:	e004      	b.n	800074a <main+0x156>
							}
							else
							{
								/* Success of the demo: no error occurrence */
								HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	480f      	ldr	r0, [pc, #60]	; (8000784 <main+0x190>)
 8000746:	f001 ffee 	bl	8002726 <HAL_GPIO_WritePin>

		}
	}

	/*##-11- Unlink the SD disk I/O driver ####################################*/
	FATFS_UnLinkDriver(SDPath);
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <main+0x184>)
 800074c:	f00b ff92 	bl	800c674 <FATFS_UnLinkDriver>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	480e      	ldr	r0, [pc, #56]	; (8000790 <main+0x19c>)
 8000756:	f001 ffe6 	bl	8002726 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 800075a:	201e      	movs	r0, #30
 800075c:	f000 fd9a 	bl	8001294 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2140      	movs	r1, #64	; 0x40
 8000764:	480a      	ldr	r0, [pc, #40]	; (8000790 <main+0x19c>)
 8000766:	f001 ffde 	bl	8002726 <HAL_GPIO_WritePin>
		HAL_Delay(470);
 800076a:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800076e:	f000 fd91 	bl	8001294 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, SET);
 8000772:	e7ed      	b.n	8000750 <main+0x15c>
 8000774:	0800d57c 	.word	0x0800d57c
 8000778:	200002d8 	.word	0x200002d8
 800077c:	0800d660 	.word	0x0800d660
 8000780:	20000a98 	.word	0x20000a98
 8000784:	40020400 	.word	0x40020400
 8000788:	0800d570 	.word	0x0800d570
 800078c:	200005f0 	.word	0x200005f0
 8000790:	40021800 	.word	0x40021800

08000794 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b092      	sub	sp, #72	; 0x48
 8000798:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00c fe18 	bl	800d3d8 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007be:	2310      	movs	r3, #16
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 80007ca:	230d      	movs	r3, #13
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 80007ce:	23c3      	movs	r3, #195	; 0xc3
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80007d6:	2305      	movs	r3, #5
 80007d8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 f940 	bl	8003a64 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x5a>
	{
		Error_Handler();
 80007ea:	f000 f9bd 	bl	8000b68 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2103      	movs	r1, #3
 800080a:	4618      	mov	r0, r3
 800080c:	f003 fb7a 	bl	8003f04 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x86>
	{
		Error_Handler();
 8000816:	f000 f9a7 	bl	8000b68 <Error_Handler>
	}
}
 800081a:	bf00      	nop
 800081c:	3748      	adds	r7, #72	; 0x48
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000828:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_ETH_Init+0x88>)
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <MX_ETH_Init+0x8c>)
 800082c:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_ETH_Init+0x88>)
 8000830:	2201      	movs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
	heth.Init.Speed = ETH_SPEED_100M;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_ETH_Init+0x88>)
 8000836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083a:	609a      	str	r2, [r3, #8]
	heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_ETH_Init+0x88>)
 800083e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000842:	60da      	str	r2, [r3, #12]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ETH_Init+0x88>)
 8000846:	2200      	movs	r2, #0
 8000848:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_ETH_Init+0x88>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_ETH_Init+0x88>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_ETH_Init+0x88>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	3302      	adds	r3, #2
 8000862:	22e1      	movs	r2, #225	; 0xe1
 8000864:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_ETH_Init+0x88>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	3303      	adds	r3, #3
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_ETH_Init+0x88>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	3304      	adds	r3, #4
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_ETH_Init+0x88>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	3305      	adds	r3, #5
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_ETH_Init+0x88>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_ETH_Init+0x88>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_ETH_Init+0x88>)
 8000892:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000896:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_ETH_Init+0x88>)
 800089a:	f001 f933 	bl	8001b04 <HAL_ETH_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ETH_Init+0x84>
	{
		Error_Handler();
 80008a4:	f000 f960 	bl	8000b68 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000081c 	.word	0x2000081c
 80008b0:	40028000 	.word	0x40028000

080008b4 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008ba:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <MX_SDIO_SD_Init+0x3c>)
 80008bc:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 10;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <MX_SDIO_SD_Init+0x38>)
 80008de:	220a      	movs	r2, #10
 80008e0:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	2000056c 	.word	0x2000056c
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART3_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART3_UART_Init+0x4c>)
 800092c:	f005 f90e 	bl	8005b4c <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000936:	f000 f917 	bl	8000b68 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000298 	.word	0x20000298
 8000944:	40004800 	.word	0x40004800

08000948 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_DMA_Init+0x4c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MX_DMA_Init+0x4c>)
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_DMA_Init+0x4c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2106      	movs	r1, #6
 800096e:	203b      	movs	r0, #59	; 0x3b
 8000970:	f000 fd89 	bl	8001486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000974:	203b      	movs	r0, #59	; 0x3b
 8000976:	f000 fda2 	bl	80014be <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2106      	movs	r1, #6
 800097e:	2045      	movs	r0, #69	; 0x45
 8000980:	f000 fd81 	bl	8001486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000984:	2045      	movs	r0, #69	; 0x45
 8000986:	f000 fd9a 	bl	80014be <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08c      	sub	sp, #48	; 0x30
 800099c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
 80009b2:	4b67      	ldr	r3, [pc, #412]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a66      	ldr	r2, [pc, #408]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b64      	ldr	r3, [pc, #400]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	4b60      	ldr	r3, [pc, #384]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a5f      	ldr	r2, [pc, #380]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a58      	ldr	r2, [pc, #352]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b56      	ldr	r3, [pc, #344]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a4a      	ldr	r2, [pc, #296]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a43      	ldr	r2, [pc, #268]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <MX_GPIO_Init+0x1b8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a78:	4836      	ldr	r0, [pc, #216]	; (8000b54 <MX_GPIO_Init+0x1bc>)
 8000a7a:	f001 fe54 	bl	8002726 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2140      	movs	r1, #64	; 0x40
 8000a82:	4835      	ldr	r0, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x1c0>)
 8000a84:	f001 fe4f 	bl	8002726 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : USER_Btn_Pin PC6 PC7 */
	GPIO_InitStruct.Pin = USER_Btn_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 8000a88:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8000a8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	4b33      	ldr	r3, [pc, #204]	; (8000b5c <MX_GPIO_Init+0x1c4>)
 8000a90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4830      	ldr	r0, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x1c8>)
 8000a9e:	f001 fc8d 	bl	80023bc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000aa2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aa6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4826      	ldr	r0, [pc, #152]	; (8000b54 <MX_GPIO_Init+0x1bc>)
 8000abc:	f001 fc7e 	bl	80023bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE11 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 8000ac0:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000ac4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MX_GPIO_Init+0x1c4>)
 8000ac8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4823      	ldr	r0, [pc, #140]	; (8000b64 <MX_GPIO_Init+0x1cc>)
 8000ad6:	f001 fc71 	bl	80023bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PG2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_GPIO_Init+0x1c0>)
 8000aee:	f001 fc65 	bl	80023bc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <MX_GPIO_Init+0x1c0>)
 8000b0a:	f001 fc57 	bl	80023bc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_GPIO_Init+0x1c0>)
 8000b22:	f001 fc4b 	bl	80023bc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2017      	movs	r0, #23
 8000b2c:	f000 fcab 	bl	8001486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b30:	2017      	movs	r0, #23
 8000b32:	f000 fcc4 	bl	80014be <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2028      	movs	r0, #40	; 0x28
 8000b3c:	f000 fca3 	bl	8001486 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f000 fcbc 	bl	80014be <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3730      	adds	r7, #48	; 0x30
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40021000 	.word	0x40021000

08000b68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x48>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x48>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x48>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_MspInit+0x48>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <HAL_MspInit+0x48>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_MspInit+0x48>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a55      	ldr	r2, [pc, #340]	; (8000d34 <HAL_ETH_MspInit+0x174>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 80a4 	bne.w	8000d2c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
 8000be8:	4b53      	ldr	r3, [pc, #332]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a52      	ldr	r2, [pc, #328]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a4b      	ldr	r2, [pc, #300]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
 8000c20:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a44      	ldr	r2, [pc, #272]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c34:	61bb      	str	r3, [r7, #24]
 8000c36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	4b3e      	ldr	r3, [pc, #248]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a3d      	ldr	r2, [pc, #244]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b3b      	ldr	r3, [pc, #236]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	4b37      	ldr	r3, [pc, #220]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a36      	ldr	r2, [pc, #216]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b34      	ldr	r3, [pc, #208]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a2f      	ldr	r2, [pc, #188]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a28      	ldr	r2, [pc, #160]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <HAL_ETH_MspInit+0x178>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca8:	2332      	movs	r3, #50	; 0x32
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <HAL_ETH_MspInit+0x17c>)
 8000cc4:	f001 fb7a 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc8:	2386      	movs	r3, #134	; 0x86
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd8:	230b      	movs	r3, #11
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <HAL_ETH_MspInit+0x180>)
 8000ce4:	f001 fb6a 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <HAL_ETH_MspInit+0x184>)
 8000d06:	f001 fb59 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1c:	230b      	movs	r3, #11
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <HAL_ETH_MspInit+0x188>)
 8000d28:	f001 fb48 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3738      	adds	r7, #56	; 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40028000 	.word	0x40028000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40021800 	.word	0x40021800

08000d4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a68      	ldr	r2, [pc, #416]	; (8000f0c <HAL_SD_MspInit+0x1c0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f040 80c9 	bne.w	8000f02 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	4b66      	ldr	r3, [pc, #408]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	4a65      	ldr	r2, [pc, #404]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000d7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d80:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a5e      	ldr	r2, [pc, #376]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a57      	ldr	r2, [pc, #348]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b55      	ldr	r3, [pc, #340]	; (8000f10 <HAL_SD_MspInit+0x1c4>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000dc4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000dc8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	484c      	ldr	r0, [pc, #304]	; (8000f14 <HAL_SD_MspInit+0x1c8>)
 8000de2:	f001 faeb 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de6:	2304      	movs	r3, #4
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000df6:	230c      	movs	r3, #12
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4845      	ldr	r0, [pc, #276]	; (8000f18 <HAL_SD_MspInit+0x1cc>)
 8000e02:	f001 fadb 	bl	80023bc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_SD_MspInit+0x1d4>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e12:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e14:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e16:	2240      	movs	r2, #64	; 0x40
 8000e18:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e20:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e26:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e28:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e2e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e36:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e46:	2204      	movs	r2, #4
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e4a:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e52:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e58:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e62:	f000 fb47 	bl	80014f4 <HAL_DMA_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000e6c:	f7ff fe7c 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e76:	4a29      	ldr	r2, [pc, #164]	; (8000f1c <HAL_SD_MspInit+0x1d0>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000e7e:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <HAL_SD_MspInit+0x1dc>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000e84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e88:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ea4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eac:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ec8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ed0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000ed8:	f000 fb0c 	bl	80014f4 <HAL_DMA_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000ee2:	f7ff fe41 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_SD_MspInit+0x1d8>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	2031      	movs	r0, #49	; 0x31
 8000ef8:	f000 fac5 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000efc:	2031      	movs	r0, #49	; 0x31
 8000efe:	f000 fade 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40012c00 	.word	0x40012c00
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020c00 	.word	0x40020c00
 8000f1c:	2000050c 	.word	0x2000050c
 8000f20:	400264a0 	.word	0x400264a0
 8000f24:	20000238 	.word	0x20000238
 8000f28:	40026458 	.word	0x40026458

08000f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0x84>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d12c      	bne.n	8000fa8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_UART_MspInit+0x88>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_UART_MspInit+0x8c>)
 8000fa4:	f001 fa0a 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40004800 	.word	0x40004800
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020c00 	.word	0x40020c00

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <HardFault_Handler+0x4>

08000fce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <MemManage_Handler+0x4>

08000fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <BusFault_Handler+0x4>

08000fda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001008:	f000 f928 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001014:	2040      	movs	r0, #64	; 0x40
 8001016:	f001 fbb7 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	f001 fbb4 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001028:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800102c:	f001 fbac 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001030:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001034:	f001 fba8 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001038:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800103c:	f001 fba4 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001040:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001044:	f001 fba0 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <SDIO_IRQHandler+0x10>)
 8001052:	f003 fd95 	bl	8004b80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000056c 	.word	0x2000056c

08001060 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <DMA2_Stream3_IRQHandler+0x10>)
 8001066:	f000 fb15 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000238 	.word	0x20000238

08001074 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <OTG_FS_IRQHandler+0x10>)
 800107a:	f001 fcdc 	bl	8002a36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000218c 	.word	0x2000218c

08001088 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <DMA2_Stream6_IRQHandler+0x10>)
 800108e:	f000 fb01 	bl	8001694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000050c 	.word	0x2000050c

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f00c f94a 	bl	800d364 <__errno>
 80010d0:	4602      	mov	r2, r0
 80010d2:	230c      	movs	r3, #12
 80010d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200001fc 	.word	0x200001fc
 8001104:	20002590 	.word	0x20002590

08001108 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <SystemInit+0x50>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <SystemInit+0x50>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <SystemInit+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <SystemInit+0x50>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <SystemInit+0x50>)
 8001124:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SystemInit+0x50>)
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SystemInit+0x54>)
 8001132:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <SystemInit+0x50>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <SystemInit+0x50>)
 800113a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SystemInit+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x58>)
 8001148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114c:	609a      	str	r2, [r3, #8]
#endif
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	24003010 	.word	0x24003010
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0x14>
 8001168:	2100      	movs	r1, #0
 800116a:	e003      	b.n	8001174 <LoopCopyDataInit>

0800116c <CopyDataInit>:
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <LoopFillZerobss+0x18>)
 800116e:	585b      	ldr	r3, [r3, r1]
 8001170:	5043      	str	r3, [r0, r1]
 8001172:	3104      	adds	r1, #4

08001174 <LoopCopyDataInit>:
 8001174:	480b      	ldr	r0, [pc, #44]	; (80011a4 <LoopFillZerobss+0x1c>)
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <LoopFillZerobss+0x20>)
 8001178:	1842      	adds	r2, r0, r1
 800117a:	429a      	cmp	r2, r3
 800117c:	d3f6      	bcc.n	800116c <CopyDataInit>
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <LoopFillZerobss+0x24>)
 8001180:	e002      	b.n	8001188 <LoopFillZerobss>

08001182 <FillZerobss>:
 8001182:	2300      	movs	r3, #0
 8001184:	f842 3b04 	str.w	r3, [r2], #4

08001188 <LoopFillZerobss>:
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <LoopFillZerobss+0x28>)
 800118a:	429a      	cmp	r2, r3
 800118c:	d3f9      	bcc.n	8001182 <FillZerobss>
 800118e:	f7ff ffbb 	bl	8001108 <SystemInit>
 8001192:	f00c f8ed 	bl	800d370 <__libc_init_array>
 8001196:	f7ff fa2d 	bl	80005f4 <main>
 800119a:	4770      	bx	lr
 800119c:	20020000 	.word	0x20020000
 80011a0:	0802ef0c 	.word	0x0802ef0c
 80011a4:	20000000 	.word	0x20000000
 80011a8:	200001e0 	.word	0x200001e0
 80011ac:	200001e0 	.word	0x200001e0
 80011b0:	20002590 	.word	0x20002590

080011b4 <ADC_IRQHandler>:
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f945 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fcc2 	bl	8000b74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f95d 	bl	80014da <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f925 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000000 	.word	0x20000000
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x1c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x20>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a03      	ldr	r2, [pc, #12]	; (800127c <HAL_IncTick+0x20>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000008 	.word	0x20000008
 800127c:	20000864 	.word	0x20000864

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <HAL_GetTick+0x10>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000864 	.word	0x20000864

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff fff0 	bl	8001280 <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_Delay+0x40>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffe0 	bl	8001280 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4906      	ldr	r1, [pc, #24]	; (8001370 <__NVIC_EnableIRQ+0x34>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Config>:
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff90 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff2d 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff42 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff90 	bl	80013c8 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff35 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff febe 	bl	8001280 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e099      	b.n	8001644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0201 	bic.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001530:	e00f      	b.n	8001552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001532:	f7ff fea5 	bl	8001280 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b05      	cmp	r3, #5
 800153e:	d908      	bls.n	8001552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2220      	movs	r2, #32
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2203      	movs	r2, #3
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e078      	b.n	8001644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e8      	bne.n	8001532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_DMA_Init+0x158>)
 800156c:	4013      	ands	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d107      	bne.n	80015bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4313      	orrs	r3, r2
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f023 0307 	bic.w	r3, r3, #7
 80015d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	4313      	orrs	r3, r2
 80015dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d117      	bne.n	8001616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00e      	beq.n	8001616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 fa09 	bl	8001a10 <DMA_CheckFifoParam>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2240      	movs	r2, #64	; 0x40
 8001608:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001612:	2301      	movs	r3, #1
 8001614:	e016      	b.n	8001644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f9c2 	bl	80019a8 <DMA_CalcBaseAndBitshift>
 8001624:	4603      	mov	r3, r0
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	223f      	movs	r2, #63	; 0x3f
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f010803f 	.word	0xf010803f

08001650 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d004      	beq.n	800166e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00c      	b.n	8001688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2205      	movs	r2, #5
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_DMA_IRQHandler+0x258>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a92      	ldr	r2, [pc, #584]	; (80018f0 <HAL_DMA_IRQHandler+0x25c>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0a9b      	lsrs	r3, r3, #10
 80016ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016be:	2208      	movs	r2, #8
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01a      	beq.n	8001700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0204 	bic.w	r2, r2, #4
 80016e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	2208      	movs	r2, #8
 80016ee:	409a      	lsls	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2201      	movs	r2, #1
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4013      	ands	r3, r2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d012      	beq.n	8001736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001722:	2201      	movs	r2, #1
 8001724:	409a      	lsls	r2, r3
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f043 0202 	orr.w	r2, r3, #2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2204      	movs	r2, #4
 800173c:	409a      	lsls	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00b      	beq.n	800176c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2204      	movs	r2, #4
 800175a:	409a      	lsls	r2, r3
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f043 0204 	orr.w	r2, r3, #4
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	2210      	movs	r2, #16
 8001772:	409a      	lsls	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d043      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03c      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2210      	movs	r2, #16
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d018      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d024      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
 80017c2:	e01f      	b.n	8001804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
 80017d4:	e016      	b.n	8001804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0208 	bic.w	r2, r2, #8
 80017f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	2220      	movs	r2, #32
 800180a:	409a      	lsls	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 808e 	beq.w	8001932 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8086 	beq.w	8001932 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2220      	movs	r2, #32
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b05      	cmp	r3, #5
 800183c:	d136      	bne.n	80018ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0216 	bic.w	r2, r2, #22
 800184c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800185c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <HAL_DMA_IRQHandler+0x1da>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0208 	bic.w	r2, r2, #8
 800187c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001882:	223f      	movs	r2, #63	; 0x3f
 8001884:	409a      	lsls	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d07d      	beq.n	800199e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
        }
        return;
 80018aa:	e078      	b.n	800199e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01c      	beq.n	80018f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d030      	beq.n	8001932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	4798      	blx	r3
 80018d8:	e02b      	b.n	8001932 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d027      	beq.n	8001932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
 80018ea:	e022      	b.n	8001932 <HAL_DMA_IRQHandler+0x29e>
 80018ec:	20000000 	.word	0x20000000
 80018f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0210 	bic.w	r2, r2, #16
 8001910:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	2b00      	cmp	r3, #0
 8001938:	d032      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d022      	beq.n	800198c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2205      	movs	r2, #5
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	429a      	cmp	r2, r3
 8001968:	d307      	bcc.n	800197a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f2      	bne.n	800195e <HAL_DMA_IRQHandler+0x2ca>
 8001978:	e000      	b.n	800197c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800197a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e000      	b.n	80019a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800199e:	bf00      	nop
    }
  }
}
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop

080019a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3b10      	subs	r3, #16
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <DMA_CalcBaseAndBitshift+0x60>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <DMA_CalcBaseAndBitshift+0x64>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d909      	bls.n	80019ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019de:	f023 0303 	bic.w	r3, r3, #3
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	659a      	str	r2, [r3, #88]	; 0x58
 80019e8:	e007      	b.n	80019fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	aaaaaaab 	.word	0xaaaaaaab
 8001a0c:	0800d648 	.word	0x0800d648

08001a10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d11f      	bne.n	8001a6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d855      	bhi.n	8001adc <DMA_CheckFifoParam+0xcc>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <DMA_CheckFifoParam+0x28>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a5b 	.word	0x08001a5b
 8001a40:	08001a49 	.word	0x08001a49
 8001a44:	08001add 	.word	0x08001add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d045      	beq.n	8001ae0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a58:	e042      	b.n	8001ae0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a62:	d13f      	bne.n	8001ae4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a68:	e03c      	b.n	8001ae4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a72:	d121      	bne.n	8001ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d836      	bhi.n	8001ae8 <DMA_CheckFifoParam+0xd8>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <DMA_CheckFifoParam+0x70>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001a97 	.word	0x08001a97
 8001a88:	08001a91 	.word	0x08001a91
 8001a8c:	08001aa9 	.word	0x08001aa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
      break;
 8001a94:	e02f      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d024      	beq.n	8001aec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa6:	e021      	b.n	8001aec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab0:	d11e      	bne.n	8001af0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ab6:	e01b      	b.n	8001af0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d902      	bls.n	8001ac4 <DMA_CheckFifoParam+0xb4>
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d003      	beq.n	8001aca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ac2:	e018      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac8:	e015      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00e      	beq.n	8001af4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8001ada:	e00b      	b.n	8001af4 <DMA_CheckFifoParam+0xe4>
      break;
 8001adc:	bf00      	nop
 8001ade:	e00a      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae0:	bf00      	nop
 8001ae2:	e008      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e006      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ae8:	bf00      	nop
 8001aea:	e004      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      break;
 8001aec:	bf00      	nop
 8001aee:	e002      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001af0:	bf00      	nop
 8001af2:	e000      	b.n	8001af6 <DMA_CheckFifoParam+0xe6>
      break;
 8001af4:	bf00      	nop
    }
  } 
  
  return status; 
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop

08001b04 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001b14:	4ba3      	ldr	r3, [pc, #652]	; (8001da4 <HAL_ETH_Init+0x2a0>)
 8001b16:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e175      	b.n	8001e16 <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff f83e 	bl	8000bc0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_ETH_Init+0x2a4>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <HAL_ETH_Init+0x2a4>)
 8001b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b52:	6453      	str	r3, [r2, #68]	; 0x44
 8001b54:	4b94      	ldr	r3, [pc, #592]	; (8001da8 <HAL_ETH_Init+0x2a4>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_ETH_Init+0x2a8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a91      	ldr	r2, [pc, #580]	; (8001dac <HAL_ETH_Init+0x2a8>)
 8001b66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b6a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <HAL_ETH_Init+0x2a8>)
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	498d      	ldr	r1, [pc, #564]	; (8001dac <HAL_ETH_Init+0x2a8>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b90:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b92:	f7ff fb75 	bl	8001280 <HAL_GetTick>
 8001b96:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001b98:	e011      	b.n	8001bbe <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001b9a:	f7ff fb71 	bl	8001280 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ba8:	d909      	bls.n	8001bbe <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e12b      	b.n	8001e16 <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e4      	bne.n	8001b9a <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f023 031c 	bic.w	r3, r3, #28
 8001bde:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001be0:	f002 fb54 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8001be4:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4a71      	ldr	r2, [pc, #452]	; (8001db0 <HAL_ETH_Init+0x2ac>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d908      	bls.n	8001c00 <HAL_ETH_Init+0xfc>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4a70      	ldr	r2, [pc, #448]	; (8001db4 <HAL_ETH_Init+0x2b0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d804      	bhi.n	8001c00 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e01a      	b.n	8001c36 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <HAL_ETH_Init+0x2b0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d908      	bls.n	8001c1a <HAL_ETH_Init+0x116>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	4a6b      	ldr	r2, [pc, #428]	; (8001db8 <HAL_ETH_Init+0x2b4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d804      	bhi.n	8001c1a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f043 030c 	orr.w	r3, r3, #12
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	e00d      	b.n	8001c36 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4a66      	ldr	r2, [pc, #408]	; (8001db8 <HAL_ETH_Init+0x2b4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d903      	bls.n	8001c2a <HAL_ETH_Init+0x126>
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_ETH_Init+0x2b8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d904      	bls.n	8001c34 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e000      	b.n	8001c36 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c34:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001c3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c42:	2100      	movs	r1, #0
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f953 	bl	8001ef0 <HAL_ETH_WritePHYRegister>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001c54:	6939      	ldr	r1, [r7, #16]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f9b0 	bl	8001fbc <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0d6      	b.n	8001e16 <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001c68:	20ff      	movs	r0, #255	; 0xff
 8001c6a:	f7ff fb13 	bl	8001294 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80a4 	beq.w	8001dc0 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fb02 	bl	8001280 <HAL_GetTick>
 8001c7c:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	461a      	mov	r2, r3
 8001c84:	2101      	movs	r1, #1
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ca 	bl	8001e20 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001c8c:	f7ff faf8 	bl	8001280 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d90f      	bls.n	8001cbe <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f989 	bl	8001fbc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0ab      	b.n	8001e16 <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0da      	beq.n	8001c7e <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ccc:	2100      	movs	r1, #0
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f90e 	bl	8001ef0 <HAL_ETH_WritePHYRegister>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f96b 	bl	8001fbc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e091      	b.n	8001e16 <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf2:	f7ff fac5 	bl	8001280 <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2101      	movs	r1, #1
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f88d 	bl	8001e20 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001d06:	f7ff fabb 	bl	8001280 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d90f      	bls.n	8001d38 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001d1c:	6939      	ldr	r1, [r7, #16]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f94c 	bl	8001fbc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e06e      	b.n	8001e16 <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0da      	beq.n	8001cf8 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	461a      	mov	r2, r3
 8001d48:	211f      	movs	r1, #31
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f868 	bl	8001e20 <HAL_ETH_ReadPHYRegister>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d5a:	6939      	ldr	r1, [r7, #16]
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f92d 	bl	8001fbc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e053      	b.n	8001e16 <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	e002      	b.n	8001d88 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	e034      	b.n	8001e04 <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	e02f      	b.n	8001e04 <HAL_ETH_Init+0x300>
 8001da4:	03938700 	.word	0x03938700
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40013800 	.word	0x40013800
 8001db0:	01312cff 	.word	0x01312cff
 8001db4:	02160ebf 	.word	0x02160ebf
 8001db8:	039386ff 	.word	0x039386ff
 8001dbc:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f889 	bl	8001ef0 <HAL_ETH_WritePHYRegister>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8e6 	bl	8001fbc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e00c      	b.n	8001e16 <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001dfc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001e00:	f7ff fa48 	bl	8001294 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8d8 	bl	8001fbc <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop

08001e20 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b82      	cmp	r3, #130	; 0x82
 8001e40:	d101      	bne.n	8001e46 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e050      	b.n	8001ee8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2282      	movs	r2, #130	; 0x82
 8001e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 031c 	and.w	r3, r3, #28
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8a1b      	ldrh	r3, [r3, #16]
 8001e62:	02db      	lsls	r3, r3, #11
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e6c:	897b      	ldrh	r3, [r7, #10]
 8001e6e:	019b      	lsls	r3, r3, #6
 8001e70:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f023 0302 	bic.w	r3, r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e92:	f7ff f9f5 	bl	8001280 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e98:	e015      	b.n	8001ec6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e9a:	f7ff f9f1 	bl	8001280 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea8:	d309      	bcc.n	8001ebe <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e014      	b.n	8001ee8 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e4      	bne.n	8001e9a <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b42      	cmp	r3, #66	; 0x42
 8001f10:	d101      	bne.n	8001f16 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	e04e      	b.n	8001fb4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2242      	movs	r2, #66	; 0x42
 8001f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 031c 	and.w	r3, r3, #28
 8001f2c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8a1b      	ldrh	r3, [r3, #16]
 8001f32:	02db      	lsls	r3, r3, #11
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	019b      	lsls	r3, r3, #6
 8001f40:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f6c:	f7ff f988 	bl	8001280 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f72:	e015      	b.n	8001fa0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f74:	f7ff f984 	bl	8001280 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f82:	d309      	bcc.n	8001f98 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e00d      	b.n	8001fb4 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e4      	bne.n	8001f74 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b0      	sub	sp, #192	; 0xc0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd8:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002006:	663b      	str	r3, [r7, #96]	; 0x60
 8002008:	e001      	b.n	800200e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002018:	2300      	movs	r3, #0
 800201a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002094:	4bac      	ldr	r3, [pc, #688]	; (8002348 <ETH_MACDMAConfig+0x38c>)
 8002096:	4013      	ands	r3, r2
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 800209c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80020a0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80020a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80020a4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80020a8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80020ae:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80020b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80020b2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80020b6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80020bc:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80020be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80020c0:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80020c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80020c4:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80020c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80020c8:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80020cc:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80020d0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80020d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7ff f8cf 	bl	8001294 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002100:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002104:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002108:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800210a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800210e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002114:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800211a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800211c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002120:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002124:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800212c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800212e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800213a:	2001      	movs	r0, #1
 800213c:	f7ff f8aa 	bl	8001294 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002148:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002152:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800215c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002170:	4013      	ands	r3, r2
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800217a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800217c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002180:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002186:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800218c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800218e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002192:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002198:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800219a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ac:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7ff f86b 	bl	8001294 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c6:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80021c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80021cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff f856 	bl	8001294 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f0:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fa:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002204:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002216:	2304      	movs	r3, #4
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800221a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800222c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002236:	2300      	movs	r3, #0
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	3318      	adds	r3, #24
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800224e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <ETH_MACDMAConfig+0x390>)
 8002254:	4013      	ands	r3, r2
 8002256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800225a:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800225c:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800225e:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002260:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8002262:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002264:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002266:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002268:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 800226a:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800226c:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800226e:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002270:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002272:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002276:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 800227a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800227c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228e:	3318      	adds	r3, #24
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229e:	3318      	adds	r3, #24
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7fe fff4 	bl	8001294 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	3318      	adds	r3, #24
 80022b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ba:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80022bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80022c0:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80022c4:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c8:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80022ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80022cc:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80022ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d0:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80022d2:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80022d6:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe ffcd 	bl	8001294 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10f      	bne.n	8002330 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002318:	331c      	adds	r3, #28
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800232c:	331c      	adds	r3, #28
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	461a      	mov	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f809 	bl	8002350 <ETH_MACAddressConfig>
}
 800233e:	bf00      	nop
 8002340:	37c0      	adds	r7, #192	; 0xc0
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	ff20810f 	.word	0xff20810f
 800234c:	f8de3f23 	.word	0xf8de3f23

08002350 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3305      	adds	r3, #5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	3204      	adds	r2, #4
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <ETH_MACAddressConfig+0x64>)
 8002372:	4413      	add	r3, r2
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3303      	adds	r3, #3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061a      	lsls	r2, r3, #24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4313      	orrs	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <ETH_MACAddressConfig+0x68>)
 80023a2:	4413      	add	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40028040 	.word	0x40028040
 80023b8:	40028044 	.word	0x40028044

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	e16f      	b.n	80026ac <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8161 	beq.w	80026a6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d00b      	beq.n	8002404 <HAL_GPIO_Init+0x48>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d007      	beq.n	8002404 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f8:	2b11      	cmp	r3, #17
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d130      	bne.n	8002466 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800243a:	2201      	movs	r2, #1
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f003 0201 	and.w	r2, r3, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0xea>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d123      	bne.n	80024ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	08da      	lsrs	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3208      	adds	r2, #8
 80024ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	6939      	ldr	r1, [r7, #16]
 80024ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80bb 	beq.w	80026a6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 800253a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253e:	6453      	str	r3, [r2, #68]	; 0x44
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800254c:	4a5f      	ldr	r2, [pc, #380]	; (80026cc <HAL_GPIO_Init+0x310>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_GPIO_Init+0x314>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_GPIO_Init+0x220>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <HAL_GPIO_Init+0x318>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d02b      	beq.n	80025d8 <HAL_GPIO_Init+0x21c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a55      	ldr	r2, [pc, #340]	; (80026d8 <HAL_GPIO_Init+0x31c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d025      	beq.n	80025d4 <HAL_GPIO_Init+0x218>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a54      	ldr	r2, [pc, #336]	; (80026dc <HAL_GPIO_Init+0x320>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d01f      	beq.n	80025d0 <HAL_GPIO_Init+0x214>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <HAL_GPIO_Init+0x324>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d019      	beq.n	80025cc <HAL_GPIO_Init+0x210>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_GPIO_Init+0x328>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_GPIO_Init+0x20c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_Init+0x208>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_GPIO_Init+0x330>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0x204>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a4f      	ldr	r2, [pc, #316]	; (80026f0 <HAL_GPIO_Init+0x334>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_Init+0x200>
 80025b8:	2308      	movs	r3, #8
 80025ba:	e010      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025bc:	2309      	movs	r3, #9
 80025be:	e00e      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025c0:	2307      	movs	r3, #7
 80025c2:	e00c      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025c4:	2306      	movs	r3, #6
 80025c6:	e00a      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025c8:	2305      	movs	r3, #5
 80025ca:	e008      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025cc:	2304      	movs	r3, #4
 80025ce:	e006      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e004      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e002      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_GPIO_Init+0x222>
 80025dc:	2300      	movs	r3, #0
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	f002 0203 	and.w	r2, r2, #3
 80025e4:	0092      	lsls	r2, r2, #2
 80025e6:	4093      	lsls	r3, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025f0:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_GPIO_Init+0x310>)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <HAL_GPIO_Init+0x338>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002622:	4a34      	ldr	r2, [pc, #208]	; (80026f4 <HAL_GPIO_Init+0x338>)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002628:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <HAL_GPIO_Init+0x338>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800264c:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <HAL_GPIO_Init+0x338>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002652:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <HAL_GPIO_Init+0x338>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002676:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_GPIO_Init+0x338>)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_GPIO_Init+0x338>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_GPIO_Init+0x338>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f47f ae88 	bne.w	80023cc <HAL_GPIO_Init+0x10>
  }
}
 80026bc:	bf00      	nop
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40013800 	.word	0x40013800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020400 	.word	0x40020400
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020c00 	.word	0x40020c00
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40021800 	.word	0x40021800
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e001      	b.n	800271a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]
 8002732:	4613      	mov	r3, r2
 8002734:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002736:	787b      	ldrb	r3, [r7, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002742:	e003      	b.n	800274c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	041a      	lsls	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43d9      	mvns	r1, r3
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279e:	4a05      	ldr	r2, [pc, #20]	; (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fee2 	bl	8000570 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ba:	b08f      	sub	sp, #60	; 0x3c
 80027bc:	af0a      	add	r7, sp, #40	; 0x28
 80027be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e10f      	b.n	80029ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d106      	bne.n	80027ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f00a fab1 	bl	800cd4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f004 f93d 	bl	8006a88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	687e      	ldr	r6, [r7, #4]
 8002816:	466d      	mov	r5, sp
 8002818:	f106 0410 	add.w	r4, r6, #16
 800281c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002828:	e885 0003 	stmia.w	r5, {r0, r1}
 800282c:	1d33      	adds	r3, r6, #4
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	6838      	ldr	r0, [r7, #0]
 8002832:	f004 f81f 	bl	8006874 <USB_CoreInit>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0d0      	b.n	80029ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f004 f92a 	bl	8006aa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e04a      	b.n	80028f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	333d      	adds	r3, #61	; 0x3d
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800286e:	7bfa      	ldrb	r2, [r7, #15]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	333c      	adds	r3, #60	; 0x3c
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	b298      	uxth	r0, r3
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	1a9b      	subs	r3, r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3342      	adds	r3, #66	; 0x42
 8002896:	4602      	mov	r2, r0
 8002898:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	333f      	adds	r3, #63	; 0x3f
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3344      	adds	r3, #68	; 0x44
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3348      	adds	r3, #72	; 0x48
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3350      	adds	r3, #80	; 0x50
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	3301      	adds	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3af      	bcc.n	800285a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e044      	b.n	800298a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	3301      	adds	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d3b5      	bcc.n	8002900 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	687e      	ldr	r6, [r7, #4]
 800299c:	466d      	mov	r5, sp
 800299e:	f106 0410 	add.w	r4, r6, #16
 80029a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80029b2:	1d33      	adds	r3, r6, #4
 80029b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	f004 f8a0 	bl	8006afc <USB_DevInit>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00d      	b.n	80029ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 f8d9 	bl	8007b9a <USB_DevDisconnect>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_PCD_Start+0x16>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e012      	b.n	8002a2e <HAL_PCD_Start+0x3c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 f827 	bl	8006a68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f005 f89b 	bl	8007b5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a36:	b590      	push	{r4, r7, lr}
 8002a38:	b08d      	sub	sp, #52	; 0x34
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f005 f952 	bl	8007cf6 <USB_GetMode>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f040 838f 	bne.w	8003178 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f005 f8bb 	bl	8007bda <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 8385 	beq.w	8003176 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f005 f8b2 	bl	8007bda <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d107      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f002 0202 	and.w	r2, r2, #2
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f005 f8a0 	bl	8007bda <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d161      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0210 	bic.w	r2, r2, #16
 8002ab2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	0c5b      	lsrs	r3, r3, #17
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d124      	bne.n	8002b2a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d035      	beq.n	8002b58 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a38      	ldr	r0, [r7, #32]
 8002b00:	f004 ff0c 	bl	800791c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b10:	441a      	add	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b22:	441a      	add	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	619a      	str	r2, [r3, #24]
 8002b28:	e016      	b.n	8002b58 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	0c5b      	lsrs	r3, r3, #17
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d110      	bne.n	8002b58 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6a38      	ldr	r0, [r7, #32]
 8002b42:	f004 feeb 	bl	800791c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b52:	441a      	add	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0210 	orr.w	r2, r2, #16
 8002b66:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f005 f834 	bl	8007bda <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b7c:	d16e      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f005 f839 	bl	8007bfe <USB_ReadDevAllOutEpInterrupt>
 8002b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b8e:	e062      	b.n	8002c56 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d057      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f005 f85c 	bl	8007c62 <USB_ReadDevOutEPInterrupt>
 8002baa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fda2 	bl	8003714 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be6:	461a      	mov	r2, r3
 8002be8:	2308      	movs	r3, #8
 8002bea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fe9c 	bl	800392c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	461a      	mov	r2, r3
 8002c28:	2320      	movs	r3, #32
 8002c2a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c42:	461a      	mov	r2, r3
 8002c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c48:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d199      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f004 ffba 	bl	8007bda <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c70:	f040 80c0 	bne.w	8002df4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 ffd9 	bl	8007c30 <USB_ReadDevAllInEpInterrupt>
 8002c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c84:	e0b2      	b.n	8002dec <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a7 	beq.w	8002de0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 fffd 	bl	8007c9c <USB_ReadDevInEPInterrupt>
 8002ca2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d057      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69f9      	ldr	r1, [r7, #28]
 8002cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cce:	4013      	ands	r3, r2
 8002cd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d132      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3348      	adds	r3, #72	; 0x48
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4403      	add	r3, r0
 8002d0c:	3344      	adds	r3, #68	; 0x44
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4419      	add	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4403      	add	r3, r0
 8002d20:	3348      	adds	r3, #72	; 0x48
 8002d22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d113      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x31c>
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3350      	adds	r3, #80	; 0x50
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d108      	bne.n	8002d52 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	f005 f801 	bl	8007d54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f00a f886 	bl	800ce6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d74:	461a      	mov	r2, r3
 8002d76:	2308      	movs	r3, #8
 8002d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d90:	461a      	mov	r2, r3
 8002d92:	2310      	movs	r3, #16
 8002d94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dac:	461a      	mov	r2, r3
 8002dae:	2340      	movs	r3, #64	; 0x40
 8002db0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2302      	movs	r3, #2
 8002dcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fc0c 	bl	80035f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	3301      	adds	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f47f af49 	bne.w	8002c86 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 feee 	bl	8007bda <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e08:	d114      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f00a f89a 	bl	800cf58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fece 	bl	8007bda <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e48:	d112      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d102      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f00a f856 	bl	800cf0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e6e:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 feb0 	bl	8007bda <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	f040 80c7 	bne.w	8003016 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2110      	movs	r1, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 ff8e 	bl	8006dc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eac:	e056      	b.n	8002f5c <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002edc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef2:	0151      	lsls	r1, r2, #5
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	440a      	add	r2, r1
 8002ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002efc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	3301      	adds	r3, #1
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3a3      	bcc.n	8002eae <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f92:	f043 030b 	orr.w	r3, r3, #11
 8002f96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa8:	f043 030b 	orr.w	r3, r3, #11
 8002fac:	6453      	str	r3, [r2, #68]	; 0x44
 8002fae:	e015      	b.n	8002fdc <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002fc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd6:	f043 030b 	orr.w	r3, r3, #11
 8002fda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003000:	461a      	mov	r2, r3
 8003002:	f004 fea7 	bl	8007d54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f004 fddd 	bl	8007bda <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302a:	d124      	bne.n	8003076 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fe6d 	bl	8007d10 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 ff1e 	bl	8006e7c <USB_GetDevSpeed>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681c      	ldr	r4, [r3, #0]
 800304c:	f001 f91e 	bl	800428c <HAL_RCC_GetHCLKFreq>
 8003050:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	4620      	mov	r0, r4
 800305c:	f003 fc62 	bl	8006924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f009 ff2a 	bl	800ceba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003074:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f004 fdad 	bl	8007bda <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d10a      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f009 ff07 	bl	800ce9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f002 0208 	and.w	r2, r2, #8
 800309e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fd98 	bl	8007bda <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b4:	d10f      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f009 ff69 	bl	800cf98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 fd7d 	bl	8007bda <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ea:	d10f      	bne.n	800310c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f009 ff3c 	bl	800cf74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695a      	ldr	r2, [r3, #20]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800310a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f004 fd62 	bl	8007bda <USB_ReadInterrupts>
 8003116:	4603      	mov	r3, r0
 8003118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003120:	d10a      	bne.n	8003138 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f009 ff4a 	bl	800cfbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f004 fd4c 	bl	8007bda <USB_ReadInterrupts>
 8003142:	4603      	mov	r3, r0
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d115      	bne.n	8003178 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f009 ff3a 	bl	800cfd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	e000      	b.n	8003178 <HAL_PCD_IRQHandler+0x742>
      return;
 8003176:	bf00      	nop
    }
  }
}
 8003178:	3734      	adds	r7, #52	; 0x34
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}

0800317e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_PCD_SetAddress+0x1a>
 8003194:	2302      	movs	r3, #2
 8003196:	e013      	b.n	80031c0 <HAL_PCD_SetAddress+0x42>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fcad 	bl	8007b10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	70fb      	strb	r3, [r7, #3]
 80031da:	460b      	mov	r3, r1
 80031dc:	803b      	strh	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da0f      	bge.n	800320e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	3338      	adds	r3, #56	; 0x38
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	705a      	strb	r2, [r3, #1]
 800320c:	e00f      	b.n	800322e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	3304      	adds	r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800322e:	78fb      	ldrb	r3, [r7, #3]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800323a:	883a      	ldrh	r2, [r7, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	78ba      	ldrb	r2, [r7, #2]
 8003244:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003258:	78bb      	ldrb	r3, [r7, #2]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d102      	bne.n	8003264 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_PCD_EP_Open+0xaa>
 800326e:	2302      	movs	r3, #2
 8003270:	e00e      	b.n	8003290 <HAL_PCD_EP_Open+0xc8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fe1f 	bl	8006ec4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800328e:	7afb      	ldrb	r3, [r7, #11]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da0f      	bge.n	80032cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3338      	adds	r3, #56	; 0x38
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	705a      	strb	r2, [r3, #1]
 80032ca:	e00f      	b.n	80032ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	f003 020f 	and.w	r2, r3, #15
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_PCD_EP_Close+0x6e>
 8003302:	2302      	movs	r3, #2
 8003304:	e00e      	b.n	8003324 <HAL_PCD_EP_Close+0x8c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	4618      	mov	r0, r3
 8003316:	f003 fe5b 	bl	8006fd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	460b      	mov	r3, r1
 800333a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	f003 020f 	and.w	r2, r3, #15
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2200      	movs	r2, #0
 800336c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	b2da      	uxtb	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d102      	bne.n	8003388 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	f004 f936 	bl	8007610 <USB_EP0StartXfer>
 80033a4:	e008      	b.n	80033b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	f003 fee8 	bl	8007188 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033e4:	681b      	ldr	r3, [r3, #0]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3338      	adds	r3, #56	; 0x38
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2201      	movs	r2, #1
 800342e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	b2da      	uxtb	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d102      	bne.n	800344a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6979      	ldr	r1, [r7, #20]
 8003462:	f004 f8d5 	bl	8007610 <USB_EP0StartXfer>
 8003466:	e008      	b.n	800347a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	f003 fe87 	bl	8007188 <USB_EPStartXfer>
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d901      	bls.n	80034a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e050      	b.n	8003544 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da0f      	bge.n	80034ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	3338      	adds	r3, #56	; 0x38
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	3304      	adds	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	705a      	strb	r2, [r3, #1]
 80034c8:	e00d      	b.n	80034e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	3304      	adds	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_PCD_EP_SetStall+0x82>
 8003502:	2302      	movs	r3, #2
 8003504:	e01e      	b.n	8003544 <HAL_PCD_EP_SetStall+0xc0>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	f004 fa29 	bl	800796c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	b2d9      	uxtb	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003534:	461a      	mov	r2, r3
 8003536:	f004 fc0d 	bl	8007d54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d901      	bls.n	800356a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e042      	b.n	80035f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800356a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da0f      	bge.n	8003592 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3338      	adds	r3, #56	; 0x38
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	705a      	strb	r2, [r3, #1]
 8003590:	e00f      	b.n	80035b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_EP_ClrStall+0x86>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e00e      	b.n	80035f0 <HAL_PCD_EP_ClrStall+0xa4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f004 fa30 	bl	8007a46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3338      	adds	r3, #56	; 0x38
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	3304      	adds	r3, #4
 800361e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	429a      	cmp	r2, r3
 800362a:	d901      	bls.n	8003630 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e06c      	b.n	800370a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	429a      	cmp	r2, r3
 8003644:	d902      	bls.n	800364c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3303      	adds	r3, #3
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003654:	e02b      	b.n	80036ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	429a      	cmp	r2, r3
 800366a:	d902      	bls.n	8003672 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3303      	adds	r3, #3
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68d9      	ldr	r1, [r3, #12]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800368a:	b2db      	uxtb	r3, r3
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	4603      	mov	r3, r0
 8003690:	6978      	ldr	r0, [r7, #20]
 8003692:	f004 f90f 	bl	80078b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	441a      	add	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d809      	bhi.n	80036d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d203      	bcs.n	80036d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1be      	bne.n	8003656 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d811      	bhi.n	8003708 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	2201      	movs	r2, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	6939      	ldr	r1, [r7, #16]
 8003700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003704:	4013      	ands	r3, r2
 8003706:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	333c      	adds	r3, #60	; 0x3c
 800372c:	3304      	adds	r3, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 80a0 	bne.w	800388c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4a72      	ldr	r2, [pc, #456]	; (8003924 <PCD_EP_OutXfrComplete_int+0x210>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f240 80dd 	bls.w	800391a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80d7 	beq.w	800391a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003778:	461a      	mov	r2, r3
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	6093      	str	r3, [r2, #8]
 8003780:	e0cb      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	461a      	mov	r2, r3
 800379a:	2320      	movs	r3, #32
 800379c:	6093      	str	r3, [r2, #8]
 800379e:	e0bc      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 80b7 	bne.w	800391a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a5d      	ldr	r2, [pc, #372]	; (8003924 <PCD_EP_OutXfrComplete_int+0x210>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d90f      	bls.n	80037d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	e0a2      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	0159      	lsls	r1, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80037fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4403      	add	r3, r0
 800380a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800380e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4403      	add	r3, r0
 8003832:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4419      	add	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4403      	add	r3, r0
 8003848:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800384c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d114      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x16a>
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6818      	ldr	r0, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003876:	461a      	mov	r2, r3
 8003878:	2101      	movs	r1, #1
 800387a:	f004 fa6b 	bl	8007d54 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f009 fad5 	bl	800ce34 <HAL_PCD_DataOutStageCallback>
 800388a:	e046      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a26      	ldr	r2, [pc, #152]	; (8003928 <PCD_EP_OutXfrComplete_int+0x214>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d124      	bne.n	80038de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b0:	6093      	str	r3, [r2, #8]
 80038b2:	e032      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	461a      	mov	r2, r3
 80038cc:	2320      	movs	r3, #32
 80038ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4619      	mov	r1, r3
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f009 faac 	bl	800ce34 <HAL_PCD_DataOutStageCallback>
 80038dc:	e01d      	b.n	800391a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d114      	bne.n	800390e <PCD_EP_OutXfrComplete_int+0x1fa>
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003906:	461a      	mov	r2, r3
 8003908:	2100      	movs	r1, #0
 800390a:	f004 fa23 	bl	8007d54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f009 fa8d 	bl	800ce34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	4f54300a 	.word	0x4f54300a
 8003928:	4f54310a 	.word	0x4f54310a

0800392c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	333c      	adds	r3, #60	; 0x3c
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d90e      	bls.n	8003980 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f009 fa45 	bl	800ce10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d90c      	bls.n	80039a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d108      	bne.n	80039a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039a0:	461a      	mov	r2, r3
 80039a2:	2101      	movs	r1, #1
 80039a4:	f004 f9d6 	bl	8007d54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	4f54300a 	.word	0x4f54300a

080039b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
 80039c4:	4613      	mov	r3, r2
 80039c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d107      	bne.n	80039e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039d6:	883b      	ldrh	r3, [r7, #0]
 80039d8:	0419      	lsls	r1, r3, #16
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
 80039e4:	e028      	b.n	8003a38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4413      	add	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e00d      	b.n	8003a16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	3340      	adds	r3, #64	; 0x40
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	3301      	adds	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3ec      	bcc.n	80039fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a20:	883b      	ldrh	r3, [r7, #0]
 8003a22:	0418      	lsls	r0, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4302      	orrs	r2, r0
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e237      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d050      	beq.n	8003b24 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a82:	4ba3      	ldr	r3, [pc, #652]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8e:	4ba0      	ldr	r3, [pc, #640]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b9d      	ldr	r3, [pc, #628]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b99      	ldr	r3, [pc, #612]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d036      	beq.n	8003b22 <HAL_RCC_OscConfig+0xbe>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d132      	bne.n	8003b22 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e212      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4b93      	ldr	r3, [pc, #588]	; (8003d14 <HAL_RCC_OscConfig+0x2b0>)
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d013      	beq.n	8003afa <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fbd5 	bl	8001280 <HAL_GetTick>
 8003ad6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ada:	f7fd fbd1 	bl	8001280 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b64      	cmp	r3, #100	; 0x64
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e1fc      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aec:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x76>
 8003af8:	e014      	b.n	8003b24 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afa:	f7fd fbc1 	bl	8001280 <HAL_GetTick>
 8003afe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b02:	f7fd fbbd 	bl	8001280 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b64      	cmp	r3, #100	; 0x64
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e1e8      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b14:	4b7e      	ldr	r3, [pc, #504]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x9e>
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b22:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d077      	beq.n	8003c20 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b30:	4b77      	ldr	r3, [pc, #476]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3c:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d126      	bne.n	8003b96 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b48:	4b71      	ldr	r3, [pc, #452]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d120      	bne.n	8003b96 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b54:	4b6e      	ldr	r3, [pc, #440]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_OscConfig+0x108>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e1bc      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	21f8      	movs	r1, #248	; 0xf8
 8003b7a:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	fa91 f1a1 	rbit	r1, r1
 8003b82:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	fab1 f181 	clz	r1, r1
 8003b8a:	b2c9      	uxtb	r1, r1
 8003b8c:	408b      	lsls	r3, r1
 8003b8e:	4960      	ldr	r1, [pc, #384]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b94:	e044      	b.n	8003c20 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d02a      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9e:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x2b4>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fd fb6c 	bl	8001280 <HAL_GetTick>
 8003ba8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fd fb68 	bl	8001280 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e193      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbe:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b51      	ldr	r3, [pc, #324]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	21f8      	movs	r1, #248	; 0xf8
 8003bd8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6939      	ldr	r1, [r7, #16]
 8003bdc:	fa91 f1a1 	rbit	r1, r1
 8003be0:	60f9      	str	r1, [r7, #12]
  return result;
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	fab1 f181 	clz	r1, r1
 8003be8:	b2c9      	uxtb	r1, r1
 8003bea:	408b      	lsls	r3, r1
 8003bec:	4948      	ldr	r1, [pc, #288]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
 8003bf2:	e015      	b.n	8003c20 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf4:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <HAL_RCC_OscConfig+0x2b4>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fb41 	bl	8001280 <HAL_GetTick>
 8003bfe:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c02:	f7fd fb3d 	bl	8001280 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e168      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c14:	4b3e      	ldr	r3, [pc, #248]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d030      	beq.n	8003c8e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d016      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c34:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3a:	f7fd fb21 	bl	8001280 <HAL_GetTick>
 8003c3e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c42:	f7fd fb1d 	bl	8001280 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e148      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1de>
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fd fb0a 	bl	8001280 <HAL_GetTick>
 8003c6c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fd fb06 	bl	8001280 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e131      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c82:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8088 	beq.w	8003dac <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d110      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_RCC_OscConfig+0x2bc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <HAL_RCC_OscConfig+0x2bc>)
 8003cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cda:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCC_OscConfig+0x2bc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d123      	bne.n	8003d30 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_OscConfig+0x2bc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0c      	ldr	r2, [pc, #48]	; (8003d20 <HAL_RCC_OscConfig+0x2bc>)
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fac4 	bl	8001280 <HAL_GetTick>
 8003cf8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfa:	e013      	b.n	8003d24 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfc:	f7fd fac0 	bl	8001280 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d90c      	bls.n	8003d24 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e0eb      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40023802 	.word	0x40023802
 8003d18:	42470000 	.word	0x42470000
 8003d1c:	42470e80 	.word	0x42470e80
 8003d20:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	4b72      	ldr	r3, [pc, #456]	; (8003ef0 <HAL_RCC_OscConfig+0x48c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0e5      	beq.n	8003cfc <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	4b6f      	ldr	r3, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x490>)
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d015      	beq.n	8003d6e <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fd fa9d 	bl	8001280 <HAL_GetTick>
 8003d46:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd fa99 	bl	8001280 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0c2      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d60:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ee      	beq.n	8003d4a <HAL_RCC_OscConfig+0x2e6>
 8003d6c:	e014      	b.n	8003d98 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6e:	f7fd fa87 	bl	8001280 <HAL_GetTick>
 8003d72:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd fa83 	bl	8001280 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0ac      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8097 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db6:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d061      	beq.n	8003e86 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d146      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b4c      	ldr	r3, [pc, #304]	; (8003efc <HAL_RCC_OscConfig+0x498>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fa56 	bl	8001280 <HAL_GetTick>
 8003dd4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd fa52 	bl	8001280 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e07d      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_OscConfig+0x49c>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	69d1      	ldr	r1, [r2, #28]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6a12      	ldr	r2, [r2, #32]
 8003e06:	4311      	orrs	r1, r2
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0c:	0192      	lsls	r2, r2, #6
 8003e0e:	4311      	orrs	r1, r2
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e14:	0612      	lsls	r2, r2, #24
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e1c:	0852      	lsrs	r2, r2, #1
 8003e1e:	3a01      	subs	r2, #1
 8003e20:	0412      	lsls	r2, r2, #16
 8003e22:	430a      	orrs	r2, r1
 8003e24:	4934      	ldr	r1, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e2a:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_RCC_OscConfig+0x498>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fd fa26 	bl	8001280 <HAL_GetTick>
 8003e34:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd fa22 	bl	8001280 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e04d      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3d4>
 8003e56:	e045      	b.n	8003ee4 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e58:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCC_OscConfig+0x498>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd fa0f 	bl	8001280 <HAL_GetTick>
 8003e62:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fd fa0b 	bl	8001280 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e036      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCC_OscConfig+0x402>
 8003e84:	e02e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e029      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_RCC_OscConfig+0x494>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d11c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d115      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	40023870 	.word	0x40023870
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	42470060 	.word	0x42470060
 8003f00:	f0bc8000 	.word	0xf0bc8000

08003f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0d2      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f18:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d90c      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b68      	ldr	r3, [pc, #416]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0be      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f58:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a5b      	ldr	r2, [pc, #364]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003f70:	4b56      	ldr	r3, [pc, #344]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a55      	ldr	r2, [pc, #340]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b53      	ldr	r3, [pc, #332]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4950      	ldr	r1, [pc, #320]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d040      	beq.n	800401c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e085      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b44      	ldr	r3, [pc, #272]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e079      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b40      	ldr	r3, [pc, #256]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e071      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4939      	ldr	r1, [pc, #228]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fec:	f7fd f948 	bl	8001280 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fd f944 	bl	8001280 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e059      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b30      	ldr	r3, [pc, #192]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d20c      	bcs.n	8004044 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e03c      	b.n	80040be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	491b      	ldr	r1, [pc, #108]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4913      	ldr	r1, [pc, #76]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8004082:	f000 f82b 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 8004086:	4601      	mov	r1, r0
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004090:	22f0      	movs	r2, #240	; 0xf0
 8004092:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	fa92 f2a2 	rbit	r2, r2
 800409a:	60fa      	str	r2, [r7, #12]
  return result;
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	fab2 f282 	clz	r2, r2
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	40d3      	lsrs	r3, r2
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_RCC_ClockConfig+0x1cc>)
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	fa21 f303 	lsr.w	r3, r1, r3
 80040ae:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <HAL_RCC_ClockConfig+0x1d0>)
 80040b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCC_ClockConfig+0x1d4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fd f8a0 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40023c00 	.word	0x40023c00
 80040cc:	40023800 	.word	0x40023800
 80040d0:	0800d630 	.word	0x0800d630
 80040d4:	20000000 	.word	0x20000000
 80040d8:	20000004 	.word	0x20000004

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	2300      	movs	r3, #0
 80040ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b04      	cmp	r3, #4
 80040fc:	d007      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x32>
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d008      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x38>
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 80b4 	bne.w	8004270 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800410a:	60bb      	str	r3, [r7, #8]
       break;
 800410c:	e0b3      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800410e:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004110:	60bb      	str	r3, [r7, #8]
      break;
 8004112:	e0b0      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004114:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800411e:	4b58      	ldr	r3, [pc, #352]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d04a      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412a:	4b55      	ldr	r3, [pc, #340]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	099b      	lsrs	r3, r3, #6
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	ea03 0501 	and.w	r5, r3, r1
 8004140:	ea04 0602 	and.w	r6, r4, r2
 8004144:	4629      	mov	r1, r5
 8004146:	4632      	mov	r2, r6
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	f04f 0400 	mov.w	r4, #0
 8004150:	0154      	lsls	r4, r2, #5
 8004152:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004156:	014b      	lsls	r3, r1, #5
 8004158:	4619      	mov	r1, r3
 800415a:	4622      	mov	r2, r4
 800415c:	1b49      	subs	r1, r1, r5
 800415e:	eb62 0206 	sbc.w	r2, r2, r6
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	f04f 0400 	mov.w	r4, #0
 800416a:	0194      	lsls	r4, r2, #6
 800416c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004170:	018b      	lsls	r3, r1, #6
 8004172:	1a5b      	subs	r3, r3, r1
 8004174:	eb64 0402 	sbc.w	r4, r4, r2
 8004178:	f04f 0100 	mov.w	r1, #0
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	00e2      	lsls	r2, r4, #3
 8004182:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004186:	00d9      	lsls	r1, r3, #3
 8004188:	460b      	mov	r3, r1
 800418a:	4614      	mov	r4, r2
 800418c:	195b      	adds	r3, r3, r5
 800418e:	eb44 0406 	adc.w	r4, r4, r6
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	0262      	lsls	r2, r4, #9
 800419c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041a0:	0259      	lsls	r1, r3, #9
 80041a2:	460b      	mov	r3, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	4621      	mov	r1, r4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	461a      	mov	r2, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	f7fc f806 	bl	80001c4 <__aeabi_uldivmod>
 80041b8:	4603      	mov	r3, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e049      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	099b      	lsrs	r3, r3, #6
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	ea03 0501 	and.w	r5, r3, r1
 80041d6:	ea04 0602 	and.w	r6, r4, r2
 80041da:	4629      	mov	r1, r5
 80041dc:	4632      	mov	r2, r6
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	f04f 0400 	mov.w	r4, #0
 80041e6:	0154      	lsls	r4, r2, #5
 80041e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041ec:	014b      	lsls	r3, r1, #5
 80041ee:	4619      	mov	r1, r3
 80041f0:	4622      	mov	r2, r4
 80041f2:	1b49      	subs	r1, r1, r5
 80041f4:	eb62 0206 	sbc.w	r2, r2, r6
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	f04f 0400 	mov.w	r4, #0
 8004200:	0194      	lsls	r4, r2, #6
 8004202:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004206:	018b      	lsls	r3, r1, #6
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	eb64 0402 	sbc.w	r4, r4, r2
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	00e2      	lsls	r2, r4, #3
 8004218:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800421c:	00d9      	lsls	r1, r3, #3
 800421e:	460b      	mov	r3, r1
 8004220:	4614      	mov	r4, r2
 8004222:	195b      	adds	r3, r3, r5
 8004224:	eb44 0406 	adc.w	r4, r4, r6
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	02a2      	lsls	r2, r4, #10
 8004232:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004236:	0299      	lsls	r1, r3, #10
 8004238:	460b      	mov	r3, r1
 800423a:	4614      	mov	r4, r2
 800423c:	4618      	mov	r0, r3
 800423e:	4621      	mov	r1, r4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f04f 0400 	mov.w	r4, #0
 8004246:	461a      	mov	r2, r3
 8004248:	4623      	mov	r3, r4
 800424a:	f7fb ffbb 	bl	80001c4 <__aeabi_uldivmod>
 800424e:	4603      	mov	r3, r0
 8004250:	460c      	mov	r4, r1
 8004252:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	3301      	adds	r3, #1
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	60bb      	str	r3, [r7, #8]
      break;
 800426e:	e002      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004272:	60bb      	str	r3, [r7, #8]
      break;
 8004274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004276:	68bb      	ldr	r3, [r7, #8]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400
 8004288:	007a1200 	.word	0x007a1200

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <HAL_RCC_GetHCLKFreq+0x10>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	20000000 	.word	0x20000000

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80042a6:	f7ff fff1 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042aa:	4601      	mov	r1, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80042b4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80042b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	fa92 f2a2 	rbit	r2, r2
 80042c0:	603a      	str	r2, [r7, #0]
  return result;
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	fab2 f282 	clz	r2, r2
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	40d3      	lsrs	r3, r2
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40023800 	.word	0x40023800
 80042e0:	0800d640 	.word	0x0800d640

080042e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80042ea:	f7ff ffcf 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042ee:	4601      	mov	r1, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80042f8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80042fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	fa92 f2a2 	rbit	r2, r2
 8004304:	603a      	str	r2, [r7, #0]
  return result;
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	fab2 f282 	clz	r2, r2
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	40d3      	lsrs	r3, r2
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004312:	5cd3      	ldrb	r3, [r2, r3]
 8004314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	0800d640 	.word	0x0800d640

08004328 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e022      	b.n	8004380 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fc fcfd 	bl	8000d4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2203      	movs	r2, #3
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f814 	bl	8004388 <HAL_SD_InitCard>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e00a      	b.n	8004380 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004388:	b5b0      	push	{r4, r5, r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af04      	add	r7, sp, #16
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004390:	2300      	movs	r3, #0
 8004392:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80043a4:	2376      	movs	r3, #118	; 0x76
 80043a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681d      	ldr	r5, [r3, #0]
 80043ac:	466c      	mov	r4, sp
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c0:	4628      	mov	r0, r5
 80043c2:	f001 fcfb 	bl	8005dbc <SDIO_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80043cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e031      	b.n	800443c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <HAL_SD_InitCard+0xbc>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 fd30 	bl	8005e48 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80043e8:	4b16      	ldr	r3, [pc, #88]	; (8004444 <HAL_SD_InitCard+0xbc>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 f8f0 	bl	80055d4 <SD_PowerON>
 80043f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00b      	beq.n	8004414 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e013      	b.n	800443c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f001 f80f 	bl	8005438 <SD_InitCard>
 800441a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00b      	beq.n	800443a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3728      	adds	r7, #40	; 0x28
 8004440:	46bd      	mov	sp, r7
 8004442:	bdb0      	pop	{r4, r5, r7, pc}
 8004444:	422580a0 	.word	0x422580a0

08004448 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b092      	sub	sp, #72	; 0x48
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004456:	f7fc ff13 	bl	8001280 <HAL_GetTick>
 800445a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1d9      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	f040 81cc 	bne.w	8004820 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800448e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	429a      	cmp	r2, r3
 800449a:	d907      	bls.n	80044ac <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e1c0      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2203      	movs	r2, #3
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fd46 	bl	8005f64 <SDMMC_CmdBlockLength>
 80044d8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80044da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00f      	beq.n	8004500 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a9b      	ldr	r2, [pc, #620]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e196      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	025b      	lsls	r3, r3, #9
 800450a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800450c:	2390      	movs	r3, #144	; 0x90
 800450e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004510:	2302      	movs	r3, #2
 8004512:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004518:	2301      	movs	r3, #1
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f107 0214 	add.w	r2, r7, #20
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fcf1 	bl	8005f0e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d90a      	bls.n	8004548 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2202      	movs	r2, #2
 8004536:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800453e:	4618      	mov	r0, r3
 8004540:	f001 fd54 	bl	8005fec <SDMMC_CmdReadMultiBlock>
 8004544:	6478      	str	r0, [r7, #68]	; 0x44
 8004546:	e009      	b.n	800455c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004554:	4618      	mov	r0, r3
 8004556:	f001 fd27 	bl	8005fa8 <SDMMC_CmdReadSingleBlock>
 800455a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800455c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455e:	2b00      	cmp	r3, #0
 8004560:	d012      	beq.n	8004588 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7b      	ldr	r2, [pc, #492]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e152      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800458c:	e061      	b.n	8004652 <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d03c      	beq.n	8004616 <HAL_SD_ReadBlocks+0x1ce>
 800459c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d039      	beq.n	8004616 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	643b      	str	r3, [r7, #64]	; 0x40
 80045a6:	e033      	b.n	8004610 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 fc2f 	bl	8005e10 <SDIO_ReadFIFO>
 80045b2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045be:	3301      	adds	r3, #1
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	3b01      	subs	r3, #1
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	3301      	adds	r3, #1
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	3b01      	subs	r3, #1
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	3301      	adds	r3, #1
 80045ec:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	3b01      	subs	r3, #1
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	0e1b      	lsrs	r3, r3, #24
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	3301      	adds	r3, #1
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	3b01      	subs	r3, #1
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800460a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800460c:	3301      	adds	r3, #1
 800460e:	643b      	str	r3, [r7, #64]	; 0x40
 8004610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004612:	2b07      	cmp	r3, #7
 8004614:	d9c8      	bls.n	80045a8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004616:	f7fc fe33 	bl	8001280 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004622:	429a      	cmp	r2, r3
 8004624:	d902      	bls.n	800462c <HAL_SD_ReadBlocks+0x1e4>
 8004626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004628:	2b00      	cmp	r3, #0
 800462a:	d112      	bne.n	8004652 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a48      	ldr	r2, [pc, #288]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0ed      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004658:	f240 332a 	movw	r3, #810	; 0x32a
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d095      	beq.n	800458e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d022      	beq.n	80046b6 <HAL_SD_ReadBlocks+0x26e>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d91f      	bls.n	80046b6 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	2b03      	cmp	r3, #3
 800467c:	d01b      	beq.n	80046b6 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f001 fd18 	bl	80060b8 <SDMMC_CmdStopTransfer>
 8004688:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800468a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468c:	2b00      	cmp	r3, #0
 800468e:	d012      	beq.n	80046b6 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e0bb      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d012      	beq.n	80046ea <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a22      	ldr	r2, [pc, #136]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	f043 0208 	orr.w	r2, r3, #8
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0a1      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f043 0202 	orr.w	r2, r3, #2
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e087      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b00      	cmp	r3, #0
 800472a:	d064      	beq.n	80047f6 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_SD_ReadBlocks+0x30c>)
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e06d      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
 8004752:	bf00      	nop
 8004754:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f001 fb57 	bl	8005e10 <SDIO_ReadFIFO>
 8004762:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	b2da      	uxtb	r2, r3
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	3301      	adds	r3, #1
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	3b01      	subs	r3, #1
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	b2da      	uxtb	r2, r3
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004784:	3301      	adds	r3, #1
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	3b01      	subs	r3, #1
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	3301      	adds	r3, #1
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a0:	3b01      	subs	r3, #1
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	0e1b      	lsrs	r3, r3, #24
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	3301      	adds	r3, #1
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	3b01      	subs	r3, #1
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80047ba:	f7fc fd61 	bl	8001280 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d902      	bls.n	80047d0 <HAL_SD_ReadBlocks+0x388>
 80047ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d112      	bne.n	80047f6 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_SD_ReadBlocks+0x3f0>)
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01b      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <HAL_SD_ReadBlocks+0x3c2>
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1a6      	bne.n	8004758 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004812:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	e006      	b.n	800482e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3748      	adds	r7, #72	; 0x48
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	004005ff 	.word	0x004005ff

0800483c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b092      	sub	sp, #72	; 0x48
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800484a:	f7fc fd19 	bl	8001280 <HAL_GetTick>
 800484e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d107      	bne.n	800486e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004862:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e184      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b01      	cmp	r3, #1
 8004878:	f040 8177 	bne.w	8004b6a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	441a      	add	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	429a      	cmp	r2, r3
 800488e:	d907      	bls.n	80048a0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e16b      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2203      	movs	r2, #3
 80048a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d002      	beq.n	80048be <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	025b      	lsls	r3, r3, #9
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fb4c 	bl	8005f64 <SDMMC_CmdBlockLength>
 80048cc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00f      	beq.n	80048f4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a9d      	ldr	r2, [pc, #628]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 80048da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e141      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	025b      	lsls	r3, r3, #9
 80048fe:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004900:	2390      	movs	r3, #144	; 0x90
 8004902:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004908:	2300      	movs	r3, #0
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800490c:	2301      	movs	r3, #1
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f107 0218 	add.w	r2, r7, #24
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f001 faf7 	bl	8005f0e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d90a      	bls.n	800493c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2220      	movs	r2, #32
 800492a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fb9e 	bl	8006074 <SDMMC_CmdWriteMultiBlock>
 8004938:	6478      	str	r0, [r7, #68]	; 0x44
 800493a:	e009      	b.n	8004950 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2210      	movs	r2, #16
 8004940:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004948:	4618      	mov	r0, r3
 800494a:	f001 fb71 	bl	8006030 <SDMMC_CmdWriteSingleBlock>
 800494e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	2b00      	cmp	r3, #0
 8004954:	d012      	beq.n	800497c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a7d      	ldr	r2, [pc, #500]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0fd      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004980:	e065      	b.n	8004a4e <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d040      	beq.n	8004a12 <HAL_SD_WriteBlocks+0x1d6>
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d03d      	beq.n	8004a12 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004996:	2300      	movs	r3, #0
 8004998:	643b      	str	r3, [r7, #64]	; 0x40
 800499a:	e037      	b.n	8004a0c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a4:	3301      	adds	r3, #1
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	3b01      	subs	r3, #1
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049bc:	3301      	adds	r3, #1
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c2:	3b01      	subs	r3, #1
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80049c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	041a      	lsls	r2, r3, #16
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d4:	3301      	adds	r3, #1
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	3b01      	subs	r3, #1
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80049de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	061a      	lsls	r2, r3, #24
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80049ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ec:	3301      	adds	r3, #1
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80049f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f2:	3b01      	subs	r3, #1
 80049f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f107 0214 	add.w	r2, r7, #20
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fa11 	bl	8005e28 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	3301      	adds	r3, #1
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	2b07      	cmp	r3, #7
 8004a10:	d9c4      	bls.n	800499c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004a12:	f7fc fc35 	bl	8001280 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d902      	bls.n	8004a28 <HAL_SD_WriteBlocks+0x1ec>
 8004a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d112      	bne.n	8004a4e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a48      	ldr	r2, [pc, #288]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e094      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a54:	f240 331a 	movw	r3, #794	; 0x31a
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d091      	beq.n	8004982 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d022      	beq.n	8004ab2 <HAL_SD_WriteBlocks+0x276>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d91f      	bls.n	8004ab2 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d01b      	beq.n	8004ab2 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 fb1a 	bl	80060b8 <SDMMC_CmdStopTransfer>
 8004a84:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2f      	ldr	r2, [pc, #188]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e062      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d012      	beq.n	8004ae6 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a22      	ldr	r2, [pc, #136]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	f043 0208 	orr.w	r2, r3, #8
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e048      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	f043 0202 	orr.w	r2, r3, #2
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e02e      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d015      	beq.n	8004b54 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <HAL_SD_WriteBlocks+0x314>)
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e014      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
 8004b4e:	bf00      	nop
 8004b50:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b5c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e006      	b.n	8004b78 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3748      	adds	r7, #72	; 0x48
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_SD_IRQHandler+0x2e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 ff2a 	bl	8005a00 <SD_Read_IT>
 8004bac:	e157      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 808f 	beq.w	8004cdc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004bd6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004bda:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d039      	beq.n	8004c6a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_SD_IRQHandler+0x8a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0320 	and.w	r3, r3, #32
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d011      	beq.n	8004c2e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fa52 	bl	80060b8 <SDMMC_CmdStopTransfer>
 8004c14:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f921 	bl	8004e70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f240 523a 	movw	r2, #1338	; 0x53a
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <HAL_SD_IRQHandler+0xda>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f003 f9b6 	bl	8007fcc <HAL_SD_RxCpltCallback>
 8004c60:	e0fd      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f003 f9a8 	bl	8007fb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c68:	e0f9      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80f4 	beq.w	8004e5e <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d011      	beq.n	8004ca4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f001 fa17 	bl	80060b8 <SDMMC_CmdStopTransfer>
 8004c8a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8e6 	bl	8004e70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 80d7 	bne.w	8004e5e <HAL_SD_IRQHandler+0x2de>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 80d1 	bne.w	8004e5e <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0208 	bic.w	r2, r2, #8
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f003 f96f 	bl	8007fb8 <HAL_SD_TxCpltCallback>
}
 8004cda:	e0c0      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_SD_IRQHandler+0x17c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fed4 	bl	8005aa2 <SD_Write_IT>
 8004cfa:	e0b0      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80a9 	beq.w	8004e5e <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	f043 0202 	orr.w	r2, r3, #2
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	f043 0208 	orr.w	r2, r3, #8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	f043 0210 	orr.w	r2, r3, #16
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f240 723a 	movw	r2, #1850	; 0x73a
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 f98e 	bl	80060b8 <SDMMC_CmdStopTransfer>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f855 	bl	8004e70 <HAL_SD_ErrorCallback>
}
 8004dc6:	e04a      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d045      	beq.n	8004e5e <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_SD_IRQHandler+0x266>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d011      	beq.n	8004e0a <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dea:	4a1f      	ldr	r2, [pc, #124]	; (8004e68 <HAL_SD_IRQHandler+0x2e8>)
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fc fc2c 	bl	8001650 <HAL_DMA_Abort_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02f      	beq.n	8004e5e <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 faaa 	bl	800535c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004e08:	e029      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d104      	bne.n	8004e1e <HAL_SD_IRQHandler+0x29e>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d011      	beq.n	8004e42 <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <HAL_SD_IRQHandler+0x2ec>)
 8004e24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fc fc10 	bl	8001650 <HAL_DMA_Abort_IT>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d013      	beq.n	8004e5e <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fac5 	bl	80053ca <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004e40:	e00d      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f003 f8a4 	bl	8007fa4 <HAL_SD_AbortCallback>
}
 8004e5c:	e7ff      	b.n	8004e5e <HAL_SD_IRQHandler+0x2de>
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0800535d 	.word	0x0800535d
 8004e6c:	080053cb 	.word	0x080053cb

08004e70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e92:	0f9b      	lsrs	r3, r3, #30
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e9e:	0e9b      	lsrs	r3, r3, #26
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb0:	0e1b      	lsrs	r3, r3, #24
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee4:	0d1b      	lsrs	r3, r3, #20
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f02:	0bdb      	lsrs	r3, r3, #15
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f14:	0b9b      	lsrs	r3, r3, #14
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f26:	0b5b      	lsrs	r3, r3, #13
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	b2da      	uxtb	r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f38:	0b1b      	lsrs	r3, r3, #12
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d163      	bne.n	800501c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f58:	009a      	lsls	r2, r3, #2
 8004f5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f5e:	4013      	ands	r3, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004f64:	0f92      	lsrs	r2, r2, #30
 8004f66:	431a      	orrs	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	0edb      	lsrs	r3, r3, #27
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f82:	0e1b      	lsrs	r3, r3, #24
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f94:	0d5b      	lsrs	r3, r3, #21
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa6:	0c9b      	lsrs	r3, r3, #18
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb8:	0bdb      	lsrs	r3, r3, #15
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	7e1b      	ldrb	r3, [r3, #24]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	3302      	adds	r3, #2
 8004fdc:	2201      	movs	r2, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004fe6:	fb02 f203 	mul.w	r2, r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	7a1b      	ldrb	r3, [r3, #8]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005008:	0a52      	lsrs	r2, r2, #9
 800500a:	fb02 f203 	mul.w	r2, r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005018:	661a      	str	r2, [r3, #96]	; 0x60
 800501a:	e031      	b.n	8005080 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	2b01      	cmp	r3, #1
 8005022:	d11d      	bne.n	8005060 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	431a      	orrs	r2, r3
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	3301      	adds	r3, #1
 8005040:	029a      	lsls	r2, r3, #10
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005054:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	661a      	str	r2, [r3, #96]	; 0x60
 800505e:	e00f      	b.n	8005080 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_SD_GetCardCSD+0x344>)
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e09d      	b.n	80051bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005084:	0b9b      	lsrs	r3, r3, #14
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005096:	09db      	lsrs	r3, r3, #7
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b8:	0fdb      	lsrs	r3, r3, #31
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	0f5b      	lsrs	r3, r3, #29
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	0e9b      	lsrs	r3, r3, #26
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	0d9b      	lsrs	r3, r3, #22
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	0d5b      	lsrs	r3, r3, #21
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	0c1b      	lsrs	r3, r3, #16
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	0bdb      	lsrs	r3, r3, #15
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	0b9b      	lsrs	r3, r3, #14
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	0b5b      	lsrs	r3, r3, #13
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	0b1b      	lsrs	r3, r3, #12
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	b2da      	uxtb	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	0a9b      	lsrs	r3, r3, #10
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	b2da      	uxtb	r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	b2da      	uxtb	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	085b      	lsrs	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	004005ff 	.word	0x004005ff

080051cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
	...

08005224 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005224:	b5b0      	push	{r4, r5, r7, lr}
 8005226:	b08e      	sub	sp, #56	; 0x38
 8005228:	af04      	add	r7, sp, #16
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2203      	movs	r2, #3
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523a:	2b03      	cmp	r3, #3
 800523c:	d02e      	beq.n	800529c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005244:	d106      	bne.n	8005254 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
 8005252:	e029      	b.n	80052a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800525a:	d10a      	bne.n	8005272 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa6f 	bl	8005740 <SD_WideBus_Enable>
 8005262:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
 8005270:	e01a      	b.n	80052a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 faac 	bl	80057d6 <SD_WideBus_Disable>
 800527e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
 800528c:	e00c      	b.n	80052a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
 800529a:	e005      	b.n	80052a8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e024      	b.n	800530e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681d      	ldr	r5, [r3, #0]
 80052ea:	466c      	mov	r4, sp
 80052ec:	f107 0318 	add.w	r3, r7, #24
 80052f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fd5c 	bl	8005dbc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3728      	adds	r7, #40	; 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bdb0      	pop	{r4, r5, r7, pc}
 8005316:	bf00      	nop
 8005318:	004005ff 	.word	0x004005ff

0800531c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9de 	bl	80056f0 <SD_SendStatus>
 8005334:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0a5b      	lsrs	r3, r3, #9
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005352:	693b      	ldr	r3, [r7, #16]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff ffd1 	bl	800531c <HAL_SD_GetCardState>
 800537a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b06      	cmp	r3, #6
 800538e:	d002      	beq.n	8005396 <SD_DMATxAbort+0x3a>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d10a      	bne.n	80053ac <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fe8c 	bl	80060b8 <SDMMC_CmdStopTransfer>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	431a      	orrs	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d103      	bne.n	80053bc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f002 fdf5 	bl	8007fa4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80053ba:	e002      	b.n	80053c2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff fd57 	bl	8004e70 <HAL_SD_ErrorCallback>
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80053e0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff ff9a 	bl	800531c <HAL_SD_GetCardState>
 80053e8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d002      	beq.n	8005404 <SD_DMARxAbort+0x3a>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b05      	cmp	r3, #5
 8005402:	d10a      	bne.n	800541a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fe55 	bl	80060b8 <SDMMC_CmdStopTransfer>
 800540e:	4602      	mov	r2, r0
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f002 fdbe 	bl	8007fa4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005428:	e002      	b.n	8005430 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fd20 	bl	8004e70 <HAL_SD_ErrorCallback>
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005438:	b5b0      	push	{r4, r5, r7, lr}
 800543a:	b094      	sub	sp, #80	; 0x50
 800543c:	af04      	add	r7, sp, #16
 800543e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005440:	2301      	movs	r3, #1
 8005442:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fd0c 	bl	8005e66 <SDIO_GetPowerState>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005454:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005458:	e0b7      	b.n	80055ca <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	2b03      	cmp	r3, #3
 8005460:	d02f      	beq.n	80054c2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 ff30 	bl	80062cc <SDMMC_CmdSendCID>
 800546c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <SD_InitCard+0x40>
    {
      return errorstate;
 8005474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005476:	e0a8      	b.n	80055ca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fd33 	bl	8005eea <SDIO_GetResponse>
 8005484:	4602      	mov	r2, r0
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2104      	movs	r1, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fd2a 	bl	8005eea <SDIO_GetResponse>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2108      	movs	r1, #8
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fd21 	bl	8005eea <SDIO_GetResponse>
 80054a8:	4602      	mov	r2, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	210c      	movs	r1, #12
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fd18 	bl	8005eea <SDIO_GetResponse>
 80054ba:	4602      	mov	r2, r0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d00d      	beq.n	80054e6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f107 020e 	add.w	r2, r7, #14
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 ff36 	bl	8006346 <SDMMC_CmdSetRelAdd>
 80054da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <SD_InitCard+0xae>
    {
      return errorstate;
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e4:	e071      	b.n	80055ca <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d036      	beq.n	800555c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	461a      	mov	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fe:	041b      	lsls	r3, r3, #16
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f000 ff00 	bl	8006308 <SDMMC_CmdSendCSD>
 8005508:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	e05a      	b.n	80055ca <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fce5 	bl	8005eea <SDIO_GetResponse>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2104      	movs	r1, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fcdc 	bl	8005eea <SDIO_GetResponse>
 8005532:	4602      	mov	r2, r0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2108      	movs	r1, #8
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fcd3 	bl	8005eea <SDIO_GetResponse>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	210c      	movs	r1, #12
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fcca 	bl	8005eea <SDIO_GetResponse>
 8005556:	4602      	mov	r2, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2104      	movs	r1, #4
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fcc1 	bl	8005eea <SDIO_GetResponse>
 8005568:	4603      	mov	r3, r0
 800556a:	0d1a      	lsrs	r2, r3, #20
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005570:	f107 0310 	add.w	r3, r7, #16
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fc84 	bl	8004e84 <HAL_SD_GetCardCSD>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005586:	e020      	b.n	80055ca <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6819      	ldr	r1, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005590:	041b      	lsls	r3, r3, #16
 8005592:	f04f 0400 	mov.w	r4, #0
 8005596:	461a      	mov	r2, r3
 8005598:	4623      	mov	r3, r4
 800559a:	4608      	mov	r0, r1
 800559c:	f000 fdae 	bl	80060fc <SDMMC_CmdSelDesel>
 80055a0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <SD_InitCard+0x174>
  {
    return errorstate;
 80055a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055aa:	e00e      	b.n	80055ca <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681d      	ldr	r5, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	466c      	mov	r4, sp
 80055b4:	f103 0210 	add.w	r2, r3, #16
 80055b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80055ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055be:	3304      	adds	r3, #4
 80055c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 fbfa 	bl	8005dbc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3740      	adds	r7, #64	; 0x40
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080055d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fda8 	bl	8006142 <SDMMC_CmdGoIdleState>
 80055f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	e072      	b.n	80056e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fdbb 	bl	800617e <SDMMC_CmdOperCond>
 8005608:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fd91 	bl	8006142 <SDMMC_CmdGoIdleState>
 8005620:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	e05b      	b.n	80056e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005636:	2b01      	cmp	r3, #1
 8005638:	d137      	bne.n	80056aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fdbb 	bl	80061bc <SDMMC_CmdAppCommand>
 8005646:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02d      	beq.n	80056aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800564e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005652:	e047      	b.n	80056e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f000 fdae 	bl	80061bc <SDMMC_CmdAppCommand>
 8005660:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <SD_PowerON+0x98>
    {
      return errorstate;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	e03b      	b.n	80056e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	491e      	ldr	r1, [pc, #120]	; (80056ec <SD_PowerON+0x118>)
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fdc4 	bl	8006200 <SDMMC_CmdAppOperCommand>
 8005678:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005684:	e02e      	b.n	80056e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fc2c 	bl	8005eea <SDIO_GetResponse>
 8005692:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	0fdb      	lsrs	r3, r3, #31
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <SD_PowerON+0xcc>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <SD_PowerON+0xce>
 80056a0:	2300      	movs	r3, #0
 80056a2:	613b      	str	r3, [r7, #16]

    count++;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3301      	adds	r3, #1
 80056a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d802      	bhi.n	80056ba <SD_PowerON+0xe6>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0cc      	beq.n	8005654 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d902      	bls.n	80056ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80056c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c8:	e00c      	b.n	80056e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
 80056da:	e002      	b.n	80056e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	c1100000 	.word	0xc1100000

080056f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005704:	e018      	b.n	8005738 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f000 fe38 	bl	8006388 <SDMMC_CmdSendStatus>
 8005718:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	e009      	b.n	8005738 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fbdd 	bl	8005eea <SDIO_GetResponse>
 8005730:	4602      	mov	r2, r0
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2100      	movs	r1, #0
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fbc7 	bl	8005eea <SDIO_GetResponse>
 800575c:	4603      	mov	r3, r0
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005766:	d102      	bne.n	800576e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005768:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800576c:	e02f      	b.n	80057ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f879 	bl	800586c <SD_FindSCR>
 800577a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	e023      	b.n	80057ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01c      	beq.n	80057ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	041b      	lsls	r3, r3, #16
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 fd0d 	bl	80061bc <SDMMC_CmdAppCommand>
 80057a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	e00f      	b.n	80057ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fd46 	bl	8006246 <SDMMC_CmdBusWidth>
 80057ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	e003      	b.n	80057ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e001      	b.n	80057ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80057ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fb7c 	bl	8005eea <SDIO_GetResponse>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057fc:	d102      	bne.n	8005804 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80057fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005802:	e02f      	b.n	8005864 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005804:	f107 030c 	add.w	r3, r7, #12
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f82e 	bl	800586c <SD_FindSCR>
 8005810:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	e023      	b.n	8005864 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01c      	beq.n	8005860 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f000 fcc2 	bl	80061bc <SDMMC_CmdAppCommand>
 8005838:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	e00f      	b.n	8005864 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fcfb 	bl	8006246 <SDMMC_CmdBusWidth>
 8005850:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	e003      	b.n	8005864 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800585c:	2300      	movs	r3, #0
 800585e:	e001      	b.n	8005864 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005860:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b08f      	sub	sp, #60	; 0x3c
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005876:	f7fb fd03 	bl	8001280 <HAL_GetTick>
 800587a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005880:	2300      	movs	r3, #0
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2108      	movs	r1, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb66 	bl	8005f64 <SDMMC_CmdBlockLength>
 8005898:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	e0a9      	b.n	80059f8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ac:	041b      	lsls	r3, r3, #16
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f000 fc83 	bl	80061bc <SDMMC_CmdAppCommand>
 80058b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	e09a      	b.n	80059f8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058c2:	f04f 33ff 	mov.w	r3, #4294967295
 80058c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80058c8:	2308      	movs	r3, #8
 80058ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80058cc:	2330      	movs	r3, #48	; 0x30
 80058ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80058d0:	2302      	movs	r3, #2
 80058d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80058d8:	2301      	movs	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f107 0210 	add.w	r2, r7, #16
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fb11 	bl	8005f0e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fcca 	bl	800628a <SDMMC_CmdSendSCR>
 80058f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d022      	beq.n	8005944 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	e07a      	b.n	80059f8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	f107 0208 	add.w	r2, r7, #8
 800591c:	18d4      	adds	r4, r2, r3
 800591e:	4608      	mov	r0, r1
 8005920:	f000 fa76 	bl	8005e10 <SDIO_ReadFIFO>
 8005924:	4603      	mov	r3, r0
 8005926:	6023      	str	r3, [r4, #0]
      index++;
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	3301      	adds	r3, #1
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800592e:	f7fb fca7 	bl	8001280 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d102      	bne.n	8005944 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800593e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005942:	e059      	b.n	80059f8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594a:	f240 432a 	movw	r3, #1066	; 0x42a
 800594e:	4013      	ands	r3, r2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0d6      	beq.n	8005902 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2208      	movs	r2, #8
 8005968:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800596a:	2308      	movs	r3, #8
 800596c:	e044      	b.n	80059f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2202      	movs	r2, #2
 8005982:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005984:	2302      	movs	r3, #2
 8005986:	e037      	b.n	80059f8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2220      	movs	r2, #32
 800599c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800599e:	2320      	movs	r3, #32
 80059a0:	e02a      	b.n	80059f8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	061a      	lsls	r2, r3, #24
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80059c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	0e1b      	lsrs	r3, r3, #24
 80059c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	601a      	str	r2, [r3, #0]
    scr++;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	3304      	adds	r3, #4
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	061a      	lsls	r2, r3, #24
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80059ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	0e1b      	lsrs	r3, r3, #24
 80059f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	373c      	adds	r7, #60	; 0x3c
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}

08005a00 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d03f      	beq.n	8005a9a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e033      	b.n	8005a88 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f9f3 	bl	8005e10 <SDIO_ReadFIFO>
 8005a2a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	0e1b      	lsrs	r3, r3, #24
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	3301      	adds	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b07      	cmp	r3, #7
 8005a8c:	d9c8      	bls.n	8005a20 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d043      	beq.n	8005b44 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e037      	b.n	8005b32 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	021a      	lsls	r2, r3, #8
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	041a      	lsls	r2, r3, #16
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	061a      	lsls	r2, r3, #24
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f107 0208 	add.w	r2, r7, #8
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 f97e 	bl	8005e28 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b07      	cmp	r3, #7
 8005b36:	d9c4      	bls.n	8005ac2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005b44:	bf00      	nop
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e03f      	b.n	8005bde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d106      	bne.n	8005b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb f9da 	bl	8000f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2224      	movs	r2, #36	; 0x24
 8005b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f829 	bl	8005be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695a      	ldr	r2, [r3, #20]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c28:	f023 030c 	bic.w	r3, r3, #12
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	430b      	orrs	r3, r1
 8005c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699a      	ldr	r2, [r3, #24]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a57      	ldr	r2, [pc, #348]	; (8005db0 <UART_SetConfig+0x1c8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <UART_SetConfig+0x78>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a56      	ldr	r2, [pc, #344]	; (8005db4 <UART_SetConfig+0x1cc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d103      	bne.n	8005c68 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c60:	f7fe fb40 	bl	80042e4 <HAL_RCC_GetPCLK2Freq>
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	e002      	b.n	8005c6e <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c68:	f7fe fb1a 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8005c6c:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c76:	d14c      	bne.n	8005d12 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009a      	lsls	r2, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8e:	4a4a      	ldr	r2, [pc, #296]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	0119      	lsls	r1, r3, #4
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009a      	lsls	r2, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cae:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005cb0:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	2064      	movs	r0, #100	; 0x64
 8005cb8:	fb00 f303 	mul.w	r3, r0, r3
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	3332      	adds	r3, #50	; 0x32
 8005cc2:	4a3d      	ldr	r2, [pc, #244]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd0:	4419      	add	r1, r3
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce8:	4b33      	ldr	r3, [pc, #204]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005cea:	fba3 0302 	umull	r0, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2064      	movs	r0, #100	; 0x64
 8005cf2:	fb00 f303 	mul.w	r3, r0, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	3332      	adds	r3, #50	; 0x32
 8005cfc:	4a2e      	ldr	r2, [pc, #184]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f003 0207 	and.w	r2, r3, #7
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d10:	e04a      	b.n	8005da8 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009a      	lsls	r2, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	4a23      	ldr	r2, [pc, #140]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	0119      	lsls	r1, r3, #4
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009a      	lsls	r2, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d48:	4b1b      	ldr	r3, [pc, #108]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005d4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	2064      	movs	r0, #100	; 0x64
 8005d52:	fb00 f303 	mul.w	r3, r0, r3
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	3332      	adds	r3, #50	; 0x32
 8005d5c:	4a16      	ldr	r2, [pc, #88]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d68:	4419      	add	r1, r3
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009a      	lsls	r2, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d80:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005d82:	fba3 0302 	umull	r0, r3, r3, r2
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2064      	movs	r0, #100	; 0x64
 8005d8a:	fb00 f303 	mul.w	r3, r0, r3
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	3332      	adds	r3, #50	; 0x32
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <UART_SetConfig+0x1d0>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f003 020f 	and.w	r2, r3, #15
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	440a      	add	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40011000 	.word	0x40011000
 8005db4:	40011400 	.word	0x40011400
 8005db8:	51eb851f 	.word	0x51eb851f

08005dbc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	f107 001c 	add.w	r0, r7, #28
 8005dca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005dd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005dd6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005dda:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005dde:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005de2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005de6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005df6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr

08005e10 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2203      	movs	r2, #3
 8005e54:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005e56:	2002      	movs	r0, #2
 8005e58:	f7fb fa1c 	bl	8001294 <HAL_Delay>
  
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0303 	and.w	r3, r3, #3
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e9e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ea4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005eaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005eba:	f023 030f 	bic.w	r3, r3, #15
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	b2db      	uxtb	r3, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	461a      	mov	r2, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	4413      	add	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
}  
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bc80      	pop	{r7}
 8005f0c:	4770      	bx	lr

08005f0e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f34:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f3a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f40:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0

}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f72:	2310      	movs	r3, #16
 8005f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f76:	2340      	movs	r3, #64	; 0x40
 8005f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ff78 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	2110      	movs	r1, #16
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa40 	bl	800641c <SDMMC_GetCmdResp1>
 8005f9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005fb6:	2311      	movs	r3, #17
 8005fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fba:	2340      	movs	r3, #64	; 0x40
 8005fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fc8:	f107 0308 	add.w	r3, r7, #8
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff ff56 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd8:	2111      	movs	r1, #17
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fa1e 	bl	800641c <SDMMC_GetCmdResp1>
 8005fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005ffa:	2312      	movs	r3, #18
 8005ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ffe:	2340      	movs	r3, #64	; 0x40
 8006000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff34 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006018:	f241 3288 	movw	r2, #5000	; 0x1388
 800601c:	2112      	movs	r1, #18
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9fc 	bl	800641c <SDMMC_GetCmdResp1>
 8006024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800603e:	2318      	movs	r3, #24
 8006040:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800604a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800604e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff12 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800605c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006060:	2118      	movs	r1, #24
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9da 	bl	800641c <SDMMC_GetCmdResp1>
 8006068:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800606a:	69fb      	ldr	r3, [r7, #28]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006082:	2319      	movs	r3, #25
 8006084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800608e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006094:	f107 0308 	add.w	r3, r7, #8
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fef0 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80060a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a4:	2119      	movs	r1, #25
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9b8 	bl	800641c <SDMMC_GetCmdResp1>
 80060ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ae:	69fb      	ldr	r3, [r7, #28]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80060c4:	230c      	movs	r3, #12
 80060c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff fecf 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80060e2:	4a05      	ldr	r2, [pc, #20]	; (80060f8 <SDMMC_CmdStopTransfer+0x40>)
 80060e4:	210c      	movs	r1, #12
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f998 	bl	800641c <SDMMC_GetCmdResp1>
 80060ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ee:	69fb      	ldr	r3, [r7, #28]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	05f5e100 	.word	0x05f5e100

080060fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800610c:	2307      	movs	r3, #7
 800610e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006110:	2340      	movs	r3, #64	; 0x40
 8006112:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800611e:	f107 0310 	add.w	r3, r7, #16
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff feab 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	2107      	movs	r1, #7
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f973 	bl	800641c <SDMMC_GetCmdResp1>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800613a:	4618      	mov	r0, r3
 800613c:	3728      	adds	r7, #40	; 0x28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b088      	sub	sp, #32
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800615a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800615e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006160:	f107 0308 	add.w	r3, r7, #8
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fe8a 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f92d 	bl	80063cc <SDMMC_GetCmdError>
 8006172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006174:	69fb      	ldr	r3, [r7, #28]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b088      	sub	sp, #32
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006186:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800618a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800618c:	2308      	movs	r3, #8
 800618e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006190:	2340      	movs	r3, #64	; 0x40
 8006192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800619c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fe6b 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fb16 	bl	80067dc <SDMMC_GetCmdResp7>
 80061b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061b2:	69fb      	ldr	r3, [r7, #28]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3720      	adds	r7, #32
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80061ca:	2337      	movs	r3, #55	; 0x37
 80061cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe4c 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	2137      	movs	r1, #55	; 0x37
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f914 	bl	800641c <SDMMC_GetCmdResp1>
 80061f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061f6:	69fb      	ldr	r3, [r7, #28]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006216:	2329      	movs	r3, #41	; 0x29
 8006218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800621a:	2340      	movs	r3, #64	; 0x40
 800621c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006226:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff fe26 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fa23 	bl	8006680 <SDMMC_GetCmdResp3>
 800623a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800623c:	69fb      	ldr	r3, [r7, #28]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b088      	sub	sp, #32
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006254:	2306      	movs	r3, #6
 8006256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006258:	2340      	movs	r3, #64	; 0x40
 800625a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fe07 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006272:	f241 3288 	movw	r2, #5000	; 0x1388
 8006276:	2106      	movs	r1, #6
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f8cf 	bl	800641c <SDMMC_GetCmdResp1>
 800627e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006280:	69fb      	ldr	r3, [r7, #28]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006296:	2333      	movs	r3, #51	; 0x33
 8006298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800629a:	2340      	movs	r3, #64	; 0x40
 800629c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4619      	mov	r1, r3
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fde6 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80062b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b8:	2133      	movs	r1, #51	; 0x33
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f8ae 	bl	800641c <SDMMC_GetCmdResp1>
 80062c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062c2:	69fb      	ldr	r3, [r7, #28]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80062d8:	2302      	movs	r3, #2
 80062da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80062dc:	23c0      	movs	r3, #192	; 0xc0
 80062de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ea:	f107 0308 	add.w	r3, r7, #8
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fdc5 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f97c 	bl	80065f4 <SDMMC_GetCmdResp2>
 80062fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062fe:	69fb      	ldr	r3, [r7, #28]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006316:	2309      	movs	r3, #9
 8006318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800631a:	23c0      	movs	r3, #192	; 0xc0
 800631c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006326:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006328:	f107 0308 	add.w	r3, r7, #8
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff fda6 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f95d 	bl	80065f4 <SDMMC_GetCmdResp2>
 800633a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800633c:	69fb      	ldr	r3, [r7, #28]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b088      	sub	sp, #32
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006354:	2303      	movs	r3, #3
 8006356:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006358:	2340      	movs	r3, #64	; 0x40
 800635a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006364:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006366:	f107 0308 	add.w	r3, r7, #8
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff fd87 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	2103      	movs	r1, #3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9bc 	bl	80066f4 <SDMMC_GetCmdResp6>
 800637c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800637e:	69fb      	ldr	r3, [r7, #28]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006396:	230d      	movs	r3, #13
 8006398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800639a:	2340      	movs	r3, #64	; 0x40
 800639c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4619      	mov	r1, r3
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fd66 	bl	8005e80 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80063b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b8:	210d      	movs	r1, #13
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f82e 	bl	800641c <SDMMC_GetCmdResp1>
 80063c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063c2:	69fb      	ldr	r3, [r7, #28]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80063cc:	b490      	push	{r4, r7}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <SDMMC_GetCmdError+0x48>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0f      	ldr	r2, [pc, #60]	; (8006418 <SDMMC_GetCmdError+0x4c>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	0a5b      	lsrs	r3, r3, #9
 80063e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80063e8:	4623      	mov	r3, r4
 80063ea:	1e5c      	subs	r4, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063f4:	e009      	b.n	800640a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f2      	beq.n	80063e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	22c5      	movs	r2, #197	; 0xc5
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bc90      	pop	{r4, r7}
 8006412:	4770      	bx	lr
 8006414:	20000000 	.word	0x20000000
 8006418:	10624dd3 	.word	0x10624dd3

0800641c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800641c:	b590      	push	{r4, r7, lr}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	460b      	mov	r3, r1
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800642a:	4b6f      	ldr	r3, [pc, #444]	; (80065e8 <SDMMC_GetCmdResp1+0x1cc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6f      	ldr	r2, [pc, #444]	; (80065ec <SDMMC_GetCmdResp1+0x1d0>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	0a5b      	lsrs	r3, r3, #9
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800643c:	4623      	mov	r3, r4
 800643e:	1e5c      	subs	r4, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006448:	e0c9      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <SDMMC_GetCmdResp1+0x20>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1eb      	bne.n	800643c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2204      	movs	r2, #4
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006476:	2304      	movs	r3, #4
 8006478:	e0b1      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800648c:	2301      	movs	r3, #1
 800648e:	e0a6      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	22c5      	movs	r2, #197	; 0xc5
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fd1b 	bl	8005ed2 <SDIO_GetCommandResponse>
 800649c:	4603      	mov	r3, r0
 800649e:	461a      	mov	r2, r3
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d001      	beq.n	80064aa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e099      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064aa:	2100      	movs	r1, #0
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff fd1c 	bl	8005eea <SDIO_GetResponse>
 80064b2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4b4e      	ldr	r3, [pc, #312]	; (80065f0 <SDMMC_GetCmdResp1+0x1d4>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80064be:	2300      	movs	r3, #0
 80064c0:	e08d      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da02      	bge.n	80064ce <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80064c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064cc:	e087      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	e080      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	e079      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80064f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f8:	e071      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006508:	e069      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006518:	e061      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006528:	e059      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006538:	e051      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006548:	e049      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006558:	e041      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006568:	e039      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006578:	e031      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006588:	e029      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006594:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006598:	e021      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80065a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80065a8:	e019      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80065b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065b8:	e011      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80065c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065c8:	e009      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80065d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80065d8:	e001      	b.n	80065de <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd90      	pop	{r4, r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3
 80065f0:	fdffe008 	.word	0xfdffe008

080065f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80065f4:	b490      	push	{r4, r7}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065fc:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <SDMMC_GetCmdResp2+0x84>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1e      	ldr	r2, [pc, #120]	; (800667c <SDMMC_GetCmdResp2+0x88>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	0a5b      	lsrs	r3, r3, #9
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006610:	4623      	mov	r3, r4
 8006612:	1e5c      	subs	r4, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800661c:	e026      	b.n	800666c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0f0      	beq.n	8006610 <SDMMC_GetCmdResp2+0x1c>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1eb      	bne.n	8006610 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2204      	movs	r2, #4
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800664a:	2304      	movs	r3, #4
 800664c:	e00e      	b.n	800666c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006660:	2301      	movs	r3, #1
 8006662:	e003      	b.n	800666c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	22c5      	movs	r2, #197	; 0xc5
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bc90      	pop	{r4, r7}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	20000000 	.word	0x20000000
 800667c:	10624dd3 	.word	0x10624dd3

08006680 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006680:	b490      	push	{r4, r7}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006688:	4b18      	ldr	r3, [pc, #96]	; (80066ec <SDMMC_GetCmdResp3+0x6c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <SDMMC_GetCmdResp3+0x70>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	0a5b      	lsrs	r3, r3, #9
 8006694:	f241 3288 	movw	r2, #5000	; 0x1388
 8006698:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800669c:	4623      	mov	r3, r4
 800669e:	1e5c      	subs	r4, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d102      	bne.n	80066aa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066a8:	e01b      	b.n	80066e2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <SDMMC_GetCmdResp3+0x1c>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1eb      	bne.n	800669c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2204      	movs	r2, #4
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066d6:	2304      	movs	r3, #4
 80066d8:	e003      	b.n	80066e2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	22c5      	movs	r2, #197	; 0xc5
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc90      	pop	{r4, r7}
 80066ea:	4770      	bx	lr
 80066ec:	20000000 	.word	0x20000000
 80066f0:	10624dd3 	.word	0x10624dd3

080066f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	460b      	mov	r3, r1
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006702:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <SDMMC_GetCmdResp6+0xe0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a34      	ldr	r2, [pc, #208]	; (80067d8 <SDMMC_GetCmdResp6+0xe4>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	0a5b      	lsrs	r3, r3, #9
 800670e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006712:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006716:	4623      	mov	r3, r4
 8006718:	1e5c      	subs	r4, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800671e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006722:	e052      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <SDMMC_GetCmdResp6+0x22>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1eb      	bne.n	8006716 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2204      	movs	r2, #4
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006750:	2304      	movs	r3, #4
 8006752:	e03a      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006766:	2301      	movs	r3, #1
 8006768:	e02f      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fbb1 	bl	8005ed2 <SDIO_GetCommandResponse>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	7afb      	ldrb	r3, [r7, #11]
 8006776:	4293      	cmp	r3, r2
 8006778:	d001      	beq.n	800677e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800677a:	2301      	movs	r3, #1
 800677c:	e025      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	22c5      	movs	r2, #197	; 0xc5
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006784:	2100      	movs	r1, #0
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff fbaf 	bl	8005eea <SDIO_GetResponse>
 800678c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e011      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067b4:	e009      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067c4:	e001      	b.n	80067ca <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd90      	pop	{r4, r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000000 	.word	0x20000000
 80067d8:	10624dd3 	.word	0x10624dd3

080067dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80067dc:	b490      	push	{r4, r7}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80067e4:	4b21      	ldr	r3, [pc, #132]	; (800686c <SDMMC_GetCmdResp7+0x90>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <SDMMC_GetCmdResp7+0x94>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	0a5b      	lsrs	r3, r3, #9
 80067f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80067f8:	4623      	mov	r3, r4
 80067fa:	1e5c      	subs	r4, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006804:	e02c      	b.n	8006860 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f0      	beq.n	80067f8 <SDMMC_GetCmdResp7+0x1c>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1eb      	bne.n	80067f8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2204      	movs	r2, #4
 8006830:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006832:	2304      	movs	r3, #4
 8006834:	e014      	b.n	8006860 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006848:	2301      	movs	r3, #1
 800684a:	e009      	b.n	8006860 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2240      	movs	r2, #64	; 0x40
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800685e:	2300      	movs	r3, #0
  
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bc90      	pop	{r4, r7}
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000000 	.word	0x20000000
 8006870:	10624dd3 	.word	0x10624dd3

08006874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006874:	b084      	sub	sp, #16
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	f107 001c 	add.w	r0, r7, #28
 8006882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	2b01      	cmp	r3, #1
 800688a:	d122      	bne.n	80068d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d105      	bne.n	80068c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 faa0 	bl	8007e0c <USB_CoreReset>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
 80068d0:	e010      	b.n	80068f4 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fa94 	bl	8007e0c <USB_CoreReset>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10b      	bne.n	8006912 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f043 0206 	orr.w	r2, r3, #6
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f043 0220 	orr.w	r2, r3, #32
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800691e:	b004      	add	sp, #16
 8006920:	4770      	bx	lr
	...

08006924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d165      	bne.n	8006a04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a41      	ldr	r2, [pc, #260]	; (8006a40 <USB_SetTurnaroundTime+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d906      	bls.n	800694e <USB_SetTurnaroundTime+0x2a>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a40      	ldr	r2, [pc, #256]	; (8006a44 <USB_SetTurnaroundTime+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d802      	bhi.n	800694e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006948:	230f      	movs	r3, #15
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e062      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a3c      	ldr	r2, [pc, #240]	; (8006a44 <USB_SetTurnaroundTime+0x120>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d906      	bls.n	8006964 <USB_SetTurnaroundTime+0x40>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a3b      	ldr	r2, [pc, #236]	; (8006a48 <USB_SetTurnaroundTime+0x124>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d802      	bhi.n	8006964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800695e:	230e      	movs	r3, #14
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	e057      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a38      	ldr	r2, [pc, #224]	; (8006a48 <USB_SetTurnaroundTime+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d906      	bls.n	800697a <USB_SetTurnaroundTime+0x56>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a37      	ldr	r2, [pc, #220]	; (8006a4c <USB_SetTurnaroundTime+0x128>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d802      	bhi.n	800697a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006974:	230d      	movs	r3, #13
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e04c      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4a33      	ldr	r2, [pc, #204]	; (8006a4c <USB_SetTurnaroundTime+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d906      	bls.n	8006990 <USB_SetTurnaroundTime+0x6c>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a32      	ldr	r2, [pc, #200]	; (8006a50 <USB_SetTurnaroundTime+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800698a:	230c      	movs	r3, #12
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e041      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <USB_SetTurnaroundTime+0x12c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d906      	bls.n	80069a6 <USB_SetTurnaroundTime+0x82>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a2e      	ldr	r2, [pc, #184]	; (8006a54 <USB_SetTurnaroundTime+0x130>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d802      	bhi.n	80069a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069a0:	230b      	movs	r3, #11
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e036      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <USB_SetTurnaroundTime+0x130>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d906      	bls.n	80069bc <USB_SetTurnaroundTime+0x98>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a29      	ldr	r2, [pc, #164]	; (8006a58 <USB_SetTurnaroundTime+0x134>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d802      	bhi.n	80069bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069b6:	230a      	movs	r3, #10
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	e02b      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <USB_SetTurnaroundTime+0x134>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d906      	bls.n	80069d2 <USB_SetTurnaroundTime+0xae>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a25      	ldr	r2, [pc, #148]	; (8006a5c <USB_SetTurnaroundTime+0x138>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d802      	bhi.n	80069d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069cc:	2309      	movs	r3, #9
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e020      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <USB_SetTurnaroundTime+0x138>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d906      	bls.n	80069e8 <USB_SetTurnaroundTime+0xc4>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <USB_SetTurnaroundTime+0x13c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d802      	bhi.n	80069e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069e2:	2308      	movs	r3, #8
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e015      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4a1d      	ldr	r2, [pc, #116]	; (8006a60 <USB_SetTurnaroundTime+0x13c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d906      	bls.n	80069fe <USB_SetTurnaroundTime+0xda>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <USB_SetTurnaroundTime+0x140>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d802      	bhi.n	80069fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069f8:	2307      	movs	r3, #7
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e00a      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069fe:	2306      	movs	r3, #6
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e007      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a0a:	2309      	movs	r3, #9
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e001      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a10:	2309      	movs	r3, #9
 8006a12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	00d8acbf 	.word	0x00d8acbf
 8006a44:	00e4e1bf 	.word	0x00e4e1bf
 8006a48:	00f423ff 	.word	0x00f423ff
 8006a4c:	0106737f 	.word	0x0106737f
 8006a50:	011a499f 	.word	0x011a499f
 8006a54:	01312cff 	.word	0x01312cff
 8006a58:	014ca43f 	.word	0x014ca43f
 8006a5c:	016e35ff 	.word	0x016e35ff
 8006a60:	01a6ab1f 	.word	0x01a6ab1f
 8006a64:	01e847ff 	.word	0x01e847ff

08006a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f043 0201 	orr.w	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f023 0201 	bic.w	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bc80      	pop	{r7}
 8006aa6:	4770      	bx	lr

08006aa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d106      	bne.n	8006ad4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	60da      	str	r2, [r3, #12]
 8006ad2:	e00b      	b.n	8006aec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	e001      	b.n	8006aec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e003      	b.n	8006af4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006aec:	2032      	movs	r0, #50	; 0x32
 8006aee:	f7fa fbd1 	bl	8001294 <HAL_Delay>

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006afc:	b084      	sub	sp, #16
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	e009      	b.n	8006b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	3340      	adds	r3, #64	; 0x40
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	2b0e      	cmp	r3, #14
 8006b34:	d9f2      	bls.n	8006b1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d11c      	bne.n	8006b76 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b4a:	f043 0302 	orr.w	r3, r3, #2
 8006b4e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
 8006b74:	e00b      	b.n	8006b8e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b94:	461a      	mov	r2, r3
 8006b96:	2300      	movs	r3, #0
 8006b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	461a      	mov	r2, r3
 8006baa:	680b      	ldr	r3, [r1, #0]
 8006bac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d10c      	bne.n	8006bce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f945 	bl	8006e4c <USB_SetDevSpeed>
 8006bc2:	e008      	b.n	8006bd6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f940 	bl	8006e4c <USB_SetDevSpeed>
 8006bcc:	e003      	b.n	8006bd6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bce:	2103      	movs	r1, #3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f93b 	bl	8006e4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f8f3 	bl	8006dc4 <USB_FlushTxFifo>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f90f 	bl	8006e0c <USB_FlushRxFifo>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	461a      	mov	r2, r3
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	e043      	b.n	8006caa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c38:	d118      	bne.n	8006c6c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e013      	b.n	8006c7e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c62:	461a      	mov	r2, r3
 8006c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e008      	b.n	8006c7e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d3b7      	bcc.n	8006c22 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	e043      	b.n	8006d40 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cce:	d118      	bne.n	8006d02 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	e013      	b.n	8006d14 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	e008      	b.n	8006d14 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	2300      	movs	r3, #0
 8006d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	461a      	mov	r2, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d32:	461a      	mov	r2, r3
 8006d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	613b      	str	r3, [r7, #16]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d3b7      	bcc.n	8006cb8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d105      	bne.n	8006d7c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f043 0210 	orr.w	r2, r3, #16
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <USB_DevInit+0x2c4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d005      	beq.n	8006d9a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f043 0208 	orr.w	r2, r3, #8
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d107      	bne.n	8006db0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006da8:	f043 0304 	orr.w	r3, r3, #4
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dbc:	b004      	add	sp, #16
 8006dbe:	4770      	bx	lr
 8006dc0:	803c3800 	.word	0x803c3800

08006dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	f043 0220 	orr.w	r2, r3, #32
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <USB_FlushTxFifo+0x44>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0320 	and.w	r3, r3, #32
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d0f0      	beq.n	8006dde <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr
 8006e08:	00030d40 	.word	0x00030d40

08006e0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2210      	movs	r2, #16
 8006e1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a08      	ldr	r2, [pc, #32]	; (8006e48 <USB_FlushRxFifo+0x3c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d901      	bls.n	8006e30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e006      	b.n	8006e3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f003 0310 	and.w	r3, r3, #16
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d0f0      	beq.n	8006e1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	00030d40 	.word	0x00030d40

08006e4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0306 	and.w	r3, r3, #6
 8006e94:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	75fb      	strb	r3, [r7, #23]
 8006ea0:	e00a      	b.n	8006eb8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d002      	beq.n	8006eae <USB_GetDevSpeed+0x32>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d102      	bne.n	8006eb4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	75fb      	strb	r3, [r7, #23]
 8006eb2:	e001      	b.n	8006eb8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006eb4:	230f      	movs	r3, #15
 8006eb6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d13a      	bne.n	8006f56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	68f9      	ldr	r1, [r7, #12]
 8006efa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006efe:	4313      	orrs	r3, r2
 8006f00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d155      	bne.n	8006fc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	78db      	ldrb	r3, [r3, #3]
 8006f32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	059b      	lsls	r3, r3, #22
 8006f3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	0151      	lsls	r1, r2, #5
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	440a      	add	r2, r1
 8006f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e036      	b.n	8006fc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5c:	69da      	ldr	r2, [r3, #28]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	2101      	movs	r1, #1
 8006f68:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f74:	4313      	orrs	r3, r2
 8006f76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d11a      	bne.n	8006fc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006faa:	430b      	orrs	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr

08006fd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d161      	bne.n	80070b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007002:	d11f      	bne.n	8007044 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007022:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	2101      	movs	r1, #1
 8007056:	fa01 f303 	lsl.w	r3, r1, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007064:	4013      	ands	r3, r2
 8007066:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	2101      	movs	r1, #1
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	b29b      	uxth	r3, r3
 8007080:	43db      	mvns	r3, r3
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007088:	4013      	ands	r3, r2
 800708a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	0159      	lsls	r1, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	440b      	add	r3, r1
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	4619      	mov	r1, r3
 80070a8:	4b35      	ldr	r3, [pc, #212]	; (8007180 <USB_DeactivateEndpoint+0x1b0>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	600b      	str	r3, [r1, #0]
 80070ae:	e060      	b.n	8007172 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c6:	d11f      	bne.n	8007108 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007106:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	2101      	movs	r1, #1
 800711a:	fa01 f303 	lsl.w	r3, r1, r3
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	43db      	mvns	r3, r3
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007128:	4013      	ands	r3, r2
 800712a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	43db      	mvns	r3, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	0159      	lsls	r1, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	440b      	add	r3, r1
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	4619      	mov	r1, r3
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <USB_DeactivateEndpoint+0x1b4>)
 800716e:	4013      	ands	r3, r2
 8007170:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	ec337800 	.word	0xec337800
 8007184:	eff37800 	.word	0xeff37800

08007188 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 815c 	bne.w	8007462 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d132      	bne.n	8007218 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007210:	0cdb      	lsrs	r3, r3, #19
 8007212:	04db      	lsls	r3, r3, #19
 8007214:	6113      	str	r3, [r2, #16]
 8007216:	e074      	b.n	8007302 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007232:	0cdb      	lsrs	r3, r3, #19
 8007234:	04db      	lsls	r3, r3, #19
 8007236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007252:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007256:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800725a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6959      	ldr	r1, [r3, #20]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	440b      	add	r3, r1
 8007274:	1e59      	subs	r1, r3, #1
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	fbb1 f3f3 	udiv	r3, r1, r3
 800727e:	04d9      	lsls	r1, r3, #19
 8007280:	4b9d      	ldr	r3, [pc, #628]	; (80074f8 <USB_EPStartXfer+0x370>)
 8007282:	400b      	ands	r3, r1
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072aa:	69b9      	ldr	r1, [r7, #24]
 80072ac:	0148      	lsls	r0, r1, #5
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	4401      	add	r1, r0
 80072b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072b6:	4313      	orrs	r3, r2
 80072b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d11f      	bne.n	8007302 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007300:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d14b      	bne.n	80073a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	78db      	ldrb	r3, [r3, #3]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d128      	bne.n	800737e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d110      	bne.n	800735e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e00f      	b.n	800737e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	e12f      	b.n	8007600 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	78db      	ldrb	r3, [r3, #3]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d015      	beq.n	80073f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 8117 	beq.w	8007600 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	2101      	movs	r1, #1
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ee:	4313      	orrs	r3, r2
 80073f0:	634b      	str	r3, [r1, #52]	; 0x34
 80073f2:	e105      	b.n	8007600 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d110      	bne.n	8007426 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	e00f      	b.n	8007446 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	68d9      	ldr	r1, [r3, #12]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	781a      	ldrb	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	b298      	uxth	r0, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4603      	mov	r3, r0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fa2a 	bl	80078b4 <USB_WritePacket>
 8007460:	e0ce      	b.n	8007600 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	0cdb      	lsrs	r3, r3, #19
 800747e:	04db      	lsls	r3, r3, #19
 8007480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d126      	bne.n	80074fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c4:	69b9      	ldr	r1, [r7, #24]
 80074c6:	0148      	lsls	r0, r1, #5
 80074c8:	69f9      	ldr	r1, [r7, #28]
 80074ca:	4401      	add	r1, r0
 80074cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074f2:	6113      	str	r3, [r2, #16]
 80074f4:	e036      	b.n	8007564 <USB_EPStartXfer+0x3dc>
 80074f6:	bf00      	nop
 80074f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	695a      	ldr	r2, [r3, #20]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	4413      	add	r3, r2
 8007506:	1e5a      	subs	r2, r3, #1
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	8afb      	ldrh	r3, [r7, #22]
 8007522:	04d9      	lsls	r1, r3, #19
 8007524:	4b39      	ldr	r3, [pc, #228]	; (800760c <USB_EPStartXfer+0x484>)
 8007526:	400b      	ands	r3, r1
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	0148      	lsls	r0, r1, #5
 800752c:	69f9      	ldr	r1, [r7, #28]
 800752e:	4401      	add	r1, r0
 8007530:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007534:	4313      	orrs	r3, r2
 8007536:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	8af9      	ldrh	r1, [r7, #22]
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007554:	69b9      	ldr	r1, [r7, #24]
 8007556:	0148      	lsls	r0, r1, #5
 8007558:	69f9      	ldr	r1, [r7, #28]
 800755a:	4401      	add	r1, r0
 800755c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007560:	4313      	orrs	r3, r2
 8007562:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007564:	79fb      	ldrb	r3, [r7, #7]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d10d      	bne.n	8007586 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	68d9      	ldr	r1, [r3, #12]
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007582:	460a      	mov	r2, r1
 8007584:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d128      	bne.n	80075e0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	d110      	bne.n	80075c0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	69fa      	ldr	r2, [r7, #28]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e00f      	b.n	80075e0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69ba      	ldr	r2, [r7, #24]
 80075f0:	0151      	lsls	r1, r2, #5
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	440a      	add	r2, r1
 80075f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	1ff80000 	.word	0x1ff80000

08007610 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	4613      	mov	r3, r2
 800761c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b01      	cmp	r3, #1
 800762e:	f040 80cd 	bne.w	80077cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d132      	bne.n	80076a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800765c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800767c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	0cdb      	lsrs	r3, r3, #19
 800769a:	04db      	lsls	r3, r3, #19
 800769c:	6113      	str	r3, [r2, #16]
 800769e:	e04e      	b.n	800773e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	0cdb      	lsrs	r3, r3, #19
 80076bc:	04db      	lsls	r3, r3, #19
 80076be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d903      	bls.n	80076f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007724:	691a      	ldr	r2, [r3, #16]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800772e:	6939      	ldr	r1, [r7, #16]
 8007730:	0148      	lsls	r0, r1, #5
 8007732:	6979      	ldr	r1, [r7, #20]
 8007734:	4401      	add	r1, r0
 8007736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800773a:	4313      	orrs	r3, r2
 800773c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d11e      	bne.n	8007782 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d009      	beq.n	8007760 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	461a      	mov	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	e092      	b.n	80078a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	0151      	lsls	r1, r2, #5
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	440a      	add	r2, r1
 8007798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800779c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d07e      	beq.n	80078a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	2101      	movs	r1, #1
 80077bc:	fa01 f303 	lsl.w	r3, r1, r3
 80077c0:	6979      	ldr	r1, [r7, #20]
 80077c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c6:	4313      	orrs	r3, r2
 80077c8:	634b      	str	r3, [r1, #52]	; 0x34
 80077ca:	e06d      	b.n	80078a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	0cdb      	lsrs	r3, r3, #19
 80077e8:	04db      	lsls	r3, r3, #19
 80077ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800780a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800780e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800783e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	691a      	ldr	r2, [r3, #16]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007856:	6939      	ldr	r1, [r7, #16]
 8007858:	0148      	lsls	r0, r1, #5
 800785a:	6979      	ldr	r1, [r7, #20]
 800785c:	4401      	add	r1, r0
 800785e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007862:	4313      	orrs	r3, r2
 8007864:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10d      	bne.n	8007888 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d009      	beq.n	8007888 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	68d9      	ldr	r1, [r3, #12]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	460a      	mov	r2, r1
 8007886:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bc80      	pop	{r7}
 80078b2:	4770      	bx	lr

080078b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	; 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4611      	mov	r1, r2
 80078c0:	461a      	mov	r2, r3
 80078c2:	460b      	mov	r3, r1
 80078c4:	71fb      	strb	r3, [r7, #7]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80078d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d11a      	bne.n	8007910 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078da:	88bb      	ldrh	r3, [r7, #4]
 80078dc:	3303      	adds	r3, #3
 80078de:	089b      	lsrs	r3, r3, #2
 80078e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078e2:	2300      	movs	r3, #0
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e00f      	b.n	8007908 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	031a      	lsls	r2, r3, #12
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f4:	461a      	mov	r2, r3
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3304      	adds	r3, #4
 8007900:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	3301      	adds	r3, #1
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	d3eb      	bcc.n	80078e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3724      	adds	r7, #36	; 0x24
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	; 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	3303      	adds	r3, #3
 8007936:	089b      	lsrs	r3, r3, #2
 8007938:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800793a:	2300      	movs	r3, #0
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e00b      	b.n	8007958 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	601a      	str	r2, [r3, #0]
    pDest++;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	3304      	adds	r3, #4
 8007950:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	3301      	adds	r3, #1
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d3ef      	bcc.n	8007940 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007960:	69fb      	ldr	r3, [r7, #28]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3724      	adds	r7, #36	; 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d12c      	bne.n	80079e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	db12      	blt.n	80079c0 <USB_EPSetStall+0x54>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00f      	beq.n	80079c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	0151      	lsls	r1, r2, #5
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	440a      	add	r2, r1
 80079d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e02b      	b.n	8007a3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	db12      	blt.n	8007a1a <USB_EPSetStall+0xae>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00f      	beq.n	8007a1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr

08007a46 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d128      	bne.n	8007ab4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	78db      	ldrb	r3, [r3, #3]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d003      	beq.n	8007a92 <USB_EPClearStall+0x4c>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	78db      	ldrb	r3, [r3, #3]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d138      	bne.n	8007b04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e027      	b.n	8007b04 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ad2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d003      	beq.n	8007ae4 <USB_EPClearStall+0x9e>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	78db      	ldrb	r3, [r3, #3]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d10f      	bne.n	8007b04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b44:	68f9      	ldr	r1, [r7, #12]
 8007b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr

08007b5a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b74:	f023 0303 	bic.w	r3, r3, #3
 8007b78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b88:	f023 0302 	bic.w	r3, r3, #2
 8007b8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bc80      	pop	{r7}
 8007b98:	4770      	bx	lr

08007b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bb4:	f023 0303 	bic.w	r3, r3, #3
 8007bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc8:	f043 0302 	orr.w	r3, r3, #2
 8007bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr

08007bda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	0c1b      	lsrs	r3, r3, #16
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3714      	adds	r7, #20
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bc80      	pop	{r7}
 8007c2e:	4770      	bx	lr

08007c30 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	4013      	ands	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	b29b      	uxth	r3, r3
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c90:	68bb      	ldr	r3, [r7, #8]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	01db      	lsls	r3, r3, #7
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cea:	68bb      	ldr	r3, [r7, #8]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr

08007cf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f003 0301 	and.w	r3, r3, #1
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d2e:	f023 0307 	bic.w	r3, r3, #7
 8007d32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	607a      	str	r2, [r7, #4]
 8007d60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	333c      	adds	r3, #60	; 0x3c
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4a25      	ldr	r2, [pc, #148]	; (8007e08 <USB_EP0_OutStart+0xb4>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d90a      	bls.n	8007d8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d88:	d101      	bne.n	8007d8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e037      	b.n	8007dfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d94:	461a      	mov	r2, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dbc:	f043 0318 	orr.w	r3, r3, #24
 8007dc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007dd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d10f      	bne.n	8007dfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de2:	461a      	mov	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007dfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr
 8007e08:	4f54300a 	.word	0x4f54300a

08007e0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4a12      	ldr	r2, [pc, #72]	; (8007e6c <USB_CoreReset+0x60>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d901      	bls.n	8007e2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e01b      	b.n	8007e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	daf2      	bge.n	8007e18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f043 0201 	orr.w	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <USB_CoreReset+0x60>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d901      	bls.n	8007e54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e006      	b.n	8007e62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d0f0      	beq.n	8007e42 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr
 8007e6c:	00030d40 	.word	0x00030d40

08007e70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007e74:	4904      	ldr	r1, [pc, #16]	; (8007e88 <MX_FATFS_Init+0x18>)
 8007e76:	4805      	ldr	r0, [pc, #20]	; (8007e8c <MX_FATFS_Init+0x1c>)
 8007e78:	f004 fbb6 	bl	800c5e8 <FATFS_LinkDriver>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <MX_FATFS_Init+0x20>)
 8007e82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200002d8 	.word	0x200002d8
 8007e8c:	0800d660 	.word	0x0800d660
 8007e90:	20000868 	.word	0x20000868

08007e94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr
	...

08007ea4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007eae:	f000 f8a9 	bl	8008004 <BSP_SD_IsDetected>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d001      	beq.n	8007ebc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e012      	b.n	8007ee2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007ebc:	480b      	ldr	r0, [pc, #44]	; (8007eec <BSP_SD_Init+0x48>)
 8007ebe:	f7fc fa33 	bl	8004328 <HAL_SD_Init>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ed0:	4806      	ldr	r0, [pc, #24]	; (8007eec <BSP_SD_Init+0x48>)
 8007ed2:	f7fd f9a7 	bl	8005224 <HAL_SD_ConfigWideBusOperation>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	2000056c 	.word	0x2000056c

08007ef0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	4806      	ldr	r0, [pc, #24]	; (8007f28 <BSP_SD_ReadBlocks+0x38>)
 8007f0e:	f7fc fa9b 	bl	8004448 <HAL_SD_ReadBlocks>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	2000056c 	.word	0x2000056c

08007f2c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	68f9      	ldr	r1, [r7, #12]
 8007f48:	4806      	ldr	r0, [pc, #24]	; (8007f64 <BSP_SD_WriteBlocks+0x38>)
 8007f4a:	f7fc fc77 	bl	800483c <HAL_SD_WriteBlocks>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	2000056c 	.word	0x2000056c

08007f68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007f6c:	4805      	ldr	r0, [pc, #20]	; (8007f84 <BSP_SD_GetCardState+0x1c>)
 8007f6e:	f7fd f9d5 	bl	800531c <HAL_SD_GetCardState>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	bf14      	ite	ne
 8007f78:	2301      	movne	r3, #1
 8007f7a:	2300      	moveq	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000056c 	.word	0x2000056c

08007f88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4803      	ldr	r0, [pc, #12]	; (8007fa0 <BSP_SD_GetCardInfo+0x18>)
 8007f94:	f7fd f91a 	bl	80051cc <HAL_SD_GetCardInfo>
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	2000056c 	.word	0x2000056c

08007fa4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007fac:	f000 f818 	bl	8007fe0 <BSP_SD_AbortCallback>
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007fc0:	f000 f814 	bl	8007fec <BSP_SD_WriteCpltCallback>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007fd4:	f000 f810 	bl	8007ff8 <BSP_SD_ReadCpltCallback>
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	af00      	add	r7, sp, #0

}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr

08007fec <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0

}
 8007ff0:	bf00      	nop
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0

}
 8007ffc:	bf00      	nop
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800800a:	2301      	movs	r3, #1
 800800c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800800e:	f000 f80b 	bl	8008028 <BSP_PlatformIsDetected>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008018:	2300      	movs	r3, #0
 800801a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	b2db      	uxtb	r3, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800802e:	2301      	movs	r3, #1
 8008030:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008032:	2104      	movs	r1, #4
 8008034:	4806      	ldr	r0, [pc, #24]	; (8008050 <BSP_PlatformIsDetected+0x28>)
 8008036:	f7fa fb5f 	bl	80026f8 <HAL_GPIO_ReadPin>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008040:	2300      	movs	r3, #0
 8008042:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008044:	79fb      	ldrb	r3, [r7, #7]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	40021800 	.word	0x40021800

08008054 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7c1b      	ldrb	r3, [r3, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d115      	bne.n	8008098 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800806c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008070:	2202      	movs	r2, #2
 8008072:	2181      	movs	r1, #129	; 0x81
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f005 f822 	bl	800d0be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008084:	2202      	movs	r2, #2
 8008086:	2101      	movs	r1, #1
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f005 f818 	bl	800d0be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008096:	e012      	b.n	80080be <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008098:	2340      	movs	r3, #64	; 0x40
 800809a:	2202      	movs	r2, #2
 800809c:	2181      	movs	r1, #129	; 0x81
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f005 f80d 	bl	800d0be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	2202      	movs	r2, #2
 80080ae:	2101      	movs	r1, #1
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f005 f804 	bl	800d0be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080be:	2308      	movs	r3, #8
 80080c0:	2203      	movs	r2, #3
 80080c2:	2182      	movs	r1, #130	; 0x82
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f004 fffa 	bl	800d0be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80080d4:	f005 f970 	bl	800d3b8 <malloc>
 80080d8:	4603      	mov	r3, r0
 80080da:	461a      	mov	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
 80080f0:	e026      	b.n	8008140 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	7c1b      	ldrb	r3, [r3, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008126:	2101      	movs	r1, #1
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f005 f8b8 	bl	800d29e <USBD_LL_PrepareReceive>
 800812e:	e007      	b.n	8008140 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008136:	2340      	movs	r3, #64	; 0x40
 8008138:	2101      	movs	r1, #1
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f005 f8af 	bl	800d29e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008140:	7bfb      	ldrb	r3, [r7, #15]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b084      	sub	sp, #16
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800815a:	2181      	movs	r1, #129	; 0x81
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f004 ffd4 	bl	800d10a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008168:	2101      	movs	r1, #1
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f004 ffcd 	bl	800d10a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008178:	2182      	movs	r1, #130	; 0x82
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f004 ffc5 	bl	800d10a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00e      	beq.n	80081ae <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a0:	4618      	mov	r0, r3
 80081a2:	f005 f911 	bl	800d3c8 <free>
    pdev->pClassData = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d039      	beq.n	8008256 <USBD_CDC_Setup+0x9e>
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d17c      	bne.n	80082e0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	88db      	ldrh	r3, [r3, #6]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d029      	beq.n	8008242 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b25b      	sxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da11      	bge.n	800821c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008204:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	88d2      	ldrh	r2, [r2, #6]
 800820a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800820c:	6939      	ldr	r1, [r7, #16]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	88db      	ldrh	r3, [r3, #6]
 8008212:	461a      	mov	r2, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fa03 	bl	8009620 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800821a:	e068      	b.n	80082ee <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	785a      	ldrb	r2, [r3, #1]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	88db      	ldrh	r3, [r3, #6]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008232:	6939      	ldr	r1, [r7, #16]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	461a      	mov	r2, r3
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fa1e 	bl	800967c <USBD_CtlPrepareRx>
      break;
 8008240:	e055      	b.n	80082ee <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	7850      	ldrb	r0, [r2, #1]
 800824e:	2200      	movs	r2, #0
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	4798      	blx	r3
      break;
 8008254:	e04b      	b.n	80082ee <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b0a      	cmp	r3, #10
 800825c:	d017      	beq.n	800828e <USBD_CDC_Setup+0xd6>
 800825e:	2b0b      	cmp	r3, #11
 8008260:	d029      	beq.n	80082b6 <USBD_CDC_Setup+0xfe>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d133      	bne.n	80082ce <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826c:	2b03      	cmp	r3, #3
 800826e:	d107      	bne.n	8008280 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	2202      	movs	r2, #2
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f9d1 	bl	8009620 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800827e:	e02e      	b.n	80082de <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 f962 	bl	800954c <USBD_CtlError>
            ret = USBD_FAIL;
 8008288:	2302      	movs	r3, #2
 800828a:	75fb      	strb	r3, [r7, #23]
          break;
 800828c:	e027      	b.n	80082de <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	2b03      	cmp	r3, #3
 8008296:	d107      	bne.n	80082a8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008298:	f107 030f 	add.w	r3, r7, #15
 800829c:	2201      	movs	r2, #1
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f9bd 	bl	8009620 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082a6:	e01a      	b.n	80082de <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f94e 	bl	800954c <USBD_CtlError>
            ret = USBD_FAIL;
 80082b0:	2302      	movs	r3, #2
 80082b2:	75fb      	strb	r3, [r7, #23]
          break;
 80082b4:	e013      	b.n	80082de <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d00d      	beq.n	80082dc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 f942 	bl	800954c <USBD_CtlError>
            ret = USBD_FAIL;
 80082c8:	2302      	movs	r3, #2
 80082ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082cc:	e006      	b.n	80082dc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f93b 	bl	800954c <USBD_CtlError>
          ret = USBD_FAIL;
 80082d6:	2302      	movs	r3, #2
 80082d8:	75fb      	strb	r3, [r7, #23]
          break;
 80082da:	e000      	b.n	80082de <USBD_CDC_Setup+0x126>
          break;
 80082dc:	bf00      	nop
      }
      break;
 80082de:	e006      	b.n	80082ee <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f932 	bl	800954c <USBD_CtlError>
      ret = USBD_FAIL;
 80082e8:	2302      	movs	r3, #2
 80082ea:	75fb      	strb	r3, [r7, #23]
      break;
 80082ec:	bf00      	nop
  }

  return ret;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008312:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d03a      	beq.n	8008394 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	331c      	adds	r3, #28
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d029      	beq.n	8008388 <USBD_CDC_DataIn+0x90>
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	331c      	adds	r3, #28
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	78f9      	ldrb	r1, [r7, #3]
 8008348:	68b8      	ldr	r0, [r7, #8]
 800834a:	460b      	mov	r3, r1
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	1a5b      	subs	r3, r3, r1
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4403      	add	r3, r0
 8008354:	3344      	adds	r3, #68	; 0x44
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	fbb2 f1f3 	udiv	r1, r2, r3
 800835c:	fb03 f301 	mul.w	r3, r3, r1
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d110      	bne.n	8008388 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	331c      	adds	r3, #28
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800837a:	78f9      	ldrb	r1, [r7, #3]
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f004 ff69 	bl	800d258 <USBD_LL_Transmit>
 8008386:	e003      	b.n	8008390 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e000      	b.n	8008396 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008394:	2302      	movs	r3, #2
  }
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f004 ff94 	bl	800d2e4 <USBD_LL_GetRxDataSize>
 80083bc:	4602      	mov	r2, r0
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083e2:	4611      	mov	r1, r2
 80083e4:	4798      	blx	r3

    return USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e000      	b.n	80083ec <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80083ea:	2302      	movs	r3, #2
  }
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008402:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800840a:	2b00      	cmp	r3, #0
 800840c:	d015      	beq.n	800843a <USBD_CDC_EP0_RxReady+0x46>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008414:	2bff      	cmp	r3, #255	; 0xff
 8008416:	d010      	beq.n	800843a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008426:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800842e:	b292      	uxth	r2, r2
 8008430:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	22ff      	movs	r2, #255	; 0xff
 8008436:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2243      	movs	r2, #67	; 0x43
 8008450:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008452:	4b03      	ldr	r3, [pc, #12]	; (8008460 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	20000094 	.word	0x20000094

08008464 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2243      	movs	r2, #67	; 0x43
 8008470:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000050 	.word	0x20000050

08008484 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2243      	movs	r2, #67	; 0x43
 8008490:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	bc80      	pop	{r7}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	200000d8 	.word	0x200000d8

080084a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	220a      	movs	r2, #10
 80084b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80084b2:	4b03      	ldr	r3, [pc, #12]	; (80084c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bc80      	pop	{r7}
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	2000000c 	.word	0x2000000c

080084c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80084ce:	2302      	movs	r3, #2
 80084d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800850e:	88fa      	ldrh	r2, [r7, #6]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008532:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008556:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d017      	beq.n	8008592 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7c1b      	ldrb	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d109      	bne.n	800857e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008574:	2101      	movs	r1, #1
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f004 fe91 	bl	800d29e <USBD_LL_PrepareReceive>
 800857c:	e007      	b.n	800858e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	2101      	movs	r1, #1
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f004 fe88 	bl	800d29e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	e000      	b.n	8008594 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008592:	2302      	movs	r3, #2
  }
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085b0:	2302      	movs	r3, #2
 80085b2:	e01a      	b.n	80085ea <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	79fa      	ldrb	r2, [r7, #7]
 80085e0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f004 fd06 	bl	800cff4 <USBD_LL_Init>

  return USBD_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d006      	beq.n	8008614 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	e001      	b.n	8008618 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008614:	2302      	movs	r3, #2
 8008616:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3714      	adds	r7, #20
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f004 fd2b 	bl	800d088 <USBD_LL_Start>

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr

08008650 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800865c:	2302      	movs	r3, #2
 800865e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	4611      	mov	r1, r2
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	4611      	mov	r1, r2
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3

  return USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 ff04 	bl	80094d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086e8:	f003 031f 	and.w	r3, r3, #31
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d00c      	beq.n	800870a <USBD_LL_SetupStage+0x56>
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d302      	bcc.n	80086fa <USBD_LL_SetupStage+0x46>
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d010      	beq.n	800871a <USBD_LL_SetupStage+0x66>
 80086f8:	e017      	b.n	800872a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa04 	bl	8008b10 <USBD_StdDevReq>
      break;
 8008708:	e01a      	b.n	8008740 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa66 	bl	8008be4 <USBD_StdItfReq>
      break;
 8008718:	e012      	b.n	8008740 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 faa4 	bl	8008c70 <USBD_StdEPReq>
      break;
 8008728:	e00a      	b.n	8008740 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008734:	b2db      	uxtb	r3, r3
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f004 fd05 	bl	800d148 <USBD_LL_StallEP>
      break;
 800873e:	bf00      	nop
  }

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	460b      	mov	r3, r1
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d14b      	bne.n	80087f6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008764:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800876c:	2b03      	cmp	r3, #3
 800876e:	d134      	bne.n	80087da <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	429a      	cmp	r2, r3
 800877a:	d919      	bls.n	80087b0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	1ad2      	subs	r2, r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008792:	429a      	cmp	r2, r3
 8008794:	d203      	bcs.n	800879e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800879a:	b29b      	uxth	r3, r3
 800879c:	e002      	b.n	80087a4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 ff85 	bl	80096b8 <USBD_CtlContinueRx>
 80087ae:	e038      	b.n	8008822 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d105      	bne.n	80087d2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 ff82 	bl	80096dc <USBD_CtlSendStatus>
 80087d8:	e023      	b.n	8008822 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087e0:	2b05      	cmp	r3, #5
 80087e2:	d11e      	bne.n	8008822 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80087ec:	2100      	movs	r1, #0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f004 fcaa 	bl	800d148 <USBD_LL_StallEP>
 80087f4:	e015      	b.n	8008822 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00d      	beq.n	800881e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008808:	2b03      	cmp	r3, #3
 800880a:	d108      	bne.n	800881e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	7afa      	ldrb	r2, [r7, #11]
 8008816:	4611      	mov	r1, r2
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	4798      	blx	r3
 800881c:	e001      	b.n	8008822 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800881e:	2302      	movs	r3, #2
 8008820:	e000      	b.n	8008824 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b086      	sub	sp, #24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	460b      	mov	r3, r1
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d17f      	bne.n	8008940 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3314      	adds	r3, #20
 8008844:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800884c:	2b02      	cmp	r3, #2
 800884e:	d15c      	bne.n	800890a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	429a      	cmp	r2, r3
 800885a:	d915      	bls.n	8008888 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	1ad2      	subs	r2, r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	b29b      	uxth	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 feef 	bl	8009658 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800887a:	2300      	movs	r3, #0
 800887c:	2200      	movs	r2, #0
 800887e:	2100      	movs	r1, #0
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f004 fd0c 	bl	800d29e <USBD_LL_PrepareReceive>
 8008886:	e04e      	b.n	8008926 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	6912      	ldr	r2, [r2, #16]
 8008890:	fbb3 f1f2 	udiv	r1, r3, r2
 8008894:	fb02 f201 	mul.w	r2, r2, r1
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d11c      	bne.n	80088d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	689a      	ldr	r2, [r3, #8]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d316      	bcc.n	80088d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d20f      	bcs.n	80088d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fecb 	bl	8009658 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ca:	2300      	movs	r3, #0
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f004 fce4 	bl	800d29e <USBD_LL_PrepareReceive>
 80088d6:	e026      	b.n	8008926 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00a      	beq.n	80088fa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d105      	bne.n	80088fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80088fa:	2180      	movs	r1, #128	; 0x80
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f004 fc23 	bl	800d148 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fefd 	bl	8009702 <USBD_CtlReceiveStatus>
 8008908:	e00d      	b.n	8008926 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008910:	2b04      	cmp	r3, #4
 8008912:	d004      	beq.n	800891e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800891e:	2180      	movs	r1, #128	; 0x80
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f004 fc11 	bl	800d148 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800892c:	2b01      	cmp	r3, #1
 800892e:	d11d      	bne.n	800896c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7ff fe83 	bl	800863c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800893e:	e015      	b.n	800896c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00d      	beq.n	8008968 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008952:	2b03      	cmp	r3, #3
 8008954:	d108      	bne.n	8008968 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	7afa      	ldrb	r2, [r7, #11]
 8008960:	4611      	mov	r1, r2
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	4798      	blx	r3
 8008966:	e001      	b.n	800896c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008968:	2302      	movs	r3, #2
 800896a:	e000      	b.n	800896e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800897e:	2340      	movs	r3, #64	; 0x40
 8008980:	2200      	movs	r2, #0
 8008982:	2100      	movs	r1, #0
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f004 fb9a 	bl	800d0be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2240      	movs	r2, #64	; 0x40
 8008996:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2200      	movs	r2, #0
 800899e:	2180      	movs	r1, #128	; 0x80
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f004 fb8c 	bl	800d0be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2240      	movs	r2, #64	; 0x40
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6852      	ldr	r2, [r2, #4]
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	4611      	mov	r1, r2
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	4798      	blx	r3
  }

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr

08008a16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2204      	movs	r2, #4
 8008a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr

08008a3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d105      	bne.n	8008a5c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr

08008a68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d10b      	bne.n	8008a92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr

08008acc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bc80      	pop	{r7}
 8008ade:	4770      	bx	lr

08008ae0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6852      	ldr	r2, [r2, #4]
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	4611      	mov	r1, r2
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3

  return USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	d004      	beq.n	8008b34 <USBD_StdDevReq+0x24>
 8008b2a:	2b40      	cmp	r3, #64	; 0x40
 8008b2c:	d002      	beq.n	8008b34 <USBD_StdDevReq+0x24>
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d008      	beq.n	8008b44 <USBD_StdDevReq+0x34>
 8008b32:	e04c      	b.n	8008bce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
      break;
 8008b42:	e049      	b.n	8008bd8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	2b09      	cmp	r3, #9
 8008b4a:	d83a      	bhi.n	8008bc2 <USBD_StdDevReq+0xb2>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <USBD_StdDevReq+0x44>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008ba5 	.word	0x08008ba5
 8008b58:	08008bb9 	.word	0x08008bb9
 8008b5c:	08008bc3 	.word	0x08008bc3
 8008b60:	08008baf 	.word	0x08008baf
 8008b64:	08008bc3 	.word	0x08008bc3
 8008b68:	08008b87 	.word	0x08008b87
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008bc3 	.word	0x08008bc3
 8008b74:	08008b9b 	.word	0x08008b9b
 8008b78:	08008b91 	.word	0x08008b91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f9d4 	bl	8008f2c <USBD_GetDescriptor>
          break;
 8008b84:	e022      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fb37 	bl	80091fc <USBD_SetAddress>
          break;
 8008b8e:	e01d      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fb74 	bl	8009280 <USBD_SetConfig>
          break;
 8008b98:	e018      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fbfd 	bl	800939c <USBD_GetConfig>
          break;
 8008ba2:	e013      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fc2c 	bl	8009404 <USBD_GetStatus>
          break;
 8008bac:	e00e      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fc5a 	bl	800946a <USBD_SetFeature>
          break;
 8008bb6:	e009      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fc69 	bl	8009492 <USBD_ClrFeature>
          break;
 8008bc0:	e004      	b.n	8008bcc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fcc1 	bl	800954c <USBD_CtlError>
          break;
 8008bca:	bf00      	nop
      }
      break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fcbb 	bl	800954c <USBD_CtlError>
      break;
 8008bd6:	bf00      	nop
  }

  return ret;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop

08008be4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d003      	beq.n	8008c06 <USBD_StdItfReq+0x22>
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d001      	beq.n	8008c06 <USBD_StdItfReq+0x22>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d12a      	bne.n	8008c5c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d81d      	bhi.n	8008c4e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	889b      	ldrh	r3, [r3, #4]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d813      	bhi.n	8008c44 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	4798      	blx	r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	88db      	ldrh	r3, [r3, #6]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d110      	bne.n	8008c58 <USBD_StdItfReq+0x74>
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10d      	bne.n	8008c58 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fd4d 	bl	80096dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c42:	e009      	b.n	8008c58 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc80 	bl	800954c <USBD_CtlError>
          break;
 8008c4c:	e004      	b.n	8008c58 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fc7b 	bl	800954c <USBD_CtlError>
          break;
 8008c56:	e000      	b.n	8008c5a <USBD_StdItfReq+0x76>
          break;
 8008c58:	bf00      	nop
      }
      break;
 8008c5a:	e004      	b.n	8008c66 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fc74 	bl	800954c <USBD_CtlError>
      break;
 8008c64:	bf00      	nop
  }

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	889b      	ldrh	r3, [r3, #4]
 8008c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d004      	beq.n	8008c9a <USBD_StdEPReq+0x2a>
 8008c90:	2b40      	cmp	r3, #64	; 0x40
 8008c92:	d002      	beq.n	8008c9a <USBD_StdEPReq+0x2a>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <USBD_StdEPReq+0x3a>
 8008c98:	e13d      	b.n	8008f16 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
      break;
 8008ca8:	e13a      	b.n	8008f20 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cb2:	2b20      	cmp	r3, #32
 8008cb4:	d10a      	bne.n	8008ccc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	4798      	blx	r3
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	e12a      	b.n	8008f22 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d03e      	beq.n	8008d52 <USBD_StdEPReq+0xe2>
 8008cd4:	2b03      	cmp	r3, #3
 8008cd6:	d002      	beq.n	8008cde <USBD_StdEPReq+0x6e>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d070      	beq.n	8008dbe <USBD_StdEPReq+0x14e>
 8008cdc:	e115      	b.n	8008f0a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d002      	beq.n	8008cee <USBD_StdEPReq+0x7e>
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d015      	beq.n	8008d18 <USBD_StdEPReq+0xa8>
 8008cec:	e02b      	b.n	8008d46 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00c      	beq.n	8008d0e <USBD_StdEPReq+0x9e>
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b80      	cmp	r3, #128	; 0x80
 8008cf8:	d009      	beq.n	8008d0e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f004 fa22 	bl	800d148 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d04:	2180      	movs	r1, #128	; 0x80
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f004 fa1e 	bl	800d148 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d0c:	e020      	b.n	8008d50 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fc1b 	bl	800954c <USBD_CtlError>
              break;
 8008d16:	e01b      	b.n	8008d50 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	885b      	ldrh	r3, [r3, #2]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10e      	bne.n	8008d3e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <USBD_StdEPReq+0xce>
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b80      	cmp	r3, #128	; 0x80
 8008d2a:	d008      	beq.n	8008d3e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	88db      	ldrh	r3, [r3, #6]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f004 fa05 	bl	800d148 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fccc 	bl	80096dc <USBD_CtlSendStatus>

              break;
 8008d44:	e004      	b.n	8008d50 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 fbff 	bl	800954c <USBD_CtlError>
              break;
 8008d4e:	bf00      	nop
          }
          break;
 8008d50:	e0e0      	b.n	8008f14 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d002      	beq.n	8008d62 <USBD_StdEPReq+0xf2>
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d015      	beq.n	8008d8c <USBD_StdEPReq+0x11c>
 8008d60:	e026      	b.n	8008db0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <USBD_StdEPReq+0x112>
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b80      	cmp	r3, #128	; 0x80
 8008d6c:	d009      	beq.n	8008d82 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f004 f9e8 	bl	800d148 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d78:	2180      	movs	r1, #128	; 0x80
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f004 f9e4 	bl	800d148 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d80:	e01c      	b.n	8008dbc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fbe1 	bl	800954c <USBD_CtlError>
              break;
 8008d8a:	e017      	b.n	8008dbc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	885b      	ldrh	r3, [r3, #2]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d112      	bne.n	8008dba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f004 f9ef 	bl	800d186 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fc97 	bl	80096dc <USBD_CtlSendStatus>
              }
              break;
 8008dae:	e004      	b.n	8008dba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fbca 	bl	800954c <USBD_CtlError>
              break;
 8008db8:	e000      	b.n	8008dbc <USBD_StdEPReq+0x14c>
              break;
 8008dba:	bf00      	nop
          }
          break;
 8008dbc:	e0aa      	b.n	8008f14 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d002      	beq.n	8008dce <USBD_StdEPReq+0x15e>
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d032      	beq.n	8008e32 <USBD_StdEPReq+0x1c2>
 8008dcc:	e097      	b.n	8008efe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d007      	beq.n	8008de4 <USBD_StdEPReq+0x174>
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	2b80      	cmp	r3, #128	; 0x80
 8008dd8:	d004      	beq.n	8008de4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fbb5 	bl	800954c <USBD_CtlError>
                break;
 8008de2:	e091      	b.n	8008f08 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da0b      	bge.n	8008e04 <USBD_StdEPReq+0x194>
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df2:	4613      	mov	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	3310      	adds	r3, #16
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	4413      	add	r3, r2
 8008e00:	3304      	adds	r3, #4
 8008e02:	e00b      	b.n	8008e1c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2202      	movs	r2, #2
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fbf8 	bl	8009620 <USBD_CtlSendData>
              break;
 8008e30:	e06a      	b.n	8008f08 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da11      	bge.n	8008e5e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d117      	bne.n	8008e84 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb78 	bl	800954c <USBD_CtlError>
                  break;
 8008e5c:	e054      	b.n	8008f08 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	f003 020f 	and.w	r2, r3, #15
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d104      	bne.n	8008e84 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb65 	bl	800954c <USBD_CtlError>
                  break;
 8008e82:	e041      	b.n	8008f08 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	da0b      	bge.n	8008ea4 <USBD_StdEPReq+0x234>
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	3310      	adds	r3, #16
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	e00b      	b.n	8008ebc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	4413      	add	r3, r2
 8008eba:	3304      	adds	r3, #4
 8008ebc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ebe:	7bbb      	ldrb	r3, [r7, #14]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <USBD_StdEPReq+0x25a>
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b80      	cmp	r3, #128	; 0x80
 8008ec8:	d103      	bne.n	8008ed2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	e00e      	b.n	8008ef0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f004 f974 	bl	800d1c4 <USBD_LL_IsStallEP>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e002      	b.n	8008ef0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fb92 	bl	8009620 <USBD_CtlSendData>
              break;
 8008efc:	e004      	b.n	8008f08 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fb23 	bl	800954c <USBD_CtlError>
              break;
 8008f06:	bf00      	nop
          }
          break;
 8008f08:	e004      	b.n	8008f14 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fb1d 	bl	800954c <USBD_CtlError>
          break;
 8008f12:	bf00      	nop
      }
      break;
 8008f14:	e004      	b.n	8008f20 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fb17 	bl	800954c <USBD_CtlError>
      break;
 8008f1e:	bf00      	nop
  }

  return ret;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	0a1b      	lsrs	r3, r3, #8
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	2b06      	cmp	r3, #6
 8008f4e:	f200 8128 	bhi.w	80091a2 <USBD_GetDescriptor+0x276>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <USBD_GetDescriptor+0x2c>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008f75 	.word	0x08008f75
 8008f5c:	08008f8d 	.word	0x08008f8d
 8008f60:	08008fcd 	.word	0x08008fcd
 8008f64:	080091a3 	.word	0x080091a3
 8008f68:	080091a3 	.word	0x080091a3
 8008f6c:	08009143 	.word	0x08009143
 8008f70:	0800916f 	.word	0x0800916f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7c12      	ldrb	r2, [r2, #16]
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
      break;
 8008f8a:	e112      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	7c1b      	ldrb	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10d      	bne.n	8008fb0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	f107 0208 	add.w	r2, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	2202      	movs	r2, #2
 8008fac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fae:	e100      	b.n	80091b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	f107 0208 	add.w	r2, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	701a      	strb	r2, [r3, #0]
      break;
 8008fca:	e0f2      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	885b      	ldrh	r3, [r3, #2]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b05      	cmp	r3, #5
 8008fd4:	f200 80ac 	bhi.w	8009130 <USBD_GetDescriptor+0x204>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <USBD_GetDescriptor+0xb4>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08008ff9 	.word	0x08008ff9
 8008fe4:	0800902d 	.word	0x0800902d
 8008fe8:	08009061 	.word	0x08009061
 8008fec:	08009095 	.word	0x08009095
 8008ff0:	080090c9 	.word	0x080090c9
 8008ff4:	080090fd 	.word	0x080090fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e091      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa94 	bl	800954c <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e089      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e077      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa7a 	bl	800954c <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e06f      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009082:	e05d      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa60 	bl	800954c <USBD_CtlError>
            err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
          break;
 8009092:	e055      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090b6:	e043      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa46 	bl	800954c <USBD_CtlError>
            err++;
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72fb      	strb	r3, [r7, #11]
          break;
 80090c6:	e03b      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	7c12      	ldrb	r2, [r2, #16]
 80090e0:	f107 0108 	add.w	r1, r7, #8
 80090e4:	4610      	mov	r0, r2
 80090e6:	4798      	blx	r3
 80090e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ea:	e029      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa2c 	bl	800954c <USBD_CtlError>
            err++;
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	3301      	adds	r3, #1
 80090f8:	72fb      	strb	r3, [r7, #11]
          break;
 80090fa:	e021      	b.n	8009140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00b      	beq.n	8009120 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	7c12      	ldrb	r2, [r2, #16]
 8009114:	f107 0108 	add.w	r1, r7, #8
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800911e:	e00f      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fa12 	bl	800954c <USBD_CtlError>
            err++;
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	3301      	adds	r3, #1
 800912c:	72fb      	strb	r3, [r7, #11]
          break;
 800912e:	e007      	b.n	8009140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa0a 	bl	800954c <USBD_CtlError>
          err++;
 8009138:	7afb      	ldrb	r3, [r7, #11]
 800913a:	3301      	adds	r3, #1
 800913c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800913e:	e038      	b.n	80091b2 <USBD_GetDescriptor+0x286>
 8009140:	e037      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7c1b      	ldrb	r3, [r3, #16]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009152:	f107 0208 	add.w	r2, r7, #8
 8009156:	4610      	mov	r0, r2
 8009158:	4798      	blx	r3
 800915a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800915c:	e029      	b.n	80091b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f9f3 	bl	800954c <USBD_CtlError>
        err++;
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	3301      	adds	r3, #1
 800916a:	72fb      	strb	r3, [r7, #11]
      break;
 800916c:	e021      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7c1b      	ldrb	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	f107 0208 	add.w	r2, r7, #8
 8009182:	4610      	mov	r0, r2
 8009184:	4798      	blx	r3
 8009186:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	2207      	movs	r2, #7
 800918e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009190:	e00f      	b.n	80091b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f9d9 	bl	800954c <USBD_CtlError>
        err++;
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	3301      	adds	r3, #1
 800919e:	72fb      	strb	r3, [r7, #11]
      break;
 80091a0:	e007      	b.n	80091b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9d1 	bl	800954c <USBD_CtlError>
      err++;
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	3301      	adds	r3, #1
 80091ae:	72fb      	strb	r3, [r7, #11]
      break;
 80091b0:	bf00      	nop
  }

  if (err != 0U)
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11c      	bne.n	80091f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091b8:	893b      	ldrh	r3, [r7, #8]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <USBD_GetDescriptor+0x2b6>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	88db      	ldrh	r3, [r3, #6]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00d      	beq.n	80091e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	88da      	ldrh	r2, [r3, #6]
 80091ca:	893b      	ldrh	r3, [r7, #8]
 80091cc:	4293      	cmp	r3, r2
 80091ce:	bf28      	it	cs
 80091d0:	4613      	movcs	r3, r2
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091d6:	893b      	ldrh	r3, [r7, #8]
 80091d8:	461a      	mov	r2, r3
 80091da:	68f9      	ldr	r1, [r7, #12]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fa1f 	bl	8009620 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa76 	bl	80096dc <USBD_CtlSendStatus>
 80091f0:	e000      	b.n	80091f4 <USBD_GetDescriptor+0x2c8>
    return;
 80091f2:	bf00      	nop
    }
  }
}
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop

080091fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	889b      	ldrh	r3, [r3, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d130      	bne.n	8009270 <USBD_SetAddress+0x74>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88db      	ldrh	r3, [r3, #6]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d12c      	bne.n	8009270 <USBD_SetAddress+0x74>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	885b      	ldrh	r3, [r3, #2]
 800921a:	2b7f      	cmp	r3, #127	; 0x7f
 800921c:	d828      	bhi.n	8009270 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	885b      	ldrh	r3, [r3, #2]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009228:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009230:	2b03      	cmp	r3, #3
 8009232:	d104      	bne.n	800923e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f988 	bl	800954c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923c:	e01c      	b.n	8009278 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7bfa      	ldrb	r2, [r7, #15]
 8009242:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f003 ffe5 	bl	800d21a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fa43 	bl	80096dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009264:	e008      	b.n	8009278 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926e:	e003      	b.n	8009278 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f96a 	bl	800954c <USBD_CtlError>
  }
}
 8009278:	bf00      	nop
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	885b      	ldrh	r3, [r3, #2]
 800928e:	b2da      	uxtb	r2, r3
 8009290:	4b41      	ldr	r3, [pc, #260]	; (8009398 <USBD_SetConfig+0x118>)
 8009292:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009294:	4b40      	ldr	r3, [pc, #256]	; (8009398 <USBD_SetConfig+0x118>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d904      	bls.n	80092a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f954 	bl	800954c <USBD_CtlError>
 80092a4:	e075      	b.n	8009392 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d002      	beq.n	80092b6 <USBD_SetConfig+0x36>
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d023      	beq.n	80092fc <USBD_SetConfig+0x7c>
 80092b4:	e062      	b.n	800937c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092b6:	4b38      	ldr	r3, [pc, #224]	; (8009398 <USBD_SetConfig+0x118>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d01a      	beq.n	80092f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80092be:	4b36      	ldr	r3, [pc, #216]	; (8009398 <USBD_SetConfig+0x118>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2203      	movs	r2, #3
 80092cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092d0:	4b31      	ldr	r3, [pc, #196]	; (8009398 <USBD_SetConfig+0x118>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff f9ba 	bl	8008650 <USBD_SetClassConfig>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d104      	bne.n	80092ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f931 	bl	800954c <USBD_CtlError>
            return;
 80092ea:	e052      	b.n	8009392 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9f5 	bl	80096dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092f2:	e04e      	b.n	8009392 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f9f1 	bl	80096dc <USBD_CtlSendStatus>
        break;
 80092fa:	e04a      	b.n	8009392 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80092fc:	4b26      	ldr	r3, [pc, #152]	; (8009398 <USBD_SetConfig+0x118>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d112      	bne.n	800932a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800930c:	4b22      	ldr	r3, [pc, #136]	; (8009398 <USBD_SetConfig+0x118>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009316:	4b20      	ldr	r3, [pc, #128]	; (8009398 <USBD_SetConfig+0x118>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff f9b6 	bl	800868e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9da 	bl	80096dc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009328:	e033      	b.n	8009392 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <USBD_SetConfig+0x118>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	429a      	cmp	r2, r3
 8009336:	d01d      	beq.n	8009374 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff f9a4 	bl	800868e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <USBD_SetConfig+0x118>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <USBD_SetConfig+0x118>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff f97a 	bl	8008650 <USBD_SetClassConfig>
 800935c:	4603      	mov	r3, r0
 800935e:	2b02      	cmp	r3, #2
 8009360:	d104      	bne.n	800936c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f8f1 	bl	800954c <USBD_CtlError>
            return;
 800936a:	e012      	b.n	8009392 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f9b5 	bl	80096dc <USBD_CtlSendStatus>
        break;
 8009372:	e00e      	b.n	8009392 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f9b1 	bl	80096dc <USBD_CtlSendStatus>
        break;
 800937a:	e00a      	b.n	8009392 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f8e4 	bl	800954c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <USBD_SetConfig+0x118>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7ff f97f 	bl	800868e <USBD_ClrClassConfig>
        break;
 8009390:	bf00      	nop
    }
  }
}
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20000200 	.word	0x20000200

0800939c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	88db      	ldrh	r3, [r3, #6]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d004      	beq.n	80093b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f8cb 	bl	800954c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093b6:	e021      	b.n	80093fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093be:	2b01      	cmp	r3, #1
 80093c0:	db17      	blt.n	80093f2 <USBD_GetConfig+0x56>
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	dd02      	ble.n	80093cc <USBD_GetConfig+0x30>
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d00b      	beq.n	80093e2 <USBD_GetConfig+0x46>
 80093ca:	e012      	b.n	80093f2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3308      	adds	r3, #8
 80093d6:	2201      	movs	r2, #1
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f920 	bl	8009620 <USBD_CtlSendData>
        break;
 80093e0:	e00c      	b.n	80093fc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3304      	adds	r3, #4
 80093e6:	2201      	movs	r2, #1
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f918 	bl	8009620 <USBD_CtlSendData>
        break;
 80093f0:	e004      	b.n	80093fc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8a9 	bl	800954c <USBD_CtlError>
        break;
 80093fa:	bf00      	nop
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009414:	3b01      	subs	r3, #1
 8009416:	2b02      	cmp	r3, #2
 8009418:	d81e      	bhi.n	8009458 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	88db      	ldrh	r3, [r3, #6]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d004      	beq.n	800942c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f891 	bl	800954c <USBD_CtlError>
        break;
 800942a:	e01a      	b.n	8009462 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d005      	beq.n	8009448 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f043 0202 	orr.w	r2, r3, #2
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	330c      	adds	r3, #12
 800944c:	2202      	movs	r2, #2
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f8e5 	bl	8009620 <USBD_CtlSendData>
      break;
 8009456:	e004      	b.n	8009462 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f876 	bl	800954c <USBD_CtlError>
      break;
 8009460:	bf00      	nop
  }
}
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	885b      	ldrh	r3, [r3, #2]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d106      	bne.n	800948a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f929 	bl	80096dc <USBD_CtlSendStatus>
  }
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a2:	3b01      	subs	r3, #1
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d80b      	bhi.n	80094c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	885b      	ldrh	r3, [r3, #2]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d10c      	bne.n	80094ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f90f 	bl	80096dc <USBD_CtlSendStatus>
      }
      break;
 80094be:	e004      	b.n	80094ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f842 	bl	800954c <USBD_CtlError>
      break;
 80094c8:	e000      	b.n	80094cc <USBD_ClrFeature+0x3a>
      break;
 80094ca:	bf00      	nop
  }
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781a      	ldrb	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	785a      	ldrb	r2, [r3, #1]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	3302      	adds	r3, #2
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	3303      	adds	r3, #3
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	021b      	lsls	r3, r3, #8
 8009500:	b29b      	uxth	r3, r3
 8009502:	4413      	add	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	3304      	adds	r3, #4
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	b29a      	uxth	r2, r3
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	3305      	adds	r3, #5
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b29b      	uxth	r3, r3
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	b29b      	uxth	r3, r3
 800951e:	4413      	add	r3, r2
 8009520:	b29a      	uxth	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	3306      	adds	r3, #6
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	b29a      	uxth	r2, r3
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	3307      	adds	r3, #7
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	b29b      	uxth	r3, r3
 800953a:	4413      	add	r3, r2
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	80da      	strh	r2, [r3, #6]

}
 8009542:	bf00      	nop
 8009544:	370c      	adds	r7, #12
 8009546:	46bd      	mov	sp, r7
 8009548:	bc80      	pop	{r7}
 800954a:	4770      	bx	lr

0800954c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009556:	2180      	movs	r1, #128	; 0x80
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f003 fdf5 	bl	800d148 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800955e:	2100      	movs	r1, #0
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f003 fdf1 	bl	800d148 <USBD_LL_StallEP>
}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d032      	beq.n	80095ea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f834 	bl	80095f2 <USBD_GetLen>
 800958a:	4603      	mov	r3, r0
 800958c:	3301      	adds	r3, #1
 800958e:	b29b      	uxth	r3, r3
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	75fa      	strb	r2, [r7, #23]
 800959e:	461a      	mov	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	4413      	add	r3, r2
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	7812      	ldrb	r2, [r2, #0]
 80095a8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	75fa      	strb	r2, [r7, #23]
 80095b0:	461a      	mov	r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	4413      	add	r3, r2
 80095b6:	2203      	movs	r2, #3
 80095b8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095ba:	e012      	b.n	80095e2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	60fa      	str	r2, [r7, #12]
 80095c2:	7dfa      	ldrb	r2, [r7, #23]
 80095c4:	1c51      	adds	r1, r2, #1
 80095c6:	75f9      	strb	r1, [r7, #23]
 80095c8:	4611      	mov	r1, r2
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	440a      	add	r2, r1
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	75fa      	strb	r2, [r7, #23]
 80095d8:	461a      	mov	r2, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4413      	add	r3, r2
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e8      	bne.n	80095bc <USBD_GetString+0x4e>
    }
  }
}
 80095ea:	bf00      	nop
 80095ec:	3718      	adds	r7, #24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80095fe:	e005      	b.n	800960c <USBD_GetLen+0x1a>
  {
    len++;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	3301      	adds	r3, #1
 8009604:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3301      	adds	r3, #1
 800960a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d1f5      	bne.n	8009600 <USBD_GetLen+0xe>
  }

  return len;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr

08009620 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	4613      	mov	r3, r2
 800962c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2202      	movs	r2, #2
 8009632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	2100      	movs	r1, #0
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f003 fe05 	bl	800d258 <USBD_LL_Transmit>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009666:	88fb      	ldrh	r3, [r7, #6]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	2100      	movs	r1, #0
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f003 fdf3 	bl	800d258 <USBD_LL_Transmit>

  return USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2203      	movs	r2, #3
 800968e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009692:	88fa      	ldrh	r2, [r7, #6]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800969a:	88fa      	ldrh	r2, [r7, #6]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096a2:	88fb      	ldrh	r3, [r7, #6]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	2100      	movs	r1, #0
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f003 fdf8 	bl	800d29e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	4613      	mov	r3, r2
 80096c4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c6:	88fb      	ldrh	r3, [r7, #6]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	2100      	movs	r1, #0
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f003 fde6 	bl	800d29e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2204      	movs	r2, #4
 80096e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096ec:	2300      	movs	r3, #0
 80096ee:	2200      	movs	r2, #0
 80096f0:	2100      	movs	r1, #0
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f003 fdb0 	bl	800d258 <USBD_LL_Transmit>

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2205      	movs	r2, #5
 800970e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009712:	2300      	movs	r3, #0
 8009714:	2200      	movs	r2, #0
 8009716:	2100      	movs	r1, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f003 fdc0 	bl	800d29e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	4a08      	ldr	r2, [pc, #32]	; (8009758 <disk_status+0x30>)
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	79fa      	ldrb	r2, [r7, #7]
 8009740:	4905      	ldr	r1, [pc, #20]	; (8009758 <disk_status+0x30>)
 8009742:	440a      	add	r2, r1
 8009744:	7a12      	ldrb	r2, [r2, #8]
 8009746:	4610      	mov	r0, r2
 8009748:	4798      	blx	r3
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000224 	.word	0x20000224

0800975c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	4a0d      	ldr	r2, [pc, #52]	; (80097a4 <disk_initialize+0x48>)
 800976e:	5cd3      	ldrb	r3, [r2, r3]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d111      	bne.n	8009798 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	4a0b      	ldr	r2, [pc, #44]	; (80097a4 <disk_initialize+0x48>)
 8009778:	2101      	movs	r1, #1
 800977a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	4a09      	ldr	r2, [pc, #36]	; (80097a4 <disk_initialize+0x48>)
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	79fa      	ldrb	r2, [r7, #7]
 800978a:	4906      	ldr	r1, [pc, #24]	; (80097a4 <disk_initialize+0x48>)
 800978c:	440a      	add	r2, r1
 800978e:	7a12      	ldrb	r2, [r2, #8]
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	20000224 	.word	0x20000224

080097a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097a8:	b590      	push	{r4, r7, lr}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	4a0a      	ldr	r2, [pc, #40]	; (80097e4 <disk_read+0x3c>)
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	689c      	ldr	r4, [r3, #8]
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	4a07      	ldr	r2, [pc, #28]	; (80097e4 <disk_read+0x3c>)
 80097c8:	4413      	add	r3, r2
 80097ca:	7a18      	ldrb	r0, [r3, #8]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	68b9      	ldr	r1, [r7, #8]
 80097d2:	47a0      	blx	r4
 80097d4:	4603      	mov	r3, r0
 80097d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd90      	pop	{r4, r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000224 	.word	0x20000224

080097e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097e8:	b590      	push	{r4, r7, lr}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	4a0a      	ldr	r2, [pc, #40]	; (8009824 <disk_write+0x3c>)
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	68dc      	ldr	r4, [r3, #12]
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	4a07      	ldr	r2, [pc, #28]	; (8009824 <disk_write+0x3c>)
 8009808:	4413      	add	r3, r2
 800980a:	7a18      	ldrb	r0, [r3, #8]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	47a0      	blx	r4
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]
  return res;
 8009818:	7dfb      	ldrb	r3, [r7, #23]
}
 800981a:	4618      	mov	r0, r3
 800981c:	371c      	adds	r7, #28
 800981e:	46bd      	mov	sp, r7
 8009820:	bd90      	pop	{r4, r7, pc}
 8009822:	bf00      	nop
 8009824:	20000224 	.word	0x20000224

08009828 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	603a      	str	r2, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
 8009834:	460b      	mov	r3, r1
 8009836:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	4a09      	ldr	r2, [pc, #36]	; (8009860 <disk_ioctl+0x38>)
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	79fa      	ldrb	r2, [r7, #7]
 8009846:	4906      	ldr	r1, [pc, #24]	; (8009860 <disk_ioctl+0x38>)
 8009848:	440a      	add	r2, r1
 800984a:	7a10      	ldrb	r0, [r2, #8]
 800984c:	79b9      	ldrb	r1, [r7, #6]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4798      	blx	r3
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
  return res;
 8009856:	7bfb      	ldrb	r3, [r7, #15]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000224 	.word	0x20000224

08009864 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 8009878:	e00c      	b.n	8009894 <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	3304      	adds	r3, #4
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	3304      	adds	r3, #4
 800988c:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3b04      	subs	r3, #4
 8009892:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b03      	cmp	r3, #3
 8009898:	d8ef      	bhi.n	800987a <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 800989a:	e007      	b.n	80098ac <mem_cpy+0x48>
		*d++ = *s++;
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	1c53      	adds	r3, r2, #1
 80098a0:	613b      	str	r3, [r7, #16]
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	1c59      	adds	r1, r3, #1
 80098a6:	6179      	str	r1, [r7, #20]
 80098a8:	7812      	ldrb	r2, [r2, #0]
 80098aa:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	1e5a      	subs	r2, r3, #1
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f2      	bne.n	800989c <mem_cpy+0x38>
}
 80098b6:	bf00      	nop
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bc80      	pop	{r7}
 80098be:	4770      	bx	lr

080098c0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80098d0:	e005      	b.n	80098de <mem_set+0x1e>
		*d++ = (BYTE)val;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	617a      	str	r2, [r7, #20]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	1e5a      	subs	r2, r3, #1
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f4      	bne.n	80098d2 <mem_set+0x12>
}
 80098e8:	bf00      	nop
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr

080098f2 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80098f2:	b480      	push	{r7}
 80098f4:	b089      	sub	sp, #36	; 0x24
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	61fb      	str	r3, [r7, #28]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800990a:	bf00      	nop
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1e5a      	subs	r2, r3, #1
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00d      	beq.n	8009932 <mem_cmp+0x40>
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	61fa      	str	r2, [r7, #28]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4619      	mov	r1, r3
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	61ba      	str	r2, [r7, #24]
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	1acb      	subs	r3, r1, r3
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0ec      	beq.n	800990c <mem_cmp+0x1a>
	return r;
 8009932:	697b      	ldr	r3, [r7, #20]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3724      	adds	r7, #36	; 0x24
 8009938:	46bd      	mov	sp, r7
 800993a:	bc80      	pop	{r7}
 800993c:	4770      	bx	lr

0800993e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009948:	e002      	b.n	8009950 <chk_chr+0x12>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3301      	adds	r3, #1
 800994e:	607b      	str	r3, [r7, #4]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <chk_chr+0x26>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	461a      	mov	r2, r3
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	4293      	cmp	r3, r2
 8009962:	d1f2      	bne.n	800994a <chk_chr+0xc>
	return *str;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	781b      	ldrb	r3, [r3, #0]
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr
	...

08009974 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800997e:	2300      	movs	r3, #0
 8009980:	60bb      	str	r3, [r7, #8]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	e038      	b.n	80099fa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009988:	492f      	ldr	r1, [pc, #188]	; (8009a48 <chk_lock+0xd4>)
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4613      	mov	r3, r2
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	4413      	add	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d029      	beq.n	80099f0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800999c:	492a      	ldr	r1, [pc, #168]	; (8009a48 <chk_lock+0xd4>)
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4613      	mov	r3, r2
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	440b      	add	r3, r1
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d11e      	bne.n	80099f4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80099b6:	4924      	ldr	r1, [pc, #144]	; (8009a48 <chk_lock+0xd4>)
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4613      	mov	r3, r2
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	440b      	add	r3, r1
 80099c4:	3304      	adds	r3, #4
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d110      	bne.n	80099f4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099d2:	491d      	ldr	r1, [pc, #116]	; (8009a48 <chk_lock+0xd4>)
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4613      	mov	r3, r2
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	3308      	adds	r3, #8
 80099e2:	881a      	ldrh	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d102      	bne.n	80099f4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099ee:	e007      	b.n	8009a00 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80099f0:	2301      	movs	r3, #1
 80099f2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3301      	adds	r3, #1
 80099f8:	60fb      	str	r3, [r7, #12]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d9c3      	bls.n	8009988 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d109      	bne.n	8009a1a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d102      	bne.n	8009a12 <chk_lock+0x9e>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d101      	bne.n	8009a16 <chk_lock+0xa2>
 8009a12:	2300      	movs	r3, #0
 8009a14:	e013      	b.n	8009a3e <chk_lock+0xca>
 8009a16:	2312      	movs	r3, #18
 8009a18:	e011      	b.n	8009a3e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10b      	bne.n	8009a38 <chk_lock+0xc4>
 8009a20:	4909      	ldr	r1, [pc, #36]	; (8009a48 <chk_lock+0xd4>)
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	4613      	mov	r3, r2
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	330a      	adds	r3, #10
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a36:	d101      	bne.n	8009a3c <chk_lock+0xc8>
 8009a38:	2310      	movs	r3, #16
 8009a3a:	e000      	b.n	8009a3e <chk_lock+0xca>
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bc80      	pop	{r7}
 8009a46:	4770      	bx	lr
 8009a48:	2000020c 	.word	0x2000020c

08009a4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a52:	2300      	movs	r3, #0
 8009a54:	607b      	str	r3, [r7, #4]
 8009a56:	e002      	b.n	8009a5e <enq_lock+0x12>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d809      	bhi.n	8009a78 <enq_lock+0x2c>
 8009a64:	490a      	ldr	r1, [pc, #40]	; (8009a90 <enq_lock+0x44>)
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1ef      	bne.n	8009a58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	bf14      	ite	ne
 8009a7e:	2301      	movne	r3, #1
 8009a80:	2300      	moveq	r3, #0
 8009a82:	b2db      	uxtb	r3, r3
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bc80      	pop	{r7}
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	2000020c 	.word	0x2000020c

08009a94 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e02b      	b.n	8009afc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009aa4:	4955      	ldr	r1, [pc, #340]	; (8009bfc <inc_lock+0x168>)
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d11b      	bne.n	8009af6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009abe:	494f      	ldr	r1, [pc, #316]	; (8009bfc <inc_lock+0x168>)
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	3304      	adds	r3, #4
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d10d      	bne.n	8009af6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009ada:	4948      	ldr	r1, [pc, #288]	; (8009bfc <inc_lock+0x168>)
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	440b      	add	r3, r1
 8009ae8:	3308      	adds	r3, #8
 8009aea:	881a      	ldrh	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d006      	beq.n	8009b04 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d9d0      	bls.n	8009aa4 <inc_lock+0x10>
 8009b02:	e000      	b.n	8009b06 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009b04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d145      	bne.n	8009b98 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]
 8009b10:	e002      	b.n	8009b18 <inc_lock+0x84>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d809      	bhi.n	8009b32 <inc_lock+0x9e>
 8009b1e:	4937      	ldr	r1, [pc, #220]	; (8009bfc <inc_lock+0x168>)
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4613      	mov	r3, r2
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	440b      	add	r3, r1
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1ef      	bne.n	8009b12 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d101      	bne.n	8009b3c <inc_lock+0xa8>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	e05a      	b.n	8009bf2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009b42:	482e      	ldr	r0, [pc, #184]	; (8009bfc <inc_lock+0x168>)
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4613      	mov	r3, r2
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4403      	add	r3, r0
 8009b50:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009b58:	4828      	ldr	r0, [pc, #160]	; (8009bfc <inc_lock+0x168>)
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4403      	add	r3, r0
 8009b66:	3304      	adds	r3, #4
 8009b68:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009b70:	4922      	ldr	r1, [pc, #136]	; (8009bfc <inc_lock+0x168>)
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	4613      	mov	r3, r2
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3308      	adds	r3, #8
 8009b80:	4602      	mov	r2, r0
 8009b82:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b84:	491d      	ldr	r1, [pc, #116]	; (8009bfc <inc_lock+0x168>)
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	4413      	add	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	440b      	add	r3, r1
 8009b92:	330a      	adds	r3, #10
 8009b94:	2200      	movs	r2, #0
 8009b96:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <inc_lock+0x124>
 8009b9e:	4917      	ldr	r1, [pc, #92]	; (8009bfc <inc_lock+0x168>)
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	330a      	adds	r3, #10
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <inc_lock+0x124>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e01c      	b.n	8009bf2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <inc_lock+0x142>
 8009bbe:	490f      	ldr	r1, [pc, #60]	; (8009bfc <inc_lock+0x168>)
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	330a      	adds	r3, #10
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b299      	uxth	r1, r3
 8009bd4:	e001      	b.n	8009bda <inc_lock+0x146>
 8009bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bda:	4808      	ldr	r0, [pc, #32]	; (8009bfc <inc_lock+0x168>)
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	4613      	mov	r3, r2
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4403      	add	r3, r0
 8009be8:	330a      	adds	r3, #10
 8009bea:	460a      	mov	r2, r1
 8009bec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3301      	adds	r3, #1
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr
 8009bfc:	2000020c 	.word	0x2000020c

08009c00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	607b      	str	r3, [r7, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d82e      	bhi.n	8009c72 <dec_lock+0x72>
		n = Files[i].ctr;
 8009c14:	491b      	ldr	r1, [pc, #108]	; (8009c84 <dec_lock+0x84>)
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	330a      	adds	r3, #10
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c28:	89fb      	ldrh	r3, [r7, #14]
 8009c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c2e:	d101      	bne.n	8009c34 <dec_lock+0x34>
 8009c30:	2300      	movs	r3, #0
 8009c32:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <dec_lock+0x40>
 8009c3a:	89fb      	ldrh	r3, [r7, #14]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c40:	4910      	ldr	r1, [pc, #64]	; (8009c84 <dec_lock+0x84>)
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	330a      	adds	r3, #10
 8009c50:	89fa      	ldrh	r2, [r7, #14]
 8009c52:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c54:	89fb      	ldrh	r3, [r7, #14]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d108      	bne.n	8009c6c <dec_lock+0x6c>
 8009c5a:	490a      	ldr	r1, [pc, #40]	; (8009c84 <dec_lock+0x84>)
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	737b      	strb	r3, [r7, #13]
 8009c70:	e001      	b.n	8009c76 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c72:	2302      	movs	r3, #2
 8009c74:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c76:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bc80      	pop	{r7}
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	2000020c 	.word	0x2000020c

08009c88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c90:	2300      	movs	r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e016      	b.n	8009cc4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c96:	490f      	ldr	r1, [pc, #60]	; (8009cd4 <clear_lock+0x4c>)
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d108      	bne.n	8009cbe <clear_lock+0x36>
 8009cac:	4909      	ldr	r1, [pc, #36]	; (8009cd4 <clear_lock+0x4c>)
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	440b      	add	r3, r1
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d9e5      	bls.n	8009c96 <clear_lock+0xe>
	}
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr
 8009cd4:	2000020c 	.word	0x2000020c

08009cd8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d038      	beq.n	8009d60 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009cf4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	2301      	movs	r3, #1
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	f7ff fd71 	bl	80097e8 <disk_write>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	73fb      	strb	r3, [r7, #15]
 8009d10:	e026      	b.n	8009d60 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	1ad2      	subs	r2, r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d218      	bcs.n	8009d60 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	e010      	b.n	8009d5a <sync_window+0x82>
					wsect += fs->fsize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d4a:	6879      	ldr	r1, [r7, #4]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	f7ff fd4a 	bl	80097e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	613b      	str	r3, [r7, #16]
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d8eb      	bhi.n	8009d38 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d01b      	beq.n	8009dbc <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff ffa7 	bl	8009cd8 <sync_window>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d113      	bne.n	8009dbc <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	f7ff fd02 	bl	80097a8 <disk_read>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dae:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff ff81 	bl	8009cd8 <sync_window>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d14e      	bne.n	8009e7e <sync_fs+0xb6>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d13c      	bne.n	8009e64 <sync_fs+0x9c>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d137      	bne.n	8009e64 <sync_fs+0x9c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7ff fd5f 	bl	80098c0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e08:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009e0c:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a1d      	ldr	r2, [pc, #116]	; (8009e88 <sync_fs+0xc0>)
 8009e12:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009e1a:	4a1c      	ldr	r2, [pc, #112]	; (8009e8c <sync_fs+0xc4>)
 8009e1c:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 8009e2a:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8009e38:	601a      	str	r2, [r3, #0]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009e56:	2301      	movs	r3, #1
 8009e58:	f7ff fcc6 	bl	80097e8 <disk_write>
			fs->fsi_flag = 0;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff fcda 	bl	8009828 <disk_ioctl>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <sync_fs+0xb6>
			res = FR_DISK_ERR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	41615252 	.word	0x41615252
 8009e8c:	61417272 	.word	0x61417272

08009e90 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	3b02      	subs	r3, #2
 8009e9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ea6:	3b02      	subs	r3, #2
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d301      	bcc.n	8009eb2 <clust2sect+0x22>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e00a      	b.n	8009ec8 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009eb8:	461a      	mov	r2, r3
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	fb03 f202 	mul.w	r2, r3, r2
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009ec6:	4413      	add	r3, r2
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d905      	bls.n	8009eee <get_fat+0x1c>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d302      	bcc.n	8009ef4 <get_fat+0x22>
		val = 1;	/* Internal error */
 8009eee:	2301      	movs	r3, #1
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e087      	b.n	800a004 <get_fat+0x132>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d043      	beq.n	8009f8c <get_fat+0xba>
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d059      	beq.n	8009fbc <get_fat+0xea>
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d171      	bne.n	8009ff0 <get_fat+0x11e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	0a5b      	lsrs	r3, r3, #9
 8009f24:	4413      	add	r3, r2
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ff1e 	bl	8009d6a <move_window>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d160      	bne.n	8009ff6 <get_fat+0x124>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	60fa      	str	r2, [r7, #12]
 8009f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	5cd3      	ldrb	r3, [r2, r3]
 8009f42:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	0a5b      	lsrs	r3, r3, #9
 8009f4e:	4413      	add	r3, r2
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff ff09 	bl	8009d6a <move_window>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d14d      	bne.n	8009ffa <get_fat+0x128>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	5cd3      	ldrb	r3, [r2, r3]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <get_fat+0xb0>
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	091b      	lsrs	r3, r3, #4
 8009f80:	e002      	b.n	8009f88 <get_fat+0xb6>
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f88:	617b      	str	r3, [r7, #20]
			break;
 8009f8a:	e03b      	b.n	800a004 <get_fat+0x132>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	0a1b      	lsrs	r3, r3, #8
 8009f96:	4413      	add	r3, r2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fee5 	bl	8009d6a <move_window>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d12b      	bne.n	8009ffe <get_fat+0x12c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	617b      	str	r3, [r7, #20]
			break;
 8009fba:	e023      	b.n	800a004 <get_fat+0x132>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	09db      	lsrs	r3, r3, #7
 8009fc6:	4413      	add	r3, r2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff fecd 	bl	8009d6a <move_window>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d115      	bne.n	800a002 <get_fat+0x130>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009fec:	617b      	str	r3, [r7, #20]
			break;
 8009fee:	e009      	b.n	800a004 <get_fat+0x132>

		default:
			val = 1;	/* Internal error */
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e006      	b.n	800a004 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ff6:	bf00      	nop
 8009ff8:	e004      	b.n	800a004 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009ffa:	bf00      	nop
 8009ffc:	e002      	b.n	800a004 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ffe:	bf00      	nop
 800a000:	e000      	b.n	800a004 <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a002:	bf00      	nop
		}
	}

	return val;
 800a004:	697b      	ldr	r3, [r7, #20]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b088      	sub	sp, #32
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	60b9      	str	r1, [r7, #8]
 800a018:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d905      	bls.n	800a02c <put_fat+0x1e>
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d302      	bcc.n	800a032 <put_fat+0x24>
		res = FR_INT_ERR;
 800a02c:	2302      	movs	r3, #2
 800a02e:	77fb      	strb	r3, [r7, #31]
 800a030:	e0c6      	b.n	800a1c0 <put_fat+0x1b2>

	} else {
		switch (fs->fs_type) {
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d073      	beq.n	800a124 <put_fat+0x116>
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	f000 8090 	beq.w	800a162 <put_fat+0x154>
 800a042:	2b01      	cmp	r3, #1
 800a044:	f040 80b2 	bne.w	800a1ac <put_fat+0x19e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4413      	add	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	0a5b      	lsrs	r3, r3, #9
 800a060:	4413      	add	r3, r2
 800a062:	4619      	mov	r1, r3
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff fe80 	bl	8009d6a <move_window>
 800a06a:	4603      	mov	r3, r0
 800a06c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a06e:	7ffb      	ldrb	r3, [r7, #31]
 800a070:	2b00      	cmp	r3, #0
 800a072:	f040 809e 	bne.w	800a1b2 <put_fat+0x1a4>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	617a      	str	r2, [r7, #20]
 800a07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	4413      	add	r3, r2
 800a084:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00d      	beq.n	800a0ac <put_fat+0x9e>
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	b25b      	sxtb	r3, r3
 800a096:	f003 030f 	and.w	r3, r3, #15
 800a09a:	b25a      	sxtb	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	011b      	lsls	r3, r3, #4
 800a0a2:	b25b      	sxtb	r3, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b25b      	sxtb	r3, r3
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	e001      	b.n	800a0b0 <put_fat+0xa2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	69ba      	ldr	r2, [r7, #24]
 800a0b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	0a5b      	lsrs	r3, r3, #9
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7ff fe4d 	bl	8009d6a <move_window>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0d4:	7ffb      	ldrb	r3, [r7, #31]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d16d      	bne.n	800a1b6 <put_fat+0x1a8>
			p = &fs->win.d8[bc % SS(fs)];
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <put_fat+0xea>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	091b      	lsrs	r3, r3, #4
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	e00e      	b.n	800a116 <put_fat+0x108>
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	f023 030f 	bic.w	r3, r3, #15
 800a102:	b25a      	sxtb	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	0a1b      	lsrs	r3, r3, #8
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	f003 030f 	and.w	r3, r3, #15
 800a10e:	b25b      	sxtb	r3, r3
 800a110:	4313      	orrs	r3, r2
 800a112:	b25b      	sxtb	r3, r3
 800a114:	b2db      	uxtb	r3, r3
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a122:	e04d      	b.n	800a1c0 <put_fat+0x1b2>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	0a1b      	lsrs	r3, r3, #8
 800a12e:	4413      	add	r3, r2
 800a130:	4619      	mov	r1, r3
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff fe19 	bl	8009d6a <move_window>
 800a138:	4603      	mov	r3, r0
 800a13a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a13c:	7ffb      	ldrb	r3, [r7, #31]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d13b      	bne.n	800a1ba <put_fat+0x1ac>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	4413      	add	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	b29a      	uxth	r2, r3
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	801a      	strh	r2, [r3, #0]
			fs->wflag = 1;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a160:	e02e      	b.n	800a1c0 <put_fat+0x1b2>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	09db      	lsrs	r3, r3, #7
 800a16c:	4413      	add	r3, r2
 800a16e:	4619      	mov	r1, r3
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7ff fdfa 	bl	8009d6a <move_window>
 800a176:	4603      	mov	r3, r0
 800a178:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a17a:	7ffb      	ldrb	r3, [r7, #31]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d11e      	bne.n	800a1be <put_fat+0x1b0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	4313      	orrs	r3, r2
 800a19a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	601a      	str	r2, [r3, #0]
			fs->wflag = 1;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a1aa:	e009      	b.n	800a1c0 <put_fat+0x1b2>

		default :
			res = FR_INT_ERR;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	77fb      	strb	r3, [r7, #31]
 800a1b0:	e006      	b.n	800a1c0 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a1b2:	bf00      	nop
 800a1b4:	e004      	b.n	800a1c0 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a1b6:	bf00      	nop
 800a1b8:	e002      	b.n	800a1c0 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a1ba:	bf00      	nop
 800a1bc:	e000      	b.n	800a1c0 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a1be:	bf00      	nop
		}
	}

	return res;
 800a1c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d905      	bls.n	800a1e6 <remove_chain+0x1c>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1e0:	683a      	ldr	r2, [r7, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d302      	bcc.n	800a1ec <remove_chain+0x22>
		res = FR_INT_ERR;
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	73fb      	strb	r3, [r7, #15]
 800a1ea:	e043      	b.n	800a274 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a1f0:	e036      	b.n	800a260 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff fe6c 	bl	8009ed2 <get_fat>
 800a1fa:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d035      	beq.n	800a26e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d102      	bne.n	800a20e <remove_chain+0x44>
 800a208:	2302      	movs	r3, #2
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e032      	b.n	800a274 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a214:	d102      	bne.n	800a21c <remove_chain+0x52>
 800a216:	2301      	movs	r3, #1
 800a218:	73fb      	strb	r3, [r7, #15]
 800a21a:	e02b      	b.n	800a274 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a21c:	2200      	movs	r2, #0
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff fef4 	bl	800a00e <put_fat>
 800a226:	4603      	mov	r3, r0
 800a228:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d120      	bne.n	800a272 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23a:	d00f      	beq.n	800a25c <remove_chain+0x92>
				fs->free_clust++;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a250:	f043 0301 	orr.w	r3, r3, #1
 800a254:	b2da      	uxtb	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d3c2      	bcc.n	800a1f2 <remove_chain+0x28>
 800a26c:	e002      	b.n	800a274 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a26e:	bf00      	nop
 800a270:	e000      	b.n	800a274 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a272:	bf00      	nop
		}
	}

	return res;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b086      	sub	sp, #24
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10f      	bne.n	800a2ae <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a294:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <create_chain+0x2a>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d31c      	bcc.n	800a2e2 <create_chain+0x64>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	613b      	str	r3, [r7, #16]
 800a2ac:	e019      	b.n	800a2e2 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fe0e 	bl	8009ed2 <get_fat>
 800a2b6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d801      	bhi.n	800a2c2 <create_chain+0x44>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e076      	b.n	800a3b0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c8:	d101      	bne.n	800a2ce <create_chain+0x50>
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	e070      	b.n	800a3b0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d201      	bcs.n	800a2de <create_chain+0x60>
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	e068      	b.n	800a3b0 <create_chain+0x132>
		scl = clst;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d307      	bcc.n	800a308 <create_chain+0x8a>
			ncl = 2;
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	429a      	cmp	r2, r3
 800a302:	d901      	bls.n	800a308 <create_chain+0x8a>
 800a304:	2300      	movs	r3, #0
 800a306:	e053      	b.n	800a3b0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a308:	6979      	ldr	r1, [r7, #20]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fde1 	bl	8009ed2 <get_fat>
 800a310:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00e      	beq.n	800a336 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31e:	d002      	beq.n	800a326 <create_chain+0xa8>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <create_chain+0xac>
			return cs;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	e042      	b.n	800a3b0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d1d9      	bne.n	800a2e6 <create_chain+0x68>
 800a332:	2300      	movs	r3, #0
 800a334:	e03c      	b.n	800a3b0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a336:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a338:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a33c:	6979      	ldr	r1, [r7, #20]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff fe65 	bl	800a00e <put_fat>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d109      	bne.n	800a362 <create_chain+0xe4>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d006      	beq.n	800a362 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff fe58 	bl	800a00e <put_fat>
 800a35e:	4603      	mov	r3, r0
 800a360:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11a      	bne.n	800a39e <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a37a:	d018      	beq.n	800a3ae <create_chain+0x130>
			fs->free_clust--;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a382:	1e5a      	subs	r2, r3, #1
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a390:	f043 0301 	orr.w	r3, r3, #1
 800a394:	b2da      	uxtb	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a39c:	e007      	b.n	800a3ae <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d102      	bne.n	800a3aa <create_chain+0x12c>
 800a3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a8:	e000      	b.n	800a3ac <create_chain+0x12e>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	0a5b      	lsrs	r3, r3, #9
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a3d6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a3da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	1d1a      	adds	r2, r3, #4
 800a3e4:	613a      	str	r2, [r7, #16]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d101      	bne.n	800a3f4 <clmt_clust+0x3c>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e010      	b.n	800a416 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d307      	bcc.n	800a40c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	3304      	adds	r3, #4
 800a408:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a40a:	e7e9      	b.n	800a3e0 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a40c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	4413      	add	r3, r2
}
 800a416:	4618      	mov	r0, r3
 800a418:	371c      	adds	r7, #28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bc80      	pop	{r7}
 800a41e:	4770      	bx	lr

0800a420 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a43a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d007      	beq.n	800a452 <dir_sdi+0x32>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a448:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d301      	bcc.n	800a456 <dir_sdi+0x36>
		return FR_INT_ERR;
 800a452:	2302      	movs	r3, #2
 800a454:	e074      	b.n	800a540 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10c      	bne.n	800a476 <dir_sdi+0x56>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a462:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a466:	2b03      	cmp	r3, #3
 800a468:	d105      	bne.n	800a476 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a470:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a474:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d111      	bne.n	800a4a0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a482:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a486:	461a      	mov	r2, r3
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d301      	bcc.n	800a492 <dir_sdi+0x72>
			return FR_INT_ERR;
 800a48e:	2302      	movs	r3, #2
 800a490:	e056      	b.n	800a540 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a498:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a49c:	613b      	str	r3, [r7, #16]
 800a49e:	e032      	b.n	800a506 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4a6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a4ae:	e01e      	b.n	800a4ee <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4b6:	6979      	ldr	r1, [r7, #20]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7ff fd0a 	bl	8009ed2 <get_fat>
 800a4be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c6:	d101      	bne.n	800a4cc <dir_sdi+0xac>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e039      	b.n	800a540 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d907      	bls.n	800a4e2 <dir_sdi+0xc2>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d301      	bcc.n	800a4e6 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e02c      	b.n	800a540 <dir_sdi+0x120>
			idx -= ic;
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d2dc      	bcs.n	800a4b0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4fc:	6979      	ldr	r1, [r7, #20]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fcc6 	bl	8009e90 <clust2sect>
 800a504:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <dir_sdi+0xf8>
 800a514:	2302      	movs	r3, #2
 800a516:	e013      	b.n	800a540 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	091a      	lsrs	r2, r3, #4
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	441a      	add	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a52c:	461a      	mov	r2, r3
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	f003 030f 	and.w	r3, r3, #15
 800a534:	015b      	lsls	r3, r3, #5
 800a536:	441a      	add	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a548:	b590      	push	{r4, r7, lr}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a558:	3301      	adds	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <dir_next+0x26>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <dir_next+0x2a>
		return FR_NO_FILE;
 800a56e:	2304      	movs	r3, #4
 800a570:	e0dd      	b.n	800a72e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f003 030f 	and.w	r3, r3, #15
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f040 80c6 	bne.w	800a70a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a59c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	f0c0 80b0 	bcc.w	800a70a <dir_next+0x1c2>
				return FR_NO_FILE;
 800a5aa:	2304      	movs	r3, #4
 800a5ac:	e0bf      	b.n	800a72e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	091b      	lsrs	r3, r3, #4
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a5b8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a5bc:	3a01      	subs	r2, #1
 800a5be:	4013      	ands	r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f040 80a2 	bne.w	800a70a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7ff fc7c 	bl	8009ed2 <get_fat>
 800a5da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d801      	bhi.n	800a5e6 <dir_next+0x9e>
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e0a3      	b.n	800a72e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ec:	d101      	bne.n	800a5f2 <dir_next+0xaa>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e09d      	b.n	800a72e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d374      	bcc.n	800a6ec <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <dir_next+0xc4>
 800a608:	2304      	movs	r3, #4
 800a60a:	e090      	b.n	800a72e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7ff fe2f 	bl	800a27e <create_chain>
 800a620:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <dir_next+0xe4>
 800a628:	2307      	movs	r3, #7
 800a62a:	e080      	b.n	800a72e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <dir_next+0xee>
 800a632:	2302      	movs	r3, #2
 800a634:	e07b      	b.n	800a72e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d101      	bne.n	800a642 <dir_next+0xfa>
 800a63e:	2301      	movs	r3, #1
 800a640:	e075      	b.n	800a72e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff fb45 	bl	8009cd8 <sync_window>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <dir_next+0x110>
 800a654:	2301      	movs	r3, #1
 800a656:	e06a      	b.n	800a72e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a65e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f7ff f92b 	bl	80098c0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800a676:	6979      	ldr	r1, [r7, #20]
 800a678:	4610      	mov	r0, r2
 800a67a:	f7ff fc09 	bl	8009e90 <clust2sect>
 800a67e:	4603      	mov	r3, r0
 800a680:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	e01b      	b.n	800a6c2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a690:	2201      	movs	r2, #1
 800a692:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fb1b 	bl	8009cd8 <sync_window>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <dir_next+0x164>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e040      	b.n	800a72e <dir_next+0x1e6>
						dp->fs->winsect++;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6b2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a6b6:	3201      	adds	r2, #1
 800a6b8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	613b      	str	r3, [r7, #16]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6c8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d3da      	bcc.n	800a68a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6da:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	1a8a      	subs	r2, r1, r2
 800a6e8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6fa:	6979      	ldr	r1, [r7, #20]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7ff fbc7 	bl	8009e90 <clust2sect>
 800a702:	4602      	mov	r2, r0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a71a:	461a      	mov	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	015b      	lsls	r3, r3, #5
 800a724:	441a      	add	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	bd90      	pop	{r4, r7, pc}

0800a736 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a740:	2100      	movs	r1, #0
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff fe6c 	bl	800a420 <dir_sdi>
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d131      	bne.n	800a7b6 <dir_alloc+0x80>
		n = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7ff fb00 	bl	8009d6a <move_window>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d11f      	bne.n	800a7b4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2be5      	cmp	r3, #229	; 0xe5
 800a77e:	d005      	beq.n	800a78c <dir_alloc+0x56>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d107      	bne.n	800a79c <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	3301      	adds	r3, #1
 800a790:	60bb      	str	r3, [r7, #8]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d102      	bne.n	800a7a0 <dir_alloc+0x6a>
 800a79a:	e00c      	b.n	800a7b6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a79c:	2300      	movs	r3, #0
 800a79e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fed0 	bl	800a548 <dir_next>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0d1      	beq.n	800a756 <dir_alloc+0x20>
 800a7b2:	e000      	b.n	800a7b6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800a7b4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	d101      	bne.n	800a7c0 <dir_alloc+0x8a>
 800a7bc:	2307      	movs	r3, #7
 800a7be:	73fb      	strb	r3, [r7, #15]
	return res;
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a7ca:	b480      	push	{r7}
 800a7cc:	b085      	sub	sp, #20
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	331a      	adds	r3, #26
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d106      	bne.n	800a7f4 <ld_clust+0x2a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	3314      	adds	r3, #20
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	041b      	lsls	r3, r3, #16
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

	return cl;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bc80      	pop	{r7}
 800a7fe:	4770      	bx	lr

0800a800 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	331a      	adds	r3, #26
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	b292      	uxth	r2, r2
 800a812:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	0c1a      	lsrs	r2, r3, #16
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3314      	adds	r3, #20
 800a81c:	b292      	uxth	r2, r2
 800a81e:	801a      	strh	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr
	...

0800a82c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a83e:	1e5a      	subs	r2, r3, #1
 800a840:	4613      	mov	r3, r2
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	4413      	add	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a84c:	2300      	movs	r3, #0
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	2301      	movs	r3, #1
 800a852:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a854:	4a24      	ldr	r2, [pc, #144]	; (800a8e8 <cmp_lfn+0xbc>)
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	4413      	add	r3, r2
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	461a      	mov	r2, r3
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	4413      	add	r3, r2
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a866:	89fb      	ldrh	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d019      	beq.n	800a8a0 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a86c:	89bb      	ldrh	r3, [r7, #12]
 800a86e:	4618      	mov	r0, r3
 800a870:	f002 f85a 	bl	800c928 <ff_wtoupper>
 800a874:	4603      	mov	r3, r0
 800a876:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2bfe      	cmp	r3, #254	; 0xfe
 800a87c:	d80e      	bhi.n	800a89c <cmp_lfn+0x70>
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	617a      	str	r2, [r7, #20]
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f002 f84b 	bl	800c928 <ff_wtoupper>
 800a892:	4603      	mov	r3, r0
 800a894:	461a      	mov	r2, r3
 800a896:	89fb      	ldrh	r3, [r7, #14]
 800a898:	4293      	cmp	r3, r2
 800a89a:	d008      	beq.n	800a8ae <cmp_lfn+0x82>
				return 0;				/* Not matched */
 800a89c:	2300      	movs	r3, #0
 800a89e:	e01f      	b.n	800a8e0 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a8a0:	89bb      	ldrh	r3, [r7, #12]
 800a8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d001      	beq.n	800a8ae <cmp_lfn+0x82>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e018      	b.n	800a8e0 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2b0c      	cmp	r3, #12
 800a8b8:	d9cc      	bls.n	800a854 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00b      	beq.n	800a8de <cmp_lfn+0xb2>
 800a8c6:	89fb      	ldrh	r3, [r7, #14]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d008      	beq.n	800a8de <cmp_lfn+0xb2>
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d001      	beq.n	800a8de <cmp_lfn+0xb2>
		return 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e000      	b.n	800a8e0 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 800a8de:	2301      	movs	r3, #1
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3718      	adds	r7, #24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	0800d650 	.word	0x0800d650

0800a8ec <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b089      	sub	sp, #36	; 0x24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	71fb      	strb	r3, [r7, #7]
 800a8fe:	4613      	mov	r3, r2
 800a900:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	330d      	adds	r3, #13
 800a906:	79ba      	ldrb	r2, [r7, #6]
 800a908:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	330b      	adds	r3, #11
 800a90e:	220f      	movs	r2, #15
 800a910:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	330c      	adds	r3, #12
 800a916:	2200      	movs	r2, #0
 800a918:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	331a      	adds	r3, #26
 800a91e:	2200      	movs	r2, #0
 800a920:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	1e5a      	subs	r2, r3, #1
 800a926:	4613      	mov	r3, r2
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	82fb      	strh	r3, [r7, #22]
 800a936:	2300      	movs	r3, #0
 800a938:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a93a:	8afb      	ldrh	r3, [r7, #22]
 800a93c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a940:	4293      	cmp	r3, r2
 800a942:	d007      	beq.n	800a954 <fit_lfn+0x68>
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	1c5a      	adds	r2, r3, #1
 800a948:	61fa      	str	r2, [r7, #28]
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	881b      	ldrh	r3, [r3, #0]
 800a952:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a954:	4a16      	ldr	r2, [pc, #88]	; (800a9b0 <fit_lfn+0xc4>)
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	4413      	add	r3, r2
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	4413      	add	r3, r2
 800a962:	8afa      	ldrh	r2, [r7, #22]
 800a964:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a966:	8afb      	ldrh	r3, [r7, #22]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <fit_lfn+0x86>
 800a96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a970:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	3301      	adds	r3, #1
 800a976:	61bb      	str	r3, [r7, #24]
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	2b0c      	cmp	r3, #12
 800a97c:	d9dd      	bls.n	800a93a <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a97e:	8afb      	ldrh	r3, [r7, #22]
 800a980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a984:	4293      	cmp	r3, r2
 800a986:	d006      	beq.n	800a996 <fit_lfn+0xaa>
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d103      	bne.n	800a99e <fit_lfn+0xb2>
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a99c:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	79fa      	ldrb	r2, [r7, #7]
 800a9a2:	701a      	strb	r2, [r3, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	3724      	adds	r7, #36	; 0x24
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bc80      	pop	{r7}
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	0800d650 	.word	0x0800d650

0800a9b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08c      	sub	sp, #48	; 0x30
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
 800a9c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a9c2:	220b      	movs	r2, #11
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7fe ff4c 	bl	8009864 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d92b      	bls.n	800aa2a <gen_numname+0x76>
		sr = seq;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a9d6:	e022      	b.n	800aa1e <gen_numname+0x6a>
			wc = *lfn++;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	1c9a      	adds	r2, r3, #2
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9e6:	e017      	b.n	800aa18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	005a      	lsls	r2, r3, #1
 800a9ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	4413      	add	r3, r2
 800a9f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a9f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9f8:	085b      	lsrs	r3, r3, #1
 800a9fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <gen_numname+0x5e>
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800aa0c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800aa10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800aa12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa14:	3301      	adds	r3, #1
 800aa16:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	d9e4      	bls.n	800a9e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1d8      	bne.n	800a9d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aa2a:	2307      	movs	r3, #7
 800aa2c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	3330      	adds	r3, #48	; 0x30
 800aa3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800aa3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa42:	2b39      	cmp	r3, #57	; 0x39
 800aa44:	d904      	bls.n	800aa50 <gen_numname+0x9c>
 800aa46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa4a:	3307      	adds	r3, #7
 800aa4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	1e5a      	subs	r2, r3, #1
 800aa54:	62ba      	str	r2, [r7, #40]	; 0x28
 800aa56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aa60:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	091b      	lsrs	r3, r3, #4
 800aa68:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1de      	bne.n	800aa2e <gen_numname+0x7a>
	ns[i] = '~';
 800aa70:	f107 0214 	add.w	r2, r7, #20
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	4413      	add	r3, r2
 800aa78:	227e      	movs	r2, #126	; 0x7e
 800aa7a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa80:	e016      	b.n	800aab0 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	4413      	add	r3, r2
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b80      	cmp	r3, #128	; 0x80
 800aa8c:	d90d      	bls.n	800aaaa <gen_numname+0xf6>
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	4413      	add	r3, r2
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	2bff      	cmp	r3, #255	; 0xff
 800aa98:	d007      	beq.n	800aaaa <gen_numname+0xf6>
			if (j == i - 1) break;
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d010      	beq.n	800aac6 <gen_numname+0x112>
			j++;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	3301      	adds	r3, #1
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
 800aab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d207      	bcs.n	800aac8 <gen_numname+0x114>
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	4413      	add	r3, r2
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b20      	cmp	r3, #32
 800aac2:	d1de      	bne.n	800aa82 <gen_numname+0xce>
 800aac4:	e000      	b.n	800aac8 <gen_numname+0x114>
			if (j == i - 1) break;
 800aac6:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	2b07      	cmp	r3, #7
 800aacc:	d808      	bhi.n	800aae0 <gen_numname+0x12c>
 800aace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	62ba      	str	r2, [r7, #40]	; 0x28
 800aad4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aad8:	4413      	add	r3, r2
 800aada:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aade:	e000      	b.n	800aae2 <gen_numname+0x12e>
 800aae0:	2120      	movs	r1, #32
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	627a      	str	r2, [r7, #36]	; 0x24
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	460a      	mov	r2, r1
 800aaee:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	2b07      	cmp	r3, #7
 800aaf4:	d9e8      	bls.n	800aac8 <gen_numname+0x114>
}
 800aaf6:	bf00      	nop
 800aaf8:	3730      	adds	r7, #48	; 0x30
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ab0a:	230b      	movs	r3, #11
 800ab0c:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	0852      	lsrs	r2, r2, #1
 800ab14:	01db      	lsls	r3, r3, #7
 800ab16:	4313      	orrs	r3, r2
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	1c59      	adds	r1, r3, #1
 800ab1e:	6079      	str	r1, [r7, #4]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	4413      	add	r3, r2
 800ab24:	73fb      	strb	r3, [r7, #15]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	60bb      	str	r3, [r7, #8]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1ed      	bne.n	800ab0e <sum_sfn+0x10>
	return sum;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bc80      	pop	{r7}
 800ab3c:	4770      	bx	lr

0800ab3e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b086      	sub	sp, #24
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab46:	2100      	movs	r1, #0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f7ff fc69 	bl	800a420 <dir_sdi>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <dir_find+0x1e>
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
 800ab5a:	e0ac      	b.n	800acb6 <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ab5c:	23ff      	movs	r3, #255	; 0xff
 800ab5e:	753b      	strb	r3, [r7, #20]
 800ab60:	7d3b      	ldrb	r3, [r7, #20]
 800ab62:	757b      	strb	r3, [r7, #21]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab6a:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f7ff f8f4 	bl	8009d6a <move_window>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f040 808e 	bne.w	800acaa <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab94:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab9c:	7dbb      	ldrb	r3, [r7, #22]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d102      	bne.n	800aba8 <dir_find+0x6a>
 800aba2:	2304      	movs	r3, #4
 800aba4:	75fb      	strb	r3, [r7, #23]
 800aba6:	e085      	b.n	800acb4 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	330b      	adds	r3, #11
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abb2:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800abb4:	7dbb      	ldrb	r3, [r7, #22]
 800abb6:	2be5      	cmp	r3, #229	; 0xe5
 800abb8:	d007      	beq.n	800abca <dir_find+0x8c>
 800abba:	7bfb      	ldrb	r3, [r7, #15]
 800abbc:	f003 0308 	and.w	r3, r3, #8
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00a      	beq.n	800abda <dir_find+0x9c>
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	2b0f      	cmp	r3, #15
 800abc8:	d007      	beq.n	800abda <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800abca:	23ff      	movs	r3, #255	; 0xff
 800abcc:	757b      	strb	r3, [r7, #21]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abd4:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800abd8:	e05c      	b.n	800ac94 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	2b0f      	cmp	r3, #15
 800abde:	d133      	bne.n	800ac48 <dir_find+0x10a>
				if (dp->lfn) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d054      	beq.n	800ac94 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800abea:	7dbb      	ldrb	r3, [r7, #22]
 800abec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00e      	beq.n	800ac12 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	7b5b      	ldrb	r3, [r3, #13]
 800abf8:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800abfa:	7dbb      	ldrb	r3, [r7, #22]
 800abfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac00:	75bb      	strb	r3, [r7, #22]
 800ac02:	7dbb      	ldrb	r3, [r7, #22]
 800ac04:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ac12:	7dba      	ldrb	r2, [r7, #22]
 800ac14:	7d7b      	ldrb	r3, [r7, #21]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d113      	bne.n	800ac42 <dir_find+0x104>
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	330d      	adds	r3, #13
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	7d3a      	ldrb	r2, [r7, #20]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d10d      	bne.n	800ac42 <dir_find+0x104>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ac2c:	6939      	ldr	r1, [r7, #16]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff fdfc 	bl	800a82c <cmp_lfn>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <dir_find+0x104>
 800ac3a:	7d7b      	ldrb	r3, [r7, #21]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	e000      	b.n	800ac44 <dir_find+0x106>
 800ac42:	23ff      	movs	r3, #255	; 0xff
 800ac44:	757b      	strb	r3, [r7, #21]
 800ac46:	e025      	b.n	800ac94 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ac48:	7d7b      	ldrb	r3, [r7, #21]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d107      	bne.n	800ac5e <dir_find+0x120>
 800ac4e:	6938      	ldr	r0, [r7, #16]
 800ac50:	f7ff ff55 	bl	800aafe <sum_sfn>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	7d3b      	ldrb	r3, [r7, #20]
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d027      	beq.n	800acae <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac64:	330b      	adds	r3, #11
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <dir_find+0x148>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac76:	220b      	movs	r2, #11
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6938      	ldr	r0, [r7, #16]
 800ac7c:	f7fe fe39 	bl	80098f2 <mem_cmp>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d015      	beq.n	800acb2 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800ac86:	23ff      	movs	r3, #255	; 0xff
 800ac88:	757b      	strb	r3, [r7, #21]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac90:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff fc56 	bl	800a548 <dir_next>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f43f af63 	beq.w	800ab6e <dir_find+0x30>
 800aca8:	e004      	b.n	800acb4 <dir_find+0x176>
		if (res != FR_OK) break;
 800acaa:	bf00      	nop
 800acac:	e002      	b.n	800acb4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800acae:	bf00      	nop
 800acb0:	e000      	b.n	800acb4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800acb2:	bf00      	nop

	return res;
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08c      	sub	sp, #48	; 0x30
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800acce:	623b      	str	r3, [r7, #32]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800acd6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800acd8:	f107 030c 	add.w	r3, r7, #12
 800acdc:	220c      	movs	r2, #12
 800acde:	6a39      	ldr	r1, [r7, #32]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fdbf 	bl	8009864 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d037      	beq.n	800ad60 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	330b      	adds	r3, #11
 800acf4:	2200      	movs	r2, #0
 800acf6:	701a      	strb	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 800ad00:	2301      	movs	r3, #1
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad04:	e013      	b.n	800ad2e <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800ad06:	f107 010c 	add.w	r1, r7, #12
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	69fa      	ldr	r2, [r7, #28]
 800ad0e:	6a38      	ldr	r0, [r7, #32]
 800ad10:	f7ff fe50 	bl	800a9b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff ff12 	bl	800ab3e <dir_find>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ad20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d106      	bne.n	800ad36 <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	2b63      	cmp	r3, #99	; 0x63
 800ad32:	d9e8      	bls.n	800ad06 <dir_register+0x46>
 800ad34:	e000      	b.n	800ad38 <dir_register+0x78>
			if (res != FR_OK) break;
 800ad36:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	2b64      	cmp	r3, #100	; 0x64
 800ad3c:	d101      	bne.n	800ad42 <dir_register+0x82>
 800ad3e:	2307      	movs	r3, #7
 800ad40:	e0c5      	b.n	800aece <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ad42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d002      	beq.n	800ad50 <dir_register+0x90>
 800ad4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad4e:	e0be      	b.n	800aece <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	330b      	adds	r3, #11
 800ad54:	7dfa      	ldrb	r2, [r7, #23]
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	69fa      	ldr	r2, [r7, #28]
 800ad5c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ad60:	7dfb      	ldrb	r3, [r7, #23]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d014      	beq.n	800ad94 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad6e:	e002      	b.n	800ad76 <dir_register+0xb6>
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	3301      	adds	r3, #1
 800ad74:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	69fa      	ldr	r2, [r7, #28]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1f5      	bne.n	800ad70 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	3319      	adds	r3, #25
 800ad88:	4a53      	ldr	r2, [pc, #332]	; (800aed8 <dir_register+0x218>)
 800ad8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8e:	089b      	lsrs	r3, r3, #2
 800ad90:	627b      	str	r3, [r7, #36]	; 0x24
 800ad92:	e001      	b.n	800ad98 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ad98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff fccb 	bl	800a736 <dir_alloc>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ada6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d153      	bne.n	800ae56 <dir_register+0x196>
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	3b01      	subs	r3, #1
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d04d      	beq.n	800ae56 <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800adc0:	461a      	mov	r2, r3
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f7ff fb29 	bl	800a420 <dir_sdi>
 800adce:	4603      	mov	r3, r0
 800add0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800add4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800add8:	2b00      	cmp	r3, #0
 800adda:	d13c      	bne.n	800ae56 <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7ff fe8b 	bl	800aafe <sum_sfn>
 800ade8:	4603      	mov	r3, r0
 800adea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fe ffb5 	bl	8009d6a <move_window>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ae06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d122      	bne.n	800ae54 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	7efb      	ldrb	r3, [r7, #27]
 800ae20:	f7ff fd64 	bl	800a8ec <fit_lfn>
				dp->fs->wflag = 1;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800ae30:	2100      	movs	r1, #0
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fb88 	bl	800a548 <dir_next>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ae3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d107      	bne.n	800ae56 <dir_register+0x196>
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1cc      	bne.n	800adec <dir_register+0x12c>
 800ae52:	e000      	b.n	800ae56 <dir_register+0x196>
				if (res != FR_OK) break;
 800ae54:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ae56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d135      	bne.n	800aeca <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe ff7c 	bl	8009d6a <move_window>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ae78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d124      	bne.n	800aeca <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae86:	2220      	movs	r2, #32
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe fd18 	bl	80098c0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae9c:	220b      	movs	r2, #11
 800ae9e:	4619      	mov	r1, r3
 800aea0:	f7fe fce0 	bl	8009864 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aeaa:	330b      	adds	r3, #11
 800aeac:	781a      	ldrb	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aeb4:	330c      	adds	r3, #12
 800aeb6:	f002 0218 	and.w	r2, r2, #24
 800aeba:	b2d2      	uxtb	r2, r2
 800aebc:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aec4:	2201      	movs	r2, #1
 800aec6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800aeca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3730      	adds	r7, #48	; 0x30
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	4ec4ec4f 	.word	0x4ec4ec4f

0800aedc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08a      	sub	sp, #40	; 0x28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	613b      	str	r3, [r7, #16]
 800aeec:	e002      	b.n	800aef4 <create_name+0x18>
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	3301      	adds	r3, #1
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b2f      	cmp	r3, #47	; 0x2f
 800aefa:	d0f8      	beq.n	800aeee <create_name+0x12>
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b5c      	cmp	r3, #92	; 0x5c
 800af02:	d0f4      	beq.n	800aeee <create_name+0x12>
	lfn = dp->lfn;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800af0a:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	61ba      	str	r2, [r7, #24]
 800af1a:	693a      	ldr	r2, [r7, #16]
 800af1c:	4413      	add	r3, r2
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800af22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af24:	2b1f      	cmp	r3, #31
 800af26:	d961      	bls.n	800afec <create_name+0x110>
 800af28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af2a:	2b2f      	cmp	r3, #47	; 0x2f
 800af2c:	d05e      	beq.n	800afec <create_name+0x110>
 800af2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af30:	2b5c      	cmp	r3, #92	; 0x5c
 800af32:	d05b      	beq.n	800afec <create_name+0x110>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2bfe      	cmp	r3, #254	; 0xfe
 800af38:	d901      	bls.n	800af3e <create_name+0x62>
			return FR_INVALID_NAME;
 800af3a:	2306      	movs	r3, #6
 800af3c:	e1cc      	b.n	800b2d8 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 800af3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af40:	b2db      	uxtb	r3, r3
 800af42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800af44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b80      	cmp	r3, #128	; 0x80
 800af4a:	d92d      	bls.n	800afa8 <create_name+0xcc>
 800af4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2bff      	cmp	r3, #255	; 0xff
 800af52:	d029      	beq.n	800afa8 <create_name+0xcc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	61ba      	str	r2, [r7, #24]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	4413      	add	r3, r2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800af64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af66:	021b      	lsls	r3, r3, #8
 800af68:	b29a      	uxth	r2, r3
 800af6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af6e:	b29b      	uxth	r3, r3
 800af70:	4413      	add	r3, r2
 800af72:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 800af74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d903      	bls.n	800af84 <create_name+0xa8>
 800af7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af80:	2b5a      	cmp	r3, #90	; 0x5a
 800af82:	d911      	bls.n	800afa8 <create_name+0xcc>
 800af84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af88:	2b60      	cmp	r3, #96	; 0x60
 800af8a:	d903      	bls.n	800af94 <create_name+0xb8>
 800af8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af90:	2b7a      	cmp	r3, #122	; 0x7a
 800af92:	d909      	bls.n	800afa8 <create_name+0xcc>
 800af94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af98:	2b80      	cmp	r3, #128	; 0x80
 800af9a:	d903      	bls.n	800afa4 <create_name+0xc8>
 800af9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afa0:	2bff      	cmp	r3, #255	; 0xff
 800afa2:	d101      	bne.n	800afa8 <create_name+0xcc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 800afa4:	2306      	movs	r3, #6
 800afa6:	e197      	b.n	800b2d8 <create_name+0x3fc>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800afa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afaa:	2101      	movs	r1, #1
 800afac:	4618      	mov	r0, r3
 800afae:	f001 fc5d 	bl	800c86c <ff_convert>
 800afb2:	4603      	mov	r3, r0
 800afb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800afb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d101      	bne.n	800afc0 <create_name+0xe4>
 800afbc:	2306      	movs	r3, #6
 800afbe:	e18b      	b.n	800b2d8 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800afc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc2:	2b7f      	cmp	r3, #127	; 0x7f
 800afc4:	d809      	bhi.n	800afda <create_name+0xfe>
 800afc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc8:	4619      	mov	r1, r3
 800afca:	489b      	ldr	r0, [pc, #620]	; (800b238 <create_name+0x35c>)
 800afcc:	f7fe fcb7 	bl	800993e <chk_chr>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <create_name+0xfe>
			return FR_INVALID_NAME;
 800afd6:	2306      	movs	r3, #6
 800afd8:	e17e      	b.n	800b2d8 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	617a      	str	r2, [r7, #20]
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	4413      	add	r3, r2
 800afe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800afe8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800afea:	e793      	b.n	800af14 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	441a      	add	r2, r3
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800aff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aff8:	2b1f      	cmp	r3, #31
 800affa:	d801      	bhi.n	800b000 <create_name+0x124>
 800affc:	2304      	movs	r3, #4
 800affe:	e000      	b.n	800b002 <create_name+0x126>
 800b000:	2300      	movs	r3, #0
 800b002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800b006:	e011      	b.n	800b02c <create_name+0x150>
		w = lfn[di - 1];
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b00e:	3b01      	subs	r3, #1
 800b010:	005b      	lsls	r3, r3, #1
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4413      	add	r3, r2
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b01a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b01c:	2b20      	cmp	r3, #32
 800b01e:	d002      	beq.n	800b026 <create_name+0x14a>
 800b020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b022:	2b2e      	cmp	r3, #46	; 0x2e
 800b024:	d106      	bne.n	800b034 <create_name+0x158>
		di--;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	3b01      	subs	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1ea      	bne.n	800b008 <create_name+0x12c>
 800b032:	e000      	b.n	800b036 <create_name+0x15a>
		if (w != ' ' && w != '.') break;
 800b034:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <create_name+0x164>
 800b03c:	2306      	movs	r3, #6
 800b03e:	e14b      	b.n	800b2d8 <create_name+0x3fc>

	lfn[di] = 0;						/* LFN is created */
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	2200      	movs	r2, #0
 800b04a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b052:	220b      	movs	r2, #11
 800b054:	2120      	movs	r1, #32
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fc32 	bl	80098c0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b05c:	2300      	movs	r3, #0
 800b05e:	61bb      	str	r3, [r7, #24]
 800b060:	e002      	b.n	800b068 <create_name+0x18c>
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	3301      	adds	r3, #1
 800b066:	61bb      	str	r3, [r7, #24]
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4413      	add	r3, r2
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	2b20      	cmp	r3, #32
 800b074:	d0f5      	beq.n	800b062 <create_name+0x186>
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4413      	add	r3, r2
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	2b2e      	cmp	r3, #46	; 0x2e
 800b082:	d0ee      	beq.n	800b062 <create_name+0x186>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d009      	beq.n	800b09e <create_name+0x1c2>
 800b08a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b08e:	f043 0303 	orr.w	r3, r3, #3
 800b092:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b096:	e002      	b.n	800b09e <create_name+0x1c2>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d009      	beq.n	800b0b8 <create_name+0x1dc>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b6:	d1ef      	bne.n	800b098 <create_name+0x1bc>

	b = i = 0; ni = 8;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	623b      	str	r3, [r7, #32]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b0c2:	2308      	movs	r3, #8
 800b0c4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	1c5a      	adds	r2, r3, #1
 800b0ca:	61ba      	str	r2, [r7, #24]
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80aa 	beq.w	800b232 <create_name+0x356>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b0de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e0:	2b20      	cmp	r3, #32
 800b0e2:	d006      	beq.n	800b0f2 <create_name+0x216>
 800b0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0e8:	d10a      	bne.n	800b100 <create_name+0x224>
 800b0ea:	69ba      	ldr	r2, [r7, #24]
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d006      	beq.n	800b100 <create_name+0x224>
			cf |= NS_LOSS | NS_LFN; continue;
 800b0f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0f6:	f043 0303 	orr.w	r3, r3, #3
 800b0fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0fe:	e097      	b.n	800b230 <create_name+0x354>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b100:	6a3a      	ldr	r2, [r7, #32]
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	429a      	cmp	r2, r3
 800b106:	d203      	bcs.n	800b110 <create_name+0x234>
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d123      	bne.n	800b158 <create_name+0x27c>
			if (ni == 11) {				/* Long extension */
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	2b0b      	cmp	r3, #11
 800b114:	d106      	bne.n	800b124 <create_name+0x248>
				cf |= NS_LOSS | NS_LFN; break;
 800b116:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b11a:	f043 0303 	orr.w	r3, r3, #3
 800b11e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b122:	e08e      	b.n	800b242 <create_name+0x366>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d005      	beq.n	800b138 <create_name+0x25c>
 800b12c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b130:	f043 0303 	orr.w	r3, r3, #3
 800b134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d87f      	bhi.n	800b240 <create_name+0x364>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	61bb      	str	r3, [r7, #24]
 800b144:	2308      	movs	r3, #8
 800b146:	623b      	str	r3, [r7, #32]
 800b148:	230b      	movs	r3, #11
 800b14a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b156:	e06b      	b.n	800b230 <create_name+0x354>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b15a:	2b7f      	cmp	r3, #127	; 0x7f
 800b15c:	d910      	bls.n	800b180 <create_name+0x2a4>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b160:	4618      	mov	r0, r3
 800b162:	f001 fbe1 	bl	800c928 <ff_wtoupper>
 800b166:	4603      	mov	r3, r0
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 fb7e 	bl	800c86c <ff_convert>
 800b170:	4603      	mov	r3, r0
 800b172:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b178:	f043 0302 	orr.w	r3, r3, #2
 800b17c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 800b180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b182:	2bff      	cmp	r3, #255	; 0xff
 800b184:	d91a      	bls.n	800b1bc <create_name+0x2e0>
			if (i >= ni - 1) {
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	3b01      	subs	r3, #1
 800b18a:	6a3a      	ldr	r2, [r7, #32]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d308      	bcc.n	800b1a2 <create_name+0x2c6>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b194:	f043 0303 	orr.w	r3, r3, #3
 800b198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	623b      	str	r3, [r7, #32]
 800b1a0:	e046      	b.n	800b230 <create_name+0x354>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b1a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1a4:	0a1b      	lsrs	r3, r3, #8
 800b1a6:	b298      	uxth	r0, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	1c59      	adds	r1, r3, #1
 800b1b2:	6239      	str	r1, [r7, #32]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	b2c2      	uxtb	r2, r0
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e02f      	b.n	800b21c <create_name+0x340>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d007      	beq.n	800b1d2 <create_name+0x2f6>
 800b1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	481d      	ldr	r0, [pc, #116]	; (800b23c <create_name+0x360>)
 800b1c8:	f7fe fbb9 	bl	800993e <chk_chr>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d008      	beq.n	800b1e4 <create_name+0x308>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b1d2:	235f      	movs	r3, #95	; 0x5f
 800b1d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b1d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1da:	f043 0303 	orr.w	r3, r3, #3
 800b1de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b1e2:	e01b      	b.n	800b21c <create_name+0x340>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b1e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e6:	2b40      	cmp	r3, #64	; 0x40
 800b1e8:	d909      	bls.n	800b1fe <create_name+0x322>
 800b1ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ec:	2b5a      	cmp	r3, #90	; 0x5a
 800b1ee:	d806      	bhi.n	800b1fe <create_name+0x322>
					b |= 2;
 800b1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1f4:	f043 0302 	orr.w	r3, r3, #2
 800b1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1fc:	e00e      	b.n	800b21c <create_name+0x340>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b1fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b200:	2b60      	cmp	r3, #96	; 0x60
 800b202:	d90b      	bls.n	800b21c <create_name+0x340>
 800b204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b206:	2b7a      	cmp	r3, #122	; 0x7a
 800b208:	d808      	bhi.n	800b21c <create_name+0x340>
						b |= 1; w -= 0x20;
 800b20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b20e:	f043 0301 	orr.w	r3, r3, #1
 800b212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b218:	3b20      	subs	r3, #32
 800b21a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	1c59      	adds	r1, r3, #1
 800b226:	6239      	str	r1, [r7, #32]
 800b228:	4413      	add	r3, r2
 800b22a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b22c:	b2d2      	uxtb	r2, r2
 800b22e:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b230:	e749      	b.n	800b0c6 <create_name+0x1ea>
		if (!w) break;					/* Break on end of the LFN */
 800b232:	bf00      	nop
 800b234:	e005      	b.n	800b242 <create_name+0x366>
 800b236:	bf00      	nop
 800b238:	0800d5a0 	.word	0x0800d5a0
 800b23c:	0800d5ac 	.word	0x0800d5ac
			if (si > di) break;			/* No extension */
 800b240:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2be5      	cmp	r3, #229	; 0xe5
 800b24c:	d104      	bne.n	800b258 <create_name+0x37c>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b254:	2205      	movs	r2, #5
 800b256:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	2b08      	cmp	r3, #8
 800b25c:	d104      	bne.n	800b268 <create_name+0x38c>
 800b25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b26c:	f003 030c 	and.w	r3, r3, #12
 800b270:	2b0c      	cmp	r3, #12
 800b272:	d005      	beq.n	800b280 <create_name+0x3a4>
 800b274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b278:	f003 0303 	and.w	r3, r3, #3
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d105      	bne.n	800b28c <create_name+0x3b0>
		cf |= NS_LFN;
 800b280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b28c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d117      	bne.n	800b2c8 <create_name+0x3ec>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b29c:	f003 0303 	and.w	r3, r3, #3
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d105      	bne.n	800b2b0 <create_name+0x3d4>
 800b2a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2a8:	f043 0310 	orr.w	r3, r3, #16
 800b2ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2b4:	f003 030c 	and.w	r3, r3, #12
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d105      	bne.n	800b2c8 <create_name+0x3ec>
 800b2bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b2c0:	f043 0308 	orr.w	r3, r3, #8
 800b2c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b2ce:	330b      	adds	r3, #11
 800b2d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b2d4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b2d6:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3728      	adds	r7, #40	; 0x28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b2f      	cmp	r3, #47	; 0x2f
 800b2f0:	d003      	beq.n	800b2fa <follow_path+0x1a>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2b5c      	cmp	r3, #92	; 0x5c
 800b2f8:	d102      	bne.n	800b300 <follow_path+0x20>
		path++;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b1f      	cmp	r3, #31
 800b30e:	d80a      	bhi.n	800b326 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800b310:	2100      	movs	r1, #0
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff f884 	bl	800a420 <dir_sdi>
 800b318:	4603      	mov	r3, r0
 800b31a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b324:	e045      	b.n	800b3b2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b326:	463b      	mov	r3, r7
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff fdd6 	bl	800aedc <create_name>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d136      	bne.n	800b3a8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff fbff 	bl	800ab3e <dir_find>
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b34a:	7adb      	ldrb	r3, [r3, #11]
 800b34c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b34e:	7bfb      	ldrb	r3, [r7, #15]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00a      	beq.n	800b36a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b354:	7bfb      	ldrb	r3, [r7, #15]
 800b356:	2b04      	cmp	r3, #4
 800b358:	d128      	bne.n	800b3ac <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	f003 0304 	and.w	r3, r3, #4
 800b360:	2b00      	cmp	r3, #0
 800b362:	d123      	bne.n	800b3ac <follow_path+0xcc>
 800b364:	2305      	movs	r3, #5
 800b366:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b368:	e020      	b.n	800b3ac <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b36a:	7bbb      	ldrb	r3, [r7, #14]
 800b36c:	f003 0304 	and.w	r3, r3, #4
 800b370:	2b00      	cmp	r3, #0
 800b372:	d11d      	bne.n	800b3b0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b37a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	330b      	adds	r3, #11
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f003 0310 	and.w	r3, r3, #16
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b38a:	2305      	movs	r3, #5
 800b38c:	73fb      	strb	r3, [r7, #15]
 800b38e:	e010      	b.n	800b3b2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b396:	68b9      	ldr	r1, [r7, #8]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff fa16 	bl	800a7ca <ld_clust>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b3a6:	e7be      	b.n	800b326 <follow_path+0x46>
			if (res != FR_OK) break;
 800b3a8:	bf00      	nop
 800b3aa:	e002      	b.n	800b3b2 <follow_path+0xd2>
				break;
 800b3ac:	bf00      	nop
 800b3ae:	e000      	b.n	800b3b2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b3b0:	bf00      	nop
		}
	}

	return res;
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b087      	sub	sp, #28
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d031      	beq.n	800b436 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	617b      	str	r3, [r7, #20]
 800b3d8:	e002      	b.n	800b3e0 <get_ldnumber+0x24>
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b1f      	cmp	r3, #31
 800b3e6:	d903      	bls.n	800b3f0 <get_ldnumber+0x34>
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b3a      	cmp	r3, #58	; 0x3a
 800b3ee:	d1f4      	bne.n	800b3da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b3a      	cmp	r3, #58	; 0x3a
 800b3f6:	d11c      	bne.n	800b432 <get_ldnumber+0x76>
			tp = *path;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	1c5a      	adds	r2, r3, #1
 800b402:	60fa      	str	r2, [r7, #12]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	3b30      	subs	r3, #48	; 0x30
 800b408:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b09      	cmp	r3, #9
 800b40e:	d80e      	bhi.n	800b42e <get_ldnumber+0x72>
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	429a      	cmp	r2, r3
 800b416:	d10a      	bne.n	800b42e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d107      	bne.n	800b42e <get_ldnumber+0x72>
					vol = (int)i;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	3301      	adds	r3, #1
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	e002      	b.n	800b438 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b432:	2300      	movs	r3, #0
 800b434:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b436:	693b      	ldr	r3, [r7, #16]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	371c      	adds	r7, #28
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bc80      	pop	{r7}
 800b440:	4770      	bx	lr
	...

0800b444 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f04f 32ff 	mov.w	r2, #4294967295
 800b45c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7fe fc81 	bl	8009d6a <move_window>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <check_fs+0x2e>
		return 3;
 800b46e:	2303      	movs	r3, #3
 800b470:	e01e      	b.n	800b4b0 <check_fs+0x6c>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800b47e:	4293      	cmp	r3, r2
 800b480:	d001      	beq.n	800b486 <check_fs+0x42>
		return 2;
 800b482:	2302      	movs	r3, #2
 800b484:	e014      	b.n	800b4b0 <check_fs+0x6c>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3336      	adds	r3, #54	; 0x36
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b490:	4a09      	ldr	r2, [pc, #36]	; (800b4b8 <check_fs+0x74>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d101      	bne.n	800b49a <check_fs+0x56>
		return 0;
 800b496:	2300      	movs	r3, #0
 800b498:	e00a      	b.n	800b4b0 <check_fs+0x6c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	3352      	adds	r3, #82	; 0x52
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b4a4:	4a04      	ldr	r2, [pc, #16]	; (800b4b8 <check_fs+0x74>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d101      	bne.n	800b4ae <check_fs+0x6a>
		return 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e000      	b.n	800b4b0 <check_fs+0x6c>

	return 1;
 800b4ae:	2301      	movs	r3, #1
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	00544146 	.word	0x00544146

0800b4bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b096      	sub	sp, #88	; 0x58
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b4d0:	68b8      	ldr	r0, [r7, #8]
 800b4d2:	f7ff ff73 	bl	800b3bc <get_ldnumber>
 800b4d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	da01      	bge.n	800b4e2 <find_volume+0x26>
 800b4de:	230b      	movs	r3, #11
 800b4e0:	e209      	b.n	800b8f6 <find_volume+0x43a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b4e2:	4a9e      	ldr	r2, [pc, #632]	; (800b75c <find_volume+0x2a0>)
 800b4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d101      	bne.n	800b4f6 <find_volume+0x3a>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	e1ff      	b.n	800b8f6 <find_volume+0x43a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4fa:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01b      	beq.n	800b53e <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe f90b 	bl	8009728 <disk_status>
 800b512:	4603      	mov	r3, r0
 800b514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10c      	bne.n	800b53e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b524:	79fb      	ldrb	r3, [r7, #7]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <find_volume+0x7e>
 800b52a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b536:	230a      	movs	r3, #10
 800b538:	e1dd      	b.n	800b8f6 <find_volume+0x43a>
			return FR_OK;				/* The file system object is valid */
 800b53a:	2300      	movs	r3, #0
 800b53c:	e1db      	b.n	800b8f6 <find_volume+0x43a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b540:	2200      	movs	r2, #0
 800b542:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe f900 	bl	800975c <disk_initialize>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b562:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b56e:	2303      	movs	r3, #3
 800b570:	e1c1      	b.n	800b8f6 <find_volume+0x43a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d007      	beq.n	800b588 <find_volume+0xcc>
 800b578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b584:	230a      	movs	r3, #10
 800b586:	e1b6      	b.n	800b8f6 <find_volume+0x43a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b58c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b58e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b590:	f7ff ff58 	bl	800b444 <check_fs>
 800b594:	4603      	mov	r3, r0
 800b596:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b59a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d146      	bne.n	800b630 <find_volume+0x174>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b5a6:	e01a      	b.n	800b5de <find_volume+0x122>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b5a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ac:	011b      	lsls	r3, r3, #4
 800b5ae:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b5b2:	4413      	add	r3, r2
 800b5b4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b8:	3304      	adds	r3, #4
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <find_volume+0x10c>
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	e000      	b.n	800b5ca <find_volume+0x10e>
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b5d2:	440b      	add	r3, r1
 800b5d4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b5d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5da:	3301      	adds	r3, #1
 800b5dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5e0:	2b03      	cmp	r3, #3
 800b5e2:	d9e1      	bls.n	800b5a8 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <find_volume+0x138>
 800b5ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b602:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <find_volume+0x15a>
 800b60a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b60c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b60e:	f7ff ff19 	bl	800b444 <check_fs>
 800b612:	4603      	mov	r3, r0
 800b614:	e000      	b.n	800b618 <find_volume+0x15c>
 800b616:	2302      	movs	r3, #2
 800b618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b61c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <find_volume+0x174>
 800b624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b626:	3301      	adds	r3, #1
 800b628:	643b      	str	r3, [r7, #64]	; 0x40
 800b62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d9e1      	bls.n	800b5f4 <find_volume+0x138>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b634:	2b03      	cmp	r3, #3
 800b636:	d101      	bne.n	800b63c <find_volume+0x180>
 800b638:	2301      	movs	r3, #1
 800b63a:	e15c      	b.n	800b8f6 <find_volume+0x43a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b63c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <find_volume+0x18c>
 800b644:	230d      	movs	r3, #13
 800b646:	e156      	b.n	800b8f6 <find_volume+0x43a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	330b      	adds	r3, #11
 800b64c:	881b      	ldrh	r3, [r3, #0]
 800b64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b652:	d001      	beq.n	800b658 <find_volume+0x19c>
		return FR_NO_FILESYSTEM;
 800b654:	230d      	movs	r3, #13
 800b656:	e14e      	b.n	800b8f6 <find_volume+0x43a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	3316      	adds	r3, #22
 800b65c:	881b      	ldrh	r3, [r3, #0]
 800b65e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d103      	bne.n	800b66e <find_volume+0x1b2>
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	3324      	adds	r3, #36	; 0x24
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b672:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	7c1a      	ldrb	r2, [r3, #16]
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b686:	2b01      	cmp	r3, #1
 800b688:	d006      	beq.n	800b698 <find_volume+0x1dc>
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b690:	2b02      	cmp	r3, #2
 800b692:	d001      	beq.n	800b698 <find_volume+0x1dc>
		return FR_NO_FILESYSTEM;
 800b694:	230d      	movs	r3, #13
 800b696:	e12e      	b.n	800b8f6 <find_volume+0x43a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b69e:	461a      	mov	r2, r3
 800b6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6aa:	7b5a      	ldrb	r2, [r3, #13]
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00a      	beq.n	800b6d2 <find_volume+0x216>
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <find_volume+0x21a>
		return FR_NO_FILESYSTEM;
 800b6d2:	230d      	movs	r3, #13
 800b6d4:	e10f      	b.n	800b8f6 <find_volume+0x43a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	3311      	adds	r3, #17
 800b6da:	881a      	ldrh	r2, [r3, #0]
 800b6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6de:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b6e8:	f003 030f 	and.w	r3, r3, #15
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <find_volume+0x23a>
		return FR_NO_FILESYSTEM;
 800b6f2:	230d      	movs	r3, #13
 800b6f4:	e0ff      	b.n	800b8f6 <find_volume+0x43a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f8:	3313      	adds	r3, #19
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b700:	2b00      	cmp	r3, #0
 800b702:	d103      	bne.n	800b70c <find_volume+0x250>
 800b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b706:	3320      	adds	r3, #32
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	330e      	adds	r3, #14
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b714:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <find_volume+0x262>
 800b71a:	230d      	movs	r3, #13
 800b71c:	e0eb      	b.n	800b8f6 <find_volume+0x43a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b71e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b722:	4413      	add	r3, r2
 800b724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b726:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b72a:	0912      	lsrs	r2, r2, #4
 800b72c:	b292      	uxth	r2, r2
 800b72e:	4413      	add	r3, r2
 800b730:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	429a      	cmp	r2, r3
 800b738:	d201      	bcs.n	800b73e <find_volume+0x282>
 800b73a:	230d      	movs	r3, #13
 800b73c:	e0db      	b.n	800b8f6 <find_volume+0x43a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b73e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b746:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b74a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b74e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	2b00      	cmp	r3, #0
 800b754:	d104      	bne.n	800b760 <find_volume+0x2a4>
 800b756:	230d      	movs	r3, #13
 800b758:	e0cd      	b.n	800b8f6 <find_volume+0x43a>
 800b75a:	bf00      	nop
 800b75c:	20000204 	.word	0x20000204
	fmt = FS_FAT12;
 800b760:	2301      	movs	r3, #1
 800b762:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d902      	bls.n	800b776 <find_volume+0x2ba>
 800b770:	2302      	movs	r3, #2
 800b772:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d902      	bls.n	800b786 <find_volume+0x2ca>
 800b780:	2303      	movs	r3, #3
 800b782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	1c9a      	adds	r2, r3, #2
 800b78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b794:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b798:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79c:	441a      	add	r2, r3
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800b7a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	441a      	add	r2, r3
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800b7b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d112      	bne.n	800b7de <find_volume+0x322>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ba:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <find_volume+0x30a>
 800b7c2:	230d      	movs	r3, #13
 800b7c4:	e097      	b.n	800b8f6 <find_volume+0x43a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c8:	332c      	adds	r3, #44	; 0x2c
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	647b      	str	r3, [r7, #68]	; 0x44
 800b7dc:	e025      	b.n	800b82a <find_volume+0x36e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <find_volume+0x330>
 800b7e8:	230d      	movs	r3, #13
 800b7ea:	e084      	b.n	800b8f6 <find_volume+0x43a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f4:	441a      	add	r2, r3
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b800:	2b02      	cmp	r3, #2
 800b802:	d104      	bne.n	800b80e <find_volume+0x352>
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	e00c      	b.n	800b828 <find_volume+0x36c>
 800b80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b810:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b814:	4613      	mov	r3, r2
 800b816:	005b      	lsls	r3, r3, #1
 800b818:	4413      	add	r3, r2
 800b81a:	085a      	lsrs	r2, r3, #1
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b822:	f003 0301 	and.w	r3, r3, #1
 800b826:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b828:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b82c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b832:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b836:	0a5b      	lsrs	r3, r3, #9
 800b838:	429a      	cmp	r2, r3
 800b83a:	d201      	bcs.n	800b840 <find_volume+0x384>
		return FR_NO_FILESYSTEM;
 800b83c:	230d      	movs	r3, #13
 800b83e:	e05a      	b.n	800b8f6 <find_volume+0x43a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b842:	f04f 32ff 	mov.w	r2, #4294967295
 800b846:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b858:	2280      	movs	r2, #128	; 0x80
 800b85a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b85e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b862:	2b03      	cmp	r3, #3
 800b864:	d133      	bne.n	800b8ce <find_volume+0x412>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b868:	3330      	adds	r3, #48	; 0x30
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d12e      	bne.n	800b8ce <find_volume+0x412>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b872:	3301      	adds	r3, #1
 800b874:	4619      	mov	r1, r3
 800b876:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b878:	f7fe fa77 	bl	8009d6a <move_window>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d125      	bne.n	800b8ce <find_volume+0x412>
	{
		fs->fsi_flag = 0;
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	2200      	movs	r2, #0
 800b886:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800b896:	4293      	cmp	r3, r2
 800b898:	d119      	bne.n	800b8ce <find_volume+0x412>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a18      	ldr	r2, [pc, #96]	; (800b900 <find_volume+0x444>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d114      	bne.n	800b8ce <find_volume+0x412>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a15      	ldr	r2, [pc, #84]	; (800b904 <find_volume+0x448>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d10d      	bne.n	800b8ce <find_volume+0x412>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b8d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <find_volume+0x44c>)
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	b29a      	uxth	r2, r3
 800b8e0:	4b09      	ldr	r3, [pc, #36]	; (800b908 <find_volume+0x44c>)
 800b8e2:	801a      	strh	r2, [r3, #0]
 800b8e4:	4b08      	ldr	r3, [pc, #32]	; (800b908 <find_volume+0x44c>)
 800b8e6:	881a      	ldrh	r2, [r3, #0]
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b8ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8f0:	f7fe f9ca 	bl	8009c88 <clear_lock>
#endif

	return FR_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3758      	adds	r7, #88	; 0x58
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	41615252 	.word	0x41615252
 800b904:	61417272 	.word	0x61417272
 800b908:	20000208 	.word	0x20000208

0800b90c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d022      	beq.n	800b964 <validate+0x58>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01d      	beq.n	800b964 <validate+0x58>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b92e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b932:	2b00      	cmp	r3, #0
 800b934:	d016      	beq.n	800b964 <validate+0x58>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b93c:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800b946:	429a      	cmp	r2, r3
 800b948:	d10c      	bne.n	800b964 <validate+0x58>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b950:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b954:	4618      	mov	r0, r3
 800b956:	f7fd fee7 	bl	8009728 <disk_status>
 800b95a:	4603      	mov	r3, r0
 800b95c:	f003 0301 	and.w	r3, r3, #1
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b964:	2309      	movs	r3, #9
 800b966:	e000      	b.n	800b96a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
	...

0800b974 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b986:	f107 0310 	add.w	r3, r7, #16
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff fd16 	bl	800b3bc <get_ldnumber>
 800b990:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	2b00      	cmp	r3, #0
 800b996:	da01      	bge.n	800b99c <f_mount+0x28>
 800b998:	230b      	movs	r3, #11
 800b99a:	e02d      	b.n	800b9f8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b99c:	4a18      	ldr	r2, [pc, #96]	; (800ba00 <f_mount+0x8c>)
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d006      	beq.n	800b9ba <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800b9ac:	69b8      	ldr	r0, [r7, #24]
 800b9ae:	f7fe f96b 	bl	8009c88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	490d      	ldr	r1, [pc, #52]	; (800ba00 <f_mount+0x8c>)
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <f_mount+0x6a>
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d001      	beq.n	800b9e2 <f_mount+0x6e>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e00a      	b.n	800b9f8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b9e2:	f107 0108 	add.w	r1, r7, #8
 800b9e6:	f107 030c 	add.w	r3, r7, #12
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7ff fd65 	bl	800b4bc <find_volume>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b9f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3720      	adds	r7, #32
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	20000204 	.word	0x20000204

0800ba04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	f107 030c 	add.w	r3, r7, #12
 800ba10:	6018      	str	r0, [r3, #0]
 800ba12:	f107 0308 	add.w	r3, r7, #8
 800ba16:	6019      	str	r1, [r3, #0]
 800ba18:	1dfb      	adds	r3, r7, #7
 800ba1a:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ba1c:	f107 030c 	add.w	r3, r7, #12
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <f_open+0x26>
 800ba26:	2309      	movs	r3, #9
 800ba28:	e1cb      	b.n	800bdc2 <f_open+0x3be>
	fp->fs = 0;			/* Clear file object */
 800ba2a:	f107 030c 	add.w	r3, r7, #12
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800ba36:	1dfb      	adds	r3, r7, #7
 800ba38:	1dfa      	adds	r2, r7, #7
 800ba3a:	7812      	ldrb	r2, [r2, #0]
 800ba3c:	f002 021f 	and.w	r2, r2, #31
 800ba40:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800ba42:	1dfb      	adds	r3, r7, #7
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f023 0301 	bic.w	r3, r3, #1
 800ba4a:	b2da      	uxtb	r2, r3
 800ba4c:	f107 0108 	add.w	r1, r7, #8
 800ba50:	f107 031c 	add.w	r3, r7, #28
 800ba54:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7ff fd2f 	bl	800b4bc <find_volume>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ba64:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f040 81a8 	bne.w	800bdbe <f_open+0x3ba>
		INIT_BUF(dj);
 800ba6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ba72:	f000 ff87 	bl	800c984 <ff_memalloc>
 800ba76:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800ba7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <f_open+0x82>
 800ba82:	2311      	movs	r3, #17
 800ba84:	e19d      	b.n	800bdc2 <f_open+0x3be>
 800ba86:	f107 031c 	add.w	r3, r7, #28
 800ba8a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800ba8e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800ba92:	f107 031c 	add.w	r3, r7, #28
 800ba96:	f107 0210 	add.w	r2, r7, #16
 800ba9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800ba9e:	f107 0308 	add.w	r3, r7, #8
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	f107 031c 	add.w	r3, r7, #28
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc18 	bl	800b2e0 <follow_path>
 800bab0:	4603      	mov	r3, r0
 800bab2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 800bab6:	f107 031c 	add.w	r3, r7, #28
 800baba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800babe:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bac2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d11a      	bne.n	800bb00 <f_open+0xfc>
			if (!dir)	/* Default directory itself */
 800baca:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d103      	bne.n	800bada <f_open+0xd6>
				res = FR_INVALID_NAME;
 800bad2:	2306      	movs	r3, #6
 800bad4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bad8:	e012      	b.n	800bb00 <f_open+0xfc>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bada:	1dfb      	adds	r3, r7, #7
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	f023 0301 	bic.w	r3, r3, #1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bf14      	ite	ne
 800bae6:	2301      	movne	r3, #1
 800bae8:	2300      	moveq	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	461a      	mov	r2, r3
 800baee:	f107 031c 	add.w	r3, r7, #28
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fd ff3d 	bl	8009974 <chk_lock>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bb00:	1dfb      	adds	r3, r7, #7
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	f003 031c 	and.w	r3, r3, #28
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f000 80a1 	beq.w	800bc50 <f_open+0x24c>
			if (res != FR_OK) {					/* No file, create new */
 800bb0e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d01f      	beq.n	800bb56 <f_open+0x152>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800bb16:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d10e      	bne.n	800bb3c <f_open+0x138>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bb1e:	f7fd ff95 	bl	8009a4c <enq_lock>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <f_open+0x132>
 800bb28:	f107 031c 	add.w	r3, r7, #28
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff f8c7 	bl	800acc0 <dir_register>
 800bb32:	4603      	mov	r3, r0
 800bb34:	e000      	b.n	800bb38 <f_open+0x134>
 800bb36:	2312      	movs	r3, #18
 800bb38:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bb3c:	1dfb      	adds	r3, r7, #7
 800bb3e:	1dfa      	adds	r2, r7, #7
 800bb40:	7812      	ldrb	r2, [r2, #0]
 800bb42:	f042 0208 	orr.w	r2, r2, #8
 800bb46:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800bb48:	f107 031c 	add.w	r3, r7, #28
 800bb4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb50:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800bb54:	e014      	b.n	800bb80 <f_open+0x17c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bb56:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bb5a:	330b      	adds	r3, #11
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	f003 0311 	and.w	r3, r3, #17
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <f_open+0x16a>
					res = FR_DENIED;
 800bb66:	2307      	movs	r3, #7
 800bb68:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bb6c:	e008      	b.n	800bb80 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800bb6e:	1dfb      	adds	r3, r7, #7
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	f003 0304 	and.w	r3, r3, #4
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <f_open+0x17c>
						res = FR_EXIST;
 800bb7a:	2308      	movs	r3, #8
 800bb7c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bb80:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f040 8084 	bne.w	800bc92 <f_open+0x28e>
 800bb8a:	1dfb      	adds	r3, r7, #7
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	f003 0308 	and.w	r3, r3, #8
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d07d      	beq.n	800bc92 <f_open+0x28e>
				dw = GET_FATTIME();				/* Created time */
 800bb96:	f7fc f97d 	bl	8007e94 <get_fattime>
 800bb9a:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				ST_DWORD(dir + DIR_CrtTime, dw);
 800bb9e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bba2:	330e      	adds	r3, #14
 800bba4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bba8:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bbaa:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bbae:	330b      	adds	r3, #11
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800bbb4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bbb8:	331c      	adds	r3, #28
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800bbbe:	f107 031c 	add.w	r3, r7, #28
 800bbc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbc6:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fe fdfd 	bl	800a7ca <ld_clust>
 800bbd0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				st_clust(dir, 0);				/* cluster = 0 */
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800bbda:	f7fe fe11 	bl	800a800 <st_clust>
				dj.fs->wflag = 1;
 800bbde:	f107 031c 	add.w	r3, r7, #28
 800bbe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800bbec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d04e      	beq.n	800bc92 <f_open+0x28e>
					dw = dj.fs->winsect;
 800bbf4:	f107 031c 	add.w	r3, r7, #28
 800bbf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbfc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800bc00:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					res = remove_chain(dj.fs, cl);
 800bc04:	f107 031c 	add.w	r3, r7, #28
 800bc08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc0c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7fe fada 	bl	800a1ca <remove_chain>
 800bc16:	4603      	mov	r3, r0
 800bc18:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 800bc1c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d136      	bne.n	800bc92 <f_open+0x28e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bc24:	f107 031c 	add.w	r3, r7, #28
 800bc28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc2c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bc30:	3a01      	subs	r2, #1
 800bc32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800bc36:	f107 031c 	add.w	r3, r7, #28
 800bc3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc3e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe f891 	bl	8009d6a <move_window>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bc4e:	e020      	b.n	800bc92 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bc50:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d11c      	bne.n	800bc92 <f_open+0x28e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bc58:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bc5c:	330b      	adds	r3, #11
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f003 0310 	and.w	r3, r3, #16
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <f_open+0x26c>
					res = FR_NO_FILE;
 800bc68:	2304      	movs	r3, #4
 800bc6a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bc6e:	e010      	b.n	800bc92 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bc70:	1dfb      	adds	r3, r7, #7
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f003 0302 	and.w	r3, r3, #2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00a      	beq.n	800bc92 <f_open+0x28e>
 800bc7c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bc80:	330b      	adds	r3, #11
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	f003 0301 	and.w	r3, r3, #1
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <f_open+0x28e>
						res = FR_DENIED;
 800bc8c:	2307      	movs	r3, #7
 800bc8e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800bc92:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d13d      	bne.n	800bd16 <f_open+0x312>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bc9a:	1dfb      	adds	r3, r7, #7
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	f003 0308 	and.w	r3, r3, #8
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d005      	beq.n	800bcb2 <f_open+0x2ae>
				mode |= FA__WRITTEN;
 800bca6:	1dfb      	adds	r3, r7, #7
 800bca8:	1dfa      	adds	r2, r7, #7
 800bcaa:	7812      	ldrb	r2, [r2, #0]
 800bcac:	f042 0220 	orr.w	r2, r2, #32
 800bcb0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bcb2:	f107 031c 	add.w	r3, r7, #28
 800bcb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bcbe:	f107 030c 	add.w	r3, r7, #12
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800bcc8:	f107 030c 	add.w	r3, r7, #12
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800bcd2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bcd6:	1dfb      	adds	r3, r7, #7
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	f023 0301 	bic.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bf14      	ite	ne
 800bce2:	2301      	movne	r3, #1
 800bce4:	2300      	moveq	r3, #0
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	f107 031c 	add.w	r3, r7, #28
 800bcee:	4611      	mov	r1, r2
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fd fecf 	bl	8009a94 <inc_lock>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	f107 030c 	add.w	r3, r7, #12
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800bd02:	f107 030c 	add.w	r3, r7, #12
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d102      	bne.n	800bd16 <f_open+0x312>
 800bd10:	2302      	movs	r3, #2
 800bd12:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 800bd16:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 800bd1a:	f000 fe3f 	bl	800c99c <ff_memfree>

		if (res == FR_OK) {
 800bd1e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d14b      	bne.n	800bdbe <f_open+0x3ba>
			fp->flag = mode;					/* File access mode */
 800bd26:	f107 030c 	add.w	r3, r7, #12
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	1dfa      	adds	r2, r7, #7
 800bd2e:	7812      	ldrb	r2, [r2, #0]
 800bd30:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800bd34:	f107 030c 	add.w	r3, r7, #12
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bd40:	f107 031c 	add.w	r3, r7, #28
 800bd44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd48:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fd3c 	bl	800a7ca <ld_clust>
 800bd52:	4602      	mov	r2, r0
 800bd54:	f107 030c 	add.w	r3, r7, #12
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bd5e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bd62:	331c      	adds	r3, #28
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800bd70:	f107 030c 	add.w	r3, r7, #12
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bd88:	f107 030c 	add.w	r3, r7, #12
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bd94:	f107 031c 	add.w	r3, r7, #28
 800bd98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bd9c:	f107 030c 	add.w	r3, r7, #12
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800bda6:	f107 030c 	add.w	r3, r7, #12
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdb0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bdb4:	f107 030c 	add.w	r3, r7, #12
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800bdbe:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08c      	sub	sp, #48	; 0x30
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff fd91 	bl	800b90c <validate>
 800bdea:	4603      	mov	r3, r0
 800bdec:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bdee:	7ffb      	ldrb	r3, [r7, #31]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <f_read+0x2c>
 800bdf4:	7ffb      	ldrb	r3, [r7, #31]
 800bdf6:	e150      	b.n	800c09a <f_read+0x2ce>
	if (fp->err)								/* Check error */
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d003      	beq.n	800be0a <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800be08:	e147      	b.n	800c09a <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800be18:	2307      	movs	r3, #7
 800be1a:	e13e      	b.n	800c09a <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	429a      	cmp	r2, r3
 800be32:	f240 812d 	bls.w	800c090 <f_read+0x2c4>
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800be3a:	e129      	b.n	800c090 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800be42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be46:	2b00      	cmp	r3, #0
 800be48:	f040 80f2 	bne.w	800c030 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800be52:	0a5b      	lsrs	r3, r3, #9
 800be54:	b2da      	uxtb	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be5c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800be60:	3b01      	subs	r3, #1
 800be62:	b2db      	uxtb	r3, r3
 800be64:	4013      	ands	r3, r2
 800be66:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d139      	bne.n	800bee2 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800be74:	2b00      	cmp	r3, #0
 800be76:	d104      	bne.n	800be82 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be80:	e018      	b.n	800beb4 <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d008      	beq.n	800be9e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800be92:	4619      	mov	r1, r3
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f7fe fa8f 	bl	800a3b8 <clmt_clust>
 800be9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800be9c:	e00a      	b.n	800beb4 <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800beaa:	4619      	mov	r1, r3
 800beac:	4610      	mov	r0, r2
 800beae:	f7fe f810 	bl	8009ed2 <get_fat>
 800beb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d805      	bhi.n	800bec6 <f_read+0xfa>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2202      	movs	r2, #2
 800bebe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bec2:	2302      	movs	r3, #2
 800bec4:	e0e9      	b.n	800c09a <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800becc:	d105      	bne.n	800beda <f_read+0x10e>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bed6:	2301      	movs	r3, #1
 800bed8:	e0df      	b.n	800c09a <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800beee:	4619      	mov	r1, r3
 800bef0:	4610      	mov	r0, r2
 800bef2:	f7fd ffcd 	bl	8009e90 <clust2sect>
 800bef6:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d105      	bne.n	800bf0a <f_read+0x13e>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2202      	movs	r2, #2
 800bf02:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf06:	2302      	movs	r3, #2
 800bf08:	e0c7      	b.n	800c09a <f_read+0x2ce>
			sect += csect;
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	693a      	ldr	r2, [r7, #16]
 800bf0e:	4413      	add	r3, r2
 800bf10:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	0a5b      	lsrs	r3, r3, #9
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d046      	beq.n	800bfac <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bf1e:	7dfa      	ldrb	r2, [r7, #23]
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	4413      	add	r3, r2
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bf2a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d908      	bls.n	800bf44 <f_read+0x178>
					cc = fp->fs->csize - csect;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf38:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf4a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	6a39      	ldr	r1, [r7, #32]
 800bf54:	f7fd fc28 	bl	80097a8 <disk_read>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d005      	beq.n	800bf6a <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf66:	2301      	movs	r3, #1
 800bf68:	e097      	b.n	800c09a <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bf70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d015      	beq.n	800bfa4 <f_read+0x1d8>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d90d      	bls.n	800bfa4 <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	025b      	lsls	r3, r3, #9
 800bf94:	6a3a      	ldr	r2, [r7, #32]
 800bf96:	4413      	add	r3, r2
 800bf98:	68f9      	ldr	r1, [r7, #12]
 800bf9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fd fc60 	bl	8009864 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	025b      	lsls	r3, r3, #9
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800bfaa:	e05b      	b.n	800c064 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d037      	beq.n	800c028 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d01d      	beq.n	800c002 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bfcc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bfd0:	68f9      	ldr	r1, [r7, #12]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f7fd fc05 	bl	80097e8 <disk_write>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d005      	beq.n	800bff0 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bfec:	2301      	movs	r3, #1
 800bfee:	e054      	b.n	800c09a <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c008:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c00c:	68f9      	ldr	r1, [r7, #12]
 800c00e:	2301      	movs	r3, #1
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	f7fd fbc9 	bl	80097a8 <disk_read>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d005      	beq.n	800c028 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c024:	2301      	movs	r3, #1
 800c026:	e038      	b.n	800c09a <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c03e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	429a      	cmp	r2, r3
 800c046:	d901      	bls.n	800c04c <f_read+0x280>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	4413      	add	r3, r2
 800c05a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c05c:	4619      	mov	r1, r3
 800c05e:	6a38      	ldr	r0, [r7, #32]
 800c060:	f7fd fc00 	bl	8009864 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c064:	6a3a      	ldr	r2, [r7, #32]
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	4413      	add	r3, r2
 800c06a:	623b      	str	r3, [r7, #32]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c074:	441a      	add	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	441a      	add	r2, r3
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	f47f aed2 	bne.w	800be3c <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3730      	adds	r7, #48	; 0x30
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b08a      	sub	sp, #40	; 0x28
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	60b9      	str	r1, [r7, #8]
 800c0ac:	607a      	str	r2, [r7, #4]
 800c0ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f7ff fc26 	bl	800b90c <validate>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <f_write+0x2c>
 800c0ca:	7dfb      	ldrb	r3, [r7, #23]
 800c0cc:	e192      	b.n	800c3f4 <f_write+0x352>
	if (fp->err)							/* Check error */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d003      	beq.n	800c0e0 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c0de:	e189      	b.n	800c3f4 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c0e6:	f003 0302 	and.w	r3, r3, #2
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c0ee:	2307      	movs	r3, #7
 800c0f0:	e180      	b.n	800c3f4 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	441a      	add	r2, r3
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c102:	429a      	cmp	r2, r3
 800c104:	f080 8158 	bcs.w	800c3b8 <f_write+0x316>
 800c108:	2300      	movs	r3, #0
 800c10a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800c10c:	e154      	b.n	800c3b8 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f040 8114 	bne.w	800c346 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c124:	0a5b      	lsrs	r3, r3, #9
 800c126:	b2da      	uxtb	r2, r3
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c12e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c132:	3b01      	subs	r3, #1
 800c134:	b2db      	uxtb	r3, r3
 800c136:	4013      	ands	r3, r2
 800c138:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800c13a:	7dbb      	ldrb	r3, [r7, #22]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d151      	bne.n	800c1e4 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10f      	bne.n	800c16a <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c150:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	2b00      	cmp	r3, #0
 800c156:	d121      	bne.n	800c19c <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c15e:	2100      	movs	r1, #0
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe f88c 	bl	800a27e <create_chain>
 800c166:	6278      	str	r0, [r7, #36]	; 0x24
 800c168:	e018      	b.n	800c19c <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c170:	2b00      	cmp	r3, #0
 800c172:	d008      	beq.n	800c186 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c17a:	4619      	mov	r1, r3
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f7fe f91b 	bl	800a3b8 <clmt_clust>
 800c182:	6278      	str	r0, [r7, #36]	; 0x24
 800c184:	e00a      	b.n	800c19c <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c192:	4619      	mov	r1, r3
 800c194:	4610      	mov	r0, r2
 800c196:	f7fe f872 	bl	800a27e <create_chain>
 800c19a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 810f 	beq.w	800c3c2 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d105      	bne.n	800c1b6 <f_write+0x114>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e11e      	b.n	800c3f4 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1bc:	d105      	bne.n	800c1ca <f_write+0x128>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e114      	b.n	800c3f4 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d103      	bne.n	800c1e4 <f_write+0x142>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01d      	beq.n	800c22e <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c1f8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c1fc:	68f9      	ldr	r1, [r7, #12]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c204:	2301      	movs	r3, #1
 800c206:	f7fd faef 	bl	80097e8 <disk_write>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c218:	2301      	movs	r3, #1
 800c21a:	e0eb      	b.n	800c3f4 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c226:	b2da      	uxtb	r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c23a:	4619      	mov	r1, r3
 800c23c:	4610      	mov	r0, r2
 800c23e:	f7fd fe27 	bl	8009e90 <clust2sect>
 800c242:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d105      	bne.n	800c256 <f_write+0x1b4>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2202      	movs	r2, #2
 800c24e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c252:	2302      	movs	r3, #2
 800c254:	e0ce      	b.n	800c3f4 <f_write+0x352>
			sect += csect;
 800c256:	7dbb      	ldrb	r3, [r7, #22]
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	4413      	add	r3, r2
 800c25c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	0a5b      	lsrs	r3, r3, #9
 800c262:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d048      	beq.n	800c2fc <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c26a:	7dba      	ldrb	r2, [r7, #22]
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	4413      	add	r3, r2
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c276:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d908      	bls.n	800c290 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c284:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c288:	461a      	mov	r2, r3
 800c28a:	7dbb      	ldrb	r3, [r7, #22]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c296:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	69b9      	ldr	r1, [r7, #24]
 800c2a0:	f7fd faa2 	bl	80097e8 <disk_write>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d005      	beq.n	800c2b6 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e09e      	b.n	800c3f4 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	69fa      	ldr	r2, [r7, #28]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d916      	bls.n	800c2f4 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	025b      	lsls	r3, r3, #9
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f7fd fac1 	bl	8009864 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	025b      	lsls	r3, r3, #9
 800c2f8:	623b      	str	r3, [r7, #32]
				continue;
 800c2fa:	e047      	b.n	800c38c <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	429a      	cmp	r2, r3
 800c306:	d01a      	beq.n	800c33e <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c314:	429a      	cmp	r2, r3
 800c316:	d212      	bcs.n	800c33e <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c31e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c322:	68f9      	ldr	r1, [r7, #12]
 800c324:	2301      	movs	r3, #1
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	f7fd fa3e 	bl	80097a8 <disk_read>
 800c32c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d005      	beq.n	800c33e <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2201      	movs	r2, #1
 800c336:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c33a:	2301      	movs	r3, #1
 800c33c:	e05a      	b.n	800c3f4 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c350:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c354:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800c356:	6a3a      	ldr	r2, [r7, #32]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d901      	bls.n	800c362 <f_write+0x2c0>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	4413      	add	r3, r2
 800c370:	6a3a      	ldr	r2, [r7, #32]
 800c372:	69b9      	ldr	r1, [r7, #24]
 800c374:	4618      	mov	r0, r3
 800c376:	f7fd fa75 	bl	8009864 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c384:	b2da      	uxtb	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	4413      	add	r3, r2
 800c392:	61bb      	str	r3, [r7, #24]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	441a      	add	r2, r3
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	441a      	add	r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	6a3b      	ldr	r3, [r7, #32]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f47f aea7 	bne.w	800c10e <f_write+0x6c>
 800c3c0:	e000      	b.n	800c3c4 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c3c2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d905      	bls.n	800c3e0 <f_write+0x33e>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c3e6:	f043 0320 	orr.w	r3, r3, #32
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3728      	adds	r7, #40	; 0x28
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff fa81 	bl	800b90c <validate>
 800c40a:	4603      	mov	r3, r0
 800c40c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d172      	bne.n	800c4fa <f_sync+0xfe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d06b      	beq.n	800c4fa <f_sync+0xfe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d019      	beq.n	800c464 <f_sync+0x68>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c436:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c43a:	6879      	ldr	r1, [r7, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c442:	2301      	movs	r3, #1
 800c444:	f7fd f9d0 	bl	80097e8 <disk_write>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <f_sync+0x56>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c44e:	2301      	movs	r3, #1
 800c450:	e054      	b.n	800c4fc <f_sync+0x100>
				fp->flag &= ~FA__DIRTY;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c470:	4619      	mov	r1, r3
 800c472:	4610      	mov	r0, r2
 800c474:	f7fd fc79 	bl	8009d6a <move_window>
 800c478:	4603      	mov	r3, r0
 800c47a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d13b      	bne.n	800c4fa <f_sync+0xfe>
				dir = fp->dir_ptr;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c488:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	330b      	adds	r3, #11
 800c48e:	781a      	ldrb	r2, [r3, #0]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	330b      	adds	r3, #11
 800c494:	f042 0220 	orr.w	r2, r2, #32
 800c498:	b2d2      	uxtb	r2, r2
 800c49a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	331c      	adds	r3, #28
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 800c4a6:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6938      	ldr	r0, [r7, #16]
 800c4b2:	f7fe f9a5 	bl	800a800 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c4b6:	f7fb fced 	bl	8007e94 <get_fattime>
 800c4ba:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	3316      	adds	r3, #22
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	601a      	str	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	3312      	adds	r3, #18
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c4d2:	f023 0320 	bic.w	r3, r3, #32
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fd fc69 	bl	8009dc8 <sync_fs>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ff75 	bl	800c3fc <f_sync>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d116      	bne.n	800c54a <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff f9f5 	bl	800b90c <validate>
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10e      	bne.n	800c54a <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c532:	4618      	mov	r0, r3
 800c534:	f7fd fb64 	bl	8009c00 <dec_lock>
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d103      	bne.n	800c54a <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c554:	b480      	push	{r7}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	4613      	mov	r3, r2
 800c560:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c562:	2301      	movs	r3, #1
 800c564:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c56a:	4b1e      	ldr	r3, [pc, #120]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c56c:	7a5b      	ldrb	r3, [r3, #9]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b01      	cmp	r3, #1
 800c572:	d831      	bhi.n	800c5d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c574:	4b1b      	ldr	r3, [pc, #108]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c576:	7a5b      	ldrb	r3, [r3, #9]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	4b19      	ldr	r3, [pc, #100]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c57e:	2100      	movs	r1, #0
 800c580:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c582:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c584:	7a5b      	ldrb	r3, [r3, #9]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	4a16      	ldr	r2, [pc, #88]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c592:	4b14      	ldr	r3, [pc, #80]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c594:	7a5b      	ldrb	r3, [r3, #9]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	461a      	mov	r2, r3
 800c59a:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c59c:	4413      	add	r3, r2
 800c59e:	79fa      	ldrb	r2, [r7, #7]
 800c5a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5a2:	4b10      	ldr	r3, [pc, #64]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c5a4:	7a5b      	ldrb	r3, [r3, #9]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	1c5a      	adds	r2, r3, #1
 800c5aa:	b2d1      	uxtb	r1, r2
 800c5ac:	4a0d      	ldr	r2, [pc, #52]	; (800c5e4 <FATFS_LinkDriverEx+0x90>)
 800c5ae:	7251      	strb	r1, [r2, #9]
 800c5b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5b2:	7dbb      	ldrb	r3, [r7, #22]
 800c5b4:	3330      	adds	r3, #48	; 0x30
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	223a      	movs	r2, #58	; 0x3a
 800c5c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	222f      	movs	r2, #47	; 0x2f
 800c5ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	3303      	adds	r3, #3
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bc80      	pop	{r7}
 800c5e2:	4770      	bx	lr
 800c5e4:	20000224 	.word	0x20000224

0800c5e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff ffac 	bl	800c554 <FATFS_LinkDriverEx>
 800c5fc:	4603      	mov	r3, r0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
	...

0800c608 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800c614:	2300      	movs	r3, #0
 800c616:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800c618:	2301      	movs	r3, #1
 800c61a:	73fb      	strb	r3, [r7, #15]
  
  if(disk.nbr >= 1)
 800c61c:	4b14      	ldr	r3, [pc, #80]	; (800c670 <FATFS_UnLinkDriverEx+0x68>)
 800c61e:	7a5b      	ldrb	r3, [r3, #9]
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d01e      	beq.n	800c664 <FATFS_UnLinkDriverEx+0x5c>
  {    
    DiskNum = path[0] - '0';
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	3b30      	subs	r3, #48	; 0x30
 800c62c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	4a0f      	ldr	r2, [pc, #60]	; (800c670 <FATFS_UnLinkDriverEx+0x68>)
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d013      	beq.n	800c664 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
 800c63e:	4a0c      	ldr	r2, [pc, #48]	; (800c670 <FATFS_UnLinkDriverEx+0x68>)
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	2200      	movs	r2, #0
 800c646:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	4a09      	ldr	r2, [pc, #36]	; (800c670 <FATFS_UnLinkDriverEx+0x68>)
 800c64c:	4413      	add	r3, r2
 800c64e:	2200      	movs	r2, #0
 800c650:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800c652:	4b07      	ldr	r3, [pc, #28]	; (800c670 <FATFS_UnLinkDriverEx+0x68>)
 800c654:	7a5b      	ldrb	r3, [r3, #9]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	3b01      	subs	r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	4b04      	ldr	r3, [pc, #16]	; (800c670 <FATFS_UnLinkDriverEx+0x68>)
 800c65e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return ret;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3714      	adds	r7, #20
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bc80      	pop	{r7}
 800c66e:	4770      	bx	lr
 800c670:	20000224 	.word	0x20000224

0800c674 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800c67c:	2100      	movs	r1, #0
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff ffc2 	bl	800c608 <FATFS_UnLinkDriverEx>
 800c684:	4603      	mov	r3, r0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3708      	adds	r7, #8
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
	...

0800c690 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c69a:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <SD_initialize+0x38>)
 800c69c:	2201      	movs	r2, #1
 800c69e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800c6a0:	f7fb fc00 	bl	8007ea4 <BSP_SD_Init>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d107      	bne.n	800c6ba <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c6aa:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <SD_initialize+0x38>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	f023 0301 	bic.w	r3, r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	4b04      	ldr	r3, [pc, #16]	; (800c6c8 <SD_initialize+0x38>)
 800c6b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c6ba:	4b03      	ldr	r3, [pc, #12]	; (800c6c8 <SD_initialize+0x38>)
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	b2db      	uxtb	r3, r3
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	2000011b 	.word	0x2000011b

0800c6cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	; (800c704 <SD_status+0x38>)
 800c6d8:	2201      	movs	r2, #1
 800c6da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c6dc:	f7fb fc44 	bl	8007f68 <BSP_SD_GetCardState>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d107      	bne.n	800c6f6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c6e6:	4b07      	ldr	r3, [pc, #28]	; (800c704 <SD_status+0x38>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	f023 0301 	bic.w	r3, r3, #1
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	4b04      	ldr	r3, [pc, #16]	; (800c704 <SD_status+0x38>)
 800c6f4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c6f6:	4b03      	ldr	r3, [pc, #12]	; (800c704 <SD_status+0x38>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b2db      	uxtb	r3, r3
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	2000011b 	.word	0x2000011b

0800c708 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c71c:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <SD_read+0x54>)
 800c71e:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800c720:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <SD_read+0x58>)
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	68b8      	ldr	r0, [r7, #8]
 800c728:	f7fb fbe2 	bl	8007ef0 <BSP_SD_ReadBlocks>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10e      	bne.n	800c750 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c732:	e006      	b.n	800c742 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	1e5a      	subs	r2, r3, #1
 800c738:	613a      	str	r2, [r7, #16]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d101      	bne.n	800c742 <SD_read+0x3a>
      {
        return RES_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e007      	b.n	800c752 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c742:	f7fb fc11 	bl	8007f68 <BSP_SD_GetCardState>
 800c746:	4603      	mov	r3, r0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1f3      	bne.n	800c734 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c750:	7dfb      	ldrb	r3, [r7, #23]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3718      	adds	r7, #24
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	000186a0 	.word	0x000186a0
 800c760:	05f5e100 	.word	0x05f5e100

0800c764 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60b9      	str	r1, [r7, #8]
 800c76c:	607a      	str	r2, [r7, #4]
 800c76e:	603b      	str	r3, [r7, #0]
 800c770:	4603      	mov	r3, r0
 800c772:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c778:	4b0f      	ldr	r3, [pc, #60]	; (800c7b8 <SD_write+0x54>)
 800c77a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800c77c:	4b0f      	ldr	r3, [pc, #60]	; (800c7bc <SD_write+0x58>)
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	68b8      	ldr	r0, [r7, #8]
 800c784:	f7fb fbd2 	bl	8007f2c <BSP_SD_WriteBlocks>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10e      	bne.n	800c7ac <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c78e:	e006      	b.n	800c79e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	1e5a      	subs	r2, r3, #1
 800c794:	613a      	str	r2, [r7, #16]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d101      	bne.n	800c79e <SD_write+0x3a>
      {
        return RES_ERROR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	e007      	b.n	800c7ae <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c79e:	f7fb fbe3 	bl	8007f68 <BSP_SD_GetCardState>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1f3      	bne.n	800c790 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	000186a0 	.word	0x000186a0
 800c7bc:	05f5e100 	.word	0x05f5e100

0800c7c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b08c      	sub	sp, #48	; 0x30
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	603a      	str	r2, [r7, #0]
 800c7ca:	71fb      	strb	r3, [r7, #7]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <SD_ioctl+0xa8>)
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	f003 0301 	and.w	r3, r3, #1
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d001      	beq.n	800c7e8 <SD_ioctl+0x28>
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e03b      	b.n	800c860 <SD_ioctl+0xa0>
  
  switch (cmd)
 800c7e8:	79bb      	ldrb	r3, [r7, #6]
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d833      	bhi.n	800c856 <SD_ioctl+0x96>
 800c7ee:	a201      	add	r2, pc, #4	; (adr r2, 800c7f4 <SD_ioctl+0x34>)
 800c7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f4:	0800c805 	.word	0x0800c805
 800c7f8:	0800c80d 	.word	0x0800c80d
 800c7fc:	0800c825 	.word	0x0800c825
 800c800:	0800c83f 	.word	0x0800c83f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c804:	2300      	movs	r3, #0
 800c806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c80a:	e027      	b.n	800c85c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c80c:	f107 030c 	add.w	r3, r7, #12
 800c810:	4618      	mov	r0, r3
 800c812:	f7fb fbb9 	bl	8007f88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c822:	e01b      	b.n	800c85c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c824:	f107 030c 	add.w	r3, r7, #12
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fb fbad 	bl	8007f88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	b29a      	uxth	r2, r3
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c83c:	e00e      	b.n	800c85c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f7fb fba0 	bl	8007f88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c84e:	2300      	movs	r3, #0
 800c850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c854:	e002      	b.n	800c85c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800c856:	2304      	movs	r3, #4
 800c858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800c85c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c860:	4618      	mov	r0, r3
 800c862:	3730      	adds	r7, #48	; 0x30
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	2000011b 	.word	0x2000011b

0800c86c <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b089      	sub	sp, #36	; 0x24
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800c878:	88fb      	ldrh	r3, [r7, #6]
 800c87a:	2b7f      	cmp	r3, #127	; 0x7f
 800c87c:	d802      	bhi.n	800c884 <ff_convert+0x18>
		c = chr;
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	837b      	strh	r3, [r7, #26]
 800c882:	e047      	b.n	800c914 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEMCP to unicode */
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <ff_convert+0x2a>
			p = oem2uni;
 800c88a:	4b25      	ldr	r3, [pc, #148]	; (800c920 <ff_convert+0xb4>)
 800c88c:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800c88e:	f244 2398 	movw	r3, #17048	; 0x4298
 800c892:	60bb      	str	r3, [r7, #8]
 800c894:	e004      	b.n	800c8a0 <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800c896:	4b23      	ldr	r3, [pc, #140]	; (800c924 <ff_convert+0xb8>)
 800c898:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800c89a:	f244 2398 	movw	r3, #17048	; 0x4298
 800c89e:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	613b      	str	r3, [r7, #16]
 800c8a8:	e023      	b.n	800c8f2 <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	1ad3      	subs	r3, r2, r3
 800c8b0:	0fda      	lsrs	r2, r3, #31
 800c8b2:	4413      	add	r3, r2
 800c8b4:	105b      	asrs	r3, r3, #1
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4413      	add	r3, r2
 800c8bc:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	881b      	ldrh	r3, [r3, #0]
 800c8ca:	88fa      	ldrh	r2, [r7, #6]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d014      	beq.n	800c8fa <ff_convert+0x8e>
			if (chr > p[i * 2])
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	4413      	add	r3, r2
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	88fa      	ldrh	r2, [r7, #6]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d902      	bls.n	800c8e8 <ff_convert+0x7c>
				li = i;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	e001      	b.n	800c8ec <ff_convert+0x80>
			else
				hi = i;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	613b      	str	r3, [r7, #16]
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1d8      	bne.n	800c8aa <ff_convert+0x3e>
 800c8f8:	e000      	b.n	800c8fc <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800c8fa:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d006      	beq.n	800c910 <ff_convert+0xa4>
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	3302      	adds	r3, #2
 800c908:	69fa      	ldr	r2, [r7, #28]
 800c90a:	4413      	add	r3, r2
 800c90c:	881b      	ldrh	r3, [r3, #0]
 800c90e:	e000      	b.n	800c912 <ff_convert+0xa6>
 800c910:	2300      	movs	r3, #0
 800c912:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800c914:	8b7b      	ldrh	r3, [r7, #26]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3724      	adds	r7, #36	; 0x24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bc80      	pop	{r7}
 800c91e:	4770      	bx	lr
 800c920:	0801e0d8 	.word	0x0801e0d8
 800c924:	0800d674 	.word	0x0800d674

0800c928 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	e002      	b.n	800c93e <ff_wtoupper+0x16>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	3301      	adds	r3, #1
 800c93c:	60fb      	str	r3, [r7, #12]
 800c93e:	4a0f      	ldr	r2, [pc, #60]	; (800c97c <ff_wtoupper+0x54>)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d006      	beq.n	800c958 <ff_wtoupper+0x30>
 800c94a:	4a0c      	ldr	r2, [pc, #48]	; (800c97c <ff_wtoupper+0x54>)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c952:	88fa      	ldrh	r2, [r7, #6]
 800c954:	429a      	cmp	r2, r3
 800c956:	d1ef      	bne.n	800c938 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c958:	4a08      	ldr	r2, [pc, #32]	; (800c97c <ff_wtoupper+0x54>)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d004      	beq.n	800c96e <ff_wtoupper+0x46>
 800c964:	4a06      	ldr	r2, [pc, #24]	; (800c980 <ff_wtoupper+0x58>)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c96c:	e000      	b.n	800c970 <ff_wtoupper+0x48>
 800c96e:	88fb      	ldrh	r3, [r7, #6]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	bc80      	pop	{r7}
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	0802eb3c 	.word	0x0802eb3c
 800c980:	0802ed1c 	.word	0x0802ed1c

0800c984 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fd13 	bl	800d3b8 <malloc>
 800c992:	4603      	mov	r3, r0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd0f 	bl	800d3c8 <free>
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
	...

0800c9b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4912      	ldr	r1, [pc, #72]	; (800ca04 <MX_USB_DEVICE_Init+0x50>)
 800c9bc:	4812      	ldr	r0, [pc, #72]	; (800ca08 <MX_USB_DEVICE_Init+0x54>)
 800c9be:	f7fb fded 	bl	800859c <USBD_Init>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9c8:	f7f4 f8ce 	bl	8000b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9cc:	490f      	ldr	r1, [pc, #60]	; (800ca0c <MX_USB_DEVICE_Init+0x58>)
 800c9ce:	480e      	ldr	r0, [pc, #56]	; (800ca08 <MX_USB_DEVICE_Init+0x54>)
 800c9d0:	f7fb fe0f 	bl	80085f2 <USBD_RegisterClass>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9da:	f7f4 f8c5 	bl	8000b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9de:	490c      	ldr	r1, [pc, #48]	; (800ca10 <MX_USB_DEVICE_Init+0x5c>)
 800c9e0:	4809      	ldr	r0, [pc, #36]	; (800ca08 <MX_USB_DEVICE_Init+0x54>)
 800c9e2:	f7fb fd6f 	bl	80084c4 <USBD_CDC_RegisterInterface>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9ec:	f7f4 f8bc 	bl	8000b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9f0:	4805      	ldr	r0, [pc, #20]	; (800ca08 <MX_USB_DEVICE_Init+0x54>)
 800c9f2:	f7fb fe17 	bl	8008624 <USBD_Start>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9fc:	f7f4 f8b4 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca00:	bf00      	nop
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	2000012c 	.word	0x2000012c
 800ca08:	20000cc8 	.word	0x20000cc8
 800ca0c:	20000018 	.word	0x20000018
 800ca10:	2000011c 	.word	0x2000011c

0800ca14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4905      	ldr	r1, [pc, #20]	; (800ca30 <CDC_Init_FS+0x1c>)
 800ca1c:	4805      	ldr	r0, [pc, #20]	; (800ca34 <CDC_Init_FS+0x20>)
 800ca1e:	f7fb fd67 	bl	80084f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca22:	4905      	ldr	r1, [pc, #20]	; (800ca38 <CDC_Init_FS+0x24>)
 800ca24:	4803      	ldr	r0, [pc, #12]	; (800ca34 <CDC_Init_FS+0x20>)
 800ca26:	f7fb fd7c 	bl	8008522 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	2000178c 	.word	0x2000178c
 800ca34:	20000cc8 	.word	0x20000cc8
 800ca38:	20000f8c 	.word	0x20000f8c

0800ca3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bc80      	pop	{r7}
 800ca48:	4770      	bx	lr
	...

0800ca4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	4603      	mov	r3, r0
 800ca54:	6039      	str	r1, [r7, #0]
 800ca56:	71fb      	strb	r3, [r7, #7]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca5c:	79fb      	ldrb	r3, [r7, #7]
 800ca5e:	2b23      	cmp	r3, #35	; 0x23
 800ca60:	d84a      	bhi.n	800caf8 <CDC_Control_FS+0xac>
 800ca62:	a201      	add	r2, pc, #4	; (adr r2, 800ca68 <CDC_Control_FS+0x1c>)
 800ca64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca68:	0800caf9 	.word	0x0800caf9
 800ca6c:	0800caf9 	.word	0x0800caf9
 800ca70:	0800caf9 	.word	0x0800caf9
 800ca74:	0800caf9 	.word	0x0800caf9
 800ca78:	0800caf9 	.word	0x0800caf9
 800ca7c:	0800caf9 	.word	0x0800caf9
 800ca80:	0800caf9 	.word	0x0800caf9
 800ca84:	0800caf9 	.word	0x0800caf9
 800ca88:	0800caf9 	.word	0x0800caf9
 800ca8c:	0800caf9 	.word	0x0800caf9
 800ca90:	0800caf9 	.word	0x0800caf9
 800ca94:	0800caf9 	.word	0x0800caf9
 800ca98:	0800caf9 	.word	0x0800caf9
 800ca9c:	0800caf9 	.word	0x0800caf9
 800caa0:	0800caf9 	.word	0x0800caf9
 800caa4:	0800caf9 	.word	0x0800caf9
 800caa8:	0800caf9 	.word	0x0800caf9
 800caac:	0800caf9 	.word	0x0800caf9
 800cab0:	0800caf9 	.word	0x0800caf9
 800cab4:	0800caf9 	.word	0x0800caf9
 800cab8:	0800caf9 	.word	0x0800caf9
 800cabc:	0800caf9 	.word	0x0800caf9
 800cac0:	0800caf9 	.word	0x0800caf9
 800cac4:	0800caf9 	.word	0x0800caf9
 800cac8:	0800caf9 	.word	0x0800caf9
 800cacc:	0800caf9 	.word	0x0800caf9
 800cad0:	0800caf9 	.word	0x0800caf9
 800cad4:	0800caf9 	.word	0x0800caf9
 800cad8:	0800caf9 	.word	0x0800caf9
 800cadc:	0800caf9 	.word	0x0800caf9
 800cae0:	0800caf9 	.word	0x0800caf9
 800cae4:	0800caf9 	.word	0x0800caf9
 800cae8:	0800caf9 	.word	0x0800caf9
 800caec:	0800caf9 	.word	0x0800caf9
 800caf0:	0800caf9 	.word	0x0800caf9
 800caf4:	0800caf9 	.word	0x0800caf9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800caf8:	bf00      	nop
  }

  return (USBD_OK);
 800cafa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bc80      	pop	{r7}
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop

0800cb08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	4805      	ldr	r0, [pc, #20]	; (800cb2c <CDC_Receive_FS+0x24>)
 800cb16:	f7fb fd04 	bl	8008522 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb1a:	4804      	ldr	r0, [pc, #16]	; (800cb2c <CDC_Receive_FS+0x24>)
 800cb1c:	f7fb fd14 	bl	8008548 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cb20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	20000cc8 	.word	0x20000cc8

0800cb30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	6039      	str	r1, [r7, #0]
 800cb3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2212      	movs	r2, #18
 800cb40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb42:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bc80      	pop	{r7}
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	20000148 	.word	0x20000148

0800cb54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	6039      	str	r1, [r7, #0]
 800cb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2204      	movs	r2, #4
 800cb64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb66:	4b03      	ldr	r3, [pc, #12]	; (800cb74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bc80      	pop	{r7}
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	2000015c 	.word	0x2000015c

0800cb78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d105      	bne.n	800cb96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	4907      	ldr	r1, [pc, #28]	; (800cbac <USBD_FS_ProductStrDescriptor+0x34>)
 800cb8e:	4808      	ldr	r0, [pc, #32]	; (800cbb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb90:	f7fc fced 	bl	800956e <USBD_GetString>
 800cb94:	e004      	b.n	800cba0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	4904      	ldr	r1, [pc, #16]	; (800cbac <USBD_FS_ProductStrDescriptor+0x34>)
 800cb9a:	4805      	ldr	r0, [pc, #20]	; (800cbb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb9c:	f7fc fce7 	bl	800956e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cba0:	4b02      	ldr	r3, [pc, #8]	; (800cbac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20001f8c 	.word	0x20001f8c
 800cbb0:	0800d5e8 	.word	0x0800d5e8

0800cbb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	4904      	ldr	r1, [pc, #16]	; (800cbd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cbc4:	4804      	ldr	r0, [pc, #16]	; (800cbd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbc6:	f7fc fcd2 	bl	800956e <USBD_GetString>
  return USBD_StrDesc;
 800cbca:	4b02      	ldr	r3, [pc, #8]	; (800cbd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20001f8c 	.word	0x20001f8c
 800cbd8:	0800d600 	.word	0x0800d600

0800cbdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	6039      	str	r1, [r7, #0]
 800cbe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	221a      	movs	r2, #26
 800cbec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbee:	f000 f843 	bl	800cc78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbf2:	4b02      	ldr	r3, [pc, #8]	; (800cbfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	20000160 	.word	0x20000160

0800cc00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	6039      	str	r1, [r7, #0]
 800cc0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc0c:	79fb      	ldrb	r3, [r7, #7]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d105      	bne.n	800cc1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	4907      	ldr	r1, [pc, #28]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc16:	4808      	ldr	r0, [pc, #32]	; (800cc38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc18:	f7fc fca9 	bl	800956e <USBD_GetString>
 800cc1c:	e004      	b.n	800cc28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	4904      	ldr	r1, [pc, #16]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc22:	4805      	ldr	r0, [pc, #20]	; (800cc38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc24:	f7fc fca3 	bl	800956e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc28:	4b02      	ldr	r3, [pc, #8]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001f8c 	.word	0x20001f8c
 800cc38:	0800d614 	.word	0x0800d614

0800cc3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc48:	79fb      	ldrb	r3, [r7, #7]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d105      	bne.n	800cc5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4907      	ldr	r1, [pc, #28]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc52:	4808      	ldr	r0, [pc, #32]	; (800cc74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc54:	f7fc fc8b 	bl	800956e <USBD_GetString>
 800cc58:	e004      	b.n	800cc64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4904      	ldr	r1, [pc, #16]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc5e:	4805      	ldr	r0, [pc, #20]	; (800cc74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc60:	f7fc fc85 	bl	800956e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc64:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20001f8c 	.word	0x20001f8c
 800cc74:	0800d620 	.word	0x0800d620

0800cc78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc7e:	4b0f      	ldr	r3, [pc, #60]	; (800ccbc <Get_SerialNum+0x44>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc84:	4b0e      	ldr	r3, [pc, #56]	; (800ccc0 <Get_SerialNum+0x48>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc8a:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <Get_SerialNum+0x4c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4413      	add	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d009      	beq.n	800ccb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc9e:	2208      	movs	r2, #8
 800cca0:	4909      	ldr	r1, [pc, #36]	; (800ccc8 <Get_SerialNum+0x50>)
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f814 	bl	800ccd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cca8:	2204      	movs	r2, #4
 800ccaa:	4908      	ldr	r1, [pc, #32]	; (800cccc <Get_SerialNum+0x54>)
 800ccac:	68b8      	ldr	r0, [r7, #8]
 800ccae:	f000 f80f 	bl	800ccd0 <IntToUnicode>
  }
}
 800ccb2:	bf00      	nop
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	1fff7a10 	.word	0x1fff7a10
 800ccc0:	1fff7a14 	.word	0x1fff7a14
 800ccc4:	1fff7a18 	.word	0x1fff7a18
 800ccc8:	20000162 	.word	0x20000162
 800cccc:	20000172 	.word	0x20000172

0800ccd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cce2:	2300      	movs	r3, #0
 800cce4:	75fb      	strb	r3, [r7, #23]
 800cce6:	e027      	b.n	800cd38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	0f1b      	lsrs	r3, r3, #28
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d80b      	bhi.n	800cd08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	0f1b      	lsrs	r3, r3, #28
 800ccf4:	b2da      	uxtb	r2, r3
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	440b      	add	r3, r1
 800cd00:	3230      	adds	r2, #48	; 0x30
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e00a      	b.n	800cd1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	0f1b      	lsrs	r3, r3, #28
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	4619      	mov	r1, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	440b      	add	r3, r1
 800cd18:	3237      	adds	r2, #55	; 0x37
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	011b      	lsls	r3, r3, #4
 800cd22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	3301      	adds	r3, #1
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	2200      	movs	r2, #0
 800cd30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	3301      	adds	r3, #1
 800cd36:	75fb      	strb	r3, [r7, #23]
 800cd38:	7dfa      	ldrb	r2, [r7, #23]
 800cd3a:	79fb      	ldrb	r3, [r7, #7]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d3d3      	bcc.n	800cce8 <IntToUnicode+0x18>
  }
}
 800cd40:	bf00      	nop
 800cd42:	371c      	adds	r7, #28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bc80      	pop	{r7}
 800cd48:	4770      	bx	lr
	...

0800cd4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08a      	sub	sp, #40	; 0x28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd54:	f107 0314 	add.w	r3, r7, #20
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	605a      	str	r2, [r3, #4]
 800cd5e:	609a      	str	r2, [r3, #8]
 800cd60:	60da      	str	r2, [r3, #12]
 800cd62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd6c:	d147      	bne.n	800cdfe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd6e:	2300      	movs	r3, #0
 800cd70:	613b      	str	r3, [r7, #16]
 800cd72:	4b25      	ldr	r3, [pc, #148]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd76:	4a24      	ldr	r2, [pc, #144]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cd78:	f043 0301 	orr.w	r3, r3, #1
 800cd7c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd7e:	4b22      	ldr	r3, [pc, #136]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cd80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	613b      	str	r3, [r7, #16]
 800cd88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800cd8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800cd8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd90:	2302      	movs	r3, #2
 800cd92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd94:	2300      	movs	r3, #0
 800cd96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd9c:	230a      	movs	r3, #10
 800cd9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cda0:	f107 0314 	add.w	r3, r7, #20
 800cda4:	4619      	mov	r1, r3
 800cda6:	4819      	ldr	r0, [pc, #100]	; (800ce0c <HAL_PCD_MspInit+0xc0>)
 800cda8:	f7f5 fb08 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800cdac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800cdba:	f107 0314 	add.w	r3, r7, #20
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	4812      	ldr	r0, [pc, #72]	; (800ce0c <HAL_PCD_MspInit+0xc0>)
 800cdc2:	f7f5 fafb 	bl	80023bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdc6:	4b10      	ldr	r3, [pc, #64]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdca:	4a0f      	ldr	r2, [pc, #60]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd0:	6353      	str	r3, [r2, #52]	; 0x34
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdda:	4a0b      	ldr	r2, [pc, #44]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cde0:	6453      	str	r3, [r2, #68]	; 0x44
 800cde2:	4b09      	ldr	r3, [pc, #36]	; (800ce08 <HAL_PCD_MspInit+0xbc>)
 800cde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2100      	movs	r1, #0
 800cdf2:	2043      	movs	r0, #67	; 0x43
 800cdf4:	f7f4 fb47 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cdf8:	2043      	movs	r0, #67	; 0x43
 800cdfa:	f7f4 fb60 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cdfe:	bf00      	nop
 800ce00:	3728      	adds	r7, #40	; 0x28
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	40023800 	.word	0x40023800
 800ce0c:	40020000 	.word	0x40020000

0800ce10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce24:	4619      	mov	r1, r3
 800ce26:	4610      	mov	r0, r2
 800ce28:	f7fb fc44 	bl	80086b4 <USBD_LL_SetupStage>
}
 800ce2c:	bf00      	nop
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	1a9b      	subs	r3, r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	440b      	add	r3, r1
 800ce54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	f7fb fc74 	bl	800874a <USBD_LL_DataOutStage>
}
 800ce62:	bf00      	nop
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	460b      	mov	r3, r1
 800ce74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ce7c:	78fa      	ldrb	r2, [r7, #3]
 800ce7e:	6879      	ldr	r1, [r7, #4]
 800ce80:	4613      	mov	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	440b      	add	r3, r1
 800ce8a:	3348      	adds	r3, #72	; 0x48
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	4619      	mov	r1, r3
 800ce92:	f7fb fccb 	bl	800882c <USBD_LL_DataInStage>
}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fb fddb 	bl	8008a68 <USBD_LL_SOF>
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cec2:	2301      	movs	r3, #1
 800cec4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d102      	bne.n	800ced4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]
 800ced2:	e008      	b.n	800cee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d102      	bne.n	800cee2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cedc:	2301      	movs	r3, #1
 800cede:	73fb      	strb	r3, [r7, #15]
 800cee0:	e001      	b.n	800cee6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cee2:	f7f3 fe41 	bl	8000b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ceec:	7bfa      	ldrb	r2, [r7, #15]
 800ceee:	4611      	mov	r1, r2
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fb fd81 	bl	80089f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fb fd3a 	bl	8008976 <USBD_LL_Reset>
}
 800cf02:	bf00      	nop
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fb fd7b 	bl	8008a16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	6812      	ldr	r2, [r2, #0]
 800cf2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf32:	f043 0301 	orr.w	r3, r3, #1
 800cf36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6a1b      	ldr	r3, [r3, #32]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf40:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <HAL_PCD_SuspendCallback+0x48>)
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	4a03      	ldr	r2, [pc, #12]	; (800cf54 <HAL_PCD_SuspendCallback+0x48>)
 800cf46:	f043 0306 	orr.w	r3, r3, #6
 800cf4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	e000ed00 	.word	0xe000ed00

0800cf58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fb fd69 	bl	8008a3e <USBD_LL_Resume>
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cf86:	78fa      	ldrb	r2, [r7, #3]
 800cf88:	4611      	mov	r1, r2
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fb fd92 	bl	8008ab4 <USBD_LL_IsoOUTIncomplete>
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfaa:	78fa      	ldrb	r2, [r7, #3]
 800cfac:	4611      	mov	r1, r2
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fb fd74 	bl	8008a9c <USBD_LL_IsoINIncomplete>
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fb fd7e 	bl	8008acc <USBD_LL_DevConnected>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fb fd7a 	bl	8008ae0 <USBD_LL_DevDisconnected>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d139      	bne.n	800d078 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d004:	4a1f      	ldr	r2, [pc, #124]	; (800d084 <USBD_LL_Init+0x90>)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4a1d      	ldr	r2, [pc, #116]	; (800d084 <USBD_LL_Init+0x90>)
 800d010:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d014:	4b1b      	ldr	r3, [pc, #108]	; (800d084 <USBD_LL_Init+0x90>)
 800d016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d01a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d01c:	4b19      	ldr	r3, [pc, #100]	; (800d084 <USBD_LL_Init+0x90>)
 800d01e:	2204      	movs	r2, #4
 800d020:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d022:	4b18      	ldr	r3, [pc, #96]	; (800d084 <USBD_LL_Init+0x90>)
 800d024:	2202      	movs	r2, #2
 800d026:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d028:	4b16      	ldr	r3, [pc, #88]	; (800d084 <USBD_LL_Init+0x90>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d02e:	4b15      	ldr	r3, [pc, #84]	; (800d084 <USBD_LL_Init+0x90>)
 800d030:	2202      	movs	r2, #2
 800d032:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d034:	4b13      	ldr	r3, [pc, #76]	; (800d084 <USBD_LL_Init+0x90>)
 800d036:	2200      	movs	r2, #0
 800d038:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d03a:	4b12      	ldr	r3, [pc, #72]	; (800d084 <USBD_LL_Init+0x90>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d040:	4b10      	ldr	r3, [pc, #64]	; (800d084 <USBD_LL_Init+0x90>)
 800d042:	2201      	movs	r2, #1
 800d044:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d046:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <USBD_LL_Init+0x90>)
 800d048:	2200      	movs	r2, #0
 800d04a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d04c:	480d      	ldr	r0, [pc, #52]	; (800d084 <USBD_LL_Init+0x90>)
 800d04e:	f7f5 fbb3 	bl	80027b8 <HAL_PCD_Init>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800d058:	f7f3 fd86 	bl	8000b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d05c:	2180      	movs	r1, #128	; 0x80
 800d05e:	4809      	ldr	r0, [pc, #36]	; (800d084 <USBD_LL_Init+0x90>)
 800d060:	f7f6 fcf0 	bl	8003a44 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d064:	2240      	movs	r2, #64	; 0x40
 800d066:	2100      	movs	r1, #0
 800d068:	4806      	ldr	r0, [pc, #24]	; (800d084 <USBD_LL_Init+0x90>)
 800d06a:	f7f6 fca5 	bl	80039b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d06e:	2280      	movs	r2, #128	; 0x80
 800d070:	2101      	movs	r1, #1
 800d072:	4804      	ldr	r0, [pc, #16]	; (800d084 <USBD_LL_Init+0x90>)
 800d074:	f7f6 fca0 	bl	80039b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2000218c 	.word	0x2000218c

0800d088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7f5 fca7 	bl	80029f2 <HAL_PCD_Start>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 f92e 	bl	800d30c <USBD_Get_USB_Status>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	4608      	mov	r0, r1
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	70fb      	strb	r3, [r7, #3]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	70bb      	strb	r3, [r7, #2]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0e6:	78bb      	ldrb	r3, [r7, #2]
 800d0e8:	883a      	ldrh	r2, [r7, #0]
 800d0ea:	78f9      	ldrb	r1, [r7, #3]
 800d0ec:	f7f6 f86c 	bl	80031c8 <HAL_PCD_EP_Open>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 f908 	bl	800d30c <USBD_Get_USB_Status>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d100:	7bbb      	ldrb	r3, [r7, #14]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b084      	sub	sp, #16
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d124:	78fa      	ldrb	r2, [r7, #3]
 800d126:	4611      	mov	r1, r2
 800d128:	4618      	mov	r0, r3
 800d12a:	f7f6 f8b5 	bl	8003298 <HAL_PCD_EP_Close>
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	4618      	mov	r0, r3
 800d136:	f000 f8e9 	bl	800d30c <USBD_Get_USB_Status>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d162:	78fa      	ldrb	r2, [r7, #3]
 800d164:	4611      	mov	r1, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7f6 f98c 	bl	8003484 <HAL_PCD_EP_SetStall>
 800d16c:	4603      	mov	r3, r0
 800d16e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d170:	7bfb      	ldrb	r3, [r7, #15]
 800d172:	4618      	mov	r0, r3
 800d174:	f000 f8ca 	bl	800d30c <USBD_Get_USB_Status>
 800d178:	4603      	mov	r3, r0
 800d17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d192:	2300      	movs	r3, #0
 800d194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d196:	2300      	movs	r3, #0
 800d198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1a0:	78fa      	ldrb	r2, [r7, #3]
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7f6 f9d1 	bl	800354c <HAL_PCD_EP_ClrStall>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 f8ab 	bl	800d30c <USBD_Get_USB_Status>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	da0b      	bge.n	800d1f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d1e0:	78fb      	ldrb	r3, [r7, #3]
 800d1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1e6:	68f9      	ldr	r1, [r7, #12]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	00db      	lsls	r3, r3, #3
 800d1ec:	1a9b      	subs	r3, r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	440b      	add	r3, r1
 800d1f2:	333e      	adds	r3, #62	; 0x3e
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	e00b      	b.n	800d210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1f8:	78fb      	ldrb	r3, [r7, #3]
 800d1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1fe:	68f9      	ldr	r1, [r7, #12]
 800d200:	4613      	mov	r3, r2
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	1a9b      	subs	r3, r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	440b      	add	r3, r1
 800d20a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d20e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d210:	4618      	mov	r0, r3
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	bc80      	pop	{r7}
 800d218:	4770      	bx	lr

0800d21a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b084      	sub	sp, #16
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	460b      	mov	r3, r1
 800d224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d234:	78fa      	ldrb	r2, [r7, #3]
 800d236:	4611      	mov	r1, r2
 800d238:	4618      	mov	r0, r3
 800d23a:	f7f5 ffa0 	bl	800317e <HAL_PCD_SetAddress>
 800d23e:	4603      	mov	r3, r0
 800d240:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d242:	7bfb      	ldrb	r3, [r7, #15]
 800d244:	4618      	mov	r0, r3
 800d246:	f000 f861 	bl	800d30c <USBD_Get_USB_Status>
 800d24a:	4603      	mov	r3, r0
 800d24c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d24e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d250:	4618      	mov	r0, r3
 800d252:	3710      	adds	r7, #16
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	607a      	str	r2, [r7, #4]
 800d262:	461a      	mov	r2, r3
 800d264:	460b      	mov	r3, r1
 800d266:	72fb      	strb	r3, [r7, #11]
 800d268:	4613      	mov	r3, r2
 800d26a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d270:	2300      	movs	r3, #0
 800d272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d27a:	893b      	ldrh	r3, [r7, #8]
 800d27c:	7af9      	ldrb	r1, [r7, #11]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	f7f6 f8b6 	bl	80033f0 <HAL_PCD_EP_Transmit>
 800d284:	4603      	mov	r3, r0
 800d286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d288:	7dfb      	ldrb	r3, [r7, #23]
 800d28a:	4618      	mov	r0, r3
 800d28c:	f000 f83e 	bl	800d30c <USBD_Get_USB_Status>
 800d290:	4603      	mov	r3, r0
 800d292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d294:	7dbb      	ldrb	r3, [r7, #22]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b086      	sub	sp, #24
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	72fb      	strb	r3, [r7, #11]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d2c0:	893b      	ldrh	r3, [r7, #8]
 800d2c2:	7af9      	ldrb	r1, [r7, #11]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	f7f6 f831 	bl	800332c <HAL_PCD_EP_Receive>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 f81b 	bl	800d30c <USBD_Get_USB_Status>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2da:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3718      	adds	r7, #24
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2f6:	78fa      	ldrb	r2, [r7, #3]
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7f6 f861 	bl	80033c2 <HAL_PCD_EP_GetRxCount>
 800d300:	4603      	mov	r3, r0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d31a:	79fb      	ldrb	r3, [r7, #7]
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d817      	bhi.n	800d350 <USBD_Get_USB_Status+0x44>
 800d320:	a201      	add	r2, pc, #4	; (adr r2, 800d328 <USBD_Get_USB_Status+0x1c>)
 800d322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d326:	bf00      	nop
 800d328:	0800d339 	.word	0x0800d339
 800d32c:	0800d33f 	.word	0x0800d33f
 800d330:	0800d345 	.word	0x0800d345
 800d334:	0800d34b 	.word	0x0800d34b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	73fb      	strb	r3, [r7, #15]
    break;
 800d33c:	e00b      	b.n	800d356 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d33e:	2302      	movs	r3, #2
 800d340:	73fb      	strb	r3, [r7, #15]
    break;
 800d342:	e008      	b.n	800d356 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d344:	2301      	movs	r3, #1
 800d346:	73fb      	strb	r3, [r7, #15]
    break;
 800d348:	e005      	b.n	800d356 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d34a:	2302      	movs	r3, #2
 800d34c:	73fb      	strb	r3, [r7, #15]
    break;
 800d34e:	e002      	b.n	800d356 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d350:	2302      	movs	r3, #2
 800d352:	73fb      	strb	r3, [r7, #15]
    break;
 800d354:	bf00      	nop
  }
  return usb_status;
 800d356:	7bfb      	ldrb	r3, [r7, #15]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bc80      	pop	{r7}
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop

0800d364 <__errno>:
 800d364:	4b01      	ldr	r3, [pc, #4]	; (800d36c <__errno+0x8>)
 800d366:	6818      	ldr	r0, [r3, #0]
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	2000017c 	.word	0x2000017c

0800d370 <__libc_init_array>:
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	2500      	movs	r5, #0
 800d374:	4e0c      	ldr	r6, [pc, #48]	; (800d3a8 <__libc_init_array+0x38>)
 800d376:	4c0d      	ldr	r4, [pc, #52]	; (800d3ac <__libc_init_array+0x3c>)
 800d378:	1ba4      	subs	r4, r4, r6
 800d37a:	10a4      	asrs	r4, r4, #2
 800d37c:	42a5      	cmp	r5, r4
 800d37e:	d109      	bne.n	800d394 <__libc_init_array+0x24>
 800d380:	f000 f8ea 	bl	800d558 <_init>
 800d384:	2500      	movs	r5, #0
 800d386:	4e0a      	ldr	r6, [pc, #40]	; (800d3b0 <__libc_init_array+0x40>)
 800d388:	4c0a      	ldr	r4, [pc, #40]	; (800d3b4 <__libc_init_array+0x44>)
 800d38a:	1ba4      	subs	r4, r4, r6
 800d38c:	10a4      	asrs	r4, r4, #2
 800d38e:	42a5      	cmp	r5, r4
 800d390:	d105      	bne.n	800d39e <__libc_init_array+0x2e>
 800d392:	bd70      	pop	{r4, r5, r6, pc}
 800d394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d398:	4798      	blx	r3
 800d39a:	3501      	adds	r5, #1
 800d39c:	e7ee      	b.n	800d37c <__libc_init_array+0xc>
 800d39e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d3a2:	4798      	blx	r3
 800d3a4:	3501      	adds	r5, #1
 800d3a6:	e7f2      	b.n	800d38e <__libc_init_array+0x1e>
 800d3a8:	0802ef04 	.word	0x0802ef04
 800d3ac:	0802ef04 	.word	0x0802ef04
 800d3b0:	0802ef04 	.word	0x0802ef04
 800d3b4:	0802ef08 	.word	0x0802ef08

0800d3b8 <malloc>:
 800d3b8:	4b02      	ldr	r3, [pc, #8]	; (800d3c4 <malloc+0xc>)
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	6818      	ldr	r0, [r3, #0]
 800d3be:	f000 b85f 	b.w	800d480 <_malloc_r>
 800d3c2:	bf00      	nop
 800d3c4:	2000017c 	.word	0x2000017c

0800d3c8 <free>:
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <free+0xc>)
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	f000 b80b 	b.w	800d3e8 <_free_r>
 800d3d2:	bf00      	nop
 800d3d4:	2000017c 	.word	0x2000017c

0800d3d8 <memset>:
 800d3d8:	4603      	mov	r3, r0
 800d3da:	4402      	add	r2, r0
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d100      	bne.n	800d3e2 <memset+0xa>
 800d3e0:	4770      	bx	lr
 800d3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3e6:	e7f9      	b.n	800d3dc <memset+0x4>

0800d3e8 <_free_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4605      	mov	r5, r0
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	d043      	beq.n	800d478 <_free_r+0x90>
 800d3f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3f4:	1f0c      	subs	r4, r1, #4
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	bfb8      	it	lt
 800d3fa:	18e4      	addlt	r4, r4, r3
 800d3fc:	f000 f8aa 	bl	800d554 <__malloc_lock>
 800d400:	4a1e      	ldr	r2, [pc, #120]	; (800d47c <_free_r+0x94>)
 800d402:	6813      	ldr	r3, [r2, #0]
 800d404:	4610      	mov	r0, r2
 800d406:	b933      	cbnz	r3, 800d416 <_free_r+0x2e>
 800d408:	6063      	str	r3, [r4, #4]
 800d40a:	6014      	str	r4, [r2, #0]
 800d40c:	4628      	mov	r0, r5
 800d40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d412:	f000 b8a0 	b.w	800d556 <__malloc_unlock>
 800d416:	42a3      	cmp	r3, r4
 800d418:	d90b      	bls.n	800d432 <_free_r+0x4a>
 800d41a:	6821      	ldr	r1, [r4, #0]
 800d41c:	1862      	adds	r2, r4, r1
 800d41e:	4293      	cmp	r3, r2
 800d420:	bf01      	itttt	eq
 800d422:	681a      	ldreq	r2, [r3, #0]
 800d424:	685b      	ldreq	r3, [r3, #4]
 800d426:	1852      	addeq	r2, r2, r1
 800d428:	6022      	streq	r2, [r4, #0]
 800d42a:	6063      	str	r3, [r4, #4]
 800d42c:	6004      	str	r4, [r0, #0]
 800d42e:	e7ed      	b.n	800d40c <_free_r+0x24>
 800d430:	4613      	mov	r3, r2
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	b10a      	cbz	r2, 800d43a <_free_r+0x52>
 800d436:	42a2      	cmp	r2, r4
 800d438:	d9fa      	bls.n	800d430 <_free_r+0x48>
 800d43a:	6819      	ldr	r1, [r3, #0]
 800d43c:	1858      	adds	r0, r3, r1
 800d43e:	42a0      	cmp	r0, r4
 800d440:	d10b      	bne.n	800d45a <_free_r+0x72>
 800d442:	6820      	ldr	r0, [r4, #0]
 800d444:	4401      	add	r1, r0
 800d446:	1858      	adds	r0, r3, r1
 800d448:	4282      	cmp	r2, r0
 800d44a:	6019      	str	r1, [r3, #0]
 800d44c:	d1de      	bne.n	800d40c <_free_r+0x24>
 800d44e:	6810      	ldr	r0, [r2, #0]
 800d450:	6852      	ldr	r2, [r2, #4]
 800d452:	4401      	add	r1, r0
 800d454:	6019      	str	r1, [r3, #0]
 800d456:	605a      	str	r2, [r3, #4]
 800d458:	e7d8      	b.n	800d40c <_free_r+0x24>
 800d45a:	d902      	bls.n	800d462 <_free_r+0x7a>
 800d45c:	230c      	movs	r3, #12
 800d45e:	602b      	str	r3, [r5, #0]
 800d460:	e7d4      	b.n	800d40c <_free_r+0x24>
 800d462:	6820      	ldr	r0, [r4, #0]
 800d464:	1821      	adds	r1, r4, r0
 800d466:	428a      	cmp	r2, r1
 800d468:	bf01      	itttt	eq
 800d46a:	6811      	ldreq	r1, [r2, #0]
 800d46c:	6852      	ldreq	r2, [r2, #4]
 800d46e:	1809      	addeq	r1, r1, r0
 800d470:	6021      	streq	r1, [r4, #0]
 800d472:	6062      	str	r2, [r4, #4]
 800d474:	605c      	str	r4, [r3, #4]
 800d476:	e7c9      	b.n	800d40c <_free_r+0x24>
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	bf00      	nop
 800d47c:	20000230 	.word	0x20000230

0800d480 <_malloc_r>:
 800d480:	b570      	push	{r4, r5, r6, lr}
 800d482:	1ccd      	adds	r5, r1, #3
 800d484:	f025 0503 	bic.w	r5, r5, #3
 800d488:	3508      	adds	r5, #8
 800d48a:	2d0c      	cmp	r5, #12
 800d48c:	bf38      	it	cc
 800d48e:	250c      	movcc	r5, #12
 800d490:	2d00      	cmp	r5, #0
 800d492:	4606      	mov	r6, r0
 800d494:	db01      	blt.n	800d49a <_malloc_r+0x1a>
 800d496:	42a9      	cmp	r1, r5
 800d498:	d903      	bls.n	800d4a2 <_malloc_r+0x22>
 800d49a:	230c      	movs	r3, #12
 800d49c:	6033      	str	r3, [r6, #0]
 800d49e:	2000      	movs	r0, #0
 800d4a0:	bd70      	pop	{r4, r5, r6, pc}
 800d4a2:	f000 f857 	bl	800d554 <__malloc_lock>
 800d4a6:	4a21      	ldr	r2, [pc, #132]	; (800d52c <_malloc_r+0xac>)
 800d4a8:	6814      	ldr	r4, [r2, #0]
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	b991      	cbnz	r1, 800d4d4 <_malloc_r+0x54>
 800d4ae:	4c20      	ldr	r4, [pc, #128]	; (800d530 <_malloc_r+0xb0>)
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	b91b      	cbnz	r3, 800d4bc <_malloc_r+0x3c>
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f000 f83d 	bl	800d534 <_sbrk_r>
 800d4ba:	6020      	str	r0, [r4, #0]
 800d4bc:	4629      	mov	r1, r5
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f000 f838 	bl	800d534 <_sbrk_r>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d124      	bne.n	800d512 <_malloc_r+0x92>
 800d4c8:	230c      	movs	r3, #12
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	6033      	str	r3, [r6, #0]
 800d4ce:	f000 f842 	bl	800d556 <__malloc_unlock>
 800d4d2:	e7e4      	b.n	800d49e <_malloc_r+0x1e>
 800d4d4:	680b      	ldr	r3, [r1, #0]
 800d4d6:	1b5b      	subs	r3, r3, r5
 800d4d8:	d418      	bmi.n	800d50c <_malloc_r+0x8c>
 800d4da:	2b0b      	cmp	r3, #11
 800d4dc:	d90f      	bls.n	800d4fe <_malloc_r+0x7e>
 800d4de:	600b      	str	r3, [r1, #0]
 800d4e0:	18cc      	adds	r4, r1, r3
 800d4e2:	50cd      	str	r5, [r1, r3]
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f000 f836 	bl	800d556 <__malloc_unlock>
 800d4ea:	f104 000b 	add.w	r0, r4, #11
 800d4ee:	1d23      	adds	r3, r4, #4
 800d4f0:	f020 0007 	bic.w	r0, r0, #7
 800d4f4:	1ac3      	subs	r3, r0, r3
 800d4f6:	d0d3      	beq.n	800d4a0 <_malloc_r+0x20>
 800d4f8:	425a      	negs	r2, r3
 800d4fa:	50e2      	str	r2, [r4, r3]
 800d4fc:	e7d0      	b.n	800d4a0 <_malloc_r+0x20>
 800d4fe:	684b      	ldr	r3, [r1, #4]
 800d500:	428c      	cmp	r4, r1
 800d502:	bf16      	itet	ne
 800d504:	6063      	strne	r3, [r4, #4]
 800d506:	6013      	streq	r3, [r2, #0]
 800d508:	460c      	movne	r4, r1
 800d50a:	e7eb      	b.n	800d4e4 <_malloc_r+0x64>
 800d50c:	460c      	mov	r4, r1
 800d50e:	6849      	ldr	r1, [r1, #4]
 800d510:	e7cc      	b.n	800d4ac <_malloc_r+0x2c>
 800d512:	1cc4      	adds	r4, r0, #3
 800d514:	f024 0403 	bic.w	r4, r4, #3
 800d518:	42a0      	cmp	r0, r4
 800d51a:	d005      	beq.n	800d528 <_malloc_r+0xa8>
 800d51c:	1a21      	subs	r1, r4, r0
 800d51e:	4630      	mov	r0, r6
 800d520:	f000 f808 	bl	800d534 <_sbrk_r>
 800d524:	3001      	adds	r0, #1
 800d526:	d0cf      	beq.n	800d4c8 <_malloc_r+0x48>
 800d528:	6025      	str	r5, [r4, #0]
 800d52a:	e7db      	b.n	800d4e4 <_malloc_r+0x64>
 800d52c:	20000230 	.word	0x20000230
 800d530:	20000234 	.word	0x20000234

0800d534 <_sbrk_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	2300      	movs	r3, #0
 800d538:	4c05      	ldr	r4, [pc, #20]	; (800d550 <_sbrk_r+0x1c>)
 800d53a:	4605      	mov	r5, r0
 800d53c:	4608      	mov	r0, r1
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	f7f3 fdac 	bl	800109c <_sbrk>
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	d102      	bne.n	800d54e <_sbrk_r+0x1a>
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	b103      	cbz	r3, 800d54e <_sbrk_r+0x1a>
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	bd38      	pop	{r3, r4, r5, pc}
 800d550:	2000258c 	.word	0x2000258c

0800d554 <__malloc_lock>:
 800d554:	4770      	bx	lr

0800d556 <__malloc_unlock>:
 800d556:	4770      	bx	lr

0800d558 <_init>:
 800d558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55a:	bf00      	nop
 800d55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d55e:	bc08      	pop	{r3}
 800d560:	469e      	mov	lr, r3
 800d562:	4770      	bx	lr

0800d564 <_fini>:
 800d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d566:	bf00      	nop
 800d568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56a:	bc08      	pop	{r3}
 800d56c:	469e      	mov	lr, r3
 800d56e:	4770      	bx	lr
