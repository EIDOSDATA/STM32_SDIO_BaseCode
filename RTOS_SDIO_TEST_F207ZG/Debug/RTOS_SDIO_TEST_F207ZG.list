
RTOS_SDIO_TEST_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000950c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021928  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802afc4  0802afc4  000400bc  2**0
                  CONTENTS
  4 .ARM          00000008  0802afc4  0802afc4  0003afc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802afcc  0802afcc  000400bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802afcc  0802afcc  0003afcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802afd0  0802afd0  0003afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0802afd4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af4  200000bc  0802b090  000400bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bb0  0802b090  00044bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000400bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032390  00000000  00000000  000400e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053e1  00000000  00000000  00072475  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  00077858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00006dd0  00000000  00000000  00078c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024150  00000000  00000000  0007fa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a8d1  00000000  00000000  000a3b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1efd  00000000  00000000  000be451  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019034e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae0  00000000  00000000  001903cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00032d7f  00000000  00000000  00194eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009684 	.word	0x08009684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	08009684 	.word	0x08009684

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d4:	2380      	movs	r3, #128	; 0x80
{
 80004d6:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	4d03      	ldr	r5, [pc, #12]	; (80004e8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	4c04      	ldr	r4, [pc, #16]	; (80004ec <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80004e2:	bc30      	pop	{r4, r5}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	200002d8 	.word	0x200002d8
 80004ec:	200000d8 	.word	0x200000d8

080004f0 <LED_Task_Function>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_Task_Function */
void LED_Task_Function(void const *argument)
{
 80004f0:	b508      	push	{r3, lr}
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80004f2:	4c1a      	ldr	r4, [pc, #104]	; (800055c <LED_Task_Function+0x6c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	4620      	mov	r0, r4
 80004f8:	4611      	mov	r1, r2
 80004fa:	f001 f81b 	bl	8001534 <HAL_GPIO_WritePin>
		osDelay(100);
 80004fe:	2064      	movs	r0, #100	; 0x64
 8000500:	f007 f89e 	bl	8007640 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2180      	movs	r1, #128	; 0x80
 8000508:	4620      	mov	r0, r4
 800050a:	f001 f813 	bl	8001534 <HAL_GPIO_WritePin>
		osDelay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f007 f896 	bl	8007640 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800051a:	4620      	mov	r0, r4
 800051c:	f001 f80a 	bl	8001534 <HAL_GPIO_WritePin>
		osDelay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f007 f88d 	bl	8007640 <osDelay>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	4620      	mov	r0, r4
 800052c:	f001 f802 	bl	8001534 <HAL_GPIO_WritePin>
		osDelay(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f007 f885 	bl	8007640 <osDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	4620      	mov	r0, r4
 800053c:	f000 fffa 	bl	8001534 <HAL_GPIO_WritePin>
		osDelay(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f007 f87d 	bl	8007640 <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000546:	4620      	mov	r0, r4
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054e:	f000 fff1 	bl	8001534 <HAL_GPIO_WritePin>
		osDelay(100);
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f007 f874 	bl	8007640 <osDelay>
 8000558:	e7cc      	b.n	80004f4 <LED_Task_Function+0x4>
 800055a:	bf00      	nop
 800055c:	40020400 	.word	0x40020400

08000560 <uSD_Task_Function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_uSD_Task_Function */
void uSD_Task_Function(void const *argument)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	4c1a      	ldr	r4, [pc, #104]	; (80005cc <uSD_Task_Function+0x6c>)
 8000564:	4d1a      	ldr	r5, [pc, #104]	; (80005d0 <uSD_Task_Function+0x70>)
	for (;;)
	{
		if (fileOnce == 0)
		{
			//	xSemaphoreTake(myMutex01Handle,100);
			res = f_mount(&SDFatFs, SDPath, 1);
 8000566:	4f1b      	ldr	r7, [pc, #108]	; (80005d4 <uSD_Task_Function+0x74>)
 8000568:	4e1b      	ldr	r6, [pc, #108]	; (80005d8 <uSD_Task_Function+0x78>)
				 f_close(&file);
				 }*/
			}
			else
			{
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800056a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80005f0 <uSD_Task_Function+0x90>
 800056e:	e003      	b.n	8000578 <uSD_Task_Function+0x18>
			}
			fileOnce = 1;
			//xSemaphoreGive(myMutex01Handle);
		}
		osDelay(1000);
 8000570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000574:	f007 f864 	bl	8007640 <osDelay>
		if (fileOnce == 0)
 8000578:	7823      	ldrb	r3, [r4, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f8      	bne.n	8000570 <uSD_Task_Function+0x10>
			res = f_mount(&SDFatFs, SDPath, 1);
 800057e:	4639      	mov	r1, r7
 8000580:	2201      	movs	r2, #1
 8000582:	4630      	mov	r0, r6
 8000584:	f005 fde2 	bl	800614c <f_mount>
 8000588:	4603      	mov	r3, r0
				if (f_open(&MyFile, (char*) fName, FA_WRITE | FA_CREATE_ALWAYS)
 800058a:	4914      	ldr	r1, [pc, #80]	; (80005dc <uSD_Task_Function+0x7c>)
 800058c:	4814      	ldr	r0, [pc, #80]	; (80005e0 <uSD_Task_Function+0x80>)
			res = f_mount(&SDFatFs, SDPath, 1);
 800058e:	702b      	strb	r3, [r5, #0]
			if (res == FR_OK)
 8000590:	b933      	cbnz	r3, 80005a0 <uSD_Task_Function+0x40>
				if (f_open(&MyFile, (char*) fName, FA_WRITE | FA_CREATE_ALWAYS)
 8000592:	220a      	movs	r2, #10
 8000594:	f006 f876 	bl	8006684 <f_open>
 8000598:	b148      	cbz	r0, 80005ae <uSD_Task_Function+0x4e>
			fileOnce = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	7023      	strb	r3, [r4, #0]
 800059e:	e7e7      	b.n	8000570 <uSD_Task_Function+0x10>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a6:	4640      	mov	r0, r8
 80005a8:	f000 ffc4 	bl	8001534 <HAL_GPIO_WritePin>
 80005ac:	e7f5      	b.n	800059a <uSD_Task_Function+0x3a>
					res = f_write(&MyFile, alaram, sizeof(alaram), &bytesCnt);
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <uSD_Task_Function+0x84>)
 80005b0:	2232      	movs	r2, #50	; 0x32
 80005b2:	490d      	ldr	r1, [pc, #52]	; (80005e8 <uSD_Task_Function+0x88>)
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <uSD_Task_Function+0x80>)
 80005b6:	f006 fcd9 	bl	8006f6c <f_write>
 80005ba:	7028      	strb	r0, [r5, #0]
					f_close(&MyFile);
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <uSD_Task_Function+0x80>)
 80005be:	f006 fd2f 	bl	8007020 <f_close>
					HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_6);
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <uSD_Task_Function+0x8c>)
 80005c6:	f000 ffb9 	bl	800153c <HAL_GPIO_TogglePin>
 80005ca:	e7e6      	b.n	800059a <uSD_Task_Function+0x3a>
 80005cc:	20000330 	.word	0x20000330
 80005d0:	200046b4 	.word	0x200046b4
 80005d4:	2000416c 	.word	0x2000416c
 80005d8:	20004170 	.word	0x20004170
 80005dc:	20000034 	.word	0x20000034
 80005e0:	20004488 	.word	0x20004488
 80005e4:	2000032c 	.word	0x2000032c
 80005e8:	20000000 	.word	0x20000000
 80005ec:	40021800 	.word	0x40021800
 80005f0:	40020400 	.word	0x40020400

080005f4 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin)
 80005f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80005f8:	f000 8085 	beq.w	8000706 <HAL_GPIO_EXTI_Callback+0x112>
 80005fc:	d822      	bhi.n	8000644 <HAL_GPIO_EXTI_Callback+0x50>
 80005fe:	2840      	cmp	r0, #64	; 0x40
 8000600:	d04b      	beq.n	800069a <HAL_GPIO_EXTI_Callback+0xa6>
 8000602:	2880      	cmp	r0, #128	; 0x80
 8000604:	d132      	bne.n	800066c <HAL_GPIO_EXTI_Callback+0x78>
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000606:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060a:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 800060e:	07d0      	lsls	r0, r2, #31
 8000610:	d503      	bpl.n	800061a <HAL_GPIO_EXTI_Callback+0x26>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000612:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000616:	07d1      	lsls	r1, r2, #31
 8000618:	d41f      	bmi.n	800065a <HAL_GPIO_EXTI_Callback+0x66>
 800061a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061e:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8000622:	07d2      	lsls	r2, r2, #31
 8000624:	d503      	bpl.n	800062e <HAL_GPIO_EXTI_Callback+0x3a>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000626:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800062a:	07d0      	lsls	r0, r2, #31
 800062c:	d420      	bmi.n	8000670 <HAL_GPIO_EXTI_Callback+0x7c>
 800062e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000632:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8000636:	07d1      	lsls	r1, r2, #31
 8000638:	d503      	bpl.n	8000642 <HAL_GPIO_EXTI_Callback+0x4e>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800063a:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800063e:	07d2      	lsls	r2, r2, #31
 8000640:	d41f      	bmi.n	8000682 <HAL_GPIO_EXTI_Callback+0x8e>
}
 8000642:	4770      	bx	lr
	switch (GPIO_Pin)
 8000644:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000648:	d023      	beq.n	8000692 <HAL_GPIO_EXTI_Callback+0x9e>
 800064a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800064e:	d10c      	bne.n	800066a <HAL_GPIO_EXTI_Callback+0x76>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000650:	4601      	mov	r1, r0
 8000652:	482f      	ldr	r0, [pc, #188]	; (8000710 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000654:	f000 bf72 	b.w	800153c <HAL_GPIO_TogglePin>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8000658:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	2a00      	cmp	r2, #0
 800065e:	d0fb      	beq.n	8000658 <HAL_GPIO_EXTI_Callback+0x64>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000660:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000664:	2237      	movs	r2, #55	; 0x37
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e7d7      	b.n	800061a <HAL_GPIO_EXTI_Callback+0x26>
 800066a:	4770      	bx	lr
 800066c:	4770      	bx	lr
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	2a00      	cmp	r2, #0
 8000674:	d0fb      	beq.n	800066e <HAL_GPIO_EXTI_Callback+0x7a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000676:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067a:	220d      	movs	r2, #13
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e7d6      	b.n	800062e <HAL_GPIO_EXTI_Callback+0x3a>
      __NOP();
 8000680:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	2a00      	cmp	r2, #0
 8000686:	d0fb      	beq.n	8000680 <HAL_GPIO_EXTI_Callback+0x8c>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800068c:	220a      	movs	r2, #10
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	4770      	bx	lr
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000692:	2101      	movs	r1, #1
 8000694:	481e      	ldr	r0, [pc, #120]	; (8000710 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000696:	f000 bf51 	b.w	800153c <HAL_GPIO_TogglePin>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800069a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800069e:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 80006a2:	07d0      	lsls	r0, r2, #31
 80006a4:	d503      	bpl.n	80006ae <HAL_GPIO_EXTI_Callback+0xba>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006a6:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006aa:	07d1      	lsls	r1, r2, #31
 80006ac:	d415      	bmi.n	80006da <HAL_GPIO_EXTI_Callback+0xe6>
 80006ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b2:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 80006b6:	07d2      	lsls	r2, r2, #31
 80006b8:	d503      	bpl.n	80006c2 <HAL_GPIO_EXTI_Callback+0xce>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006ba:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006be:	07d0      	lsls	r0, r2, #31
 80006c0:	d414      	bmi.n	80006ec <HAL_GPIO_EXTI_Callback+0xf8>
 80006c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c6:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 80006ca:	07d1      	lsls	r1, r2, #31
 80006cc:	d5b9      	bpl.n	8000642 <HAL_GPIO_EXTI_Callback+0x4e>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006ce:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006d2:	07d2      	lsls	r2, r2, #31
 80006d4:	d5b5      	bpl.n	8000642 <HAL_GPIO_EXTI_Callback+0x4e>
 80006d6:	e012      	b.n	80006fe <HAL_GPIO_EXTI_Callback+0x10a>
      __NOP();
 80006d8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	2a00      	cmp	r2, #0
 80006de:	d0fb      	beq.n	80006d8 <HAL_GPIO_EXTI_Callback+0xe4>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006e4:	2236      	movs	r2, #54	; 0x36
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	e7e1      	b.n	80006ae <HAL_GPIO_EXTI_Callback+0xba>
      __NOP();
 80006ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	2a00      	cmp	r2, #0
 80006f0:	d0fb      	beq.n	80006ea <HAL_GPIO_EXTI_Callback+0xf6>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f6:	220d      	movs	r2, #13
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e7e2      	b.n	80006c2 <HAL_GPIO_EXTI_Callback+0xce>
      __NOP();
 80006fc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	2a00      	cmp	r2, #0
 8000702:	d0fb      	beq.n	80006fc <HAL_GPIO_EXTI_Callback+0x108>
 8000704:	e7c0      	b.n	8000688 <HAL_GPIO_EXTI_Callback+0x94>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4801      	ldr	r0, [pc, #4]	; (8000710 <HAL_GPIO_EXTI_Callback+0x11c>)
 800070a:	f000 bf17 	b.w	800153c <HAL_GPIO_TogglePin>
 800070e:	bf00      	nop
 8000710:	40020400 	.word	0x40020400

08000714 <SystemClock_Config>:
{
 8000714:	b570      	push	{r4, r5, r6, lr}
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2010      	movs	r0, #16
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2601      	movs	r6, #1
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800071a:	2400      	movs	r4, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLM = 13;
 800071e:	210d      	movs	r1, #13
	RCC_OscInitStruct.PLL.PLLN = 195;
 8000720:	22c3      	movs	r2, #195	; 0xc3
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000722:	2305      	movs	r3, #5
{
 8000724:	b092      	sub	sp, #72	; 0x48
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000726:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLM = 13;
 800072c:	910e      	str	r1, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 800072e:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000730:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000732:	9407      	str	r4, [sp, #28]
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000734:	9401      	str	r4, [sp, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000736:	9408      	str	r4, [sp, #32]
 8000738:	940b      	str	r4, [sp, #44]	; 0x2c
 800073a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800073c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000740:	e9cd 4404 	strd	r4, r4, [sp, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	9506      	str	r5, [sp, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	950c      	str	r5, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800074a:	260f      	movs	r6, #15
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f000 ff0c 	bl	8001568 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000758:	a801      	add	r0, sp, #4
 800075a:	2103      	movs	r1, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800075e:	e9cd 6501 	strd	r6, r5, [sp, #4]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000766:	f001 f8c1 	bl	80018ec <HAL_RCC_ClockConfig>
}
 800076a:	b012      	add	sp, #72	; 0x48
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	bf00      	nop

08000770 <main>:
	GPIO_InitTypeDef GPIO_InitStruct =
 8000770:	2400      	movs	r4, #0
{
 8000772:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000776:	b097      	sub	sp, #92	; 0x5c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2702      	movs	r7, #2
	HAL_Init();
 800077a:	f000 fb6b 	bl	8000e54 <HAL_Init>
	SystemClock_Config();
 800077e:	f7ff ffc9 	bl	8000714 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8000782:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000786:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4d9b      	ldr	r5, [pc, #620]	; (80009f8 <main+0x288>)
 800078c:	9401      	str	r4, [sp, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 800078e:	940f      	str	r4, [sp, #60]	; 0x3c
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000792:	4622      	mov	r2, r4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	632b      	str	r3, [r5, #48]	; 0x30
 800079a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800079c:	f244 0181 	movw	r1, #16513	; 0x4081
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007a8:	9402      	str	r4, [sp, #8]
 80007aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007ac:	4893      	ldr	r0, [pc, #588]	; (80009fc <main+0x28c>)
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b2:	632b      	str	r3, [r5, #48]	; 0x30
 80007b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f8df b270 	ldr.w	fp, [pc, #624]	; 8000a28 <main+0x2b8>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	9302      	str	r3, [sp, #8]
 80007c0:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	9403      	str	r4, [sp, #12]
 80007c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c6:	2603      	movs	r6, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	632b      	str	r3, [r5, #48]	; 0x30
 80007ce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	f04f 090b 	mov.w	r9, #11
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	9303      	str	r3, [sp, #12]
 80007da:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	9404      	str	r4, [sp, #16]
 80007de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 80007e0:	f04f 0a06 	mov.w	sl, #6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	433b      	orrs	r3, r7
 80007e6:	632b      	str	r3, [r5, #48]	; 0x30
 80007e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	f04f 0801 	mov.w	r8, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	403b      	ands	r3, r7
 80007f0:	9304      	str	r3, [sp, #16]
 80007f2:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007f4:	9405      	str	r4, [sp, #20]
 80007f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	632b      	str	r3, [r5, #48]	; 0x30
 80007fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000800:	f003 0310 	and.w	r3, r3, #16
 8000804:	9305      	str	r3, [sp, #20]
 8000806:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000808:	9406      	str	r4, [sp, #24]
 800080a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	632b      	str	r3, [r5, #48]	; 0x30
 8000812:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000814:	f003 0308 	and.w	r3, r3, #8
 8000818:	9306      	str	r3, [sp, #24]
 800081a:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800081c:	9407      	str	r4, [sp, #28]
 800081e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	632b      	str	r3, [r5, #48]	; 0x30
 8000826:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082c:	9307      	str	r3, [sp, #28]
 800082e:	9b07      	ldr	r3, [sp, #28]
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000830:	f000 fe80 	bl	8001534 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000834:	4622      	mov	r2, r4
 8000836:	2140      	movs	r1, #64	; 0x40
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <main+0x290>)
 800083a:	f000 fe7b 	bl	8001534 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = USER_Btn_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 800083e:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000842:	a90f      	add	r1, sp, #60	; 0x3c
 8000844:	486f      	ldr	r0, [pc, #444]	; (8000a04 <main+0x294>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	e9cd 3b0f 	strd	r3, fp, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f000 fd64 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000850:	2332      	movs	r3, #50	; 0x32
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000852:	a90f      	add	r1, sp, #60	; 0x3c
 8000854:	486b      	ldr	r0, [pc, #428]	; (8000a04 <main+0x294>)
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085a:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	9411      	str	r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f000 fd5a 	bl	8001318 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	a90f      	add	r1, sp, #60	; 0x3c
 8000866:	4868      	ldr	r0, [pc, #416]	; (8000a08 <main+0x298>)
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin;
 8000870:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f000 fd50 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000878:	f244 0381 	movw	r3, #16513	; 0x4081
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	a90f      	add	r1, sp, #60	; 0x3c
 800087e:	485f      	ldr	r0, [pc, #380]	; (80009fc <main+0x28c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	e9cd 380f 	strd	r3, r8, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f000 fd46 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 800088c:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	a90f      	add	r1, sp, #60	; 0x3c
 8000892:	485e      	ldr	r0, [pc, #376]	; (8000a0c <main+0x29c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 8000894:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	e9cd b410 	strd	fp, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089a:	f000 fd3d 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008a2:	a90f      	add	r1, sp, #60	; 0x3c
 80008a4:	4855      	ldr	r0, [pc, #340]	; (80009fc <main+0x28c>)
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a6:	e9cd 6912 	strd	r6, r9, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008aa:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f000 fd32 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b4:	2304      	movs	r3, #4
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b6:	a90f      	add	r1, sp, #60	; 0x3c
 80008b8:	4851      	ldr	r0, [pc, #324]	; (8000a00 <main+0x290>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ba:	e9cd 4810 	strd	r4, r8, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008be:	930f      	str	r3, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c0:	f000 fd2a 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c4:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	a90f      	add	r1, sp, #60	; 0x3c
 80008c8:	484d      	ldr	r0, [pc, #308]	; (8000a00 <main+0x290>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	e9cd 8410 	strd	r8, r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ce:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	9412      	str	r4, [sp, #72]	; 0x48
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f000 fd21 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d6:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d8:	a90f      	add	r1, sp, #60	; 0x3c
 80008da:	4849      	ldr	r0, [pc, #292]	; (8000a00 <main+0x290>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008dc:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008de:	f04f 080a 	mov.w	r8, #10
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f000 fd17 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80008ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	a90f      	add	r1, sp, #60	; 0x3c
 80008f0:	4845      	ldr	r0, [pc, #276]	; (8000a08 <main+0x298>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	9612      	str	r6, [sp, #72]	; 0x48
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80008f4:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008fa:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f000 fd0b 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000902:	f44f 7300 	mov.w	r3, #512	; 0x200
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000906:	a90f      	add	r1, sp, #60	; 0x3c
 8000908:	483f      	ldr	r0, [pc, #252]	; (8000a08 <main+0x298>)
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800090a:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000910:	f000 fd02 	bl	8001318 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000914:	f44f 5320 	mov.w	r3, #10240	; 0x2800
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000918:	a90f      	add	r1, sp, #60	; 0x3c
 800091a:	4839      	ldr	r0, [pc, #228]	; (8000a00 <main+0x290>)
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 800091c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	9612      	str	r6, [sp, #72]	; 0x48
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	e9cd 7410 	strd	r7, r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000928:	f000 fcf6 	bl	8001318 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800092c:	4622      	mov	r2, r4
 800092e:	2105      	movs	r1, #5
 8000930:	2017      	movs	r0, #23
 8000932:	f000 fae3 	bl	8000efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000936:	2017      	movs	r0, #23
 8000938:	f000 fb16 	bl	8000f68 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800093c:	4622      	mov	r2, r4
 800093e:	2105      	movs	r1, #5
 8000940:	2028      	movs	r0, #40	; 0x28
 8000942:	f000 fadb 	bl	8000efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	; 0x28
 8000948:	f000 fb0e 	bl	8000f68 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA2_CLK_ENABLE();
 800094c:	9400      	str	r4, [sp, #0]
 800094e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000950:	4622      	mov	r2, r4
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000956:	632b      	str	r3, [r5, #48]	; 0x30
 8000958:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 800095a:	4651      	mov	r1, sl
	__HAL_RCC_DMA2_CLK_ENABLE();
 800095c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000960:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000962:	203b      	movs	r0, #59	; 0x3b
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000964:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000966:	f000 fac9 	bl	8000efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800096a:	203b      	movs	r0, #59	; 0x3b
 800096c:	f000 fafc 	bl	8000f68 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 8000970:	4622      	mov	r2, r4
 8000972:	4651      	mov	r1, sl
 8000974:	2045      	movs	r0, #69	; 0x45
 8000976:	f000 fac1 	bl	8000efc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800097a:	2045      	movs	r0, #69	; 0x45
 800097c:	f000 faf4 	bl	8000f68 <HAL_NVIC_EnableIRQ>
	huart3.Init.BaudRate = 115200;
 8000980:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	220c      	movs	r2, #12
	huart3.Instance = USART3;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <main+0x2a0>)
 8000988:	f5a5 35f8 	sub.w	r5, r5, #126976	; 0x1f000
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800098c:	4618      	mov	r0, r3
	huart3.Init.BaudRate = 115200;
 800098e:	e9c3 5100 	strd	r5, r1, [r3]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000992:	615a      	str	r2, [r3, #20]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	e9c3 4402 	strd	r4, r4, [r3, #8]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000998:	611c      	str	r4, [r3, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800099a:	e9c3 4406 	strd	r4, r4, [r3, #24]
	osThreadDef(LED_Task, LED_Task_Function, osPriorityNormal, 0, 128);
 800099e:	4d1d      	ldr	r5, [pc, #116]	; (8000a14 <main+0x2a4>)
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a0:	f002 f894 	bl	8002acc <HAL_UART_Init>
	hsd.Instance = SDIO;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <main+0x2a8>)
 80009a6:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <main+0x2ac>)
	osThreadDef(LED_Task, LED_Task_Function, osPriorityNormal, 0, 128);
 80009a8:	ae08      	add	r6, sp, #32
	hsd.Init.ClockDiv = 10;
 80009aa:	f8c3 8018 	str.w	r8, [r3, #24]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80009ae:	e9c3 4401 	strd	r4, r4, [r3, #4]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80009b2:	e9c3 4403 	strd	r4, r4, [r3, #12]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80009b6:	615c      	str	r4, [r3, #20]
	hsd.Instance = SDIO;
 80009b8:	601a      	str	r2, [r3, #0]
	MX_FATFS_Init();
 80009ba:	f002 fdf9 	bl	80035b0 <MX_FATFS_Init>
	osThreadDef(LED_Task, LED_Task_Function, osPriorityNormal, 0, 128);
 80009be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 80009ca:	4621      	mov	r1, r4
 80009cc:	a808      	add	r0, sp, #32
 80009ce:	f006 fe0d 	bl	80075ec <osThreadCreate>
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <main+0x2b0>)
	osThreadDef(uSD_Task, uSD_Task_Function, osPriorityIdle, 0, 128);
 80009d4:	ae0f      	add	r6, sp, #60	; 0x3c
 80009d6:	350c      	adds	r5, #12
	LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 80009d8:	6018      	str	r0, [r3, #0]
	osThreadDef(uSD_Task, uSD_Task_Function, osPriorityIdle, 0, 128);
 80009da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	uSD_TaskHandle = osThreadCreate(osThread(uSD_Task), NULL);
 80009e6:	4621      	mov	r1, r4
 80009e8:	a80f      	add	r0, sp, #60	; 0x3c
 80009ea:	f006 fdff 	bl	80075ec <osThreadCreate>
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <main+0x2b4>)
 80009f0:	6018      	str	r0, [r3, #0]
	osKernelStart();
 80009f2:	f006 fdf5 	bl	80075e0 <osKernelStart>
 80009f6:	e7fe      	b.n	80009f6 <main+0x286>
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	20004114 	.word	0x20004114
 8000a14:	0800969c 	.word	0x0800969c
 8000a18:	20004404 	.word	0x20004404
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	20004168 	.word	0x20004168
 8000a24:	200046b8 	.word	0x200046b8
 8000a28:	10110000 	.word	0x10110000

08000a2c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 8000a2c:	6802      	ldr	r2, [r0, #0]
 8000a2e:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d000      	beq.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0xa>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a34:	4770      	bx	lr
		HAL_IncTick();
 8000a36:	f000 ba27 	b.w	8000e88 <HAL_IncTick>
 8000a3a:	bf00      	nop
 8000a3c:	40014000 	.word	0x40014000

08000a40 <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	2000      	movs	r0, #0
{
 8000a46:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_MspInit+0x40>)
{
 8000a4a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4c:	9000      	str	r0, [sp, #0]
 8000a4e:	6c59      	ldr	r1, [r3, #68]	; 0x44
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a50:	4602      	mov	r2, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000a56:	6459      	str	r1, [r3, #68]	; 0x44
 8000a58:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a5a:	210f      	movs	r1, #15
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5c:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000a60:	9400      	str	r4, [sp, #0]
 8000a62:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	9001      	str	r0, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a66:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8000a6c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000a70:	641c      	str	r4, [r3, #64]	; 0x40
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	b003      	add	sp, #12
 8000a7e:	bc10      	pop	{r4}
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a80:	f000 ba3c 	b.w	8000efc <HAL_NVIC_SetPriority>
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	2400      	movs	r4, #0
  if(hsd->Instance==SDIO)
 8000a8e:	6802      	ldr	r2, [r0, #0]
 8000a90:	4b54      	ldr	r3, [pc, #336]	; (8000be4 <HAL_SD_MspInit+0x15c>)
{
 8000a92:	b088      	sub	sp, #32
  if(hsd->Instance==SDIO)
 8000a94:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000a9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000a9e:	9407      	str	r4, [sp, #28]
  if(hsd->Instance==SDIO)
 8000aa0:	d002      	beq.n	8000aa8 <HAL_SD_MspInit+0x20>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000aa2:	b008      	add	sp, #32
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa8:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000aac:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000aae:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2703      	movs	r7, #3
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ab8:	9400      	str	r4, [sp, #0]
 8000aba:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ac6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	4847      	ldr	r0, [pc, #284]	; (8000be8 <HAL_SD_MspInit+0x160>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000acc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000ad0:	9200      	str	r2, [sp, #0]
 8000ad2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	9401      	str	r4, [sp, #4]
 8000ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000ad8:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	ea42 0208 	orr.w	r2, r2, r8
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ae4:	ea02 0208 	and.w	r2, r2, r8
 8000ae8:	9201      	str	r2, [sp, #4]
 8000aea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aec:	9402      	str	r4, [sp, #8]
 8000aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af0:	f042 0208 	orr.w	r2, r2, #8
 8000af4:	631a      	str	r2, [r3, #48]	; 0x30
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000af8:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	eb0d 0105 	add.w	r1, sp, r5
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b0a:	e9cd 7506 	strd	r7, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f000 fc03 	bl	8001318 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	eb0d 0105 	add.w	r1, sp, r5
 8000b16:	4835      	ldr	r0, [pc, #212]	; (8000bec <HAL_SD_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b1c:	e9cd 7506 	strd	r7, r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b22:	f8cd 800c 	str.w	r8, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f000 fbf7 	bl	8001318 <HAL_GPIO_Init>
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2a:	2040      	movs	r0, #64	; 0x40
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b30:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b34:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b38:	2120      	movs	r1, #32
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b42:	4d2b      	ldr	r5, [pc, #172]	; (8000bf0 <HAL_SD_MspInit+0x168>)
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b44:	60ec      	str	r4, [r5, #12]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	622c      	str	r4, [r5, #32]
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b48:	4c2a      	ldr	r4, [pc, #168]	; (8000bf4 <HAL_SD_MspInit+0x16c>)
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b4a:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b4c:	4628      	mov	r0, r5
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b4e:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b52:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000b54:	e9c5 4a00 	strd	r4, sl, [r5]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b58:	e9c5 9e04 	strd	r9, lr, [r5, #16]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b5c:	e9c5 c106 	strd	ip, r1, [r5, #24]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b60:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b64:	f000 fa0e 	bl	8000f84 <HAL_DMA_Init>
 8000b68:	bba8      	cbnz	r0, 8000bd6 <HAL_SD_MspInit+0x14e>
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b6a:	2003      	movs	r0, #3
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b6c:	2704      	movs	r7, #4
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6e:	2300      	movs	r3, #0
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b70:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b74:	f44f 6980 	mov.w	r9, #1024	; 0x400
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b78:	f44f 5880 	mov.w	r8, #4096	; 0x1000
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b7c:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000b80:	f04f 0c20 	mov.w	ip, #32
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b84:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000b8c:	4c1a      	ldr	r4, [pc, #104]	; (8000bf8 <HAL_SD_MspInit+0x170>)
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000b8e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8000b90:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000b92:	4d1a      	ldr	r5, [pc, #104]	; (8000bfc <HAL_SD_MspInit+0x174>)
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b94:	e9c4 7009 	strd	r7, r0, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000b98:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b9a:	f8c4 a004 	str.w	sl, [r4, #4]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	f8c4 9010 	str.w	r9, [r4, #16]
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000ba2:	6025      	str	r5, [r4, #0]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba4:	e9c4 8e05 	strd	r8, lr, [r4, #20]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ba8:	f8c4 c01c 	str.w	ip, [r4, #28]
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000bac:	e9c4 120b 	strd	r1, r2, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb0:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bb4:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000bb6:	f000 f9e5 	bl	8000f84 <HAL_DMA_Init>
 8000bba:	b978      	cbnz	r0, 8000bdc <HAL_SD_MspInit+0x154>
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2105      	movs	r1, #5
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000bc0:	6434      	str	r4, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000bc2:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000bc4:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000bc6:	f000 f999 	bl	8000efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000bca:	2031      	movs	r0, #49	; 0x31
 8000bcc:	f000 f9cc 	bl	8000f68 <HAL_NVIC_EnableIRQ>
}
 8000bd0:	b008      	add	sp, #32
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Error_Handler();
 8000bd6:	f7ff ff33 	bl	8000a40 <Error_Handler>
 8000bda:	e7c6      	b.n	8000b6a <HAL_SD_MspInit+0xe2>
      Error_Handler();
 8000bdc:	f7ff ff30 	bl	8000a40 <Error_Handler>
 8000be0:	e7ec      	b.n	8000bbc <HAL_SD_MspInit+0x134>
 8000be2:	bf00      	nop
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020c00 	.word	0x40020c00
 8000bf0:	200043a4 	.word	0x200043a4
 8000bf4:	400264a0 	.word	0x400264a0
 8000bf8:	200040b4 	.word	0x200040b4
 8000bfc:	40026458 	.word	0x40026458

08000c00 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	2300      	movs	r3, #0
{
 8000c02:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(huart->Instance==USART3)
 8000c04:	6801      	ldr	r1, [r0, #0]
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <HAL_UART_MspInit+0x68>)
{
 8000c08:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART3)
 8000c0a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000c10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000c14:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000c16:	d001      	beq.n	8000c1c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c18:	b009      	add	sp, #36	; 0x24
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c1c:	f44f 7740 	mov.w	r7, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c24:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8000c2c:	6c10      	ldr	r0, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c30:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8000c34:	6410      	str	r0, [r2, #64]	; 0x40
 8000c36:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8000c38:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 8000c3c:	9001      	str	r0, [sp, #4]
 8000c3e:	9801      	ldr	r0, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c4e:	9703      	str	r7, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c5a:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f000 fb5b 	bl	8001318 <HAL_GPIO_Init>
}
 8000c62:	b009      	add	sp, #36	; 0x24
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40004800 	.word	0x40004800
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c72:	2500      	movs	r5, #0
{
 8000c74:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000c76:	4601      	mov	r1, r0
 8000c78:	462a      	mov	r2, r5
 8000c7a:	2018      	movs	r0, #24
 8000c7c:	f000 f93e 	bl	8000efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c80:	2018      	movs	r0, #24
 8000c82:	f000 f971 	bl	8000f68 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_InitTick+0x70>)
 8000c88:	9502      	str	r5, [sp, #8]
 8000c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8c:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c92:	645a      	str	r2, [r3, #68]	; 0x44
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c96:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f000 ff22 	bl	8001ae8 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ca4:	f000 ff08 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cac:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <HAL_InitTick+0x74>)
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cae:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb0:	fba1 1303 	umull	r1, r3, r1, r3
  htim9.Instance = TIM9;
 8000cb4:	4c0c      	ldr	r4, [pc, #48]	; (8000ce8 <HAL_InitTick+0x78>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb6:	0c9b      	lsrs	r3, r3, #18
  htim9.Instance = TIM9;
 8000cb8:	490c      	ldr	r1, [pc, #48]	; (8000cec <HAL_InitTick+0x7c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cba:	3b01      	subs	r3, #1
  htim9.Init.Prescaler = uwPrescalerValue;
  htim9.Init.ClockDivision = 0;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000cbc:	4620      	mov	r0, r4
  htim9.Init.Prescaler = uwPrescalerValue;
 8000cbe:	6063      	str	r3, [r4, #4]
  htim9.Init.ClockDivision = 0;
 8000cc0:	6125      	str	r5, [r4, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	60a5      	str	r5, [r4, #8]
  htim9.Instance = TIM9;
 8000cc4:	6021      	str	r1, [r4, #0]
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000cc6:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000cc8:	f001 fd7a 	bl	80027c0 <HAL_TIM_Base_Init>
 8000ccc:	b110      	cbz	r0, 8000cd4 <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
  }

  /* Return function status */
  return HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
}
 8000cd0:	b009      	add	sp, #36	; 0x24
 8000cd2:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim9);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f001 fe07 	bl	80028e8 <HAL_TIM_Base_Start_IT>
}
 8000cda:	b009      	add	sp, #36	; 0x24
 8000cdc:	bd30      	pop	{r4, r5, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	431bde83 	.word	0x431bde83
 8000ce8:	200046bc 	.word	0x200046bc
 8000cec:	40014000 	.word	0x40014000

08000cf0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	e7fe      	b.n	8000cf4 <HardFault_Handler>
 8000cf6:	bf00      	nop

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler>
 8000cfa:	bf00      	nop

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	e7fe      	b.n	8000cfc <BusFault_Handler>
 8000cfe:	bf00      	nop

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler>
 8000d02:	bf00      	nop

08000d04 <DebugMon_Handler>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d0a:	2040      	movs	r0, #64	; 0x40
 8000d0c:	f000 fc20 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d14:	2080      	movs	r0, #128	; 0x80
 8000d16:	f000 bc1b 	b.w	8001550 <HAL_GPIO_EXTI_IRQHandler>
 8000d1a:	bf00      	nop

08000d1c <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d1c:	4801      	ldr	r0, [pc, #4]	; (8000d24 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8000d1e:	f001 be27 	b.w	8002970 <HAL_TIM_IRQHandler>
 8000d22:	bf00      	nop
 8000d24:	200046bc 	.word	0x200046bc

08000d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d2e:	f000 fc0f 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d36:	f000 fc0b 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d3e:	f000 fc07 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000d46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d4a:	f000 bc01 	b.w	8001550 <HAL_GPIO_EXTI_IRQHandler>
 8000d4e:	bf00      	nop

08000d50 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000d50:	4801      	ldr	r0, [pc, #4]	; (8000d58 <SDIO_IRQHandler+0x8>)
 8000d52:	f001 b947 	b.w	8001fe4 <HAL_SD_IRQHandler>
 8000d56:	bf00      	nop
 8000d58:	20004404 	.word	0x20004404

08000d5c <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d5c:	4801      	ldr	r0, [pc, #4]	; (8000d64 <DMA2_Stream3_IRQHandler+0x8>)
 8000d5e:	f000 ba03 	b.w	8001168 <HAL_DMA_IRQHandler>
 8000d62:	bf00      	nop
 8000d64:	200040b4 	.word	0x200040b4

08000d68 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d68:	4801      	ldr	r0, [pc, #4]	; (8000d70 <DMA2_Stream6_IRQHandler+0x8>)
 8000d6a:	f000 b9fd 	b.w	8001168 <HAL_DMA_IRQHandler>
 8000d6e:	bf00      	nop
 8000d70:	200043a4 	.word	0x200043a4

08000d74 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	490d      	ldr	r1, [pc, #52]	; (8000dac <_sbrk+0x38>)
{
 8000d76:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <_sbrk+0x3c>)
 8000d7a:	4c0e      	ldr	r4, [pc, #56]	; (8000db4 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8000d7c:	680b      	ldr	r3, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000d80:	b12b      	cbz	r3, 8000d8e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4418      	add	r0, r3
 8000d84:	4290      	cmp	r0, r2
 8000d86:	d808      	bhi.n	8000d9a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000d88:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000d8e:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <_sbrk+0x44>)
 8000d90:	4623      	mov	r3, r4
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4418      	add	r0, r3
 8000d94:	4290      	cmp	r0, r2
    __sbrk_heap_end = &_end;
 8000d96:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000d98:	d9f6      	bls.n	8000d88 <_sbrk+0x14>
    errno = ENOMEM;
 8000d9a:	f008 fb6d 	bl	8009478 <__errno>
 8000d9e:	220c      	movs	r2, #12
    return (void *)-1;
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
    errno = ENOMEM;
 8000da4:	6002      	str	r2, [r0, #0]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	bf00      	nop
 8000dac:	20000334 	.word	0x20000334
 8000db0:	20020000 	.word	0x20020000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20004bb0 	.word	0x20004bb0

08000dbc <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000dbc:	2100      	movs	r1, #0
{
 8000dbe:	b430      	push	{r4, r5}

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc0:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= (uint32_t)0x00000001;
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <SystemInit+0x38>)
  RCC->PLLCFGR = 0x24003010;
 8000dc6:	4d0c      	ldr	r5, [pc, #48]	; (8000df8 <SystemInit+0x3c>)
  RCC->CR |= (uint32_t)0x00000001;
 8000dc8:	681a      	ldr	r2, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <SystemInit+0x40>)
  RCC->CR |= (uint32_t)0x00000001;
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000dd2:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000dda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000dde:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8000de0:	605d      	str	r5, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000de8:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8000dea:	60d9      	str	r1, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	6084      	str	r4, [r0, #8]
#endif
}
 8000dee:	bc30      	pop	{r4, r5}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	24003010 	.word	0x24003010
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000e04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e06:	e003      	b.n	8000e10 <LoopCopyDataInit>

08000e08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e0e:	3104      	adds	r1, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e18:	d3f6      	bcc.n	8000e08 <CopyDataInit>
  ldr  r2, =_sbss
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e1c:	e002      	b.n	8000e24 <LoopFillZerobss>

08000e1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000e1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e20:	f842 3b04 	str.w	r3, [r2], #4

08000e24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e28:	d3f9      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2a:	f7ff ffc7 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f008 fb29 	bl	8009484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fc9d 	bl	8000770 <main>
  bx  lr
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e3c:	0802afd4 	.word	0x0802afd4
  ldr  r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e44:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8000e48:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8000e4c:	20004bb0 	.word	0x20004bb0

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x30>)
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e60:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e68:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e70:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	f000 f831 	bl	8000ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff fefa 	bl	8000c70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fde2 	bl	8000a44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000e80:	2000      	movs	r0, #0
 8000e82:	bd08      	pop	{r3, pc}
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_IncTick+0x10>)
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_IncTick+0x14>)
 8000e8c:	6811      	ldr	r1, [r2, #0]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	440b      	add	r3, r1
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20004704 	.word	0x20004704
 8000e9c:	20000048 	.word	0x20000048

08000ea0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <HAL_GetTick+0x8>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20004704 	.word	0x20004704

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000eac:	b530      	push	{r4, r5, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb2:	f7ff fff5 	bl	8000ea0 <HAL_GetTick>
  uint32_t wait = Delay;
 8000eb6:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	4605      	mov	r5, r0

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	1c63      	adds	r3, r4, #1
 8000ebc:	d002      	beq.n	8000ec4 <HAL_Delay+0x18>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_Delay+0x28>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec4:	f7ff ffec 	bl	8000ea0 <HAL_GetTick>
 8000ec8:	1b40      	subs	r0, r0, r5
 8000eca:	42a0      	cmp	r0, r4
 8000ecc:	d3fa      	bcc.n	8000ec4 <HAL_Delay+0x18>
  {
  }
}
 8000ece:	b003      	add	sp, #12
 8000ed0:	bd30      	pop	{r4, r5, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000048 	.word	0x20000048

08000ed8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ede:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ef0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ef2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b430      	push	{r4, r5}
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f06:	f1c3 0507 	rsb	r5, r3, #7
 8000f0a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	bf28      	it	cs
 8000f12:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f14:	2c06      	cmp	r4, #6
 8000f16:	d919      	bls.n	8000f4c <HAL_NVIC_SetPriority+0x50>
 8000f18:	f04f 34ff 	mov.w	r4, #4294967295
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	409c      	lsls	r4, r3
 8000f20:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	40aa      	lsls	r2, r5
 8000f2a:	ea21 0102 	bic.w	r1, r1, r2
 8000f2e:	fa01 f203 	lsl.w	r2, r1, r3
 8000f32:	4322      	orrs	r2, r4
 8000f34:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000f36:	2800      	cmp	r0, #0
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	db0a      	blt.n	8000f52 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000f40:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000f44:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f48:	bc30      	pop	{r4, r5}
 8000f4a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	4623      	mov	r3, r4
 8000f50:	e7e8      	b.n	8000f24 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_NVIC_SetPriority+0x68>)
 8000f54:	f000 000f 	and.w	r0, r0, #15
 8000f58:	4403      	add	r3, r0
 8000f5a:	761a      	strb	r2, [r3, #24]
 8000f5c:	bc30      	pop	{r4, r5}
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	e000ecfc 	.word	0xe000ecfc

08000f68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	db07      	blt.n	8000f7c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	f000 011f 	and.w	r1, r0, #31
 8000f72:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <HAL_NVIC_EnableIRQ+0x18>)
 8000f74:	408b      	lsls	r3, r1
 8000f76:	0940      	lsrs	r0, r0, #5
 8000f78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ff8a 	bl	8000ea0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f8c:	2c00      	cmp	r4, #0
 8000f8e:	d056      	beq.n	800103e <HAL_DMA_Init+0xba>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8000f92:	2100      	movs	r1, #0
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f94:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f96:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4605      	mov	r5, r0
 8000f9e:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8000fa2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa8:	e005      	b.n	8000fb6 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000faa:	f7ff ff79 	bl	8000ea0 <HAL_GetTick>
 8000fae:	1b40      	subs	r0, r0, r5
 8000fb0:	2805      	cmp	r0, #5
 8000fb2:	d83d      	bhi.n	8001030 <HAL_DMA_Init+0xac>
 8000fb4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	07d1      	lsls	r1, r2, #31
 8000fba:	d4f6      	bmi.n	8000faa <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fbc:	68e1      	ldr	r1, [r4, #12]
 8000fbe:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8000fc2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc4:	6920      	ldr	r0, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc8:	6961      	ldr	r1, [r4, #20]
 8000fca:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fcc:	69a5      	ldr	r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd0:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd2:	6a21      	ldr	r1, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd4:	432a      	orrs	r2, r5
 8000fd6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fd8:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 8000fda:	681e      	ldr	r6, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fdc:	4834      	ldr	r0, [pc, #208]	; (80010b0 <HAL_DMA_Init+0x12c>)

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fde:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fe0:	4030      	ands	r0, r6
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe2:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fe4:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe8:	d02b      	beq.n	8001042 <HAL_DMA_Init+0xbe>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fec:	6958      	ldr	r0, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fee:	f020 0007 	bic.w	r0, r0, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ff2:	4308      	orrs	r0, r1
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	492f      	ldr	r1, [pc, #188]	; (80010b4 <HAL_DMA_Init+0x130>)
 8000ff8:	3a10      	subs	r2, #16
 8000ffa:	fba1 1202 	umull	r1, r2, r1, r2
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000ffe:	492e      	ldr	r1, [pc, #184]	; (80010b8 <HAL_DMA_Init+0x134>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001000:	0912      	lsrs	r2, r2, #4
  hdma->Instance->FCR = tmp;
 8001002:	6158      	str	r0, [r3, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001004:	5c8d      	ldrb	r5, [r1, r2]
 8001006:	f423 717f 	bic.w	r1, r3, #1020	; 0x3fc
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800100a:	233f      	movs	r3, #63	; 0x3f
  
  if (stream_number > 3U)
 800100c:	2a03      	cmp	r2, #3
  hdma->State = HAL_DMA_STATE_READY;
 800100e:	f04f 0601 	mov.w	r6, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f021 0103 	bic.w	r1, r1, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800101a:	bf88      	it	hi
 800101c:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800101e:	40ab      	lsls	r3, r5
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001020:	65e5      	str	r5, [r4, #92]	; 0x5c
 8001022:	65a1      	str	r1, [r4, #88]	; 0x58
  return HAL_OK;
 8001024:	4610      	mov	r0, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001026:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001028:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800102a:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
}
 800102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001030:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001032:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8001034:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001036:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001038:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800103e:	2001      	movs	r0, #1
}
 8001040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001042:	e9d4 610b 	ldrd	r6, r1, [r4, #44]	; 0x2c
 8001046:	4331      	orrs	r1, r6
 8001048:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 800104a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800104c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800104e:	6958      	ldr	r0, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8001050:	f047 0104 	orr.w	r1, r7, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001054:	f020 0007 	bic.w	r0, r0, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001058:	4308      	orrs	r0, r1
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800105a:	2e00      	cmp	r6, #0
 800105c:	d0ca      	beq.n	8000ff4 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800105e:	b17d      	cbz	r5, 8001080 <HAL_DMA_Init+0xfc>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001060:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001064:	d016      	beq.n	8001094 <HAL_DMA_Init+0x110>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001066:	2f02      	cmp	r7, #2
 8001068:	d903      	bls.n	8001072 <HAL_DMA_Init+0xee>
 800106a:	2f03      	cmp	r7, #3
 800106c:	d1c2      	bne.n	8000ff4 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800106e:	01f2      	lsls	r2, r6, #7
 8001070:	d5c0      	bpl.n	8000ff4 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001072:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001074:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8001076:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001078:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800107a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800107e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001080:	2f01      	cmp	r7, #1
 8001082:	d003      	beq.n	800108c <HAL_DMA_Init+0x108>
 8001084:	d3f3      	bcc.n	800106e <HAL_DMA_Init+0xea>
 8001086:	2f02      	cmp	r7, #2
 8001088:	d1b4      	bne.n	8000ff4 <HAL_DMA_Init+0x70>
 800108a:	e7f0      	b.n	800106e <HAL_DMA_Init+0xea>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800108c:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8001090:	d1b0      	bne.n	8000ff4 <HAL_DMA_Init+0x70>
 8001092:	e7ee      	b.n	8001072 <HAL_DMA_Init+0xee>
    switch (tmp)
 8001094:	2f03      	cmp	r7, #3
 8001096:	d8ad      	bhi.n	8000ff4 <HAL_DMA_Init+0x70>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <HAL_DMA_Init+0x11c>)
 800109a:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 800109e:	bf00      	nop
 80010a0:	08001073 	.word	0x08001073
 80010a4:	0800106f 	.word	0x0800106f
 80010a8:	08001073 	.word	0x08001073
 80010ac:	0800108d 	.word	0x0800108d
 80010b0:	f010803f 	.word	0xf010803f
 80010b4:	aaaaaaab 	.word	0xaaaaaaab
 80010b8:	08009704 	.word	0x08009704

080010bc <HAL_DMA_Start_IT>:
{
 80010bc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80010be:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80010c2:	2c01      	cmp	r4, #1
 80010c4:	d037      	beq.n	8001136 <HAL_DMA_Start_IT+0x7a>
 80010c6:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80010c8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 80010cc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80010d0:	42ac      	cmp	r4, r5
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010d2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80010d4:	d128      	bne.n	8001128 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d6:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d8:	2500      	movs	r5, #0
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010da:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80010dc:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010e0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010e2:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010e4:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80010e6:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80010ea:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80010ec:	6063      	str	r3, [r4, #4]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ee:	233f      	movs	r3, #63	; 0x3f
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010f0:	2f40      	cmp	r7, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80010f2:	bf0a      	itet	eq
 80010f4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80010f6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80010f8:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fa:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 80010fc:	bf18      	it	ne
 80010fe:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001100:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8001102:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001104:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	f043 0316 	orr.w	r3, r3, #22
 800110c:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800110e:	b11a      	cbz	r2, 8001118 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001118:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 800111a:	6822      	ldr	r2, [r4, #0]
}
 800111c:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	6022      	str	r2, [r4, #0]
}
 8001124:	bcf0      	pop	{r4, r5, r6, r7}
 8001126:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8001128:	2200      	movs	r2, #0
}
 800112a:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 800112c:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 800112e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 8001132:	4618      	mov	r0, r3
 8001134:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001136:	2302      	movs	r3, #2
}
 8001138:	bcf0      	pop	{r4, r5, r6, r7}
 800113a:	4618      	mov	r0, r3
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001140:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8001144:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001146:	2a02      	cmp	r2, #2
 8001148:	d003      	beq.n	8001152 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800114c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001150:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001152:	2105      	movs	r1, #5
    __HAL_DMA_DISABLE(hdma);
 8001154:	681a      	ldr	r2, [r3, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001156:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800115a:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800115c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop

08001168 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0U;
 8001168:	2300      	movs	r3, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800116a:	2208      	movs	r2, #8
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800116e:	6d87      	ldr	r7, [r0, #88]	; 0x58
{
 8001170:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001172:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001174:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001176:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001178:	4964      	ldr	r1, [pc, #400]	; (800130c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800117a:	409a      	lsls	r2, r3
 800117c:	422a      	tst	r2, r5
{
 800117e:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001180:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001182:	d003      	beq.n	800118c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001184:	6801      	ldr	r1, [r0, #0]
 8001186:	6808      	ldr	r0, [r1, #0]
 8001188:	0740      	lsls	r0, r0, #29
 800118a:	d459      	bmi.n	8001240 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800118c:	2201      	movs	r2, #1
 800118e:	409a      	lsls	r2, r3
 8001190:	422a      	tst	r2, r5
 8001192:	d003      	beq.n	800119c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001194:	6821      	ldr	r1, [r4, #0]
 8001196:	6949      	ldr	r1, [r1, #20]
 8001198:	0608      	lsls	r0, r1, #24
 800119a:	d474      	bmi.n	8001286 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800119c:	2204      	movs	r2, #4
 800119e:	409a      	lsls	r2, r3
 80011a0:	422a      	tst	r2, r5
 80011a2:	d003      	beq.n	80011ac <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011a4:	6821      	ldr	r1, [r4, #0]
 80011a6:	6809      	ldr	r1, [r1, #0]
 80011a8:	0789      	lsls	r1, r1, #30
 80011aa:	d466      	bmi.n	800127a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	2210      	movs	r2, #16
 80011ae:	409a      	lsls	r2, r3
 80011b0:	422a      	tst	r2, r5
 80011b2:	d003      	beq.n	80011bc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011b4:	6821      	ldr	r1, [r4, #0]
 80011b6:	6808      	ldr	r0, [r1, #0]
 80011b8:	0700      	lsls	r0, r0, #28
 80011ba:	d44b      	bmi.n	8001254 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011bc:	2220      	movs	r2, #32
 80011be:	409a      	lsls	r2, r3
 80011c0:	422a      	tst	r2, r5
 80011c2:	d014      	beq.n	80011ee <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011c4:	6821      	ldr	r1, [r4, #0]
 80011c6:	6808      	ldr	r0, [r1, #0]
 80011c8:	06c0      	lsls	r0, r0, #27
 80011ca:	d510      	bpl.n	80011ee <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011cc:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011ce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80011d2:	2a05      	cmp	r2, #5
 80011d4:	d063      	beq.n	800129e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011d6:	680b      	ldr	r3, [r1, #0]
 80011d8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011dc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011de:	d07e      	beq.n	80012de <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011e0:	0319      	lsls	r1, r3, #12
 80011e2:	f140 8089 	bpl.w	80012f8 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80011e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011e8:	b10b      	cbz	r3, 80011ee <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80011ea:	4620      	mov	r0, r4
 80011ec:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011f0:	b323      	cbz	r3, 800123c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011f4:	07da      	lsls	r2, r3, #31
 80011f6:	d51a      	bpl.n	800122e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80011f8:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600U;
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 80011fc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80011fe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8001202:	fba3 3606 	umull	r3, r6, r3, r6
      __HAL_DMA_DISABLE(hdma);
 8001206:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001208:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e002      	b.n	8001218 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	07db      	lsls	r3, r3, #31
 8001216:	d504      	bpl.n	8001222 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001218:	9b01      	ldr	r3, [sp, #4]
 800121a:	3301      	adds	r3, #1
 800121c:	42b3      	cmp	r3, r6
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	d9f7      	bls.n	8001212 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001222:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001224:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001226:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800122a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800122e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001230:	b123      	cbz	r3, 800123c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001232:	4620      	mov	r0, r4
}
 8001234:	b003      	add	sp, #12
 8001236:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800123a:	4718      	bx	r3
}
 800123c:	b003      	add	sp, #12
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001240:	6808      	ldr	r0, [r1, #0]
 8001242:	f020 0004 	bic.w	r0, r0, #4
 8001246:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001248:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800124a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	6562      	str	r2, [r4, #84]	; 0x54
 8001252:	e79b      	b.n	800118c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001254:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001256:	680a      	ldr	r2, [r1, #0]
 8001258:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800125c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800125e:	d118      	bne.n	8001292 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001260:	05d2      	lsls	r2, r2, #23
 8001262:	d403      	bmi.n	800126c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001264:	680a      	ldr	r2, [r1, #0]
 8001266:	f022 0208 	bic.w	r2, r2, #8
 800126a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800126c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800126e:	2a00      	cmp	r2, #0
 8001270:	d0a4      	beq.n	80011bc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001272:	4620      	mov	r0, r4
 8001274:	4790      	blx	r2
 8001276:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001278:	e7a0      	b.n	80011bc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800127a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800127c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800127e:	f042 0204 	orr.w	r2, r2, #4
 8001282:	6562      	str	r2, [r4, #84]	; 0x54
 8001284:	e792      	b.n	80011ac <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001286:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001288:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800128a:	f042 0202 	orr.w	r2, r2, #2
 800128e:	6562      	str	r2, [r4, #84]	; 0x54
 8001290:	e784      	b.n	800119c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001292:	0311      	lsls	r1, r2, #12
 8001294:	d5ea      	bpl.n	800126c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001296:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001298:	2a00      	cmp	r2, #0
 800129a:	d1ea      	bne.n	8001272 <HAL_DMA_IRQHandler+0x10a>
 800129c:	e78e      	b.n	80011bc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a2:	f022 0216 	bic.w	r2, r2, #22
 80012a6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a8:	694a      	ldr	r2, [r1, #20]
 80012aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ae:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b0:	b338      	cbz	r0, 8001302 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b2:	680a      	ldr	r2, [r1, #0]
 80012b4:	f022 0208 	bic.w	r2, r2, #8
 80012b8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ba:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80012bc:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80012be:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80012c4:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80012c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80012cc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80012d0:	2a00      	cmp	r2, #0
 80012d2:	d0b3      	beq.n	800123c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80012d4:	4620      	mov	r0, r4
}
 80012d6:	b003      	add	sp, #12
 80012d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80012dc:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012de:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80012e2:	d180      	bne.n	80011e6 <HAL_DMA_IRQHandler+0x7e>
          hdma->State = HAL_DMA_STATE_READY;
 80012e4:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012e6:	680a      	ldr	r2, [r1, #0]
 80012e8:	f022 0210 	bic.w	r2, r2, #16
 80012ec:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80012ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80012f2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80012f6:	e776      	b.n	80011e6 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80012f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f af75 	bne.w	80011ea <HAL_DMA_IRQHandler+0x82>
 8001300:	e775      	b.n	80011ee <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001302:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001304:	2a00      	cmp	r2, #0
 8001306:	d1d4      	bne.n	80012b2 <HAL_DMA_IRQHandler+0x14a>
 8001308:	e7d7      	b.n	80012ba <HAL_DMA_IRQHandler+0x152>
 800130a:	bf00      	nop
 800130c:	20000044 	.word	0x20000044
 8001310:	1b4e81b5 	.word	0x1b4e81b5

08001314 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001314:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001320:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	f1be 0f00 	cmp.w	lr, #0
 8001326:	f000 8091 	beq.w	800144c <HAL_GPIO_Init+0x134>
 800132a:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 800132c:	2600      	movs	r6, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132e:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8001524 <HAL_GPIO_Init+0x20c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001332:	2301      	movs	r3, #1
 8001334:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00u)
 8001336:	ea13 070e 	ands.w	r7, r3, lr
 800133a:	f000 8082 	beq.w	8001442 <HAL_GPIO_Init+0x12a>
 800133e:	2203      	movs	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001340:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8001344:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 8001348:	f021 0a10 	bic.w	sl, r1, #16
 800134c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8001350:	f10a 35ff 	add.w	r5, sl, #4294967295
 8001354:	fa02 f20c 	lsl.w	r2, r2, ip
 8001358:	2d01      	cmp	r5, #1
 800135a:	ea6f 0202 	mvn.w	r2, r2
 800135e:	fa04 f40c 	lsl.w	r4, r4, ip
 8001362:	d976      	bls.n	8001452 <HAL_GPIO_Init+0x13a>
      temp = GPIOx->PUPDR;
 8001364:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001366:	4013      	ands	r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001368:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 800136a:	60c4      	str	r4, [r0, #12]
      temp = GPIOx->MODER;
 800136c:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800136e:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001372:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001374:	fa03 f20c 	lsl.w	r2, r3, ip
 8001378:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137a:	00cd      	lsls	r5, r1, #3
      GPIOx->MODER = temp;
 800137c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137e:	d560      	bpl.n	8001442 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001382:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001384:	4d5e      	ldr	r5, [pc, #376]	; (8001500 <HAL_GPIO_Init+0x1e8>)
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800138a:	f026 0303 	bic.w	r3, r6, #3
 800138e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001392:	646a      	str	r2, [r5, #68]	; 0x44
 8001394:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800139a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a4:	f006 0203 	and.w	r2, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013aa:	0092      	lsls	r2, r2, #2
        temp = SYSCFG->EXTICR[position >> 2u];
 80013ac:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ae:	4094      	lsls	r4, r2
 80013b0:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b4:	4d53      	ldr	r5, [pc, #332]	; (8001504 <HAL_GPIO_Init+0x1ec>)
 80013b6:	42a8      	cmp	r0, r5
 80013b8:	d021      	beq.n	80013fe <HAL_GPIO_Init+0xe6>
 80013ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013be:	42a8      	cmp	r0, r5
 80013c0:	d07f      	beq.n	80014c2 <HAL_GPIO_Init+0x1aa>
 80013c2:	4d51      	ldr	r5, [pc, #324]	; (8001508 <HAL_GPIO_Init+0x1f0>)
 80013c4:	42a8      	cmp	r0, r5
 80013c6:	d077      	beq.n	80014b8 <HAL_GPIO_Init+0x1a0>
 80013c8:	4d50      	ldr	r5, [pc, #320]	; (800150c <HAL_GPIO_Init+0x1f4>)
 80013ca:	42a8      	cmp	r0, r5
 80013cc:	f000 8083 	beq.w	80014d6 <HAL_GPIO_Init+0x1be>
 80013d0:	4d4f      	ldr	r5, [pc, #316]	; (8001510 <HAL_GPIO_Init+0x1f8>)
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	f000 8084 	beq.w	80014e0 <HAL_GPIO_Init+0x1c8>
 80013d8:	4d4e      	ldr	r5, [pc, #312]	; (8001514 <HAL_GPIO_Init+0x1fc>)
 80013da:	42a8      	cmp	r0, r5
 80013dc:	d076      	beq.n	80014cc <HAL_GPIO_Init+0x1b4>
 80013de:	4d4e      	ldr	r5, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x200>)
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	f000 8082 	beq.w	80014ea <HAL_GPIO_Init+0x1d2>
 80013e6:	4d4d      	ldr	r5, [pc, #308]	; (800151c <HAL_GPIO_Init+0x204>)
 80013e8:	42a8      	cmp	r0, r5
 80013ea:	f000 8083 	beq.w	80014f4 <HAL_GPIO_Init+0x1dc>
 80013ee:	4d4c      	ldr	r5, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x208>)
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	bf0c      	ite	eq
 80013f4:	2508      	moveq	r5, #8
 80013f6:	2509      	movne	r5, #9
 80013f8:	fa05 f202 	lsl.w	r2, r5, r2
 80013fc:	4314      	orrs	r4, r2
        temp &= ~(iocurrent);
 80013fe:	43fa      	mvns	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001400:	609c      	str	r4, [r3, #8]
        temp = EXTI->IMR;
 8001402:	f8d9 3000 	ldr.w	r3, [r9]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001406:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 8001408:	bf54      	ite	pl
 800140a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800140c:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 800140e:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->EMR;
 8001412:	f8d9 3004 	ldr.w	r3, [r9, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001416:	038d      	lsls	r5, r1, #14
        temp &= ~(iocurrent);
 8001418:	bf54      	ite	pl
 800141a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800141c:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 800141e:	f8c9 3004 	str.w	r3, [r9, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	f8d9 3008 	ldr.w	r3, [r9, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001426:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 8001428:	bf54      	ite	pl
 800142a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800142c:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 800142e:	f8c9 3008 	str.w	r3, [r9, #8]

        temp = EXTI->FTSR;
 8001432:	f8d9 300c 	ldr.w	r3, [r9, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001436:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 8001438:	bf54      	ite	pl
 800143a:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800143c:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 800143e:	f8c9 300c 	str.w	r3, [r9, #12]
      }
    }

    position++;
 8001442:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001444:	fa3e f306 	lsrs.w	r3, lr, r6
 8001448:	f47f af73 	bne.w	8001332 <HAL_GPIO_Init+0x1a>
  }
}
 800144c:	b003      	add	sp, #12
 800144e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001452:	6885      	ldr	r5, [r0, #8]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001454:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001458:	ea05 0b02 	and.w	fp, r5, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8001460:	fa05 f50c 	lsl.w	r5, r5, ip
 8001464:	ea45 050b 	orr.w	r5, r5, fp
        GPIOx->OSPEEDR = temp;
 8001468:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800146a:	6845      	ldr	r5, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800146c:	f3c1 1b00 	ubfx	fp, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001470:	ea25 0503 	bic.w	r5, r5, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001474:	465b      	mov	r3, fp
 8001476:	fa03 f306 	lsl.w	r3, r3, r6
 800147a:	ea43 0305 	orr.w	r3, r3, r5
        GPIOx->OTYPER = temp;
 800147e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001480:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001482:	ea03 0302 	and.w	r3, r3, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001486:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 800148a:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	f47f af6e 	bne.w	800136c <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001490:	f04f 0b0f 	mov.w	fp, #15
        temp = GPIOx->AFR[position >> 3u];
 8001494:	08f5      	lsrs	r5, r6, #3
 8001496:	eb00 0585 	add.w	r5, r0, r5, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149a:	f006 0407 	and.w	r4, r6, #7
        temp = GPIOx->AFR[position >> 3u];
 800149e:	6a2b      	ldr	r3, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a0:	00a4      	lsls	r4, r4, #2
 80014a2:	fa0b fb04 	lsl.w	fp, fp, r4
 80014a6:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80014ae:	40a3      	lsls	r3, r4
 80014b0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 80014b4:	622b      	str	r3, [r5, #32]
 80014b6:	e759      	b.n	800136c <HAL_GPIO_Init+0x54>
 80014b8:	2502      	movs	r5, #2
 80014ba:	fa05 f202 	lsl.w	r2, r5, r2
 80014be:	4314      	orrs	r4, r2
 80014c0:	e79d      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014c2:	2501      	movs	r5, #1
 80014c4:	fa05 f202 	lsl.w	r2, r5, r2
 80014c8:	4314      	orrs	r4, r2
 80014ca:	e798      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014cc:	2505      	movs	r5, #5
 80014ce:	fa05 f202 	lsl.w	r2, r5, r2
 80014d2:	4314      	orrs	r4, r2
 80014d4:	e793      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014d6:	2503      	movs	r5, #3
 80014d8:	fa05 f202 	lsl.w	r2, r5, r2
 80014dc:	4314      	orrs	r4, r2
 80014de:	e78e      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014e0:	2504      	movs	r5, #4
 80014e2:	fa05 f202 	lsl.w	r2, r5, r2
 80014e6:	4314      	orrs	r4, r2
 80014e8:	e789      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014ea:	2506      	movs	r5, #6
 80014ec:	fa05 f202 	lsl.w	r2, r5, r2
 80014f0:	4314      	orrs	r4, r2
 80014f2:	e784      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014f4:	2507      	movs	r5, #7
 80014f6:	fa05 f202 	lsl.w	r2, r5, r2
 80014fa:	4314      	orrs	r4, r2
 80014fc:	e77f      	b.n	80013fe <HAL_GPIO_Init+0xe6>
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40021c00 	.word	0x40021c00
 8001520:	40022000 	.word	0x40022000
 8001524:	40013c00 	.word	0x40013c00

08001528 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001528:	6903      	ldr	r3, [r0, #16]
 800152a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800152c:	bf14      	ite	ne
 800152e:	2001      	movne	r0, #1
 8001530:	2000      	moveq	r0, #0
 8001532:	4770      	bx	lr

08001534 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	b902      	cbnz	r2, 8001538 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001536:	0409      	lsls	r1, r1, #16
 8001538:	6181      	str	r1, [r0, #24]
  }
}
 800153a:	4770      	bx	lr

0800153c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800153c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800153e:	ea01 0203 	and.w	r2, r1, r3
 8001542:	ea21 0103 	bic.w	r1, r1, r3
 8001546:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800154a:	6181      	str	r1, [r0, #24]
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001552:	6951      	ldr	r1, [r2, #20]
 8001554:	4201      	tst	r1, r0
 8001556:	d100      	bne.n	800155a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001558:	4770      	bx	lr
{
 800155a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800155e:	f7ff f849 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001562:	bd08      	pop	{r3, pc}
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001568:	2800      	cmp	r0, #0
 800156a:	f000 8125 	beq.w	80017b8 <HAL_RCC_OscConfig+0x250>
{
 800156e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	6803      	ldr	r3, [r0, #0]
{
 8001574:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001576:	07dd      	lsls	r5, r3, #31
 8001578:	4604      	mov	r4, r0
 800157a:	d522      	bpl.n	80015c2 <HAL_RCC_OscConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800157c:	49a6      	ldr	r1, [pc, #664]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800157e:	688a      	ldr	r2, [r1, #8]
 8001580:	f002 020c 	and.w	r2, r2, #12
 8001584:	2a04      	cmp	r2, #4
 8001586:	f000 80ea 	beq.w	800175e <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158a:	688a      	ldr	r2, [r1, #8]
 800158c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001590:	2a08      	cmp	r2, #8
 8001592:	f000 80e0 	beq.w	8001756 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001596:	4ba1      	ldr	r3, [pc, #644]	; (800181c <HAL_RCC_OscConfig+0x2b4>)
 8001598:	7922      	ldrb	r2, [r4, #4]
 800159a:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80cb 	beq.w	800173a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc7c 	bl	8000ea0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a8:	4d9b      	ldr	r5, [pc, #620]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80015aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ac:	e005      	b.n	80015ba <HAL_RCC_OscConfig+0x52>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ae:	f7ff fc77 	bl	8000ea0 <HAL_GetTick>
 80015b2:	1b80      	subs	r0, r0, r6
 80015b4:	2864      	cmp	r0, #100	; 0x64
 80015b6:	f200 80ed 	bhi.w	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	039a      	lsls	r2, r3, #14
 80015be:	d5f6      	bpl.n	80015ae <HAL_RCC_OscConfig+0x46>
 80015c0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	079f      	lsls	r7, r3, #30
 80015c4:	d46f      	bmi.n	80016a6 <HAL_RCC_OscConfig+0x13e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	071a      	lsls	r2, r3, #28
 80015c8:	d515      	bpl.n	80015f6 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ca:	6963      	ldr	r3, [r4, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a4 	beq.w	800171a <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d2:	2201      	movs	r2, #1
 80015d4:	4b92      	ldr	r3, [pc, #584]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4d90      	ldr	r5, [pc, #576]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 80015d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015da:	f7ff fc61 	bl	8000ea0 <HAL_GetTick>
 80015de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e0:	e005      	b.n	80015ee <HAL_RCC_OscConfig+0x86>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc5d 	bl	8000ea0 <HAL_GetTick>
 80015e6:	1b80      	subs	r0, r0, r6
 80015e8:	2802      	cmp	r0, #2
 80015ea:	f200 80d3 	bhi.w	8001794 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015f0:	079b      	lsls	r3, r3, #30
 80015f2:	d5f6      	bpl.n	80015e2 <HAL_RCC_OscConfig+0x7a>
 80015f4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f6:	0758      	lsls	r0, r3, #29
 80015f8:	d534      	bpl.n	8001664 <HAL_RCC_OscConfig+0xfc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4a87      	ldr	r2, [pc, #540]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 80015fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015fe:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001602:	f040 80db 	bne.w	80017bc <HAL_RCC_OscConfig+0x254>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001606:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800161c:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x2bc>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001624:	601a      	str	r2, [r3, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	05d1      	lsls	r1, r2, #23
 800162a:	f140 80a2 	bpl.w	8001772 <HAL_RCC_OscConfig+0x20a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0x2c0>)
 8001630:	7a22      	ldrb	r2, [r4, #8]
 8001632:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001634:	68a3      	ldr	r3, [r4, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80c2 	beq.w	80017c0 <HAL_RCC_OscConfig+0x258>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163c:	f7ff fc30 	bl	8000ea0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001640:	4e75      	ldr	r6, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 8001642:	4680      	mov	r8, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001648:	e006      	b.n	8001658 <HAL_RCC_OscConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff fc29 	bl	8000ea0 <HAL_GetTick>
 800164e:	eba0 0008 	sub.w	r0, r0, r8
 8001652:	42b8      	cmp	r0, r7
 8001654:	f200 809e 	bhi.w	8001794 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001658:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800165a:	079b      	lsls	r3, r3, #30
 800165c:	d5f5      	bpl.n	800164a <HAL_RCC_OscConfig+0xe2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800165e:	2d00      	cmp	r5, #0
 8001660:	f040 80d3 	bne.w	800180a <HAL_RCC_OscConfig+0x2a2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	69a0      	ldr	r0, [r4, #24]
 8001666:	b1d0      	cbz	r0, 800169e <HAL_RCC_OscConfig+0x136>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001668:	4d6b      	ldr	r5, [pc, #428]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800166a:	68aa      	ldr	r2, [r5, #8]
 800166c:	f002 020c 	and.w	r2, r2, #12
 8001670:	2a08      	cmp	r2, #8
 8001672:	f000 80df 	beq.w	8001834 <HAL_RCC_OscConfig+0x2cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001676:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	4a6b      	ldr	r2, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x2c4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167e:	f000 80fc 	beq.w	800187a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	6011      	str	r1, [r2, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fc0c 	bl	8000ea0 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800168a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	e004      	b.n	8001698 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff fc07 	bl	8000ea0 <HAL_GetTick>
 8001692:	1b40      	subs	r0, r0, r5
 8001694:	2864      	cmp	r0, #100	; 0x64
 8001696:	d87d      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	019b      	lsls	r3, r3, #6
 800169c:	d4f7      	bmi.n	800168e <HAL_RCC_OscConfig+0x126>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800169e:	2000      	movs	r0, #0
}
 80016a0:	b002      	add	sp, #8
 80016a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016a6:	4a5c      	ldr	r2, [pc, #368]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 80016a8:	6891      	ldr	r1, [r2, #8]
 80016aa:	f011 0f0c 	tst.w	r1, #12
 80016ae:	d029      	beq.n	8001704 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b0:	6891      	ldr	r1, [r2, #8]
 80016b2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b6:	2908      	cmp	r1, #8
 80016b8:	d021      	beq.n	80016fe <HAL_RCC_OscConfig+0x196>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 8093 	beq.w	80017e8 <HAL_RCC_OscConfig+0x280>
        __HAL_RCC_HSI_ENABLE();
 80016c2:	2201      	movs	r2, #1
 80016c4:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4d54      	ldr	r5, [pc, #336]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80016c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ca:	f7ff fbe9 	bl	8000ea0 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	e004      	b.n	80016dc <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fbe5 	bl	8000ea0 <HAL_GetTick>
 80016d6:	1b80      	subs	r0, r0, r6
 80016d8:	2802      	cmp	r0, #2
 80016da:	d85b      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	0798      	lsls	r0, r3, #30
 80016e0:	d5f7      	bpl.n	80016d2 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e2:	6829      	ldr	r1, [r5, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	23f8      	movs	r3, #248	; 0xf8
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	fab3 f283 	clz	r2, r3
 80016ee:	6923      	ldr	r3, [r4, #16]
 80016f0:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 80016f4:	4093      	lsls	r3, r2
 80016f6:	430b      	orrs	r3, r1
 80016f8:	602b      	str	r3, [r5, #0]
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	e763      	b.n	80015c6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	6852      	ldr	r2, [r2, #4]
 8001700:	0256      	lsls	r6, r2, #9
 8001702:	d4da      	bmi.n	80016ba <HAL_RCC_OscConfig+0x152>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001704:	4a44      	ldr	r2, [pc, #272]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	0795      	lsls	r5, r2, #30
 800170a:	d547      	bpl.n	800179c <HAL_RCC_OscConfig+0x234>
 800170c:	68e2      	ldr	r2, [r4, #12]
 800170e:	2a01      	cmp	r2, #1
 8001710:	d044      	beq.n	800179c <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8001712:	2001      	movs	r0, #1
}
 8001714:	b002      	add	sp, #8
 8001716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800171a:	4a41      	ldr	r2, [pc, #260]	; (8001820 <HAL_RCC_OscConfig+0x2b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4d3e      	ldr	r5, [pc, #248]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 800171e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001720:	f7ff fbbe 	bl	8000ea0 <HAL_GetTick>
 8001724:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001726:	e004      	b.n	8001732 <HAL_RCC_OscConfig+0x1ca>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff fbba 	bl	8000ea0 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d830      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001732:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001734:	079f      	lsls	r7, r3, #30
 8001736:	d4f7      	bmi.n	8001728 <HAL_RCC_OscConfig+0x1c0>
 8001738:	e75c      	b.n	80015f4 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 800173a:	f7ff fbb1 	bl	8000ea0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4d36      	ldr	r5, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001740:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	e004      	b.n	800174e <HAL_RCC_OscConfig+0x1e6>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fbac 	bl	8000ea0 <HAL_GetTick>
 8001748:	1b80      	subs	r0, r0, r6
 800174a:	2864      	cmp	r0, #100	; 0x64
 800174c:	d822      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	682b      	ldr	r3, [r5, #0]
 8001750:	039b      	lsls	r3, r3, #14
 8001752:	d4f7      	bmi.n	8001744 <HAL_RCC_OscConfig+0x1dc>
 8001754:	e734      	b.n	80015c0 <HAL_RCC_OscConfig+0x58>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	684a      	ldr	r2, [r1, #4]
 8001758:	0250      	lsls	r0, r2, #9
 800175a:	f57f af1c 	bpl.w	8001596 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	0391      	lsls	r1, r2, #14
 8001764:	f57f af2d 	bpl.w	80015c2 <HAL_RCC_OscConfig+0x5a>
 8001768:	6862      	ldr	r2, [r4, #4]
 800176a:	2a00      	cmp	r2, #0
 800176c:	f47f af29 	bne.w	80015c2 <HAL_RCC_OscConfig+0x5a>
 8001770:	e7cf      	b.n	8001712 <HAL_RCC_OscConfig+0x1aa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800177a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800177c:	f7ff fb90 	bl	8000ea0 <HAL_GetTick>
 8001780:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	05da      	lsls	r2, r3, #23
 8001786:	f53f af52 	bmi.w	800162e <HAL_RCC_OscConfig+0xc6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff fb89 	bl	8000ea0 <HAL_GetTick>
 800178e:	1bc0      	subs	r0, r0, r7
 8001790:	2802      	cmp	r0, #2
 8001792:	d9f6      	bls.n	8001782 <HAL_RCC_OscConfig+0x21a>
            return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
}
 8001796:	b002      	add	sp, #8
 8001798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4d1e      	ldr	r5, [pc, #120]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800179e:	22f8      	movs	r2, #248	; 0xf8
 80017a0:	6828      	ldr	r0, [r5, #0]
 80017a2:	fa92 f2a2 	rbit	r2, r2
 80017a6:	fab2 f182 	clz	r1, r2
 80017aa:	6922      	ldr	r2, [r4, #16]
 80017ac:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80017b0:	408a      	lsls	r2, r1
 80017b2:	4302      	orrs	r2, r0
 80017b4:	602a      	str	r2, [r5, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e706      	b.n	80015c6 <HAL_RCC_OscConfig+0x5e>
    return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
}
 80017ba:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2500      	movs	r5, #0
 80017be:	e72d      	b.n	800161c <HAL_RCC_OscConfig+0xb4>
      tickstart = HAL_GetTick();
 80017c0:	f7ff fb6e 	bl	8000ea0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	4e14      	ldr	r6, [pc, #80]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
      tickstart = HAL_GetTick();
 80017c6:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017c8:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e005      	b.n	80017da <HAL_RCC_OscConfig+0x272>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb67 	bl	8000ea0 <HAL_GetTick>
 80017d2:	eba0 0008 	sub.w	r0, r0, r8
 80017d6:	42b8      	cmp	r0, r7
 80017d8:	d8dc      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80017dc:	0798      	lsls	r0, r3, #30
 80017de:	d4f6      	bmi.n	80017ce <HAL_RCC_OscConfig+0x266>
    if(pwrclkchanged == SET)
 80017e0:	2d00      	cmp	r5, #0
 80017e2:	f43f af3f 	beq.w	8001664 <HAL_RCC_OscConfig+0xfc>
 80017e6:	e010      	b.n	800180a <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_DISABLE();
 80017e8:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_RCC_OscConfig+0x2c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	4d0b      	ldr	r5, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_DISABLE();
 80017ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb57 	bl	8000ea0 <HAL_GetTick>
 80017f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f4:	e004      	b.n	8001800 <HAL_RCC_OscConfig+0x298>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f6:	f7ff fb53 	bl	8000ea0 <HAL_GetTick>
 80017fa:	1b80      	subs	r0, r0, r6
 80017fc:	2802      	cmp	r0, #2
 80017fe:	d8c9      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	0799      	lsls	r1, r3, #30
 8001804:	d4f7      	bmi.n	80017f6 <HAL_RCC_OscConfig+0x28e>
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	e6dd      	b.n	80015c6 <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_RCC_OscConfig+0x2b0>)
 800180c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800180e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	e726      	b.n	8001664 <HAL_RCC_OscConfig+0xfc>
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40023802 	.word	0x40023802
 8001820:	42470e80 	.word	0x42470e80
 8001824:	40007000 	.word	0x40007000
 8001828:	40023870 	.word	0x40023870
 800182c:	42470060 	.word	0x42470060
 8001830:	42470000 	.word	0x42470000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	2801      	cmp	r0, #1
 8001836:	f43f af6d 	beq.w	8001714 <HAL_RCC_OscConfig+0x1ac>
        uint32_t pllcfgr = RCC->PLLCFGR;
 800183a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183c:	69e2      	ldr	r2, [r4, #28]
 800183e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001842:	4291      	cmp	r1, r2
 8001844:	f47f af65 	bne.w	8001712 <HAL_RCC_OscConfig+0x1aa>
 8001848:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	4291      	cmp	r1, r2
 8001850:	f47f af5f 	bne.w	8001712 <HAL_RCC_OscConfig+0x1aa>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001854:	6a62      	ldr	r2, [r4, #36]	; 0x24
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001856:	f3c3 1188 	ubfx	r1, r3, #6, #9
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185a:	4291      	cmp	r1, r2
 800185c:	f47f af59 	bne.w	8001712 <HAL_RCC_OscConfig+0x1aa>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001860:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001862:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001866:	4291      	cmp	r1, r2
 8001868:	f47f af53 	bne.w	8001712 <HAL_RCC_OscConfig+0x1aa>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800186c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800186e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8001872:	1a18      	subs	r0, r3, r0
 8001874:	bf18      	it	ne
 8001876:	2001      	movne	r0, #1
 8001878:	e74c      	b.n	8001714 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_PLL_DISABLE();
 800187a:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800187c:	f7ff fb10 	bl	8000ea0 <HAL_GetTick>
 8001880:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	e004      	b.n	800188e <HAL_RCC_OscConfig+0x326>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fb0c 	bl	8000ea0 <HAL_GetTick>
 8001888:	1b80      	subs	r0, r0, r6
 800188a:	2864      	cmp	r0, #100	; 0x64
 800188c:	d882      	bhi.n	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	682b      	ldr	r3, [r5, #0]
 8001890:	0199      	lsls	r1, r3, #6
 8001892:	d4f7      	bmi.n	8001884 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_ENABLE();
 8001894:	2101      	movs	r1, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	686a      	ldr	r2, [r5, #4]
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x378>)
 800189a:	69e3      	ldr	r3, [r4, #28]
 800189c:	4002      	ands	r2, r0
 800189e:	6a20      	ldr	r0, [r4, #32]
 80018a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80018a2:	4303      	orrs	r3, r0
 80018a4:	4313      	orrs	r3, r2
 80018a6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80018aa:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 80018ae:	40ca      	lsrs	r2, r1
 80018b0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80018b4:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <HAL_RCC_OscConfig+0x37c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018bc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018be:	6001      	str	r1, [r0, #0]
        tickstart = HAL_GetTick();
 80018c0:	f7ff faee 	bl	8000ea0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c4:	4c08      	ldr	r4, [pc, #32]	; (80018e8 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 80018c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e005      	b.n	80018d6 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff fae9 	bl	8000ea0 <HAL_GetTick>
 80018ce:	1b40      	subs	r0, r0, r5
 80018d0:	2864      	cmp	r0, #100	; 0x64
 80018d2:	f63f af5f 	bhi.w	8001794 <HAL_RCC_OscConfig+0x22c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	019a      	lsls	r2, r3, #6
 80018da:	d5f6      	bpl.n	80018ca <HAL_RCC_OscConfig+0x362>
 80018dc:	e6df      	b.n	800169e <HAL_RCC_OscConfig+0x136>
 80018de:	bf00      	nop
 80018e0:	f0bc8000 	.word	0xf0bc8000
 80018e4:	42470060 	.word	0x42470060
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ec:	b160      	cbz	r0, 8001908 <HAL_RCC_ClockConfig+0x1c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ee:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_RCC_ClockConfig+0x180>)
 80018f0:	6813      	ldr	r3, [r2, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	428b      	cmp	r3, r1
 80018f8:	d208      	bcs.n	800190c <HAL_RCC_ClockConfig+0x20>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	b2cb      	uxtb	r3, r1
 80018fc:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	428b      	cmp	r3, r1
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001908:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 800190a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	6803      	ldr	r3, [r0, #0]
{
 800190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001912:	079d      	lsls	r5, r3, #30
 8001914:	d514      	bpl.n	8001940 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001916:	075c      	lsls	r4, r3, #29
 8001918:	d504      	bpl.n	8001924 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191a:	4c55      	ldr	r4, [pc, #340]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 800191c:	68a2      	ldr	r2, [r4, #8]
 800191e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001922:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001924:	071a      	lsls	r2, r3, #28
 8001926:	d504      	bpl.n	8001932 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001928:	4c51      	ldr	r4, [pc, #324]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 800192a:	68a2      	ldr	r2, [r4, #8]
 800192c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001930:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001932:	4c4f      	ldr	r4, [pc, #316]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 8001934:	6885      	ldr	r5, [r0, #8]
 8001936:	68a2      	ldr	r2, [r4, #8]
 8001938:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800193c:	432a      	orrs	r2, r5
 800193e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001940:	07df      	lsls	r7, r3, #31
 8001942:	4604      	mov	r4, r0
 8001944:	460d      	mov	r5, r1
 8001946:	d520      	bpl.n	800198a <HAL_RCC_ClockConfig+0x9e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001948:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b49      	ldr	r3, [pc, #292]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001950:	d05f      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x126>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001952:	2a02      	cmp	r2, #2
 8001954:	d07c      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x164>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	0799      	lsls	r1, r3, #30
 8001958:	d524      	bpl.n	80019a4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4e45      	ldr	r6, [pc, #276]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001960:	68b3      	ldr	r3, [r6, #8]
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	4313      	orrs	r3, r2
 8001968:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800196a:	f7ff fa99 	bl	8000ea0 <HAL_GetTick>
 800196e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001970:	e004      	b.n	800197c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001972:	f7ff fa95 	bl	8000ea0 <HAL_GetTick>
 8001976:	1bc0      	subs	r0, r0, r7
 8001978:	4540      	cmp	r0, r8
 800197a:	d867      	bhi.n	8001a4c <HAL_RCC_ClockConfig+0x160>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197c:	68b3      	ldr	r3, [r6, #8]
 800197e:	6862      	ldr	r2, [r4, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001988:	d1f3      	bne.n	8001972 <HAL_RCC_ClockConfig+0x86>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800198a:	4a38      	ldr	r2, [pc, #224]	; (8001a6c <HAL_RCC_ClockConfig+0x180>)
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	42ab      	cmp	r3, r5
 8001994:	d909      	bls.n	80019aa <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	b2eb      	uxtb	r3, r5
 8001998:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	f003 030f 	and.w	r3, r3, #15
 80019a0:	42ab      	cmp	r3, r5
 80019a2:	d002      	beq.n	80019aa <HAL_RCC_ClockConfig+0xbe>
    return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
}
 80019a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	075a      	lsls	r2, r3, #29
 80019ae:	d506      	bpl.n	80019be <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	492f      	ldr	r1, [pc, #188]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 80019b2:	68e0      	ldr	r0, [r4, #12]
 80019b4:	688a      	ldr	r2, [r1, #8]
 80019b6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80019ba:	4302      	orrs	r2, r0
 80019bc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	071b      	lsls	r3, r3, #28
 80019c0:	d507      	bpl.n	80019d2 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c2:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 80019c4:	6921      	ldr	r1, [r4, #16]
 80019c6:	6893      	ldr	r3, [r2, #8]
 80019c8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019d0:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 80019d4:	688b      	ldr	r3, [r1, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d01c      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x12c>
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d132      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x15c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e4:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80019ee:	d132      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x16a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	6849      	ldr	r1, [r1, #4]
 80019f2:	4820      	ldr	r0, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x188>)
 80019f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019f8:	fba1 0100 	umull	r0, r1, r1, r0
 80019fc:	f7fe fbe8 	bl	80001d0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a08:	3301      	adds	r3, #1
 8001a0a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001a0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a10:	e003      	b.n	8001a1a <HAL_RCC_ClockConfig+0x12e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	039e      	lsls	r6, r3, #14
 8001a14:	d4a1      	bmi.n	800195a <HAL_RCC_ClockConfig+0x6e>
 8001a16:	e7c5      	b.n	80019a4 <HAL_RCC_ClockConfig+0xb8>
      sysclockfreq = HSE_VALUE;
 8001a18:	4817      	ldr	r0, [pc, #92]	; (8001a78 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_ClockConfig+0x184>)
 8001a1c:	22f0      	movs	r2, #240	; 0xf0
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	fa92 f2a2 	rbit	r2, r2
 8001a24:	fab2 f282 	clz	r2, r2
 8001a28:	4914      	ldr	r1, [pc, #80]	; (8001a7c <HAL_RCC_ClockConfig+0x190>)
 8001a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2e:	40d3      	lsrs	r3, r2
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
  HAL_InitTick (uwTickPrio);
 8001a32:	4913      	ldr	r1, [pc, #76]	; (8001a80 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_RCC_ClockConfig+0x198>)
 8001a36:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8001a3a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a3c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8001a3e:	f7ff f917 	bl	8000c70 <HAL_InitTick>
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
}
 8001a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <HAL_RCC_ClockConfig+0x188>)
 8001a4a:	e7e6      	b.n	8001a1a <HAL_RCC_ClockConfig+0x12e>
        return HAL_TIMEOUT;
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	e7aa      	b.n	80019a6 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a50:	0198      	lsls	r0, r3, #6
 8001a52:	d482      	bmi.n	800195a <HAL_RCC_ClockConfig+0x6e>
 8001a54:	e7a6      	b.n	80019a4 <HAL_RCC_ClockConfig+0xb8>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a56:	684b      	ldr	r3, [r1, #4]
 8001a58:	4807      	ldr	r0, [pc, #28]	; (8001a78 <HAL_RCC_ClockConfig+0x18c>)
 8001a5a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001a5e:	fba3 0100 	umull	r0, r1, r3, r0
 8001a62:	2300      	movs	r3, #0
 8001a64:	f7fe fbb4 	bl	80001d0 <__aeabi_uldivmod>
 8001a68:	e7ca      	b.n	8001a00 <HAL_RCC_ClockConfig+0x114>
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200
 8001a7c:	080096ec 	.word	0x080096ec
 8001a80:	2000004c 	.word	0x2000004c
 8001a84:	20000044 	.word	0x20000044

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	fa92 f2a2 	rbit	r2, r2
 8001a94:	fab2 f282 	clz	r2, r2
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8001a9a:	4906      	ldr	r1, [pc, #24]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001a9c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001aa0:	40d3      	lsrs	r3, r2
 8001aa2:	5cc3      	ldrb	r3, [r0, r3]
 8001aa4:	6808      	ldr	r0, [r1, #0]
}
 8001aa6:	40d8      	lsrs	r0, r3
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	080096fc 	.word	0x080096fc
 8001ab4:	20000044 	.word	0x20000044

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aba:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	fa92 f2a2 	rbit	r2, r2
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8001aca:	4906      	ldr	r1, [pc, #24]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ad0:	40d3      	lsrs	r3, r2
 8001ad2:	5cc3      	ldrb	r3, [r0, r3]
 8001ad4:	6808      	ldr	r0, [r1, #0]
}
 8001ad6:	40d8      	lsrs	r0, r3
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	080096fc 	.word	0x080096fc
 8001ae4:	20000044 	.word	0x20000044

08001ae8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ae8:	220f      	movs	r2, #15

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aec:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aee:	689a      	ldr	r2, [r3, #8]
{
 8001af0:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001af8:	689a      	ldr	r2, [r3, #8]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afa:	4c0a      	ldr	r4, [pc, #40]	; (8001b24 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001afc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001b00:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b08:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b12:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b14:	6823      	ldr	r3, [r4, #0]
}
 8001b16:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	600b      	str	r3, [r1, #0]
}
 8001b1e:	4770      	bx	lr
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8001b28:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b32:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b3c:	b089      	sub	sp, #36	; 0x24
 8001b3e:	4605      	mov	r5, r0
 8001b40:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001b42:	f7ff f9ad 	bl	8000ea0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001b46:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001b48:	4606      	mov	r6, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8001b4e:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001b52:	f001 f8f9 	bl	8002d48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b56:	4604      	mov	r4, r0
 8001b58:	b118      	cbz	r0, 8001b62 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	b009      	add	sp, #36	; 0x24
 8001b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001b62:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001b64:	6828      	ldr	r0, [r5, #0]
 8001b66:	0409      	lsls	r1, r1, #16
 8001b68:	f001 fb1e 	bl	80031a8 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d1f3      	bne.n	8001b5a <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b72:	f04f 3cff 	mov.w	ip, #4294967295
  config.DataLength    = 8U;
 8001b76:	2008      	movs	r0, #8
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001b78:	2130      	movs	r1, #48	; 0x30
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001b7a:	2202      	movs	r2, #2
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001b7c:	2301      	movs	r3, #1
  config.DataLength    = 8U;
 8001b7e:	e9cd c002 	strd	ip, r0, [sp, #8]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001b82:	9104      	str	r1, [sp, #16]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001b84:	eb0d 0100 	add.w	r1, sp, r0
 8001b88:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001b8a:	9406      	str	r4, [sp, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001b8c:	9205      	str	r2, [sp, #20]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001b8e:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001b90:	f001 f8c6 	bl	8002d20 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001b94:	6828      	ldr	r0, [r5, #0]
 8001b96:	f001 fbc1 	bl	800331c <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1dc      	bne.n	8001b5a <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8001ba0:	4681      	mov	r9, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001ba2:	f240 482a 	movw	r8, #1066	; 0x42a
 8001ba6:	6828      	ldr	r0, [r5, #0]
 8001ba8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001baa:	ea13 0f08 	tst.w	r3, r8
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001bb0:	d118      	bne.n	8001be4 <SD_FindSCR+0xac>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001bb2:	029b      	lsls	r3, r3, #10
 8001bb4:	d407      	bmi.n	8001bc6 <SD_FindSCR+0x8e>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001bb6:	f7ff f973 	bl	8000ea0 <HAL_GetTick>
 8001bba:	1b80      	subs	r0, r0, r6
 8001bbc:	3001      	adds	r0, #1
 8001bbe:	d1f2      	bne.n	8001ba6 <SD_FindSCR+0x6e>
      return HAL_SD_ERROR_TIMEOUT;
 8001bc0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8001bc4:	e7c9      	b.n	8001b5a <SD_FindSCR+0x22>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001bc6:	f001 f88f 	bl	8002ce8 <SDIO_ReadFIFO>
 8001bca:	ab08      	add	r3, sp, #32
 8001bcc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8001bd0:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001bd4:	f7ff f964 	bl	8000ea0 <HAL_GetTick>
 8001bd8:	1b80      	subs	r0, r0, r6
 8001bda:	3001      	adds	r0, #1
      index++;
 8001bdc:	f109 0901 	add.w	r9, r9, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001be0:	d1e1      	bne.n	8001ba6 <SD_FindSCR+0x6e>
 8001be2:	e7ed      	b.n	8001bc0 <SD_FindSCR+0x88>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001be4:	0719      	lsls	r1, r3, #28
 8001be6:	d40f      	bmi.n	8001c08 <SD_FindSCR+0xd0>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001be8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bea:	079a      	lsls	r2, r3, #30
 8001bec:	d40f      	bmi.n	8001c0e <SD_FindSCR+0xd6>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bf0:	069b      	lsls	r3, r3, #26
 8001bf2:	d40f      	bmi.n	8001c14 <SD_FindSCR+0xdc>
 8001bf4:	e9dd 3200 	ldrd	r3, r2, [sp]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001bf8:	f240 513a 	movw	r1, #1338	; 0x53a
 8001bfc:	ba12      	rev	r2, r2
 8001bfe:	ba1b      	rev	r3, r3
 8001c00:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001c02:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8001c06:	e7a8      	b.n	8001b5a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001c08:	2408      	movs	r4, #8
 8001c0a:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8001c0c:	e7a5      	b.n	8001b5a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001c0e:	2402      	movs	r4, #2
 8001c10:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c12:	e7a2      	b.n	8001b5a <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001c14:	2420      	movs	r4, #32
 8001c16:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8001c18:	e79f      	b.n	8001b5a <SD_FindSCR+0x22>
 8001c1a:	bf00      	nop

08001c1c <HAL_SD_ReadBlocks_DMA>:
{
 8001c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c20:	4604      	mov	r4, r0
 8001c22:	b087      	sub	sp, #28
  if(NULL == pData)
 8001c24:	b1d1      	cbz	r1, 8001c5c <HAL_SD_ReadBlocks_DMA+0x40>
  if(hsd->State == HAL_SD_STATE_READY)
 8001c26:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8001c2a:	b2ed      	uxtb	r5, r5
 8001c2c:	2d01      	cmp	r5, #1
 8001c2e:	d110      	bne.n	8001c52 <HAL_SD_ReadBlocks_DMA+0x36>
 8001c30:	4690      	mov	r8, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c32:	2600      	movs	r6, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c34:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c36:	461f      	mov	r7, r3
 8001c38:	4443      	add	r3, r8
 8001c3a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c3c:	6386      	str	r6, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c3e:	d916      	bls.n	8001c6e <HAL_SD_ReadBlocks_DMA+0x52>
      return HAL_ERROR;
 8001c40:	462e      	mov	r6, r5
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c48:	6383      	str	r3, [r0, #56]	; 0x38
}
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	b007      	add	sp, #28
 8001c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001c52:	2602      	movs	r6, #2
}
 8001c54:	4630      	mov	r0, r6
 8001c56:	b007      	add	sp, #28
 8001c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8001c5c:	2601      	movs	r6, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c64:	6383      	str	r3, [r0, #56]	; 0x38
}
 8001c66:	4630      	mov	r0, r6
 8001c68:	b007      	add	sp, #28
 8001c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001c6e:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0U;
 8001c70:	6803      	ldr	r3, [r0, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001c72:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001c76:	62de      	str	r6, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c7a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001c7c:	f442 7c95 	orr.w	ip, r2, #298	; 0x12a
 8001c80:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c84:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8001d60 <HAL_SD_ReadBlocks_DMA+0x144>
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001c88:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8001d64 <HAL_SD_ReadBlocks_DMA+0x148>
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001c8c:	ea4f 2947 	mov.w	r9, r7, lsl #9
 8001c90:	460a      	mov	r2, r1
    hsd->hdmarx->XferAbortCallback = NULL;
 8001c92:	6506      	str	r6, [r0, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001c94:	f103 0180 	add.w	r1, r3, #128	; 0x80
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8001c98:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8001c9c:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001ca0:	ea4f 0399 	mov.w	r3, r9, lsr #2
 8001ca4:	f7ff fa0a 	bl	80010bc <HAL_DMA_Start_IT>
 8001ca8:	4606      	mov	r6, r0
 8001caa:	b9b8      	cbnz	r0, 8001cdc <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_DMA_ENABLE(hsd);
 8001cac:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_SD_ReadBlocks_DMA+0x13c>)
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cae:	f44f 7100 	mov.w	r1, #512	; 0x200
      __HAL_SD_DMA_ENABLE(hsd);
 8001cb2:	601d      	str	r5, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cb6:	6820      	ldr	r0, [r4, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001cb8:	2b01      	cmp	r3, #1
        add *= 512U;
 8001cba:	bf18      	it	ne
 8001cbc:	ea4f 2848 	movne.w	r8, r8, lsl #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001cc0:	f001 f842 	bl	8002d48 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001cc4:	b1c8      	cbz	r0, 8001cfa <HAL_SD_ReadBlocks_DMA+0xde>
        hsd->State = HAL_SD_STATE_READY;
 8001cc6:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	4924      	ldr	r1, [pc, #144]	; (8001d5c <HAL_SD_ReadBlocks_DMA+0x140>)
        return HAL_ERROR;
 8001ccc:	4616      	mov	r6, r2
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cce:	6399      	str	r1, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cd2:	4318      	orrs	r0, r3
 8001cd4:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001cd6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001cda:	e7b6      	b.n	8001c4a <HAL_SD_ReadBlocks_DMA+0x2e>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001cdc:	6823      	ldr	r3, [r4, #0]
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cde:	491f      	ldr	r1, [pc, #124]	; (8001d5c <HAL_SD_ReadBlocks_DMA+0x140>)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001ce2:	462e      	mov	r6, r5
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8001ce4:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8001ce8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cea:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cf2:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cf4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001cf8:	e7a7      	b.n	8001c4a <HAL_SD_ReadBlocks_DMA+0x2e>
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001cfa:	2190      	movs	r1, #144	; 0x90
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001cfc:	2202      	movs	r2, #2
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001cfe:	2301      	movs	r3, #1
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d00:	f04f 35ff 	mov.w	r5, #4294967295
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d04:	9004      	str	r0, [sp, #16]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d06:	9102      	str	r1, [sp, #8]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d08:	6820      	ldr	r0, [r4, #0]
 8001d0a:	4669      	mov	r1, sp
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001d0c:	f8cd 9004 	str.w	r9, [sp, #4]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d10:	9500      	str	r5, [sp, #0]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d12:	9203      	str	r2, [sp, #12]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001d14:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001d16:	f001 f803 	bl	8002d20 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 8001d1a:	2f01      	cmp	r7, #1
 8001d1c:	d914      	bls.n	8001d48 <HAL_SD_ReadBlocks_DMA+0x12c>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001d1e:	2382      	movs	r3, #130	; 0x82
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001d20:	4641      	mov	r1, r8
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001d22:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	f001 f891 	bl	8002e4c <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d08d      	beq.n	8001c4a <HAL_SD_ReadBlocks_DMA+0x2e>
        hsd->State = HAL_SD_STATE_READY;
 8001d2e:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8001d30:	2100      	movs	r1, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d32:	6823      	ldr	r3, [r4, #0]
 8001d34:	4d09      	ldr	r5, [pc, #36]	; (8001d5c <HAL_SD_ReadBlocks_DMA+0x140>)
        return HAL_ERROR;
 8001d36:	4616      	mov	r6, r2
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d38:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d3c:	4318      	orrs	r0, r3
 8001d3e:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001d40:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001d44:	6321      	str	r1, [r4, #48]	; 0x30
        return HAL_ERROR;
 8001d46:	e780      	b.n	8001c4a <HAL_SD_ReadBlocks_DMA+0x2e>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001d48:	2381      	movs	r3, #129	; 0x81
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001d4a:	4641      	mov	r1, r8
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001d4c:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001d4e:	6820      	ldr	r0, [r4, #0]
 8001d50:	f001 f83a 	bl	8002dc8 <SDMMC_CmdReadSingleBlock>
 8001d54:	e7e9      	b.n	8001d2a <HAL_SD_ReadBlocks_DMA+0x10e>
 8001d56:	bf00      	nop
 8001d58:	4225858c 	.word	0x4225858c
 8001d5c:	004005ff 	.word	0x004005ff
 8001d60:	08001eb5 	.word	0x08001eb5
 8001d64:	08001efd 	.word	0x08001efd

08001d68 <HAL_SD_WriteBlocks_DMA>:
{
 8001d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	b087      	sub	sp, #28
  if(NULL == pData)
 8001d70:	2900      	cmp	r1, #0
 8001d72:	d042      	beq.n	8001dfa <HAL_SD_WriteBlocks_DMA+0x92>
  if(hsd->State == HAL_SD_STATE_READY)
 8001d74:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 8001d78:	b2ed      	uxtb	r5, r5
 8001d7a:	2d01      	cmp	r5, #1
 8001d7c:	d138      	bne.n	8001df0 <HAL_SD_WriteBlocks_DMA+0x88>
 8001d7e:	4617      	mov	r7, r2
 8001d80:	460e      	mov	r6, r1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d82:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d84:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d86:	4698      	mov	r8, r3
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001d8c:	6381      	str	r1, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001d8e:	d848      	bhi.n	8001e22 <HAL_SD_WriteBlocks_DMA+0xba>
    hsd->State = HAL_SD_STATE_BUSY;
 8001d90:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8001d92:	6800      	ldr	r0, [r0, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001d94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001d98:	62c1      	str	r1, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8001d9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8001d9e:	f042 021a 	orr.w	r2, r2, #26
 8001da2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001da4:	4a3e      	ldr	r2, [pc, #248]	; (8001ea0 <HAL_SD_WriteBlocks_DMA+0x138>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8001da6:	6519      	str	r1, [r3, #80]	; 0x50
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8001da8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001daa:	493e      	ldr	r1, [pc, #248]	; (8001ea4 <HAL_SD_WriteBlocks_DMA+0x13c>)
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001dac:	6c62      	ldr	r2, [r4, #68]	; 0x44
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8001dae:	64d9      	str	r1, [r3, #76]	; 0x4c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001db0:	2a01      	cmp	r2, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001db2:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001db6:	bf18      	it	ne
 8001db8:	027f      	lslne	r7, r7, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001dba:	f000 ffc5 	bl	8002d48 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dbe:	bb28      	cbnz	r0, 8001e0c <HAL_SD_WriteBlocks_DMA+0xa4>
    if(NumberOfBlocks > 1U)
 8001dc0:	f1b8 0f01 	cmp.w	r8, #1
 8001dc4:	6820      	ldr	r0, [r4, #0]
 8001dc6:	d954      	bls.n	8001e72 <HAL_SD_WriteBlocks_DMA+0x10a>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001dc8:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001dca:	4639      	mov	r1, r7
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8001dcc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001dce:	f001 f8bf 	bl	8002f50 <SDMMC_CmdWriteMultiBlock>
 8001dd2:	4607      	mov	r7, r0
 8001dd4:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dd6:	b367      	cbz	r7, 8001e32 <HAL_SD_WriteBlocks_DMA+0xca>
      hsd->State = HAL_SD_STATE_READY;
 8001dd8:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001dda:	2000      	movs	r0, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <HAL_SD_WriteBlocks_DMA+0x140>)
      return HAL_ERROR;
 8001dde:	460d      	mov	r5, r1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001de0:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001de2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001de4:	431f      	orrs	r7, r3
 8001de6:	63a7      	str	r7, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001de8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001dec:	6320      	str	r0, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001dee:	e000      	b.n	8001df2 <HAL_SD_WriteBlocks_DMA+0x8a>
    return HAL_BUSY;
 8001df0:	2502      	movs	r5, #2
}
 8001df2:	4628      	mov	r0, r5
 8001df4:	b007      	add	sp, #28
 8001df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8001dfa:	2501      	movs	r5, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001dfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001dfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e02:	6383      	str	r3, [r0, #56]	; 0x38
}
 8001e04:	4628      	mov	r0, r5
 8001e06:	b007      	add	sp, #28
 8001e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->State = HAL_SD_STATE_READY;
 8001e0c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	4925      	ldr	r1, [pc, #148]	; (8001ea8 <HAL_SD_WriteBlocks_DMA+0x140>)
      return HAL_ERROR;
 8001e12:	4615      	mov	r5, r2
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e14:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001e16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e18:	4318      	orrs	r0, r3
 8001e1a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e1c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001e20:	e7e7      	b.n	8001df2 <HAL_SD_WriteBlocks_DMA+0x8a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e28:	6383      	str	r3, [r0, #56]	; 0x38
}
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	b007      	add	sp, #28
 8001e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_SD_DMA_ENABLE(hsd);
 8001e32:	f04f 0901 	mov.w	r9, #1
 8001e36:	481d      	ldr	r0, [pc, #116]	; (8001eac <HAL_SD_WriteBlocks_DMA+0x144>)
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001e38:	ea4f 2848 	mov.w	r8, r8, lsl #9
    __HAL_SD_DMA_ENABLE(hsd);
 8001e3c:	f8c0 9000 	str.w	r9, [r0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8001e40:	3280      	adds	r2, #128	; 0x80
 8001e42:	4631      	mov	r1, r6
 8001e44:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8001e48:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001e4a:	f7ff f937 	bl	80010bc <HAL_DMA_Start_IT>
 8001e4e:	4605      	mov	r5, r0
 8001e50:	b1b0      	cbz	r0, 8001e80 <HAL_SD_WriteBlocks_DMA+0x118>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8001e52:	6823      	ldr	r3, [r4, #0]
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e54:	4914      	ldr	r1, [pc, #80]	; (8001ea8 <HAL_SD_WriteBlocks_DMA+0x140>)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8001e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8001e58:	464d      	mov	r5, r9
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8001e5a:	f022 021a 	bic.w	r2, r2, #26
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e60:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e68:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e6a:	f884 9034 	strb.w	r9, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e6e:	6327      	str	r7, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001e70:	e7bf      	b.n	8001df2 <HAL_SD_WriteBlocks_DMA+0x8a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001e72:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001e74:	4639      	mov	r1, r7
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8001e76:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001e78:	f001 f82a 	bl	8002ed0 <SDMMC_CmdWriteSingleBlock>
 8001e7c:	4607      	mov	r7, r0
 8001e7e:	e7a9      	b.n	8001dd4 <HAL_SD_WriteBlocks_DMA+0x6c>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e84:	2390      	movs	r3, #144	; 0x90
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e86:	6820      	ldr	r0, [r4, #0]
 8001e88:	4669      	mov	r1, sp
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8001e8a:	f8cd 8004 	str.w	r8, [sp, #4]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e8e:	e9cd 7703 	strd	r7, r7, [sp, #12]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8001e92:	f8cd 9014 	str.w	r9, [sp, #20]
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e96:	9200      	str	r2, [sp, #0]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e98:	9302      	str	r3, [sp, #8]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e9a:	f000 ff41 	bl	8002d20 <SDIO_ConfigData>
      return HAL_OK;
 8001e9e:	e7a8      	b.n	8001df2 <HAL_SD_WriteBlocks_DMA+0x8a>
 8001ea0:	08001b29 	.word	0x08001b29
 8001ea4:	08001efd 	.word	0x08001efd
 8001ea8:	004005ff 	.word	0x004005ff
 8001eac:	4225858c 	.word	0x4225858c

08001eb0 <HAL_SD_ErrorCallback>:
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop

08001eb4 <SD_DMAReceiveCplt>:
{
 8001eb4:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001eb6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8001eb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eba:	6820      	ldr	r0, [r4, #0]
 8001ebc:	2b82      	cmp	r3, #130	; 0x82
 8001ebe:	d00f      	beq.n	8001ee0 <SD_DMAReceiveCplt+0x2c>
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ec0:	f240 553a 	movw	r5, #1338	; 0x53a
  hsd->State = HAL_SD_STATE_READY;
 8001ec4:	2101      	movs	r1, #1
  hsd->Context = SD_CONTEXT_NONE;
 8001ec6:	2200      	movs	r2, #0
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001ec8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001eca:	f023 0308 	bic.w	r3, r3, #8
 8001ece:	62c3      	str	r3, [r0, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ed0:	6385      	str	r5, [r0, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8001ed2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 8001ed6:	4620      	mov	r0, r4
  hsd->Context = SD_CONTEXT_NONE;
 8001ed8:	6322      	str	r2, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8001eda:	f001 fbb3 	bl	8003644 <HAL_SD_RxCpltCallback>
}
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ee0:	f001 f878 	bl	8002fd4 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b908      	cbnz	r0, 8001eec <SD_DMAReceiveCplt+0x38>
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	e7e9      	b.n	8001ec0 <SD_DMAReceiveCplt+0xc>
      hsd->ErrorCode |= errorstate;
 8001eec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8001eee:	4620      	mov	r0, r4
      hsd->ErrorCode |= errorstate;
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	63a3      	str	r3, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_SD_ErrorCallback>
 8001ef8:	e7f6      	b.n	8001ee8 <SD_DMAReceiveCplt+0x34>
 8001efa:	bf00      	nop

08001efc <SD_DMAError>:
{
 8001efc:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001efe:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8001f00:	f7ff fa08 	bl	8001314 <HAL_DMA_GetError>
 8001f04:	2802      	cmp	r0, #2
 8001f06:	d00a      	beq.n	8001f1e <SD_DMAError+0x22>
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8001f08:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8001f0e:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <SD_DMAError+0x24>
 8001f14:	2a01      	cmp	r2, #1
 8001f16:	d003      	beq.n	8001f20 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ffc9 	bl	8001eb0 <HAL_SD_ErrorCallback>
}
 8001f1e:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <SD_DMAError+0x80>)
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f24:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f2a:	4618      	mov	r0, r3
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001f2c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8001f30:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f34:	0409      	lsls	r1, r1, #16
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8001f36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f3a:	63a3      	str	r3, [r4, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f3c:	f001 faf6 	bl	800352c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f40:	b158      	cbz	r0, 8001f5a <SD_DMAError+0x5e>
    hsd->ErrorCode |= errorstate;
 8001f42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f44:	4308      	orrs	r0, r1
 8001f46:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8001f48:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8001f4a:	2300      	movs	r3, #0
      hsd->State= HAL_SD_STATE_READY;
 8001f4c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 8001f50:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 8001f52:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_SD_ErrorCallback(hsd);
 8001f54:	f7ff ffac 	bl	8001eb0 <HAL_SD_ErrorCallback>
 8001f58:	e7e1      	b.n	8001f1e <SD_DMAError+0x22>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001f5a:	4601      	mov	r1, r0
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	f000 fedb 	bl	8002d18 <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001f62:	f3c0 2043 	ubfx	r0, r0, #9, #4
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001f66:	3805      	subs	r0, #5
 8001f68:	2801      	cmp	r0, #1
 8001f6a:	d8ed      	bhi.n	8001f48 <SD_DMAError+0x4c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001f6c:	6820      	ldr	r0, [r4, #0]
 8001f6e:	f001 f831 	bl	8002fd4 <SDMMC_CmdStopTransfer>
 8001f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f74:	4318      	orrs	r0, r3
 8001f76:	63a0      	str	r0, [r4, #56]	; 0x38
 8001f78:	e7e6      	b.n	8001f48 <SD_DMAError+0x4c>
 8001f7a:	bf00      	nop
 8001f7c:	004005ff 	.word	0x004005ff

08001f80 <SD_DMATxAbort>:
{
 8001f80:	b538      	push	{r3, r4, r5, lr}
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f82:	f240 533a 	movw	r3, #1338	; 0x53a
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001f86:	6b84      	ldr	r4, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f88:	6d21      	ldr	r1, [r4, #80]	; 0x50
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f8a:	6820      	ldr	r0, [r4, #0]
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f8c:	0409      	lsls	r1, r1, #16
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f8e:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f90:	f001 facc 	bl	800352c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f94:	4605      	mov	r5, r0
 8001f96:	b180      	cbz	r0, 8001fba <SD_DMATxAbort+0x3a>
  hsd->State = HAL_SD_STATE_READY;
 8001f98:	2101      	movs	r1, #1
  hsd->Context = SD_CONTEXT_NONE;
 8001f9a:	2200      	movs	r2, #0
    hsd->ErrorCode |= errorstate;
 8001f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f9e:	431d      	orrs	r5, r3
 8001fa0:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8001fa2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001fa6:	6322      	str	r2, [r4, #48]	; 0x30
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8001fa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    HAL_SD_AbortCallback(hsd);
 8001faa:	4620      	mov	r0, r4
  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8001fac:	b113      	cbz	r3, 8001fb4 <SD_DMATxAbort+0x34>
    HAL_SD_ErrorCallback(hsd);
 8001fae:	f7ff ff7f 	bl	8001eb0 <HAL_SD_ErrorCallback>
}
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}
    HAL_SD_AbortCallback(hsd);
 8001fb4:	f001 fb3a 	bl	800362c <HAL_SD_AbortCallback>
}
 8001fb8:	bd38      	pop	{r3, r4, r5, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001fba:	4601      	mov	r1, r0
 8001fbc:	6820      	ldr	r0, [r4, #0]
 8001fbe:	f000 feab 	bl	8002d18 <SDIO_GetResponse>
  hsd->State = HAL_SD_STATE_READY;
 8001fc2:	2301      	movs	r3, #1
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001fc4:	f3c0 2043 	ubfx	r0, r0, #9, #4
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001fc8:	3805      	subs	r0, #5
 8001fca:	4298      	cmp	r0, r3
  hsd->State = HAL_SD_STATE_READY;
 8001fcc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001fd0:	6325      	str	r5, [r4, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001fd2:	d8e9      	bhi.n	8001fa8 <SD_DMATxAbort+0x28>
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001fd4:	6820      	ldr	r0, [r4, #0]
 8001fd6:	f000 fffd 	bl	8002fd4 <SDMMC_CmdStopTransfer>
 8001fda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fdc:	4318      	orrs	r0, r3
 8001fde:	63a0      	str	r0, [r4, #56]	; 0x38
 8001fe0:	e7e2      	b.n	8001fa8 <SD_DMATxAbort+0x28>
 8001fe2:	bf00      	nop

08001fe4 <HAL_SD_IRQHandler>:
{
 8001fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001fe8:	6803      	ldr	r3, [r0, #0]
  uint32_t context = hsd->Context;
 8001fea:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
 8001fee:	b082      	sub	sp, #8
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001ff0:	0411      	lsls	r1, r2, #16
{
 8001ff2:	4604      	mov	r4, r0
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001ff4:	d51d      	bpl.n	8002032 <HAL_SD_IRQHandler+0x4e>
 8001ff6:	072a      	lsls	r2, r5, #28
 8001ff8:	f100 80b8 	bmi.w	800216c <HAL_SD_IRQHandler+0x188>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	05d2      	lsls	r2, r2, #23
 8002000:	d56c      	bpl.n	80020dc <HAL_SD_IRQHandler+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200a:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 800200e:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
    else if((context & SD_CONTEXT_DMA) != 0U)
 800201c:	0629      	lsls	r1, r5, #24
 800201e:	d505      	bpl.n	800202c <HAL_SD_IRQHandler+0x48>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8002020:	06aa      	lsls	r2, r5, #26
 8002022:	f100 80f4 	bmi.w	800220e <HAL_SD_IRQHandler+0x22a>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8002026:	07af      	lsls	r7, r5, #30
 8002028:	f000 80c3 	beq.w	80021b2 <HAL_SD_IRQHandler+0x1ce>
}
 800202c:	b002      	add	sp, #8
 800202e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8002032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002034:	05d7      	lsls	r7, r2, #23
 8002036:	d523      	bpl.n	8002080 <HAL_SD_IRQHandler+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8002038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800203e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    if((context & SD_CONTEXT_IT) != 0U)
 8002040:	072e      	lsls	r6, r5, #28
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002042:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8002046:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800204c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
    if((context & SD_CONTEXT_IT) != 0U)
 8002054:	d5e2      	bpl.n	800201c <HAL_SD_IRQHandler+0x38>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002056:	f015 0f22 	tst.w	r5, #34	; 0x22
 800205a:	f040 80b8 	bne.w	80021ce <HAL_SD_IRQHandler+0x1ea>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800205e:	f240 503a 	movw	r0, #1338	; 0x53a
      hsd->State = HAL_SD_STATE_READY;
 8002062:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8002064:	2200      	movs	r2, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002066:	6398      	str	r0, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002068:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_RxCpltCallback(hsd);
 800206c:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 800206e:	6322      	str	r2, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8002070:	07ac      	lsls	r4, r5, #30
 8002072:	f000 80a7 	beq.w	80021c4 <HAL_SD_IRQHandler+0x1e0>
        HAL_SD_RxCpltCallback(hsd);
 8002076:	f001 fae5 	bl	8003644 <HAL_SD_RxCpltCallback>
}
 800207a:	b002      	add	sp, #8
 800207c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8002080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002082:	0456      	lsls	r6, r2, #17
 8002084:	d52b      	bpl.n	80020de <HAL_SD_IRQHandler+0xfa>
 8002086:	0728      	lsls	r0, r5, #28
 8002088:	d529      	bpl.n	80020de <HAL_SD_IRQHandler+0xfa>
{
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
  dataremaining = hsd->TxXferSize;
 800208a:	6a66      	ldr	r6, [r4, #36]	; 0x24

  if (dataremaining > 0U)
 800208c:	2e00      	cmp	r6, #0
 800208e:	d0cd      	beq.n	800202c <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pTxBuffPtr;
 8002090:	6a27      	ldr	r7, [r4, #32]
 8002092:	f107 0804 	add.w	r8, r7, #4
 8002096:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800209a:	e000      	b.n	800209e <HAL_SD_IRQHandler+0xba>
 800209c:	6823      	ldr	r3, [r4, #0]
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
    {
      data = (uint32_t)(*tmp);
 800209e:	f818 2c04 	ldrb.w	r2, [r8, #-4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
      tmp++;
      dataremaining--;
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80020a2:	4618      	mov	r0, r3
      data = (uint32_t)(*tmp);
 80020a4:	9201      	str	r2, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 80020a6:	f818 3c03 	ldrb.w	r3, [r8, #-3]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80020aa:	a901      	add	r1, sp, #4
      data |= ((uint32_t)(*tmp) << 8U);
 80020ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020b0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 80020b2:	f818 2c02 	ldrb.w	r2, [r8, #-2]
 80020b6:	f108 0804 	add.w	r8, r8, #4
 80020ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80020be:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 80020c0:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 80020c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020c8:	9301      	str	r3, [sp, #4]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80020ca:	f000 fe11 	bl	8002cf0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80020ce:	45a8      	cmp	r8, r5
 80020d0:	d1e4      	bne.n	800209c <HAL_SD_IRQHandler+0xb8>
    }

    hsd->pTxBuffPtr = tmp;
 80020d2:	3720      	adds	r7, #32
    hsd->TxXferSize = dataremaining;
 80020d4:	3e20      	subs	r6, #32
 80020d6:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80020da:	e7a7      	b.n	800202c <HAL_SD_IRQHandler+0x48>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80020dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80020de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e0:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 80020e4:	d0a2      	beq.n	800202c <HAL_SD_IRQHandler+0x48>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	0791      	lsls	r1, r2, #30
 80020ea:	d503      	bpl.n	80020f4 <HAL_SD_IRQHandler+0x110>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80020ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020ee:	f042 0202 	orr.w	r2, r2, #2
 80020f2:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80020f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f6:	0712      	lsls	r2, r2, #28
 80020f8:	d503      	bpl.n	8002102 <HAL_SD_IRQHandler+0x11e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80020fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020fc:	f042 0208 	orr.w	r2, r2, #8
 8002100:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8002102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002104:	0697      	lsls	r7, r2, #26
 8002106:	d503      	bpl.n	8002110 <HAL_SD_IRQHandler+0x12c>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002108:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800210a:	f042 0220 	orr.w	r2, r2, #32
 800210e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8002110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002112:	06d6      	lsls	r6, r2, #27
 8002114:	d503      	bpl.n	800211e <HAL_SD_IRQHandler+0x13a>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002116:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002118:	f042 0210 	orr.w	r2, r2, #16
 800211c:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800211e:	f240 723a 	movw	r2, #1850	; 0x73a
 8002122:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002126:	4618      	mov	r0, r3
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002128:	f422 724e 	bic.w	r2, r2, #824	; 0x338
 800212c:	f022 0202 	bic.w	r2, r2, #2
 8002130:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002132:	f000 ff4f 	bl	8002fd4 <SDMMC_CmdStopTransfer>
 8002136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002138:	4318      	orrs	r0, r3
 800213a:	63a0      	str	r0, [r4, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800213c:	0728      	lsls	r0, r5, #28
 800213e:	d44d      	bmi.n	80021dc <HAL_SD_IRQHandler+0x1f8>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8002140:	0629      	lsls	r1, r5, #24
 8002142:	f57f af73 	bpl.w	800202c <HAL_SD_IRQHandler+0x48>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8002146:	f015 0f30 	tst.w	r5, #48	; 0x30
 800214a:	d16e      	bne.n	800222a <HAL_SD_IRQHandler+0x246>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800214c:	f015 0503 	ands.w	r5, r5, #3
 8002150:	d04d      	beq.n	80021ee <HAL_SD_IRQHandler+0x20a>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002154:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <HAL_SD_IRQHandler+0x260>)
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002156:	4618      	mov	r0, r3
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002158:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800215a:	f7fe fff1 	bl	8001140 <HAL_DMA_Abort_IT>
 800215e:	2800      	cmp	r0, #0
 8002160:	f43f af64 	beq.w	800202c <HAL_SD_IRQHandler+0x48>
          SD_DMARxAbort(hsd->hdmarx);
 8002164:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002166:	f7ff ff0b 	bl	8001f80 <SD_DMATxAbort>
 800216a:	e75f      	b.n	800202c <HAL_SD_IRQHandler+0x48>
  dataremaining = hsd->RxXferSize;
 800216c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  if (dataremaining > 0U)
 800216e:	2f00      	cmp	r7, #0
 8002170:	f43f af5c 	beq.w	800202c <HAL_SD_IRQHandler+0x48>
  tmp = hsd->pRxBuffPtr;
 8002174:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8002178:	f108 0504 	add.w	r5, r8, #4
 800217c:	f108 0624 	add.w	r6, r8, #36	; 0x24
 8002180:	e000      	b.n	8002184 <HAL_SD_IRQHandler+0x1a0>
 8002182:	6823      	ldr	r3, [r4, #0]
      data = SDIO_ReadFIFO(hsd->Instance);
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fdaf 	bl	8002ce8 <SDIO_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800218a:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800218e:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002190:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8002192:	0e00      	lsrs	r0, r0, #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8002194:	f805 2c03 	strb.w	r2, [r5, #-3]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8002198:	f805 3c02 	strb.w	r3, [r5, #-2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800219c:	f805 0c01 	strb.w	r0, [r5, #-1]
 80021a0:	3504      	adds	r5, #4
    for(count = 0U; count < 8U; count++)
 80021a2:	42ae      	cmp	r6, r5
 80021a4:	d1ed      	bne.n	8002182 <HAL_SD_IRQHandler+0x19e>
    hsd->pRxBuffPtr = tmp;
 80021a6:	f108 0320 	add.w	r3, r8, #32
    hsd->RxXferSize = dataremaining;
 80021aa:	3f20      	subs	r7, #32
 80021ac:	e9c4 370a 	strd	r3, r7, [r4, #40]	; 0x28
 80021b0:	e73c      	b.n	800202c <HAL_SD_IRQHandler+0x48>
        hsd->State = HAL_SD_STATE_READY;
 80021b2:	2101      	movs	r1, #1
        HAL_SD_TxCpltCallback(hsd);
 80021b4:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80021b6:	6822      	ldr	r2, [r4, #0]
 80021b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80021ba:	f023 0308 	bic.w	r3, r3, #8
 80021be:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80021c0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80021c4:	f001 fa38 	bl	8003638 <HAL_SD_TxCpltCallback>
}
 80021c8:	b002      	add	sp, #8
 80021ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 ff00 	bl	8002fd4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80021d4:	4603      	mov	r3, r0
 80021d6:	b998      	cbnz	r0, 8002200 <HAL_SD_IRQHandler+0x21c>
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	e740      	b.n	800205e <HAL_SD_IRQHandler+0x7a>
      hsd->State = HAL_SD_STATE_READY;
 80021dc:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 80021de:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 80021e0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80021e4:	4620      	mov	r0, r4
      hsd->Context = SD_CONTEXT_NONE;
 80021e6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80021e8:	f7ff fe62 	bl	8001eb0 <HAL_SD_ErrorCallback>
 80021ec:	e71e      	b.n	800202c <HAL_SD_IRQHandler+0x48>
        hsd->State = HAL_SD_STATE_READY;
 80021ee:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021f0:	63a5      	str	r5, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 80021f2:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 80021f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80021f8:	6325      	str	r5, [r4, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80021fa:	f001 fa17 	bl	800362c <HAL_SD_AbortCallback>
}
 80021fe:	e715      	b.n	800202c <HAL_SD_IRQHandler+0x48>
          hsd->ErrorCode |= errorstate;
 8002200:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002202:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8002204:	4313      	orrs	r3, r2
 8002206:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002208:	f7ff fe52 	bl	8001eb0 <HAL_SD_ErrorCallback>
 800220c:	e7e4      	b.n	80021d8 <HAL_SD_IRQHandler+0x1f4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fee0 	bl	8002fd4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002214:	4603      	mov	r3, r0
 8002216:	2800      	cmp	r0, #0
 8002218:	f43f af05 	beq.w	8002026 <HAL_SD_IRQHandler+0x42>
          hsd->ErrorCode |= errorstate;
 800221c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800221e:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8002220:	4313      	orrs	r3, r2
 8002222:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002224:	f7ff fe44 	bl	8001eb0 <HAL_SD_ErrorCallback>
 8002228:	e6fd      	b.n	8002026 <HAL_SD_IRQHandler+0x42>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800222a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_SD_IRQHandler+0x264>)
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800222e:	4618      	mov	r0, r3
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002230:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002232:	f7fe ff85 	bl	8001140 <HAL_DMA_Abort_IT>
 8002236:	2800      	cmp	r0, #0
 8002238:	f43f aef8 	beq.w	800202c <HAL_SD_IRQHandler+0x48>
          SD_DMATxAbort(hsd->hdmatx);
 800223c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800223e:	f7ff fe9f 	bl	8001f80 <SD_DMATxAbort>
 8002242:	e6f3      	b.n	800202c <HAL_SD_IRQHandler+0x48>
 8002244:	0800224d 	.word	0x0800224d
 8002248:	08001f81 	.word	0x08001f81

0800224c <SD_DMARxAbort>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	f240 533a 	movw	r3, #1338	; 0x53a
 8002252:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002254:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002256:	6820      	ldr	r0, [r4, #0]
 8002258:	0409      	lsls	r1, r1, #16
 800225a:	6383      	str	r3, [r0, #56]	; 0x38
 800225c:	f001 f966 	bl	800352c <SDMMC_CmdSendStatus>
 8002260:	4605      	mov	r5, r0
 8002262:	b180      	cbz	r0, 8002286 <SD_DMARxAbort+0x3a>
 8002264:	2101      	movs	r1, #1
 8002266:	2200      	movs	r2, #0
 8002268:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800226a:	431d      	orrs	r5, r3
 800226c:	63a5      	str	r5, [r4, #56]	; 0x38
 800226e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8002272:	6322      	str	r2, [r4, #48]	; 0x30
 8002274:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002276:	4620      	mov	r0, r4
 8002278:	b113      	cbz	r3, 8002280 <SD_DMARxAbort+0x34>
 800227a:	f7ff fe19 	bl	8001eb0 <HAL_SD_ErrorCallback>
 800227e:	bd38      	pop	{r3, r4, r5, pc}
 8002280:	f001 f9d4 	bl	800362c <HAL_SD_AbortCallback>
 8002284:	bd38      	pop	{r3, r4, r5, pc}
 8002286:	4601      	mov	r1, r0
 8002288:	6820      	ldr	r0, [r4, #0]
 800228a:	f000 fd45 	bl	8002d18 <SDIO_GetResponse>
 800228e:	2301      	movs	r3, #1
 8002290:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8002294:	3805      	subs	r0, #5
 8002296:	4298      	cmp	r0, r3
 8002298:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800229c:	6325      	str	r5, [r4, #48]	; 0x30
 800229e:	d8e9      	bhi.n	8002274 <SD_DMARxAbort+0x28>
 80022a0:	6820      	ldr	r0, [r4, #0]
 80022a2:	f000 fe97 	bl	8002fd4 <SDMMC_CmdStopTransfer>
 80022a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022a8:	4318      	orrs	r0, r3
 80022aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80022ac:	e7e2      	b.n	8002274 <SD_DMARxAbort+0x28>
 80022ae:	bf00      	nop

080022b0 <HAL_SD_GetCardCSD>:
{
 80022b0:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80022b2:	2000      	movs	r0, #0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80022b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
{
 80022b6:	b4f0      	push	{r4, r5, r6, r7}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80022b8:	0f94      	lsrs	r4, r2, #30
 80022ba:	700c      	strb	r4, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80022bc:	f3c2 6583 	ubfx	r5, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80022c0:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80022c4:	704d      	strb	r5, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80022c6:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80022c8:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80022cc:	f3c2 2407 	ubfx	r4, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80022d0:	b2d2      	uxtb	r2, r2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80022d2:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80022d4:	710c      	strb	r4, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80022d6:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80022d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022da:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80022dc:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80022e0:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80022e2:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80022e4:	f3c2 35c0 	ubfx	r5, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80022e8:	f3c2 3480 	ubfx	r4, r2, #14, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80022ec:	724d      	strb	r5, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80022ee:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80022f0:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80022f4:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80022f8:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80022fa:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80022fc:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80022fe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002300:	2800      	cmp	r0, #0
 8002302:	d16d      	bne.n	80023e0 <HAL_SD_GetCardCSD+0x130>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002304:	f640 70fc 	movw	r0, #4092	; 0xffc
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002308:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 800230a:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800230e:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8002310:	ea00 0282 	and.w	r2, r0, r2, lsl #2
 8002314:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 8002318:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800231a:	f3c4 6002 	ubfx	r0, r4, #24, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800231e:	f3c4 5242 	ubfx	r2, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002322:	f3c4 67c2 	ubfx	r7, r4, #27, #3
 8002326:	750f      	strb	r7, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002328:	7548      	strb	r0, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800232a:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800232c:	f3c4 4082 	ubfx	r0, r4, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002330:	f3c4 32c2 	ubfx	r2, r4, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002334:	75c8      	strb	r0, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002336:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002338:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800233a:	7e08      	ldrb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800233c:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800233e:	f000 0007 	and.w	r0, r0, #7
 8002342:	3002      	adds	r0, #2
 8002344:	4082      	lsls	r2, r0
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002348:	7a08      	ldrb	r0, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 800234a:	661e      	str	r6, [r3, #96]	; 0x60
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800234c:	f000 000f 	and.w	r0, r0, #15
 8002350:	4085      	lsls	r5, r0
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002352:	0a68      	lsrs	r0, r5, #9
 8002354:	fb02 f200 	mul.w	r2, r2, r0
 8002358:	e9c3 5216 	strd	r5, r2, [r3, #88]	; 0x58
  pCSD->Reserved3 = 0;
 800235c:	2200      	movs	r2, #0
  pCSD->Reserved4 = 1;
 800235e:	2501      	movs	r5, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002360:	f3c4 3680 	ubfx	r6, r4, #14, #1
 8002364:	764e      	strb	r6, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002366:	f3c4 16c6 	ubfx	r6, r4, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800236a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800236e:	768e      	strb	r6, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002370:	76cc      	strb	r4, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  return HAL_OK;
 8002374:	4610      	mov	r0, r2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002376:	0fdc      	lsrs	r4, r3, #31
 8002378:	770c      	strb	r4, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800237a:	f3c3 7441 	ubfx	r4, r3, #29, #2
 800237e:	774c      	strb	r4, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002380:	f3c3 6482 	ubfx	r4, r3, #26, #3
 8002384:	778c      	strb	r4, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002386:	f3c3 5483 	ubfx	r4, r3, #22, #4
 800238a:	77cc      	strb	r4, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800238c:	f3c3 5440 	ubfx	r4, r3, #21, #1
 8002390:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002394:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->Reserved3 = 0;
 8002398:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800239c:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80023a0:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80023a4:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80023a8:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80023ac:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80023b0:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80023b4:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80023b8:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80023bc:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80023c0:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80023c4:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80023c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80023cc:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80023d0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80023d4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80023d8:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 80023dc:	bcf0      	pop	{r4, r5, r6, r7}
 80023de:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80023e0:	2801      	cmp	r0, #1
 80023e2:	d00c      	beq.n	80023fe <HAL_SD_GetCardCSD+0x14e>
    hsd->State = HAL_SD_STATE_READY;
 80023e4:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4c0d      	ldr	r4, [pc, #52]	; (8002420 <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 80023ea:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023ec:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80023ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
}
 80023f0:	bcf0      	pop	{r4, r5, r6, r7}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80023f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80023f8:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 80023fc:	4770      	bx	lr
    hsd->SdCard.BlockSize = 512U;
 80023fe:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002402:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8002404:	0412      	lsls	r2, r2, #16
 8002406:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800240a:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 800240e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002410:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8002412:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002414:	3201      	adds	r2, #1
 8002416:	0292      	lsls	r2, r2, #10
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800241a:	e9c3 2017 	strd	r2, r0, [r3, #92]	; 0x5c
 800241e:	e79d      	b.n	800235c <HAL_SD_GetCardCSD+0xac>
 8002420:	004005ff 	.word	0x004005ff

08002424 <HAL_SD_Init>:
{
 8002424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002426:	b099      	sub	sp, #100	; 0x64
  if(hsd == NULL)
 8002428:	b1f0      	cbz	r0, 8002468 <HAL_SD_Init+0x44>
  if(hsd->State == HAL_SD_STATE_RESET)
 800242a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800242e:	4604      	mov	r4, r0
 8002430:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002434:	2b00      	cmp	r3, #0
 8002436:	d031      	beq.n	800249c <HAL_SD_Init+0x78>
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002438:	2300      	movs	r3, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800243a:	2276      	movs	r2, #118	; 0x76
  hsd->State = HAL_SD_STATE_BUSY;
 800243c:	2603      	movs	r6, #3
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800243e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002442:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002446:	9309      	str	r3, [sp, #36]	; 0x24
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002448:	920c      	str	r2, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 800244a:	ab0a      	add	r3, sp, #40	; 0x28
 800244c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002450:	6825      	ldr	r5, [r4, #0]
  hsd->State = HAL_SD_STATE_BUSY;
 8002452:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  status = SDIO_Init(hsd->Instance, Init);
 8002456:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800245a:	ab07      	add	r3, sp, #28
 800245c:	4628      	mov	r0, r5
 800245e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002460:	f000 fc26 	bl	8002cb0 <SDIO_Init>
  if(status != HAL_OK)
 8002464:	4605      	mov	r5, r0
 8002466:	b118      	cbz	r0, 8002470 <HAL_SD_Init+0x4c>
    return HAL_ERROR;
 8002468:	2601      	movs	r6, #1
}
 800246a:	4630      	mov	r0, r6
 800246c:	b019      	add	sp, #100	; 0x64
 800246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_SD_ENABLE(hsd);
 8002470:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd);
 8002472:	4e77      	ldr	r6, [pc, #476]	; (8002650 <HAL_SD_Init+0x22c>)
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002474:	6820      	ldr	r0, [r4, #0]
  __HAL_SD_DISABLE(hsd);
 8002476:	6035      	str	r5, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002478:	f000 fc40 	bl	8002cfc <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800247c:	6037      	str	r7, [r6, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800247e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8002480:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002482:	f000 fe27 	bl	80030d4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002486:	4605      	mov	r5, r0
 8002488:	b160      	cbz	r0, 80024a4 <HAL_SD_Init+0x80>
    hsd->State = HAL_SD_STATE_READY;
 800248a:	2601      	movs	r6, #1
}
 800248c:	4630      	mov	r0, r6
    hsd->State = HAL_SD_STATE_READY;
 800248e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002494:	431d      	orrs	r5, r3
 8002496:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002498:	b019      	add	sp, #100	; 0x64
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800249c:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 800249e:	f7fe faf3 	bl	8000a88 <HAL_SD_MspInit>
 80024a2:	e7c9      	b.n	8002438 <HAL_SD_Init+0x14>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	f000 fe3f 	bl	8003128 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80024aa:	2800      	cmp	r0, #0
 80024ac:	f040 80b9 	bne.w	8002622 <HAL_SD_Init+0x1fe>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80024b0:	64a7      	str	r7, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80024b2:	2100      	movs	r1, #0
 80024b4:	6820      	ldr	r0, [r4, #0]
 80024b6:	f000 fe77 	bl	80031a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024ba:	bb10      	cbnz	r0, 8002502 <HAL_SD_Init+0xde>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80024bc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80024c0:	9a06      	ldr	r2, [sp, #24]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d820      	bhi.n	8002508 <HAL_SD_Init+0xe4>
 80024c6:	f64f 77fe 	movw	r7, #65534	; 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80024ca:	4e62      	ldr	r6, [pc, #392]	; (8002654 <HAL_SD_Init+0x230>)
 80024cc:	e011      	b.n	80024f2 <HAL_SD_Init+0xce>
 80024ce:	4631      	mov	r1, r6
 80024d0:	6820      	ldr	r0, [r4, #0]
 80024d2:	f000 feab 	bl	800322c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024d6:	b9a0      	cbnz	r0, 8002502 <HAL_SD_Init+0xde>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024d8:	4629      	mov	r1, r5
 80024da:	6820      	ldr	r0, [r4, #0]
 80024dc:	f000 fc1c 	bl	8002d18 <SDIO_GetResponse>
    count++;
 80024e0:	9b06      	ldr	r3, [sp, #24]
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024e2:	4605      	mov	r5, r0
    count++;
 80024e4:	3301      	adds	r3, #1
 80024e6:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80024e8:	9b06      	ldr	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80024ea:	0fc2      	lsrs	r2, r0, #31
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80024ec:	42bb      	cmp	r3, r7
 80024ee:	d80b      	bhi.n	8002508 <HAL_SD_Init+0xe4>
 80024f0:	b952      	cbnz	r2, 8002508 <HAL_SD_Init+0xe4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80024f2:	2100      	movs	r1, #0
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	f000 fe57 	bl	80031a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024fa:	4605      	mov	r5, r0
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d0e6      	beq.n	80024ce <HAL_SD_Init+0xaa>
 8002500:	e7c3      	b.n	800248a <HAL_SD_Init+0x66>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002502:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002506:	e7c0      	b.n	800248a <HAL_SD_Init+0x66>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002508:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800250c:	9a06      	ldr	r2, [sp, #24]
 800250e:	429a      	cmp	r2, r3
 8002510:	f200 8096 	bhi.w	8002640 <HAL_SD_Init+0x21c>
  uint16_t sd_rca = 1U;
 8002514:	2301      	movs	r3, #1
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002516:	f3c5 7580 	ubfx	r5, r5, #30, #1
 800251a:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800251c:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800251e:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002522:	f000 fbf5 	bl	8002d10 <SDIO_GetPowerState>
 8002526:	2800      	cmp	r0, #0
 8002528:	f000 8085 	beq.w	8002636 <HAL_SD_Init+0x212>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800252c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	2a03      	cmp	r2, #3
 8002532:	d12f      	bne.n	8002594 <HAL_SD_Init+0x170>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002534:	4618      	mov	r0, r3
 8002536:	2104      	movs	r1, #4
 8002538:	f000 fbee 	bl	8002d18 <SDIO_GetResponse>
 800253c:	0d00      	lsrs	r0, r0, #20
 800253e:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002540:	a90d      	add	r1, sp, #52	; 0x34
 8002542:	4620      	mov	r0, r4
 8002544:	f7ff feb4 	bl	80022b0 <HAL_SD_GetCardCSD>
 8002548:	4606      	mov	r6, r0
 800254a:	2800      	cmp	r0, #0
 800254c:	d17b      	bne.n	8002646 <HAL_SD_Init+0x222>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800254e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002550:	4603      	mov	r3, r0
 8002552:	0412      	lsls	r2, r2, #16
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	f000 fd7b 	bl	8003050 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800255a:	b130      	cbz	r0, 800256a <HAL_SD_Init+0x146>
    hsd->State = HAL_SD_STATE_READY;
 800255c:	2601      	movs	r6, #1
 800255e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002562:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002564:	4308      	orrs	r0, r1
 8002566:	63a0      	str	r0, [r4, #56]	; 0x38
 8002568:	e77f      	b.n	800246a <HAL_SD_Init+0x46>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800256a:	4623      	mov	r3, r4
 800256c:	f853 7b10 	ldr.w	r7, [r3], #16
 8002570:	1d25      	adds	r5, r4, #4
 8002572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002576:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800257a:	4638      	mov	r0, r7
 800257c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002580:	f000 fb96 	bl	8002cb0 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4630      	mov	r0, r6
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002588:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800258a:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800258c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002590:	b019      	add	sp, #100	; 0x64
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002594:	4618      	mov	r0, r3
 8002596:	f000 ff03 	bl	80033a0 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800259a:	2800      	cmp	r0, #0
 800259c:	d1de      	bne.n	800255c <HAL_SD_Init+0x138>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800259e:	4601      	mov	r1, r0
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	f000 fbb9 	bl	8002d18 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80025a6:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80025a8:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	f000 fbb4 	bl	8002d18 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80025b0:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80025b2:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	f000 fbaf 	bl	8002d18 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80025ba:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80025bc:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80025be:	6820      	ldr	r0, [r4, #0]
 80025c0:	f000 fbaa 	bl	8002d18 <SDIO_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80025c6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d03e      	beq.n	800264c <HAL_SD_Init+0x228>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80025ce:	f10d 0116 	add.w	r1, sp, #22
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	f000 ff56 	bl	8003484 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80025d8:	2800      	cmp	r0, #0
 80025da:	d1bf      	bne.n	800255c <HAL_SD_Init+0x138>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	2a03      	cmp	r2, #3
 80025e2:	d0a7      	beq.n	8002534 <HAL_SD_Init+0x110>
    hsd->SdCard.RelCardAdd = sd_rca;
 80025e4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025e8:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 80025ea:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025ec:	0409      	lsls	r1, r1, #16
 80025ee:	f000 ff11 	bl	8003414 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d1b2      	bne.n	800255c <HAL_SD_Init+0x138>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80025f6:	4601      	mov	r1, r0
 80025f8:	6820      	ldr	r0, [r4, #0]
 80025fa:	f000 fb8d 	bl	8002d18 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80025fe:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002600:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002602:	6820      	ldr	r0, [r4, #0]
 8002604:	f000 fb88 	bl	8002d18 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002608:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800260a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800260c:	6820      	ldr	r0, [r4, #0]
 800260e:	f000 fb83 	bl	8002d18 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002612:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002614:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f000 fb7e 	bl	8002d18 <SDIO_GetResponse>
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	6720      	str	r0, [r4, #112]	; 0x70
 8002620:	e788      	b.n	8002534 <HAL_SD_Init+0x110>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002622:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002624:	6820      	ldr	r0, [r4, #0]
 8002626:	f000 fd55 	bl	80030d4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800262a:	b938      	cbnz	r0, 800263c <HAL_SD_Init+0x218>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800262c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800262e:	2b01      	cmp	r3, #1
 8002630:	f47f af44 	bne.w	80024bc <HAL_SD_Init+0x98>
 8002634:	e73d      	b.n	80024b2 <HAL_SD_Init+0x8e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002636:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800263a:	e78f      	b.n	800255c <HAL_SD_Init+0x138>
    if(errorstate != HAL_SD_ERROR_NONE)
 800263c:	4605      	mov	r5, r0
 800263e:	e724      	b.n	800248a <HAL_SD_Init+0x66>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002640:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8002644:	e721      	b.n	800248a <HAL_SD_Init+0x66>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002646:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800264a:	e787      	b.n	800255c <HAL_SD_Init+0x138>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	e771      	b.n	8002534 <HAL_SD_Init+0x110>
 8002650:	422580a0 	.word	0x422580a0
 8002654:	c1100000 	.word	0xc1100000

08002658 <HAL_SD_GetCardInfo>:
{
 8002658:	b470      	push	{r4, r5, r6}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800265a:	e9d0 4211 	ldrd	r4, r2, [r0, #68]	; 0x44
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800265e:	e9d0 3613 	ldrd	r3, r6, [r0, #76]	; 0x4c
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002662:	6d45      	ldr	r5, [r0, #84]	; 0x54
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002664:	600c      	str	r4, [r1, #0]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002666:	6d84      	ldr	r4, [r0, #88]	; 0x58
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002668:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800266a:	608b      	str	r3, [r1, #8]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800266c:	e9d0 2317 	ldrd	r2, r3, [r0, #92]	; 0x5c
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002670:	e9c1 6503 	strd	r6, r5, [r1, #12]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002674:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
 8002678:	bc70      	pop	{r4, r5, r6}
 800267a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800267c:	61cb      	str	r3, [r1, #28]
}
 800267e:	4770      	bx	lr

08002680 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8002680:	2203      	movs	r2, #3
{
 8002682:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002684:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002686:	b08b      	sub	sp, #44	; 0x2c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002688:	4293      	cmp	r3, r2
{
 800268a:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 800268c:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 8002690:	6807      	ldr	r7, [r0, #0]
{
 8002692:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002694:	d028      	beq.n	80026e8 <HAL_SD_ConfigWideBusOperation+0x68>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002696:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800269a:	d025      	beq.n	80026e8 <HAL_SD_ConfigWideBusOperation+0x68>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800269c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80026a0:	d050      	beq.n	8002744 <HAL_SD_ConfigWideBusOperation+0xc4>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80026a2:	2900      	cmp	r1, #0
 80026a4:	d02f      	beq.n	8002706 <HAL_SD_ConfigWideBusOperation+0x86>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ac:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80026ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80026b0:	bb0d      	cbnz	r5, 80026f6 <HAL_SD_ConfigWideBusOperation+0x76>
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80026b2:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80026b6:	6863      	ldr	r3, [r4, #4]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80026b8:	68a2      	ldr	r2, [r4, #8]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80026ba:	9304      	str	r3, [sp, #16]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80026bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80026c0:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 80026c2:	9607      	str	r6, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80026c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    (void)SDIO_Init(hsd->Instance, Init);
 80026c8:	aa0a      	add	r2, sp, #40	; 0x28
 80026ca:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80026ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80026d2:	ab04      	add	r3, sp, #16
 80026d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d6:	4638      	mov	r0, r7
 80026d8:	f000 faea 	bl	8002cb0 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80026dc:	2301      	movs	r3, #1
  return HAL_OK;
 80026de:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80026e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80026e4:	b00b      	add	sp, #44	; 0x2c
 80026e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	63a3      	str	r3, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80026f0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80026f2:	2d00      	cmp	r5, #0
 80026f4:	d0dd      	beq.n	80026b2 <HAL_SD_ConfigWideBusOperation+0x32>
    hsd->State = HAL_SD_STATE_READY;
 80026f6:	2301      	movs	r3, #1
    return HAL_ERROR;
 80026f8:	4618      	mov	r0, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026fa:	4a25      	ldr	r2, [pc, #148]	; (8002790 <HAL_SD_ConfigWideBusOperation+0x110>)
 80026fc:	63ba      	str	r2, [r7, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002702:	b00b      	add	sp, #44	; 0x2c
 8002704:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002706:	4638      	mov	r0, r7
  uint32_t scr[2U] = {0U, 0U};
 8002708:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800270c:	f000 fb04 	bl	8002d18 <SDIO_GetResponse>
 8002710:	0182      	lsls	r2, r0, #6
 8002712:	d420      	bmi.n	8002756 <HAL_SD_ConfigWideBusOperation+0xd6>
  errorstate = SD_FindSCR(hsd, scr);
 8002714:	a904      	add	r1, sp, #16
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff fa0e 	bl	8001b38 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800271c:	b968      	cbnz	r0, 800273a <HAL_SD_ConfigWideBusOperation+0xba>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800271e:	9b05      	ldr	r3, [sp, #20]
 8002720:	6827      	ldr	r7, [r4, #0]
 8002722:	03db      	lsls	r3, r3, #15
 8002724:	d531      	bpl.n	800278a <HAL_SD_ConfigWideBusOperation+0x10a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002726:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002728:	4638      	mov	r0, r7
 800272a:	0409      	lsls	r1, r1, #16
 800272c:	f000 fd3c 	bl	80031a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002730:	b918      	cbnz	r0, 800273a <HAL_SD_ConfigWideBusOperation+0xba>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002732:	4601      	mov	r1, r0
 8002734:	6820      	ldr	r0, [r4, #0]
 8002736:	f000 fdaf 	bl	8003298 <SDMMC_CmdBusWidth>
 800273a:	6827      	ldr	r7, [r4, #0]
      hsd->ErrorCode |= errorstate;
 800273c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800273e:	4318      	orrs	r0, r3
 8002740:	63a0      	str	r0, [r4, #56]	; 0x38
 8002742:	e7d5      	b.n	80026f0 <HAL_SD_ConfigWideBusOperation+0x70>
  uint32_t scr[2U] = {0U, 0U};
 8002744:	2300      	movs	r3, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002746:	4638      	mov	r0, r7
 8002748:	4619      	mov	r1, r3
  uint32_t scr[2U] = {0U, 0U};
 800274a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800274e:	f000 fae3 	bl	8002d18 <SDIO_GetResponse>
 8002752:	0180      	lsls	r0, r0, #6
 8002754:	d503      	bpl.n	800275e <HAL_SD_ConfigWideBusOperation+0xde>
 8002756:	6827      	ldr	r7, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002758:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800275c:	e7ee      	b.n	800273c <HAL_SD_ConfigWideBusOperation+0xbc>
  errorstate = SD_FindSCR(hsd, scr);
 800275e:	a904      	add	r1, sp, #16
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff f9e9 	bl	8001b38 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002766:	2800      	cmp	r0, #0
 8002768:	d1e7      	bne.n	800273a <HAL_SD_ConfigWideBusOperation+0xba>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800276a:	9b05      	ldr	r3, [sp, #20]
 800276c:	6827      	ldr	r7, [r4, #0]
 800276e:	0359      	lsls	r1, r3, #13
 8002770:	d50b      	bpl.n	800278a <HAL_SD_ConfigWideBusOperation+0x10a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002772:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002774:	4638      	mov	r0, r7
 8002776:	0409      	lsls	r1, r1, #16
 8002778:	f000 fd16 	bl	80031a8 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800277c:	2800      	cmp	r0, #0
 800277e:	d1dc      	bne.n	800273a <HAL_SD_ConfigWideBusOperation+0xba>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002780:	2102      	movs	r1, #2
 8002782:	6820      	ldr	r0, [r4, #0]
 8002784:	f000 fd88 	bl	8003298 <SDMMC_CmdBusWidth>
 8002788:	e7d7      	b.n	800273a <HAL_SD_ConfigWideBusOperation+0xba>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800278a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800278e:	e7d5      	b.n	800273c <HAL_SD_ConfigWideBusOperation+0xbc>
 8002790:	004005ff 	.word	0x004005ff

08002794 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002794:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002796:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002798:	0409      	lsls	r1, r1, #16
{
 800279a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800279c:	6800      	ldr	r0, [r0, #0]
 800279e:	f000 fec5 	bl	800352c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80027a2:	4601      	mov	r1, r0
 80027a4:	b120      	cbz	r0, 80027b0 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 80027a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027a8:	2000      	movs	r0, #0
 80027aa:	4319      	orrs	r1, r3
 80027ac:	63a1      	str	r1, [r4, #56]	; 0x38
}
 80027ae:	bd10      	pop	{r4, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80027b0:	6820      	ldr	r0, [r4, #0]
 80027b2:	f000 fab1 	bl	8002d18 <SDIO_GetResponse>
 80027b6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80027ba:	bd10      	pop	{r4, pc}

080027bc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d06d      	beq.n	80028a0 <HAL_TIM_Base_Init+0xe0>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80027c8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027ce:	4604      	mov	r4, r0
 80027d0:	b3b3      	cbz	r3, 8002840 <HAL_TIM_Base_Init+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 80027d2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d6:	4e42      	ldr	r6, [pc, #264]	; (80028e0 <HAL_TIM_Base_Init+0x120>)
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027dc:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	69a5      	ldr	r5, [r4, #24]
 80027e2:	68e0      	ldr	r0, [r4, #12]
 80027e4:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e6:	d05d      	beq.n	80028a4 <HAL_TIM_Base_Init+0xe4>
 80027e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80027ec:	d069      	beq.n	80028c2 <HAL_TIM_Base_Init+0x102>
 80027ee:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80027f2:	42b2      	cmp	r2, r6
 80027f4:	d029      	beq.n	800284a <HAL_TIM_Base_Init+0x8a>
 80027f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027fa:	42b2      	cmp	r2, r6
 80027fc:	d025      	beq.n	800284a <HAL_TIM_Base_Init+0x8a>
 80027fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002802:	42b2      	cmp	r2, r6
 8002804:	d021      	beq.n	800284a <HAL_TIM_Base_Init+0x8a>
 8002806:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800280a:	42b2      	cmp	r2, r6
 800280c:	d01d      	beq.n	800284a <HAL_TIM_Base_Init+0x8a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800280e:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002812:	42b2      	cmp	r2, r6
 8002814:	d059      	beq.n	80028ca <HAL_TIM_Base_Init+0x10a>
 8002816:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800281a:	42b2      	cmp	r2, r6
 800281c:	d055      	beq.n	80028ca <HAL_TIM_Base_Init+0x10a>
 800281e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002822:	42b2      	cmp	r2, r6
 8002824:	d051      	beq.n	80028ca <HAL_TIM_Base_Init+0x10a>
 8002826:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800282a:	42b2      	cmp	r2, r6
 800282c:	d04d      	beq.n	80028ca <HAL_TIM_Base_Init+0x10a>
 800282e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002832:	42b2      	cmp	r2, r6
 8002834:	d049      	beq.n	80028ca <HAL_TIM_Base_Init+0x10a>
 8002836:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800283a:	42b2      	cmp	r2, r6
 800283c:	d149      	bne.n	80028d2 <HAL_TIM_Base_Init+0x112>
 800283e:	e044      	b.n	80028ca <HAL_TIM_Base_Init+0x10a>
    htim->Lock = HAL_UNLOCKED;
 8002840:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002844:	f7ff ffba 	bl	80027bc <HAL_TIM_Base_MspInit>
 8002848:	e7c3      	b.n	80027d2 <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 800284a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002850:	4333      	orrs	r3, r6
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002858:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285a:	4e22      	ldr	r6, [pc, #136]	; (80028e4 <HAL_TIM_Base_Init+0x124>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002860:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002862:	42b2      	cmp	r2, r6
  TIMx->CR1 = tmpcr1;
 8002864:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002866:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002868:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800286a:	d101      	bne.n	8002870 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	6963      	ldr	r3, [r4, #20]
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002870:	2301      	movs	r3, #1
  return HAL_OK;
 8002872:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8002874:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002876:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800287e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002882:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002886:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800288e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002892:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800289a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800289e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
}
 80028a2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80028a4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80028aa:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ac:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b2:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80028ba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028bc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80028be:	6291      	str	r1, [r2, #40]	; 0x28
 80028c0:	e7d4      	b.n	800286c <HAL_TIM_Base_Init+0xac>
    tmpcr1 |= Structure->CounterMode;
 80028c2:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80028c8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ca:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80028d8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028da:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80028dc:	6291      	str	r1, [r2, #40]	; 0x28
 80028de:	e7c7      	b.n	8002870 <HAL_TIM_Base_Init+0xb0>
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80028e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0xc>
    return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
 80028f2:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f6:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fe:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_TIM_Base_Start_IT+0x70>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002900:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002904:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002906:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002908:	d019      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d016      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_TIM_Base_Start_IT+0x74>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 8002916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800291a:	4293      	cmp	r3, r2
 800291c:	d00f      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 800291e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002922:	4293      	cmp	r3, r2
 8002924:	d00b      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 8002926:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 800292e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002932:	4293      	cmp	r3, r2
 8002934:	d003      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x56>
 8002936:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800293a:	4293      	cmp	r3, r2
 800293c:	d104      	bne.n	8002948 <HAL_TIM_Base_Start_IT+0x60>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002944:	2a06      	cmp	r2, #6
 8002946:	d005      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x6c>
    __HAL_TIM_ENABLE(htim);
 8002948:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800294a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	4770      	bx	lr
  return HAL_OK;
 8002954:	2000      	movs	r0, #0
}
 8002956:	4770      	bx	lr
 8002958:	40010000 	.word	0x40010000
 800295c:	40000400 	.word	0x40000400

08002960 <HAL_TIM_OC_DelayElapsedCallback>:
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop

08002964 <HAL_TIM_IC_CaptureCallback>:
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <HAL_TIM_TriggerCallback>:
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002970:	6803      	ldr	r3, [r0, #0]
{
 8002972:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002974:	691a      	ldr	r2, [r3, #16]
{
 8002976:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002978:	0791      	lsls	r1, r2, #30
 800297a:	d502      	bpl.n	8002982 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	0792      	lsls	r2, r2, #30
 8002980:	d45f      	bmi.n	8002a42 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	0750      	lsls	r0, r2, #29
 8002986:	d502      	bpl.n	800298e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	0751      	lsls	r1, r2, #29
 800298c:	d446      	bmi.n	8002a1c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	0712      	lsls	r2, r2, #28
 8002992:	d502      	bpl.n	800299a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	0710      	lsls	r0, r2, #28
 8002998:	d42e      	bmi.n	80029f8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	06d2      	lsls	r2, r2, #27
 800299e:	d502      	bpl.n	80029a6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	06d0      	lsls	r0, r2, #27
 80029a4:	d418      	bmi.n	80029d8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	07d1      	lsls	r1, r2, #31
 80029aa:	d502      	bpl.n	80029b2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	07d2      	lsls	r2, r2, #31
 80029b0:	d45d      	bmi.n	8002a6e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	0610      	lsls	r0, r2, #24
 80029b6:	d502      	bpl.n	80029be <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	0611      	lsls	r1, r2, #24
 80029bc:	d45f      	bmi.n	8002a7e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	0652      	lsls	r2, r2, #25
 80029c2:	d502      	bpl.n	80029ca <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	0650      	lsls	r0, r2, #25
 80029c8:	d461      	bmi.n	8002a8e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	0691      	lsls	r1, r2, #26
 80029ce:	d502      	bpl.n	80029d6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	0692      	lsls	r2, r2, #26
 80029d4:	d443      	bmi.n	8002a5e <HAL_TIM_IRQHandler+0xee>
}
 80029d6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029dc:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029de:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e0:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ea:	d064      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80029ec:	f7ff ffba 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f0:	2200      	movs	r2, #0
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	7722      	strb	r2, [r4, #28]
 80029f6:	e7d6      	b.n	80029a6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029f8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029fc:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029fe:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a00:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a04:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a08:	d152      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	f7ff ffa9 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff ffaa 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a14:	2200      	movs	r2, #0
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	7722      	strb	r2, [r4, #28]
 8002a1a:	e7be      	b.n	800299a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a1c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a20:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a22:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a24:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002a26:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a28:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2e:	d13c      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a30:	f7ff ff96 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff ff97 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	7722      	strb	r2, [r4, #28]
 8002a40:	e7a5      	b.n	800298e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a42:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a46:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a48:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a4a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a4e:	079b      	lsls	r3, r3, #30
 8002a50:	d025      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	f7ff ff87 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	2200      	movs	r2, #0
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	7722      	strb	r2, [r4, #28]
 8002a5c:	e791      	b.n	8002982 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a5e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002a62:	4620      	mov	r0, r4
}
 8002a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002a6a:	f000 b82b 	b.w	8002ac4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a6e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a76:	f7fd ffd9 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	e799      	b.n	80029b2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a86:	f000 f81f 	bl	8002ac8 <HAL_TIMEx_BreakCallback>
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	e797      	b.n	80029be <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002a92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a94:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a96:	f7ff ff69 	bl	800296c <HAL_TIM_TriggerCallback>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	e795      	b.n	80029ca <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	f7ff ff5f 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ff60 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
 8002aa8:	e7d5      	b.n	8002a56 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	f7ff ff5b 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002aae:	e7c4      	b.n	8002a3a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab0:	f7ff ff58 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e7ae      	b.n	8002a14 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	f7ff ff53 	bl	8002960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff54 	bl	8002968 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ac0:	e796      	b.n	80029f0 <HAL_TIM_IRQHandler+0x80>
 8002ac2:	bf00      	nop

08002ac4 <HAL_TIMEx_CommutCallback>:
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <HAL_TIMEx_BreakCallback>:
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d06a      	beq.n	8002ba6 <HAL_UART_Init+0xda>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8002ad4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ada:	4604      	mov	r4, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d05d      	beq.n	8002b9c <HAL_UART_Init+0xd0>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae0:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ae2:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002ae4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002ae8:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aea:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8002aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002af0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002af4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002afa:	4301      	orrs	r1, r0
 8002afc:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afe:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002b00:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b02:	6965      	ldr	r5, [r4, #20]
 8002b04:	4302      	orrs	r2, r0
 8002b06:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002b08:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b0c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002b0e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b12:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002b14:	430a      	orrs	r2, r1
 8002b16:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	69a0      	ldr	r0, [r4, #24]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b1c:	492f      	ldr	r1, [pc, #188]	; (8002bdc <HAL_UART_Init+0x110>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b22:	4302      	orrs	r2, r0
  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b24:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b26:	615a      	str	r2, [r3, #20]
  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b28:	d035      	beq.n	8002b96 <HAL_UART_Init+0xca>
 8002b2a:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <HAL_UART_Init+0x114>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d032      	beq.n	8002b96 <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b30:	f7fe ffaa 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002b34:	e9d4 3200 	ldrd	r3, r2, [r4]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b38:	69e1      	ldr	r1, [r4, #28]
 8002b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b3e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002b46:	d030      	beq.n	8002baa <HAL_UART_Init+0xde>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b48:	0092      	lsls	r2, r2, #2
 8002b4a:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b4e:	2264      	movs	r2, #100	; 0x64
 8002b50:	4d24      	ldr	r5, [pc, #144]	; (8002be4 <HAL_UART_Init+0x118>)
 8002b52:	fba5 6100 	umull	r6, r1, r5, r0
 8002b56:	0949      	lsrs	r1, r1, #5
 8002b58:	fb02 0011 	mls	r0, r2, r1, r0
 8002b5c:	0100      	lsls	r0, r0, #4
 8002b5e:	3032      	adds	r0, #50	; 0x32
 8002b60:	fba5 2000 	umull	r2, r0, r5, r0
 8002b64:	0109      	lsls	r1, r1, #4
 8002b66:	eb01 1050 	add.w	r0, r1, r0, lsr #5
 8002b6a:	6098      	str	r0, [r3, #8]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b6e:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b70:	691a      	ldr	r2, [r3, #16]
  return HAL_OK;
 8002b72:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b80:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b88:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b90:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002b94:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b96:	f7fe ff8f 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8002b9a:	e7cb      	b.n	8002b34 <HAL_UART_Init+0x68>
    huart->Lock = HAL_UNLOCKED;
 8002b9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002ba0:	f7fe f82e 	bl	8000c00 <HAL_UART_MspInit>
 8002ba4:	e79c      	b.n	8002ae0 <HAL_UART_Init+0x14>
    return HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
}
 8002ba8:	4770      	bx	lr
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002baa:	0052      	lsls	r2, r2, #1
 8002bac:	fbb0 f0f2 	udiv	r0, r0, r2
 8002bb0:	2264      	movs	r2, #100	; 0x64
 8002bb2:	4e0c      	ldr	r6, [pc, #48]	; (8002be4 <HAL_UART_Init+0x118>)
 8002bb4:	fba6 5100 	umull	r5, r1, r6, r0
 8002bb8:	094d      	lsrs	r5, r1, #5
 8002bba:	fb02 0015 	mls	r0, r2, r5, r0
 8002bbe:	00c2      	lsls	r2, r0, #3
 8002bc0:	3232      	adds	r2, #50	; 0x32
 8002bc2:	fba6 1202 	umull	r1, r2, r6, r2
 8002bc6:	0952      	lsrs	r2, r2, #5
 8002bc8:	f002 0107 	and.w	r1, r2, #7
 8002bcc:	0052      	lsls	r2, r2, #1
 8002bce:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8002bd2:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002bd6:	440a      	add	r2, r1
 8002bd8:	609a      	str	r2, [r3, #8]
 8002bda:	e7c7      	b.n	8002b6c <HAL_UART_Init+0xa0>
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	51eb851f 	.word	0x51eb851f

08002be8 <SDMMC_GetCmdResp1.part.2>:
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002be8:	4b30      	ldr	r3, [pc, #192]	; (8002cac <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8002bea:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002bec:	4013      	ands	r3, r2
 8002bee:	b34b      	cbz	r3, 8002c44 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	db29      	blt.n	8002c48 <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002bf4:	0051      	lsls	r1, r2, #1
 8002bf6:	d42d      	bmi.n	8002c54 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002bf8:	0093      	lsls	r3, r2, #2
 8002bfa:	d42d      	bmi.n	8002c58 <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002bfc:	00d1      	lsls	r1, r2, #3
 8002bfe:	d426      	bmi.n	8002c4e <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002c00:	0113      	lsls	r3, r2, #4
 8002c02:	d42e      	bmi.n	8002c62 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002c04:	0151      	lsls	r1, r2, #5
 8002c06:	d42f      	bmi.n	8002c68 <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002c08:	01d3      	lsls	r3, r2, #7
 8002c0a:	d427      	bmi.n	8002c5c <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002c0c:	0211      	lsls	r1, r2, #8
 8002c0e:	d42e      	bmi.n	8002c6e <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002c10:	0253      	lsls	r3, r2, #9
 8002c12:	d42f      	bmi.n	8002c74 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002c14:	0291      	lsls	r1, r2, #10
 8002c16:	d430      	bmi.n	8002c7a <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002c18:	02d3      	lsls	r3, r2, #11
 8002c1a:	d431      	bmi.n	8002c80 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002c1c:	0351      	lsls	r1, r2, #13
 8002c1e:	d432      	bmi.n	8002c86 <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002c20:	0393      	lsls	r3, r2, #14
 8002c22:	d433      	bmi.n	8002c8c <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002c24:	03d1      	lsls	r1, r2, #15
 8002c26:	d434      	bmi.n	8002c92 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002c28:	0413      	lsls	r3, r2, #16
 8002c2a:	d435      	bmi.n	8002c98 <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002c2c:	0451      	lsls	r1, r2, #17
 8002c2e:	d436      	bmi.n	8002c9e <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002c30:	0493      	lsls	r3, r2, #18
 8002c32:	d437      	bmi.n	8002ca4 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002c34:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002c38:	bf14      	ite	ne
 8002c3a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8002c3e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002c42:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 8002c44:	4618      	mov	r0, r3
 8002c46:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002c48:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002c4c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002c4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c52:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002c54:	2040      	movs	r0, #64	; 0x40
 8002c56:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002c58:	2080      	movs	r0, #128	; 0x80
 8002c5a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002c5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002c60:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002c62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c66:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002c68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c6c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002c6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c72:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c78:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c7e:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8002c80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c84:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002c86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c8a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002c8c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c90:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002c92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c96:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002c98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c9c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002c9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002ca2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8002ca4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	fdffe008 	.word	0xfdffe008

08002cb0 <SDIO_Init>:
{
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	b410      	push	{r4}
 8002cb4:	ac02      	add	r4, sp, #8
 8002cb6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002cba:	460b      	mov	r3, r1
             Init.ClockBypass         |\
 8002cbc:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
  tmpreg |= (Init.ClockEdge           |\
 8002cc0:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002cc2:	9905      	ldr	r1, [sp, #20]
             Init.BusWide             |\
 8002cc4:	9c06      	ldr	r4, [sp, #24]
             Init.ClockBypass         |\
 8002cc6:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002cc8:	6842      	ldr	r2, [r0, #4]
             Init.ClockPowerSave      |\
 8002cca:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002ccc:	9907      	ldr	r1, [sp, #28]
             Init.BusWide             |\
 8002cce:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002cd0:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8002cd4:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002cd6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
}
 8002cda:	bc10      	pop	{r4}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	6043      	str	r3, [r0, #4]
}
 8002ce0:	b004      	add	sp, #16
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop

08002ce8 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8002ce8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <SDIO_WriteFIFO>:
{ 
 8002cf0:	4603      	mov	r3, r0
  SDIOx->FIFO = *pWriteData;
 8002cf2:	680a      	ldr	r2, [r1, #0]
}
 8002cf4:	2000      	movs	r0, #0
  SDIOx->FIFO = *pWriteData;
 8002cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002cfa:	4770      	bx	lr

08002cfc <SDIO_PowerState_ON>:
{  
 8002cfc:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002cfe:	2203      	movs	r2, #3
{  
 8002d00:	4603      	mov	r3, r0
  HAL_Delay(2);
 8002d02:	2002      	movs	r0, #2
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002d04:	601a      	str	r2, [r3, #0]
  HAL_Delay(2);
 8002d06:	f7fe f8d1 	bl	8000eac <HAL_Delay>
}
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	bd08      	pop	{r3, pc}
 8002d0e:	bf00      	nop

08002d10 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002d10:	6800      	ldr	r0, [r0, #0]
}
 8002d12:	f000 0003 	and.w	r0, r0, #3
 8002d16:	4770      	bx	lr

08002d18 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002d18:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8002d1a:	5840      	ldr	r0, [r0, r1]
}  
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <SDIO_ConfigData>:
{
 8002d20:	b430      	push	{r4, r5}
  SDIOx->DLEN = Data->DataLength;
 8002d22:	e9d1 4200 	ldrd	r4, r2, [r1]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d26:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
  SDIOx->DTIMER = Data->DataTimeOut;
 8002d2a:	6244      	str	r4, [r0, #36]	; 0x24
                       Data->TransferDir   |\
 8002d2c:	690c      	ldr	r4, [r1, #16]
  SDIOx->DLEN = Data->DataLength;
 8002d2e:	6282      	str	r2, [r0, #40]	; 0x28
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002d30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002d32:	432b      	orrs	r3, r5
                       Data->TransferMode  |\
 8002d34:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002d36:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002d38:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferMode  |\
 8002d3c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002d42:	bc30      	pop	{r4, r5}
 8002d44:	2000      	movs	r0, #0
 8002d46:	4770      	bx	lr

08002d48 <SDMMC_CmdBlockLength>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d48:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <SDMMC_CmdBlockLength+0x78>)
{
 8002d4e:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	4c1c      	ldr	r4, [pc, #112]	; (8002dc4 <SDMMC_CmdBlockLength+0x7c>)
  SDIOx->ARG = Command->Argument;
 8002d54:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d56:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002d5a:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d5c:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002d5e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002d62:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002d66:	f022 020f 	bic.w	r2, r2, #15
 8002d6a:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002d6e:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002d70:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002d74:	d313      	bcc.n	8002d9e <SDMMC_CmdBlockLength+0x56>
    sta_reg = SDIOx->STA;
 8002d76:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002d78:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002d7c:	d0f8      	beq.n	8002d70 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d7e:	0511      	lsls	r1, r2, #20
 8002d80:	d4f6      	bmi.n	8002d70 <SDMMC_CmdBlockLength+0x28>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002d82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d84:	075a      	lsls	r2, r3, #29
 8002d86:	d413      	bmi.n	8002db0 <SDMMC_CmdBlockLength+0x68>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002d88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d8a:	07db      	lsls	r3, r3, #31
 8002d8c:	d40b      	bmi.n	8002da6 <SDMMC_CmdBlockLength+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002d8e:	23c5      	movs	r3, #197	; 0xc5
 8002d90:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002d92:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d00e      	beq.n	8002db8 <SDMMC_CmdBlockLength+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d9a:	2001      	movs	r0, #1
  return errorstate;
 8002d9c:	e001      	b.n	8002da2 <SDMMC_CmdBlockLength+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8002d9e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002da2:	bc10      	pop	{r4}
 8002da4:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002daa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002dac:	4618      	mov	r0, r3
}
 8002dae:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002db0:	2304      	movs	r3, #4
 8002db2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002db4:	4618      	mov	r0, r3
 8002db6:	e7f4      	b.n	8002da2 <SDMMC_CmdBlockLength+0x5a>
}
 8002db8:	bc10      	pop	{r4}
 8002dba:	f7ff bf15 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8002dbe:	bf00      	nop
 8002dc0:	20000044 	.word	0x20000044
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <SDMMC_CmdReadSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <SDMMC_CmdReadSingleBlock+0x7c>)
{
 8002dce:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	4c1d      	ldr	r4, [pc, #116]	; (8002e48 <SDMMC_CmdReadSingleBlock+0x80>)
  SDIOx->ARG = Command->Argument;
 8002dd4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002dd6:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002dda:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ddc:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002dde:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002de2:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002de6:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002dea:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002df4:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002df8:	d313      	bcc.n	8002e22 <SDMMC_CmdReadSingleBlock+0x5a>
    sta_reg = SDIOx->STA;
 8002dfa:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002dfc:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002e00:	d0f8      	beq.n	8002df4 <SDMMC_CmdReadSingleBlock+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e02:	0511      	lsls	r1, r2, #20
 8002e04:	d4f6      	bmi.n	8002df4 <SDMMC_CmdReadSingleBlock+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e08:	075a      	lsls	r2, r3, #29
 8002e0a:	d413      	bmi.n	8002e34 <SDMMC_CmdReadSingleBlock+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e0e:	07db      	lsls	r3, r3, #31
 8002e10:	d40b      	bmi.n	8002e2a <SDMMC_CmdReadSingleBlock+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e12:	23c5      	movs	r3, #197	; 0xc5
 8002e14:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002e16:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b11      	cmp	r3, #17
 8002e1c:	d00e      	beq.n	8002e3c <SDMMC_CmdReadSingleBlock+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e1e:	2001      	movs	r0, #1
  return errorstate;
 8002e20:	e001      	b.n	8002e26 <SDMMC_CmdReadSingleBlock+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002e22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002e26:	bc10      	pop	{r4}
 8002e28:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e2a:	2301      	movs	r3, #1
}
 8002e2c:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e2e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e30:	4618      	mov	r0, r3
}
 8002e32:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e34:	2304      	movs	r3, #4
 8002e36:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e38:	4618      	mov	r0, r3
 8002e3a:	e7f4      	b.n	8002e26 <SDMMC_CmdReadSingleBlock+0x5e>
}
 8002e3c:	bc10      	pop	{r4}
 8002e3e:	f7ff bed3 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8002e42:	bf00      	nop
 8002e44:	20000044 	.word	0x20000044
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <SDMMC_CmdReadMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <SDMMC_CmdReadMultiBlock+0x7c>)
{
 8002e52:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4c1d      	ldr	r4, [pc, #116]	; (8002ecc <SDMMC_CmdReadMultiBlock+0x80>)
  SDIOx->ARG = Command->Argument;
 8002e58:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e5a:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002e5e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e60:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002e62:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002e66:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e6a:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002e6e:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
 8002e72:	f042 0202 	orr.w	r2, r2, #2
 8002e76:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002e78:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002e7c:	d313      	bcc.n	8002ea6 <SDMMC_CmdReadMultiBlock+0x5a>
    sta_reg = SDIOx->STA;
 8002e7e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e80:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002e84:	d0f8      	beq.n	8002e78 <SDMMC_CmdReadMultiBlock+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e86:	0511      	lsls	r1, r2, #20
 8002e88:	d4f6      	bmi.n	8002e78 <SDMMC_CmdReadMultiBlock+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e8c:	075a      	lsls	r2, r3, #29
 8002e8e:	d413      	bmi.n	8002eb8 <SDMMC_CmdReadMultiBlock+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e92:	07db      	lsls	r3, r3, #31
 8002e94:	d40b      	bmi.n	8002eae <SDMMC_CmdReadMultiBlock+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e96:	23c5      	movs	r3, #197	; 0xc5
 8002e98:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002e9a:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d00e      	beq.n	8002ec0 <SDMMC_CmdReadMultiBlock+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ea2:	2001      	movs	r0, #1
  return errorstate;
 8002ea4:	e001      	b.n	8002eaa <SDMMC_CmdReadMultiBlock+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002ea6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002eaa:	bc10      	pop	{r4}
 8002eac:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002eb2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002eb4:	4618      	mov	r0, r3
}
 8002eb6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002eb8:	2304      	movs	r3, #4
 8002eba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	e7f4      	b.n	8002eaa <SDMMC_CmdReadMultiBlock+0x5e>
}
 8002ec0:	bc10      	pop	{r4}
 8002ec2:	f7ff be91 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8002ec6:	bf00      	nop
 8002ec8:	20000044 	.word	0x20000044
 8002ecc:	10624dd3 	.word	0x10624dd3

08002ed0 <SDMMC_CmdWriteSingleBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ed0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ed4:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <SDMMC_CmdWriteSingleBlock+0x78>)
{
 8002ed6:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	4c1c      	ldr	r4, [pc, #112]	; (8002f4c <SDMMC_CmdWriteSingleBlock+0x7c>)
  SDIOx->ARG = Command->Argument;
 8002edc:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ede:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ee2:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ee4:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ee6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002eea:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002eee:	f022 020f 	bic.w	r2, r2, #15
 8002ef2:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
 8002ef6:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002ef8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002efc:	d313      	bcc.n	8002f26 <SDMMC_CmdWriteSingleBlock+0x56>
    sta_reg = SDIOx->STA;
 8002efe:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f00:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002f04:	d0f8      	beq.n	8002ef8 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f06:	0511      	lsls	r1, r2, #20
 8002f08:	d4f6      	bmi.n	8002ef8 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f0c:	075a      	lsls	r2, r3, #29
 8002f0e:	d413      	bmi.n	8002f38 <SDMMC_CmdWriteSingleBlock+0x68>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f12:	07db      	lsls	r3, r3, #31
 8002f14:	d40b      	bmi.n	8002f2e <SDMMC_CmdWriteSingleBlock+0x5e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f16:	23c5      	movs	r3, #197	; 0xc5
 8002f18:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002f1a:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b18      	cmp	r3, #24
 8002f20:	d00e      	beq.n	8002f40 <SDMMC_CmdWriteSingleBlock+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f22:	2001      	movs	r0, #1
  return errorstate;
 8002f24:	e001      	b.n	8002f2a <SDMMC_CmdWriteSingleBlock+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8002f26:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002f2a:	bc10      	pop	{r4}
 8002f2c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f2e:	2301      	movs	r3, #1
}
 8002f30:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f32:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f34:	4618      	mov	r0, r3
}
 8002f36:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f38:	2304      	movs	r3, #4
 8002f3a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	e7f4      	b.n	8002f2a <SDMMC_CmdWriteSingleBlock+0x5a>
}
 8002f40:	bc10      	pop	{r4}
 8002f42:	f7ff be51 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8002f46:	bf00      	nop
 8002f48:	20000044 	.word	0x20000044
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <SDMMC_CmdWriteMultiBlock>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f50:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f54:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <SDMMC_CmdWriteMultiBlock+0x7c>)
{
 8002f56:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	4c1d      	ldr	r4, [pc, #116]	; (8002fd0 <SDMMC_CmdWriteMultiBlock+0x80>)
  SDIOx->ARG = Command->Argument;
 8002f5c:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f5e:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f62:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f64:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f66:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f6a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f6e:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f72:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002f7c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002f80:	d313      	bcc.n	8002faa <SDMMC_CmdWriteMultiBlock+0x5a>
    sta_reg = SDIOx->STA;
 8002f82:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f84:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002f88:	d0f8      	beq.n	8002f7c <SDMMC_CmdWriteMultiBlock+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f8a:	0511      	lsls	r1, r2, #20
 8002f8c:	d4f6      	bmi.n	8002f7c <SDMMC_CmdWriteMultiBlock+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f90:	075a      	lsls	r2, r3, #29
 8002f92:	d413      	bmi.n	8002fbc <SDMMC_CmdWriteMultiBlock+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f96:	07db      	lsls	r3, r3, #31
 8002f98:	d40b      	bmi.n	8002fb2 <SDMMC_CmdWriteMultiBlock+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f9a:	23c5      	movs	r3, #197	; 0xc5
 8002f9c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002f9e:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b19      	cmp	r3, #25
 8002fa4:	d00e      	beq.n	8002fc4 <SDMMC_CmdWriteMultiBlock+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fa6:	2001      	movs	r0, #1
  return errorstate;
 8002fa8:	e001      	b.n	8002fae <SDMMC_CmdWriteMultiBlock+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8002faa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002fae:	bc10      	pop	{r4}
 8002fb0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002fb6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fb8:	4618      	mov	r0, r3
}
 8002fba:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	e7f4      	b.n	8002fae <SDMMC_CmdWriteMultiBlock+0x5e>
}
 8002fc4:	bc10      	pop	{r4}
 8002fc6:	f7ff be0f 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8002fca:	bf00      	nop
 8002fcc:	20000044 	.word	0x20000044
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <SDMMC_CmdStopTransfer>:
  SDIOx->ARG = Command->Argument;
 8002fd4:	2200      	movs	r2, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <SDMMC_CmdStopTransfer+0x70>)
  SDIOx->ARG = Command->Argument;
 8002fd8:	6082      	str	r2, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <SDMMC_CmdStopTransfer+0x74>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002fde:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fe0:	fba3 3101 	umull	r3, r1, r3, r1
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <SDMMC_CmdStopTransfer+0x78>)
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002fe6:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002fea:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002fec:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002ff0:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ff4:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8002ff8:	f042 0204 	orr.w	r2, r2, #4
 8002ffc:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8002ffe:	b1a3      	cbz	r3, 800302a <SDMMC_CmdStopTransfer+0x56>
    sta_reg = SDIOx->STA;
 8003000:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003002:	3b01      	subs	r3, #1
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003004:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003008:	d0f9      	beq.n	8002ffe <SDMMC_CmdStopTransfer+0x2a>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800300a:	0511      	lsls	r1, r2, #20
 800300c:	d4f7      	bmi.n	8002ffe <SDMMC_CmdStopTransfer+0x2a>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800300e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003010:	075a      	lsls	r2, r3, #29
 8003012:	d411      	bmi.n	8003038 <SDMMC_CmdStopTransfer+0x64>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003014:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003016:	07db      	lsls	r3, r3, #31
 8003018:	d40a      	bmi.n	8003030 <SDMMC_CmdStopTransfer+0x5c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800301a:	23c5      	movs	r3, #197	; 0xc5
 800301c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800301e:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d00c      	beq.n	8003040 <SDMMC_CmdStopTransfer+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003026:	2001      	movs	r0, #1
}
 8003028:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800302a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800302e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003030:	2301      	movs	r3, #1
 8003032:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003034:	4618      	mov	r0, r3
 8003036:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003038:	2304      	movs	r3, #4
 800303a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800303c:	4618      	mov	r0, r3
 800303e:	4770      	bx	lr
 8003040:	f7ff bdd2 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8003044:	20000044 	.word	0x20000044
 8003048:	10624dd3 	.word	0x10624dd3
 800304c:	05f5e100 	.word	0x05f5e100

08003050 <SDMMC_CmdSelDesel>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003050:	f241 3388 	movw	r3, #5000	; 0x1388
 8003054:	491d      	ldr	r1, [pc, #116]	; (80030cc <SDMMC_CmdSelDesel+0x7c>)
{
 8003056:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003058:	6809      	ldr	r1, [r1, #0]
 800305a:	4c1d      	ldr	r4, [pc, #116]	; (80030d0 <SDMMC_CmdSelDesel+0x80>)
  SDIOx->ARG = Command->Argument;
 800305c:	6082      	str	r2, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800305e:	fba4 2101 	umull	r2, r1, r4, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003062:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003064:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003066:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800306a:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800306e:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003072:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
 8003076:	f042 0207 	orr.w	r2, r2, #7
 800307a:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 800307c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003080:	d313      	bcc.n	80030aa <SDMMC_CmdSelDesel+0x5a>
    sta_reg = SDIOx->STA;
 8003082:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003084:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003088:	d0f8      	beq.n	800307c <SDMMC_CmdSelDesel+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800308a:	0511      	lsls	r1, r2, #20
 800308c:	d4f6      	bmi.n	800307c <SDMMC_CmdSelDesel+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800308e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003090:	075a      	lsls	r2, r3, #29
 8003092:	d413      	bmi.n	80030bc <SDMMC_CmdSelDesel+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003094:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003096:	07db      	lsls	r3, r3, #31
 8003098:	d40b      	bmi.n	80030b2 <SDMMC_CmdSelDesel+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800309a:	23c5      	movs	r3, #197	; 0xc5
 800309c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800309e:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b07      	cmp	r3, #7
 80030a4:	d00e      	beq.n	80030c4 <SDMMC_CmdSelDesel+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030a6:	2001      	movs	r0, #1
  return errorstate;
 80030a8:	e001      	b.n	80030ae <SDMMC_CmdSelDesel+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 80030aa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80030ae:	bc10      	pop	{r4}
 80030b0:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030b2:	2301      	movs	r3, #1
}
 80030b4:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030b6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030b8:	4618      	mov	r0, r3
}
 80030ba:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80030bc:	2304      	movs	r3, #4
 80030be:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80030c0:	4618      	mov	r0, r3
 80030c2:	e7f4      	b.n	80030ae <SDMMC_CmdSelDesel+0x5e>
}
 80030c4:	bc10      	pop	{r4}
 80030c6:	f7ff bd8f 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 80030ca:	bf00      	nop
 80030cc:	20000044 	.word	0x20000044
 80030d0:	10624dd3 	.word	0x10624dd3

080030d4 <SDMMC_CmdGoIdleState>:
{
 80030d4:	4601      	mov	r1, r0
 80030d6:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 80030d8:	2400      	movs	r4, #0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030da:	f241 3388 	movw	r3, #5000	; 0x1388
 80030de:	4810      	ldr	r0, [pc, #64]	; (8003120 <SDMMC_CmdGoIdleState+0x4c>)
 80030e0:	4a10      	ldr	r2, [pc, #64]	; (8003124 <SDMMC_CmdGoIdleState+0x50>)
 80030e2:	6800      	ldr	r0, [r0, #0]
  SDIOx->ARG = Command->Argument;
 80030e4:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030e6:	fba2 2000 	umull	r2, r0, r2, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030ea:	68ca      	ldr	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030ec:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030ee:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80030f2:	f022 020f 	bic.w	r2, r2, #15
 80030f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030fa:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80030fe:	60ca      	str	r2, [r1, #12]
 8003100:	e002      	b.n	8003108 <SDMMC_CmdGoIdleState+0x34>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003102:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8003104:	0612      	lsls	r2, r2, #24
 8003106:	d406      	bmi.n	8003116 <SDMMC_CmdGoIdleState+0x42>
    if (count-- == 0U)
 8003108:	f113 33ff 	adds.w	r3, r3, #4294967295
 800310c:	d2f9      	bcs.n	8003102 <SDMMC_CmdGoIdleState+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800310e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003112:	bc10      	pop	{r4}
 8003114:	4770      	bx	lr
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003116:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8003118:	2000      	movs	r0, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800311a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800311c:	bc10      	pop	{r4}
 800311e:	4770      	bx	lr
 8003120:	20000044 	.word	0x20000044
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <SDMMC_CmdOperCond>:
{
 8003128:	4601      	mov	r1, r0
 800312a:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 800312c:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003130:	f241 3388 	movw	r3, #5000	; 0x1388
 8003134:	481a      	ldr	r0, [pc, #104]	; (80031a0 <SDMMC_CmdOperCond+0x78>)
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <SDMMC_CmdOperCond+0x7c>)
 8003138:	6800      	ldr	r0, [r0, #0]
  SDIOx->ARG = Command->Argument;
 800313a:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800313c:	fba2 2000 	umull	r2, r0, r2, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003140:	68ca      	ldr	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003142:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003144:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003148:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800314c:	f022 020f 	bic.w	r2, r2, #15
 8003150:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8003154:	60ca      	str	r2, [r1, #12]
  
  do
  {
    if (count-- == 0U)
 8003156:	f113 33ff 	adds.w	r3, r3, #4294967295
 800315a:	d313      	bcc.n	8003184 <SDMMC_CmdOperCond+0x5c>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 800315c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800315e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003162:	d0f8      	beq.n	8003156 <SDMMC_CmdOperCond+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003164:	0512      	lsls	r2, r2, #20
 8003166:	d4f6      	bmi.n	8003156 <SDMMC_CmdOperCond+0x2e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003168:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800316a:	075b      	lsls	r3, r3, #29
 800316c:	d412      	bmi.n	8003194 <SDMMC_CmdOperCond+0x6c>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800316e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8003170:	f010 0001 	ands.w	r0, r0, #1
 8003174:	d10a      	bne.n	800318c <SDMMC_CmdOperCond+0x64>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003176:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003178:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800317c:	d00d      	beq.n	800319a <SDMMC_CmdOperCond+0x72>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800317e:	2340      	movs	r3, #64	; 0x40
 8003180:	638b      	str	r3, [r1, #56]	; 0x38
 8003182:	e001      	b.n	8003188 <SDMMC_CmdOperCond+0x60>
      return SDMMC_ERROR_TIMEOUT;
 8003184:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003188:	bc10      	pop	{r4}
 800318a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800318c:	2001      	movs	r0, #1
 800318e:	6388      	str	r0, [r1, #56]	; 0x38
}
 8003190:	bc10      	pop	{r4}
 8003192:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003194:	2004      	movs	r0, #4
 8003196:	6388      	str	r0, [r1, #56]	; 0x38
 8003198:	e7f6      	b.n	8003188 <SDMMC_CmdOperCond+0x60>
  }
  
  return SDMMC_ERROR_NONE;
 800319a:	4618      	mov	r0, r3
  return errorstate;
 800319c:	e7f4      	b.n	8003188 <SDMMC_CmdOperCond+0x60>
 800319e:	bf00      	nop
 80031a0:	20000044 	.word	0x20000044
 80031a4:	10624dd3 	.word	0x10624dd3

080031a8 <SDMMC_CmdAppCommand>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <SDMMC_CmdAppCommand+0x7c>)
{
 80031ae:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	4c1d      	ldr	r4, [pc, #116]	; (8003228 <SDMMC_CmdAppCommand+0x80>)
  SDIOx->ARG = Command->Argument;
 80031b4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031b6:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031ba:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031bc:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031be:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80031c2:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80031c6:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80031ca:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
 80031ce:	f042 0207 	orr.w	r2, r2, #7
 80031d2:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 80031d4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80031d8:	d313      	bcc.n	8003202 <SDMMC_CmdAppCommand+0x5a>
    sta_reg = SDIOx->STA;
 80031da:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80031dc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80031e0:	d0f8      	beq.n	80031d4 <SDMMC_CmdAppCommand+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80031e2:	0511      	lsls	r1, r2, #20
 80031e4:	d4f6      	bmi.n	80031d4 <SDMMC_CmdAppCommand+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80031e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031e8:	075a      	lsls	r2, r3, #29
 80031ea:	d413      	bmi.n	8003214 <SDMMC_CmdAppCommand+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80031ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031ee:	07db      	lsls	r3, r3, #31
 80031f0:	d40b      	bmi.n	800320a <SDMMC_CmdAppCommand+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80031f2:	23c5      	movs	r3, #197	; 0xc5
 80031f4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80031f6:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b37      	cmp	r3, #55	; 0x37
 80031fc:	d00e      	beq.n	800321c <SDMMC_CmdAppCommand+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80031fe:	2001      	movs	r0, #1
  return errorstate;
 8003200:	e001      	b.n	8003206 <SDMMC_CmdAppCommand+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8003202:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003206:	bc10      	pop	{r4}
 8003208:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800320a:	2301      	movs	r3, #1
}
 800320c:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800320e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003210:	4618      	mov	r0, r3
}
 8003212:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003214:	2304      	movs	r3, #4
 8003216:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003218:	4618      	mov	r0, r3
 800321a:	e7f4      	b.n	8003206 <SDMMC_CmdAppCommand+0x5e>
}
 800321c:	bc10      	pop	{r4}
 800321e:	f7ff bce3 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8003222:	bf00      	nop
 8003224:	20000044 	.word	0x20000044
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <SDMMC_CmdAppOperCommand>:
{
 800322c:	b430      	push	{r4, r5}
 800322e:	4604      	mov	r4, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003230:	f241 3388 	movw	r3, #5000	; 0x1388
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <SDMMC_CmdAppOperCommand+0x64>)
 8003236:	4d17      	ldr	r5, [pc, #92]	; (8003294 <SDMMC_CmdAppOperCommand+0x68>)
 8003238:	6812      	ldr	r2, [r2, #0]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800323a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800323e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003242:	fba5 2102 	umull	r2, r1, r5, r2
  SDIOx->ARG = Command->Argument;
 8003246:	60a0      	str	r0, [r4, #8]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003248:	68e2      	ldr	r2, [r4, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800324a:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800324c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003250:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003254:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003258:	f442 628d 	orr.w	r2, r2, #1128	; 0x468
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	60e2      	str	r2, [r4, #12]
    if (count-- == 0U)
 8003262:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003266:	d30f      	bcc.n	8003288 <SDMMC_CmdAppOperCommand+0x5c>
    sta_reg = SDIOx->STA;
 8003268:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800326a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800326e:	d0f8      	beq.n	8003262 <SDMMC_CmdAppOperCommand+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003270:	0512      	lsls	r2, r2, #20
 8003272:	d4f6      	bmi.n	8003262 <SDMMC_CmdAppOperCommand+0x36>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003274:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003276:	f010 0004 	ands.w	r0, r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800327a:	bf15      	itete	ne
 800327c:	2004      	movne	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800327e:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003280:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003282:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 8003284:	bc30      	pop	{r4, r5}
 8003286:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8003288:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800328c:	bc30      	pop	{r4, r5}
 800328e:	4770      	bx	lr
 8003290:	20000044 	.word	0x20000044
 8003294:	10624dd3 	.word	0x10624dd3

08003298 <SDMMC_CmdBusWidth>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003298:	f241 3388 	movw	r3, #5000	; 0x1388
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <SDMMC_CmdBusWidth+0x7c>)
{
 800329e:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4c1d      	ldr	r4, [pc, #116]	; (8003318 <SDMMC_CmdBusWidth+0x80>)
  SDIOx->ARG = Command->Argument;
 80032a4:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80032a6:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80032aa:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80032ac:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80032ae:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80032b2:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80032b6:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80032ba:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
 80032be:	f042 0206 	orr.w	r2, r2, #6
 80032c2:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 80032c4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80032c8:	d313      	bcc.n	80032f2 <SDMMC_CmdBusWidth+0x5a>
    sta_reg = SDIOx->STA;
 80032ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80032cc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80032d0:	d0f8      	beq.n	80032c4 <SDMMC_CmdBusWidth+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80032d2:	0511      	lsls	r1, r2, #20
 80032d4:	d4f6      	bmi.n	80032c4 <SDMMC_CmdBusWidth+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80032d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032d8:	075a      	lsls	r2, r3, #29
 80032da:	d413      	bmi.n	8003304 <SDMMC_CmdBusWidth+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032de:	07db      	lsls	r3, r3, #31
 80032e0:	d40b      	bmi.n	80032fa <SDMMC_CmdBusWidth+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80032e2:	23c5      	movs	r3, #197	; 0xc5
 80032e4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 80032e6:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d00e      	beq.n	800330c <SDMMC_CmdBusWidth+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032ee:	2001      	movs	r0, #1
  return errorstate;
 80032f0:	e001      	b.n	80032f6 <SDMMC_CmdBusWidth+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 80032f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80032f6:	bc10      	pop	{r4}
 80032f8:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032fe:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003300:	4618      	mov	r0, r3
}
 8003302:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003304:	2304      	movs	r3, #4
 8003306:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003308:	4618      	mov	r0, r3
 800330a:	e7f4      	b.n	80032f6 <SDMMC_CmdBusWidth+0x5e>
}
 800330c:	bc10      	pop	{r4}
 800330e:	f7ff bc6b 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8003312:	bf00      	nop
 8003314:	20000044 	.word	0x20000044
 8003318:	10624dd3 	.word	0x10624dd3

0800331c <SDMMC_CmdSendSCR>:
{
 800331c:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 800331e:	2400      	movs	r4, #0
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003320:	f241 3388 	movw	r3, #5000	; 0x1388
 8003324:	491c      	ldr	r1, [pc, #112]	; (8003398 <SDMMC_CmdSendSCR+0x7c>)
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <SDMMC_CmdSendSCR+0x80>)
 8003328:	6809      	ldr	r1, [r1, #0]
  SDIOx->ARG = Command->Argument;
 800332a:	6084      	str	r4, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800332c:	fba2 2101 	umull	r2, r1, r2, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003330:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003332:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003334:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003338:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800333c:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003340:	f442 628e 	orr.w	r2, r2, #1136	; 0x470
 8003344:	f042 0203 	orr.w	r2, r2, #3
 8003348:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 800334a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800334e:	d313      	bcc.n	8003378 <SDMMC_CmdSendSCR+0x5c>
    sta_reg = SDIOx->STA;
 8003350:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003352:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003356:	d0f8      	beq.n	800334a <SDMMC_CmdSendSCR+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003358:	0511      	lsls	r1, r2, #20
 800335a:	d4f6      	bmi.n	800334a <SDMMC_CmdSendSCR+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800335c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800335e:	075a      	lsls	r2, r3, #29
 8003360:	d413      	bmi.n	800338a <SDMMC_CmdSendSCR+0x6e>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003362:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003364:	07db      	lsls	r3, r3, #31
 8003366:	d40b      	bmi.n	8003380 <SDMMC_CmdSendSCR+0x64>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003368:	23c5      	movs	r3, #197	; 0xc5
 800336a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800336c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b33      	cmp	r3, #51	; 0x33
 8003372:	d00e      	beq.n	8003392 <SDMMC_CmdSendSCR+0x76>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003374:	2001      	movs	r0, #1
  return errorstate;
 8003376:	e001      	b.n	800337c <SDMMC_CmdSendSCR+0x60>
      return SDMMC_ERROR_TIMEOUT;
 8003378:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800337c:	bc10      	pop	{r4}
 800337e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003380:	2301      	movs	r3, #1
}
 8003382:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003384:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003386:	4618      	mov	r0, r3
}
 8003388:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800338a:	2304      	movs	r3, #4
 800338c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800338e:	4618      	mov	r0, r3
 8003390:	e7f4      	b.n	800337c <SDMMC_CmdSendSCR+0x60>
}
 8003392:	bc10      	pop	{r4}
 8003394:	f7ff bc28 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 8003398:	20000044 	.word	0x20000044
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <SDMMC_CmdSendCID>:
{
 80033a0:	4601      	mov	r1, r0
 80033a2:	b410      	push	{r4}
  SDIOx->ARG = Command->Argument;
 80033a4:	2400      	movs	r4, #0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80033aa:	4818      	ldr	r0, [pc, #96]	; (800340c <SDMMC_CmdSendCID+0x6c>)
 80033ac:	4a18      	ldr	r2, [pc, #96]	; (8003410 <SDMMC_CmdSendCID+0x70>)
 80033ae:	6800      	ldr	r0, [r0, #0]
  SDIOx->ARG = Command->Argument;
 80033b0:	608c      	str	r4, [r1, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033b2:	fba2 2000 	umull	r2, r0, r2, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033b6:	68ca      	ldr	r2, [r1, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033b8:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033ba:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80033be:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80033c2:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033c6:	f442 6298 	orr.w	r2, r2, #1216	; 0x4c0
 80033ca:	f042 0202 	orr.w	r2, r2, #2
 80033ce:	60ca      	str	r2, [r1, #12]
    if (count-- == 0U)
 80033d0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80033d4:	d312      	bcc.n	80033fc <SDMMC_CmdSendCID+0x5c>
    sta_reg = SDIOx->STA;
 80033d6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80033d8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80033dc:	d0f8      	beq.n	80033d0 <SDMMC_CmdSendCID+0x30>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80033de:	0512      	lsls	r2, r2, #20
 80033e0:	d4f6      	bmi.n	80033d0 <SDMMC_CmdSendCID+0x30>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80033e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80033e4:	075b      	lsls	r3, r3, #29
 80033e6:	d40d      	bmi.n	8003404 <SDMMC_CmdSendCID+0x64>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80033e8:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 80033ea:	bc10      	pop	{r4}
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80033ec:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033f0:	bf15      	itete	ne
 80033f2:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80033f4:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80033f6:	6388      	strne	r0, [r1, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80033f8:	638b      	streq	r3, [r1, #56]	; 0x38
}
 80033fa:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80033fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003400:	bc10      	pop	{r4}
 8003402:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003404:	2004      	movs	r0, #4
 8003406:	6388      	str	r0, [r1, #56]	; 0x38
 8003408:	e7fa      	b.n	8003400 <SDMMC_CmdSendCID+0x60>
 800340a:	bf00      	nop
 800340c:	20000044 	.word	0x20000044
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <SDMMC_CmdSendCSD>:
{
 8003414:	b410      	push	{r4}
 8003416:	4604      	mov	r4, r0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003418:	f241 3388 	movw	r3, #5000	; 0x1388
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <SDMMC_CmdSendCSD+0x68>)
 800341e:	4818      	ldr	r0, [pc, #96]	; (8003480 <SDMMC_CmdSendCSD+0x6c>)
 8003420:	6812      	ldr	r2, [r2, #0]
  SDIOx->ARG = Command->Argument;
 8003422:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003424:	fba0 2102 	umull	r2, r1, r0, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003428:	68e2      	ldr	r2, [r4, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800342a:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800342c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003430:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003434:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003438:	f442 6299 	orr.w	r2, r2, #1224	; 0x4c8
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	60e2      	str	r2, [r4, #12]
    if (count-- == 0U)
 8003442:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003446:	d312      	bcc.n	800346e <SDMMC_CmdSendCSD+0x5a>
    sta_reg = SDIOx->STA;
 8003448:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800344a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800344e:	d0f8      	beq.n	8003442 <SDMMC_CmdSendCSD+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003450:	0512      	lsls	r2, r2, #20
 8003452:	d4f6      	bmi.n	8003442 <SDMMC_CmdSendCSD+0x2e>
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003454:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003456:	075b      	lsls	r3, r3, #29
 8003458:	d40d      	bmi.n	8003476 <SDMMC_CmdSendCSD+0x62>
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800345a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800345c:	f010 0001 	ands.w	r0, r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003460:	bf15      	itete	ne
 8003462:	2001      	movne	r0, #1
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003464:	23c5      	moveq	r3, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003466:	63a0      	strne	r0, [r4, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003468:	63a3      	streq	r3, [r4, #56]	; 0x38
}
 800346a:	bc10      	pop	{r4}
 800346c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800346e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003472:	bc10      	pop	{r4}
 8003474:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003476:	2004      	movs	r0, #4
 8003478:	63a0      	str	r0, [r4, #56]	; 0x38
 800347a:	e7fa      	b.n	8003472 <SDMMC_CmdSendCSD+0x5e>
 800347c:	20000044 	.word	0x20000044
 8003480:	10624dd3 	.word	0x10624dd3

08003484 <SDMMC_CmdSetRelAdd>:
{
 8003484:	b430      	push	{r4, r5}
  SDIOx->ARG = Command->Argument;
 8003486:	2500      	movs	r5, #0
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003488:	f241 3388 	movw	r3, #5000	; 0x1388
 800348c:	4c25      	ldr	r4, [pc, #148]	; (8003524 <SDMMC_CmdSetRelAdd+0xa0>)
 800348e:	4a26      	ldr	r2, [pc, #152]	; (8003528 <SDMMC_CmdSetRelAdd+0xa4>)
 8003490:	6824      	ldr	r4, [r4, #0]
  SDIOx->ARG = Command->Argument;
 8003492:	6085      	str	r5, [r0, #8]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003494:	fba2 2404 	umull	r2, r4, r2, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003498:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800349a:	0a64      	lsrs	r4, r4, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800349c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80034a0:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80034a4:	fb03 f304 	mul.w	r3, r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80034a8:	f442 6288 	orr.w	r2, r2, #1088	; 0x440
 80034ac:	f042 0203 	orr.w	r2, r2, #3
 80034b0:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 80034b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80034b6:	d311      	bcc.n	80034dc <SDMMC_CmdSetRelAdd+0x58>
    sta_reg = SDIOx->STA;
 80034b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80034ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 80034be:	d0f8      	beq.n	80034b2 <SDMMC_CmdSetRelAdd+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80034c0:	0512      	lsls	r2, r2, #20
 80034c2:	d4f6      	bmi.n	80034b2 <SDMMC_CmdSetRelAdd+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80034c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034c6:	075d      	lsls	r5, r3, #29
 80034c8:	d411      	bmi.n	80034ee <SDMMC_CmdSetRelAdd+0x6a>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80034cc:	07dc      	lsls	r4, r3, #31
 80034ce:	d409      	bmi.n	80034e4 <SDMMC_CmdSetRelAdd+0x60>
  return (uint8_t)(SDIOx->RESPCMD);
 80034d0:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d00e      	beq.n	80034f6 <SDMMC_CmdSetRelAdd+0x72>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034d8:	2001      	movs	r0, #1
 80034da:	e001      	b.n	80034e0 <SDMMC_CmdSetRelAdd+0x5c>
      return SDMMC_ERROR_TIMEOUT;
 80034dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80034e0:	bc30      	pop	{r4, r5}
 80034e2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034e4:	2301      	movs	r3, #1
}
 80034e6:	bc30      	pop	{r4, r5}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034e8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034ea:	4618      	mov	r0, r3
}
 80034ec:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80034ee:	2304      	movs	r3, #4
 80034f0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034f2:	4618      	mov	r0, r3
 80034f4:	e7f4      	b.n	80034e0 <SDMMC_CmdSetRelAdd+0x5c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80034f6:	23c5      	movs	r3, #197	; 0xc5
 80034f8:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80034fa:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80034fc:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8003500:	d009      	beq.n	8003516 <SDMMC_CmdSetRelAdd+0x92>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003502:	045a      	lsls	r2, r3, #17
 8003504:	d40a      	bmi.n	800351c <SDMMC_CmdSetRelAdd+0x98>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003506:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800350a:	bf0c      	ite	eq
 800350c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8003510:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003514:	e7e4      	b.n	80034e0 <SDMMC_CmdSetRelAdd+0x5c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	800b      	strh	r3, [r1, #0]
 800351a:	e7e1      	b.n	80034e0 <SDMMC_CmdSetRelAdd+0x5c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800351c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003520:	e7de      	b.n	80034e0 <SDMMC_CmdSetRelAdd+0x5c>
 8003522:	bf00      	nop
 8003524:	20000044 	.word	0x20000044
 8003528:	10624dd3 	.word	0x10624dd3

0800352c <SDMMC_CmdSendStatus>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800352c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <SDMMC_CmdSendStatus+0x7c>)
{
 8003532:	b410      	push	{r4}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	4c1d      	ldr	r4, [pc, #116]	; (80035ac <SDMMC_CmdSendStatus+0x80>)
  SDIOx->ARG = Command->Argument;
 8003538:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800353a:	fba4 2102 	umull	r2, r1, r4, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800353e:	68c2      	ldr	r2, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003540:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003542:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003546:	f022 020f 	bic.w	r2, r2, #15
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800354a:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800354e:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
 8003552:	f042 0205 	orr.w	r2, r2, #5
 8003556:	60c2      	str	r2, [r0, #12]
    if (count-- == 0U)
 8003558:	f113 33ff 	adds.w	r3, r3, #4294967295
 800355c:	d313      	bcc.n	8003586 <SDMMC_CmdSendStatus+0x5a>
    sta_reg = SDIOx->STA;
 800355e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003560:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003564:	d0f8      	beq.n	8003558 <SDMMC_CmdSendStatus+0x2c>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003566:	0511      	lsls	r1, r2, #20
 8003568:	d4f6      	bmi.n	8003558 <SDMMC_CmdSendStatus+0x2c>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800356a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800356c:	075a      	lsls	r2, r3, #29
 800356e:	d413      	bmi.n	8003598 <SDMMC_CmdSendStatus+0x6c>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003570:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003572:	07db      	lsls	r3, r3, #31
 8003574:	d40b      	bmi.n	800358e <SDMMC_CmdSendStatus+0x62>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003576:	23c5      	movs	r3, #197	; 0xc5
 8003578:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800357a:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b0d      	cmp	r3, #13
 8003580:	d00e      	beq.n	80035a0 <SDMMC_CmdSendStatus+0x74>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003582:	2001      	movs	r0, #1
  return errorstate;
 8003584:	e001      	b.n	800358a <SDMMC_CmdSendStatus+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8003586:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800358a:	bc10      	pop	{r4}
 800358c:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800358e:	2301      	movs	r3, #1
}
 8003590:	bc10      	pop	{r4}
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003592:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003594:	4618      	mov	r0, r3
}
 8003596:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003598:	2304      	movs	r3, #4
 800359a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800359c:	4618      	mov	r0, r3
 800359e:	e7f4      	b.n	800358a <SDMMC_CmdSendStatus+0x5e>
}
 80035a0:	bc10      	pop	{r4}
 80035a2:	f7ff bb21 	b.w	8002be8 <SDMMC_GetCmdResp1.part.2>
 80035a6:	bf00      	nop
 80035a8:	20000044 	.word	0x20000044
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035b0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80035b2:	4903      	ldr	r1, [pc, #12]	; (80035c0 <MX_FATFS_Init+0x10>)
 80035b4:	4803      	ldr	r0, [pc, #12]	; (80035c4 <MX_FATFS_Init+0x14>)
 80035b6:	f003 fe4f 	bl	8007258 <FATFS_LinkDriver>
 80035ba:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <MX_FATFS_Init+0x18>)
 80035bc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035be:	bd08      	pop	{r3, pc}
 80035c0:	2000416c 	.word	0x2000416c
 80035c4:	08009720 	.word	0x08009720
 80035c8:	20004708 	.word	0x20004708

080035cc <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80035cc:	2000      	movs	r0, #0
 80035ce:	4770      	bx	lr

080035d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80035d0:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80035d2:	4613      	mov	r3, r2
 80035d4:	460a      	mov	r2, r1
 80035d6:	4601      	mov	r1, r0
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <BSP_SD_ReadBlocks_DMA+0x18>)
 80035da:	f7fe fb1f 	bl	8001c1c <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80035de:	3000      	adds	r0, #0
 80035e0:	bf18      	it	ne
 80035e2:	2001      	movne	r0, #1
 80035e4:	bd08      	pop	{r3, pc}
 80035e6:	bf00      	nop
 80035e8:	20004404 	.word	0x20004404

080035ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80035ec:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80035ee:	4613      	mov	r3, r2
 80035f0:	460a      	mov	r2, r1
 80035f2:	4601      	mov	r1, r0
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <BSP_SD_WriteBlocks_DMA+0x18>)
 80035f6:	f7fe fbb7 	bl	8001d68 <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 80035fa:	3000      	adds	r0, #0
 80035fc:	bf18      	it	ne
 80035fe:	2001      	movne	r0, #1
 8003600:	bd08      	pop	{r3, pc}
 8003602:	bf00      	nop
 8003604:	20004404 	.word	0x20004404

08003608 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003608:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800360a:	4803      	ldr	r0, [pc, #12]	; (8003618 <BSP_SD_GetCardState+0x10>)
 800360c:	f7ff f8c2 	bl	8002794 <HAL_SD_GetCardState>
}
 8003610:	3804      	subs	r0, #4
 8003612:	bf18      	it	ne
 8003614:	2001      	movne	r0, #1
 8003616:	bd08      	pop	{r3, pc}
 8003618:	20004404 	.word	0x20004404

0800361c <BSP_SD_GetCardInfo>:
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800361c:	4601      	mov	r1, r0
 800361e:	4801      	ldr	r0, [pc, #4]	; (8003624 <BSP_SD_GetCardInfo+0x8>)
 8003620:	f7ff b81a 	b.w	8002658 <HAL_SD_GetCardInfo>
 8003624:	20004404 	.word	0x20004404

08003628 <BSP_SD_AbortCallback>:
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800362c:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800362e:	f7ff fffb 	bl	8003628 <BSP_SD_AbortCallback>
}
 8003632:	bd08      	pop	{r3, pc}

08003634 <BSP_SD_WriteCpltCallback>:
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop

08003638 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003638:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800363a:	f7ff fffb 	bl	8003634 <BSP_SD_WriteCpltCallback>
}
 800363e:	bd08      	pop	{r3, pc}

08003640 <BSP_SD_ReadCpltCallback>:
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop

08003644 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003644:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8003646:	f7ff fffb 	bl	8003640 <BSP_SD_ReadCpltCallback>
}
 800364a:	bd08      	pop	{r3, pc}

0800364c <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 800364c:	2301      	movs	r3, #1
{
 800364e:	b500      	push	{lr}
 8003650:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8003652:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8003656:	f000 f821 	bl	800369c <BSP_PlatformIsDetected>
 800365a:	b908      	cbnz	r0, 8003660 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800365c:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8003660:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003664:	b003      	add	sp, #12
 8003666:	f85d fb04 	ldr.w	pc, [sp], #4
 800366a:	bf00      	nop

0800366c <BSP_SD_Init>:
{
 800366c:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800366e:	f7ff ffed 	bl	800364c <BSP_SD_IsDetected>
 8003672:	2801      	cmp	r0, #1
 8003674:	d001      	beq.n	800367a <BSP_SD_Init+0xe>
    return MSD_ERROR;
 8003676:	2001      	movs	r0, #1
}
 8003678:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd);
 800367a:	4807      	ldr	r0, [pc, #28]	; (8003698 <BSP_SD_Init+0x2c>)
 800367c:	f7fe fed2 	bl	8002424 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8003680:	2800      	cmp	r0, #0
 8003682:	d1f9      	bne.n	8003678 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003688:	4803      	ldr	r0, [pc, #12]	; (8003698 <BSP_SD_Init+0x2c>)
 800368a:	f7fe fff9 	bl	8002680 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 800368e:	3000      	adds	r0, #0
 8003690:	bf18      	it	ne
 8003692:	2001      	movne	r0, #1
}
 8003694:	bd08      	pop	{r3, pc}
 8003696:	bf00      	nop
 8003698:	20004404 	.word	0x20004404

0800369c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800369c:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800369e:	2104      	movs	r1, #4
 80036a0:	4803      	ldr	r0, [pc, #12]	; (80036b0 <BSP_PlatformIsDetected+0x14>)
 80036a2:	f7fd ff41 	bl	8001528 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80036a6:	fab0 f080 	clz	r0, r0
 80036aa:	0940      	lsrs	r0, r0, #5
 80036ac:	bd08      	pop	{r3, pc}
 80036ae:	bf00      	nop
 80036b0:	40021800 	.word	0x40021800

080036b4 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <disk_status+0x10>)
 80036b6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80036ba:	6852      	ldr	r2, [r2, #4]
 80036bc:	4403      	add	r3, r0
 80036be:	6852      	ldr	r2, [r2, #4]
 80036c0:	7a18      	ldrb	r0, [r3, #8]
 80036c2:	4710      	bx	r2
 80036c4:	20000358 	.word	0x20000358

080036c8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <disk_initialize+0x1c>)
 80036ca:	5c1a      	ldrb	r2, [r3, r0]
 80036cc:	b942      	cbnz	r2, 80036e0 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80036ce:	2101      	movs	r1, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80036d0:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80036d4:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80036d6:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80036d8:	4403      	add	r3, r0
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	7a18      	ldrb	r0, [r3, #8]
 80036de:	4710      	bx	r2
  }
  return stat;
}
 80036e0:	2000      	movs	r0, #0
 80036e2:	4770      	bx	lr
 80036e4:	20000358 	.word	0x20000358

080036e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036e8:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80036ea:	4c05      	ldr	r4, [pc, #20]	; (8003700 <disk_read+0x18>)
 80036ec:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80036f0:	686d      	ldr	r5, [r5, #4]
 80036f2:	4404      	add	r4, r0
 80036f4:	68ad      	ldr	r5, [r5, #8]
 80036f6:	7a20      	ldrb	r0, [r4, #8]
 80036f8:	46ac      	mov	ip, r5
  return res;
}
 80036fa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80036fc:	4760      	bx	ip
 80036fe:	bf00      	nop
 8003700:	20000358 	.word	0x20000358

08003704 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003704:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003706:	4c05      	ldr	r4, [pc, #20]	; (800371c <disk_write+0x18>)
 8003708:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800370c:	686d      	ldr	r5, [r5, #4]
 800370e:	4404      	add	r4, r0
 8003710:	68ed      	ldr	r5, [r5, #12]
 8003712:	7a20      	ldrb	r0, [r4, #8]
 8003714:	46ac      	mov	ip, r5
  return res;
}
 8003716:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003718:	4760      	bx	ip
 800371a:	bf00      	nop
 800371c:	20000358 	.word	0x20000358

08003720 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <disk_ioctl+0x18>)
{
 8003722:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003724:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8003728:	6864      	ldr	r4, [r4, #4]
 800372a:	4403      	add	r3, r0
 800372c:	6924      	ldr	r4, [r4, #16]
 800372e:	7a18      	ldrb	r0, [r3, #8]
 8003730:	4623      	mov	r3, r4
  return res;
}
 8003732:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003734:	4718      	bx	r3
 8003736:	bf00      	nop
 8003738:	20000358 	.word	0x20000358

0800373c <move_window.part.3>:
}
#endif


static
FRESULT move_window (
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800373e:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
FRESULT move_window (
 8003742:	4604      	mov	r4, r0
 8003744:	460e      	mov	r6, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003746:	b97b      	cbnz	r3, 8003768 <move_window.part.3+0x2c>
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003748:	4632      	mov	r2, r6
 800374a:	2301      	movs	r3, #1
 800374c:	4621      	mov	r1, r4
 800374e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003752:	f7ff ffc9 	bl	80036e8 <disk_read>
 8003756:	2800      	cmp	r0, #0
 8003758:	bf1a      	itte	ne
 800375a:	f04f 36ff 	movne.w	r6, #4294967295
 800375e:	2001      	movne	r0, #1
 8003760:	2000      	moveq	r0, #0
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
 8003762:	f8c4 6230 	str.w	r6, [r4, #560]	; 0x230
 8003766:	e023      	b.n	80037b0 <move_window.part.3+0x74>
		wsect = fs->winsect;	/* Current sector number */
 8003768:	f8d0 5230 	ldr.w	r5, [r0, #560]	; 0x230
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800376c:	4601      	mov	r1, r0
 800376e:	2301      	movs	r3, #1
 8003770:	462a      	mov	r2, r5
 8003772:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003776:	f7ff ffc5 	bl	8003704 <disk_write>
 800377a:	b9c0      	cbnz	r0, 80037ae <move_window.part.3+0x72>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800377c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8003780:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8003784:	1aeb      	subs	r3, r5, r3
 8003786:	4293      	cmp	r3, r2
			fs->wflag = 0;
 8003788:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800378c:	d2dc      	bcs.n	8003748 <move_window.part.3+0xc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800378e:	f894 7203 	ldrb.w	r7, [r4, #515]	; 0x203
 8003792:	2f01      	cmp	r7, #1
 8003794:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003798:	d9d6      	bls.n	8003748 <move_window.part.3+0xc>
					wsect += fs->fsize;
 800379a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800379e:	4621      	mov	r1, r4
					wsect += fs->fsize;
 80037a0:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80037a2:	462a      	mov	r2, r5
 80037a4:	2301      	movs	r3, #1
 80037a6:	f7ff ffad 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80037aa:	3f01      	subs	r7, #1
 80037ac:	e7f1      	b.n	8003792 <move_window.part.3+0x56>
			res = FR_DISK_ERR;
 80037ae:	2001      	movs	r0, #1
		}
	}
	return res;
}
 80037b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037b4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80037b4:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80037b6:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
{
 80037ba:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80037bc:	b96b      	cbnz	r3, 80037da <sync_fs+0x26>


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80037be:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d030      	beq.n	8003828 <sync_fs+0x74>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80037c6:	2200      	movs	r2, #0
 80037c8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80037cc:	4611      	mov	r1, r2
 80037ce:	f7ff ffa7 	bl	8003720 <disk_ioctl>
			res = FR_DISK_ERR;
 80037d2:	3000      	adds	r0, #0
 80037d4:	bf18      	it	ne
 80037d6:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
		wsect = fs->winsect;	/* Current sector number */
 80037da:	f8d0 5230 	ldr.w	r5, [r0, #560]	; 0x230
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80037de:	4601      	mov	r1, r0
 80037e0:	2301      	movs	r3, #1
 80037e2:	462a      	mov	r2, r5
 80037e4:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80037e8:	f7ff ff8c 	bl	8003704 <disk_write>
 80037ec:	2800      	cmp	r0, #0
 80037ee:	d145      	bne.n	800387c <sync_fs+0xc8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80037f0:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80037f4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80037f8:	1aaa      	subs	r2, r5, r2
 80037fa:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80037fc:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003800:	d2dd      	bcs.n	80037be <sync_fs+0xa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003802:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8003806:	2e01      	cmp	r6, #1
 8003808:	d802      	bhi.n	8003810 <sync_fs+0x5c>
 800380a:	e7d8      	b.n	80037be <sync_fs+0xa>
 800380c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003810:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003812:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003814:	462a      	mov	r2, r5
 8003816:	2301      	movs	r3, #1
 8003818:	4621      	mov	r1, r4
 800381a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800381e:	f7ff ff71 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003822:	2e01      	cmp	r6, #1
 8003824:	d1f2      	bne.n	800380c <sync_fs+0x58>
 8003826:	e7ca      	b.n	80037be <sync_fs+0xa>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003828:	f894 5205 	ldrb.w	r5, [r4, #517]	; 0x205
 800382c:	2d01      	cmp	r5, #1
 800382e:	d1ca      	bne.n	80037c6 <sync_fs+0x12>
 8003830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003834:	2100      	movs	r1, #0
 8003836:	4620      	mov	r0, r4
 8003838:	f005 fe63 	bl	8009502 <memset>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800383c:	f64a 2055 	movw	r0, #43605	; 0xaa55
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003840:	490f      	ldr	r1, [pc, #60]	; (8003880 <sync_fs+0xcc>)
			fs->winsect = fs->volbase + 1;
 8003842:	f8d4 2220 	ldr.w	r2, [r4, #544]	; 0x220
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003846:	f8a4 01fe 	strh.w	r0, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800384a:	6021      	str	r1, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800384c:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003850:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003854:	4e0b      	ldr	r6, [pc, #44]	; (8003884 <sync_fs+0xd0>)
			fs->winsect = fs->volbase + 1;
 8003856:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003858:	462b      	mov	r3, r5
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800385a:	f8c4 01e8 	str.w	r0, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800385e:	f8c4 11ec 	str.w	r1, [r4, #492]	; 0x1ec
			fs->winsect = fs->volbase + 1;
 8003862:	f8c4 2230 	str.w	r2, [r4, #560]	; 0x230
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003866:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800386a:	4621      	mov	r1, r4
 800386c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003870:	f7ff ff48 	bl	8003704 <disk_write>
			fs->fsi_flag = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
 800387a:	e7a4      	b.n	80037c6 <sync_fs+0x12>
			res = FR_DISK_ERR;
 800387c:	2001      	movs	r0, #1
}
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	41615252 	.word	0x41615252
 8003884:	61417272 	.word	0x61417272

08003888 <remove_chain.part.12>:
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
 8003888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	460d      	mov	r5, r1
 800388e:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
 8003892:	4604      	mov	r4, r0
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003894:	428d      	cmp	r5, r1
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003896:	f04f 0901 	mov.w	r9, #1
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800389a:	f080 81ab 	bcs.w	8003bf4 <remove_chain.part.12+0x36c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800389e:	2d01      	cmp	r5, #1
 80038a0:	d908      	bls.n	80038b4 <remove_chain.part.12+0x2c>
		switch (fs->fs_type) {
 80038a2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	f000 813b 	beq.w	8003b22 <remove_chain.part.12+0x29a>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d04a      	beq.n	8003946 <remove_chain.part.12+0xbe>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d002      	beq.n	80038ba <remove_chain.part.12+0x32>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80038b4:	2002      	movs	r0, #2
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 80038b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038ba:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
			bc = (UINT)clst; bc += bc / 2;
 80038be:	eb05 0655 	add.w	r6, r5, r5, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80038c2:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038c6:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80038ca:	45b8      	cmp	r8, r7
 80038cc:	f000 81e2 	beq.w	8003c94 <remove_chain.part.12+0x40c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80038d0:	f894 2204 	ldrb.w	r2, [r4, #516]	; 0x204
 80038d4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80038d8:	b332      	cbz	r2, 8003928 <remove_chain.part.12+0xa0>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80038da:	463a      	mov	r2, r7
 80038dc:	4621      	mov	r1, r4
 80038de:	f7ff ff11 	bl	8003704 <disk_write>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	f040 8200 	bne.w	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038e8:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80038ec:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80038f0:	1aba      	subs	r2, r7, r2
 80038f2:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80038f4:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80038f8:	d214      	bcs.n	8003924 <remove_chain.part.12+0x9c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80038fa:	f894 a203 	ldrb.w	sl, [r4, #515]	; 0x203
 80038fe:	f1ba 0f01 	cmp.w	sl, #1
 8003902:	d802      	bhi.n	800390a <remove_chain.part.12+0x82>
 8003904:	e00e      	b.n	8003924 <remove_chain.part.12+0x9c>
 8003906:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 800390a:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800390c:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003910:	463a      	mov	r2, r7
 8003912:	2301      	movs	r3, #1
 8003914:	4621      	mov	r1, r4
 8003916:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800391a:	f7ff fef3 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800391e:	f1ba 0f01 	cmp.w	sl, #1
 8003922:	d1f0      	bne.n	8003906 <remove_chain.part.12+0x7e>
 8003924:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003928:	2301      	movs	r3, #1
 800392a:	4642      	mov	r2, r8
 800392c:	4621      	mov	r1, r4
 800392e:	f7ff fedb 	bl	80036e8 <disk_read>
 8003932:	2800      	cmp	r0, #0
 8003934:	f000 81a9 	beq.w	8003c8a <remove_chain.part.12+0x402>
			fs->winsect = sector;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800393c:	2001      	movs	r0, #1
			fs->winsect = sector;
 800393e:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
}
 8003942:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003946:	f8d4 6224 	ldr.w	r6, [r4, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 800394a:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800394e:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003952:	42be      	cmp	r6, r7
 8003954:	d037      	beq.n	80039c6 <remove_chain.part.12+0x13e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003956:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 800395a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800395e:	b34b      	cbz	r3, 80039b4 <remove_chain.part.12+0x12c>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003960:	2301      	movs	r3, #1
 8003962:	463a      	mov	r2, r7
 8003964:	4621      	mov	r1, r4
 8003966:	f7ff fecd 	bl	8003704 <disk_write>
 800396a:	2800      	cmp	r0, #0
 800396c:	f040 81bc 	bne.w	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003970:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003974:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003978:	1aba      	subs	r2, r7, r2
 800397a:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800397c:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8003980:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003984:	d216      	bcs.n	80039b4 <remove_chain.part.12+0x12c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003986:	f894 8203 	ldrb.w	r8, [r4, #515]	; 0x203
 800398a:	f1b8 0f01 	cmp.w	r8, #1
 800398e:	d804      	bhi.n	800399a <remove_chain.part.12+0x112>
 8003990:	e010      	b.n	80039b4 <remove_chain.part.12+0x12c>
 8003992:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003996:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800399a:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800399c:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80039a0:	463a      	mov	r2, r7
 80039a2:	2301      	movs	r3, #1
 80039a4:	4621      	mov	r1, r4
 80039a6:	f7ff fead 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039aa:	f1b8 0f01 	cmp.w	r8, #1
 80039ae:	d1f0      	bne.n	8003992 <remove_chain.part.12+0x10a>
 80039b0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80039b4:	2301      	movs	r3, #1
 80039b6:	4632      	mov	r2, r6
 80039b8:	4621      	mov	r1, r4
 80039ba:	f7ff fe95 	bl	80036e8 <disk_read>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d1ba      	bne.n	8003938 <remove_chain.part.12+0xb0>
			fs->winsect = sector;
 80039c2:	f8c4 6230 	str.w	r6, [r4, #560]	; 0x230
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80039c6:	00ab      	lsls	r3, r5, #2
 80039c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80039cc:	58e6      	ldr	r6, [r4, r3]
 80039ce:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
			if (nxt == 0) break;				/* Empty cluster? */
 80039d2:	2e00      	cmp	r6, #0
 80039d4:	f000 810e 	beq.w	8003bf4 <remove_chain.part.12+0x36c>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80039d8:	2e01      	cmp	r6, #1
 80039da:	f43f af6b 	beq.w	80038b4 <remove_chain.part.12+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80039de:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 80039e2:	428d      	cmp	r5, r1
 80039e4:	f4bf af66 	bcs.w	80038b4 <remove_chain.part.12+0x2c>
		switch (fs->fs_type) {
 80039e8:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f000 8103 	beq.w	8003bf8 <remove_chain.part.12+0x370>
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	f000 80d9 	beq.w	8003baa <remove_chain.part.12+0x322>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	f47f af5b 	bne.w	80038b4 <remove_chain.part.12+0x2c>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80039fe:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
			bc = (UINT)clst; bc += bc / 2;
 8003a02:	eb05 0855 	add.w	r8, r5, r5, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a06:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003a0a:	eb02 2b58 	add.w	fp, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a0e:	45bb      	cmp	fp, r7
 8003a10:	d038      	beq.n	8003a84 <remove_chain.part.12+0x1fc>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003a12:	f894 2204 	ldrb.w	r2, [r4, #516]	; 0x204
 8003a16:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003a1a:	b332      	cbz	r2, 8003a6a <remove_chain.part.12+0x1e2>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003a1c:	463a      	mov	r2, r7
 8003a1e:	4621      	mov	r1, r4
 8003a20:	f7ff fe70 	bl	8003704 <disk_write>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	f040 815f 	bne.w	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003a2a:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003a2e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003a32:	1aba      	subs	r2, r7, r2
 8003a34:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003a36:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003a3a:	d214      	bcs.n	8003a66 <remove_chain.part.12+0x1de>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a3c:	f894 a203 	ldrb.w	sl, [r4, #515]	; 0x203
 8003a40:	f1ba 0f01 	cmp.w	sl, #1
 8003a44:	d802      	bhi.n	8003a4c <remove_chain.part.12+0x1c4>
 8003a46:	e00e      	b.n	8003a66 <remove_chain.part.12+0x1de>
 8003a48:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003a4c:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a4e:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003a52:	463a      	mov	r2, r7
 8003a54:	2301      	movs	r3, #1
 8003a56:	4621      	mov	r1, r4
 8003a58:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003a5c:	f7ff fe52 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a60:	f1ba 0f01 	cmp.w	sl, #1
 8003a64:	d1f0      	bne.n	8003a48 <remove_chain.part.12+0x1c0>
 8003a66:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	465a      	mov	r2, fp
 8003a6e:	4621      	mov	r1, r4
 8003a70:	f7ff fe3a 	bl	80036e8 <disk_read>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	f47f af5f 	bne.w	8003938 <remove_chain.part.12+0xb0>
			fs->winsect = sector;
 8003a7a:	465f      	mov	r7, fp
 8003a7c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003a80:	f8c4 b230 	str.w	fp, [r4, #560]	; 0x230
			p = &fs->win.d8[bc++ % SS(fs)];
 8003a84:	f108 0b01 	add.w	fp, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003a88:	f015 0501 	ands.w	r5, r5, #1
 8003a8c:	eb02 2a5b 	add.w	sl, r2, fp, lsr #9
			p = &fs->win.d8[bc++ % SS(fs)];
 8003a90:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003a94:	f000 8170 	beq.w	8003d78 <remove_chain.part.12+0x4f0>
 8003a98:	f814 3008 	ldrb.w	r3, [r4, r8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a9c:	45ba      	cmp	sl, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	f804 3008 	strb.w	r3, [r4, r8]
			fs->wflag = 1;
 8003aa6:	f884 9204 	strb.w	r9, [r4, #516]	; 0x204
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003aaa:	f000 819d 	beq.w	8003de8 <remove_chain.part.12+0x560>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003aae:	2301      	movs	r3, #1
 8003ab0:	463a      	mov	r2, r7
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003ab8:	f7ff fe24 	bl	8003704 <disk_write>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	f040 8113 	bne.w	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003ac2:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003ac6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003aca:	1aba      	subs	r2, r7, r2
 8003acc:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003ace:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003ad2:	d214      	bcs.n	8003afe <remove_chain.part.12+0x276>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ad4:	f894 8203 	ldrb.w	r8, [r4, #515]	; 0x203
 8003ad8:	f1b8 0f01 	cmp.w	r8, #1
 8003adc:	d802      	bhi.n	8003ae4 <remove_chain.part.12+0x25c>
 8003ade:	e00e      	b.n	8003afe <remove_chain.part.12+0x276>
 8003ae0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003ae4:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ae6:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003aea:	463a      	mov	r2, r7
 8003aec:	2301      	movs	r3, #1
 8003aee:	4621      	mov	r1, r4
 8003af0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003af4:	f7ff fe06 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003af8:	f1b8 0f01 	cmp.w	r8, #1
 8003afc:	d1f0      	bne.n	8003ae0 <remove_chain.part.12+0x258>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003afe:	2301      	movs	r3, #1
 8003b00:	4652      	mov	r2, sl
 8003b02:	4621      	mov	r1, r4
 8003b04:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003b08:	f7ff fdee 	bl	80036e8 <disk_read>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	f47f af13 	bne.w	8003938 <remove_chain.part.12+0xb0>
			fs->winsect = sector;
 8003b12:	f8c4 a230 	str.w	sl, [r4, #560]	; 0x230
			p = &fs->win.d8[bc % SS(fs)];
 8003b16:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	f040 8139 	bne.w	8003d92 <remove_chain.part.12+0x50a>
 8003b20:	e133      	b.n	8003d8a <remove_chain.part.12+0x502>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b22:	f8d4 6224 	ldr.w	r6, [r4, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b26:	f8d4 7230 	ldr.w	r7, [r4, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003b2a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b2e:	42be      	cmp	r6, r7
 8003b30:	d036      	beq.n	8003ba0 <remove_chain.part.12+0x318>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003b32:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8003b36:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003b3a:	b33b      	cbz	r3, 8003b8c <remove_chain.part.12+0x304>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	463a      	mov	r2, r7
 8003b40:	4621      	mov	r1, r4
 8003b42:	f7ff fddf 	bl	8003704 <disk_write>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f040 80ce 	bne.w	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b4c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003b50:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003b54:	1aba      	subs	r2, r7, r2
 8003b56:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003b58:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003b5c:	d214      	bcs.n	8003b88 <remove_chain.part.12+0x300>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b5e:	f894 8203 	ldrb.w	r8, [r4, #515]	; 0x203
 8003b62:	f1b8 0f01 	cmp.w	r8, #1
 8003b66:	d802      	bhi.n	8003b6e <remove_chain.part.12+0x2e6>
 8003b68:	e00e      	b.n	8003b88 <remove_chain.part.12+0x300>
 8003b6a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003b6e:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b70:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003b74:	463a      	mov	r2, r7
 8003b76:	2301      	movs	r3, #1
 8003b78:	4621      	mov	r1, r4
 8003b7a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003b7e:	f7ff fdc1 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003b82:	f1b8 0f01 	cmp.w	r8, #1
 8003b86:	d1f0      	bne.n	8003b6a <remove_chain.part.12+0x2e2>
 8003b88:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4632      	mov	r2, r6
 8003b90:	4621      	mov	r1, r4
 8003b92:	f7ff fda9 	bl	80036e8 <disk_read>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f47f aece 	bne.w	8003938 <remove_chain.part.12+0xb0>
			fs->winsect = sector;
 8003b9c:	f8c4 6230 	str.w	r6, [r4, #560]	; 0x230
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003ba0:	006b      	lsls	r3, r5, #1
 8003ba2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			val = LD_WORD(p);
 8003ba6:	5ae6      	ldrh	r6, [r4, r3]
 8003ba8:	e713      	b.n	80039d2 <remove_chain.part.12+0x14a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003baa:	f8d4 7224 	ldr.w	r7, [r4, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003bae:	f8d4 8230 	ldr.w	r8, [r4, #560]	; 0x230
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bb2:	eb07 17d5 	add.w	r7, r7, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003bb6:	4547      	cmp	r7, r8
 8003bb8:	f040 8098 	bne.w	8003cec <remove_chain.part.12+0x464>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003bbc:	00ad      	lsls	r5, r5, #2
 8003bbe:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			val |= LD_DWORD(p) & 0xF0000000;
 8003bc2:	5963      	ldr	r3, [r4, r5]
 8003bc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
			ST_DWORD(p, val);
 8003bc8:	5163      	str	r3, [r4, r5]
 8003bca:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
			fs->wflag = 1;
 8003bce:	f884 9204 	strb.w	r9, [r4, #516]	; 0x204
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003bd2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	d008      	beq.n	8003bec <remove_chain.part.12+0x364>
				fs->fsi_flag |= 1;
 8003bda:	f894 2205 	ldrb.w	r2, [r4, #517]	; 0x205
				fs->free_clust++;
 8003bde:	3301      	adds	r3, #1
				fs->fsi_flag |= 1;
 8003be0:	f042 0201 	orr.w	r2, r2, #1
				fs->free_clust++;
 8003be4:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
				fs->fsi_flag |= 1;
 8003be8:	f884 2205 	strb.w	r2, [r4, #517]	; 0x205
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003bec:	4635      	mov	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003bee:	428d      	cmp	r5, r1
 8003bf0:	f4ff ae55 	bcc.w	800389e <remove_chain.part.12+0x16>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	e65e      	b.n	80038b6 <remove_chain.part.12+0x2e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003bf8:	f8d4 7224 	ldr.w	r7, [r4, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003bfc:	f8d4 8230 	ldr.w	r8, [r4, #560]	; 0x230
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003c00:	eb07 2715 	add.w	r7, r7, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003c04:	4547      	cmp	r7, r8
 8003c06:	f000 80ae 	beq.w	8003d66 <remove_chain.part.12+0x4de>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c0a:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8003c0e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003c12:	b33b      	cbz	r3, 8003c64 <remove_chain.part.12+0x3dc>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003c14:	2301      	movs	r3, #1
 8003c16:	4642      	mov	r2, r8
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f7ff fd73 	bl	8003704 <disk_write>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d162      	bne.n	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c22:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003c26:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003c2a:	eba8 0202 	sub.w	r2, r8, r2
 8003c2e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003c30:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003c34:	d214      	bcs.n	8003c60 <remove_chain.part.12+0x3d8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c36:	f894 a203 	ldrb.w	sl, [r4, #515]	; 0x203
 8003c3a:	f1ba 0f01 	cmp.w	sl, #1
 8003c3e:	d802      	bhi.n	8003c46 <remove_chain.part.12+0x3be>
 8003c40:	e00e      	b.n	8003c60 <remove_chain.part.12+0x3d8>
 8003c42:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003c46:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c48:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4621      	mov	r1, r4
 8003c52:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003c56:	f7ff fd55 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003c5a:	f1ba 0f01 	cmp.w	sl, #1
 8003c5e:	d1f0      	bne.n	8003c42 <remove_chain.part.12+0x3ba>
 8003c60:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003c64:	2301      	movs	r3, #1
 8003c66:	463a      	mov	r2, r7
 8003c68:	4621      	mov	r1, r4
 8003c6a:	f7ff fd3d 	bl	80036e8 <disk_read>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	f47f ae62 	bne.w	8003938 <remove_chain.part.12+0xb0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003c74:	006d      	lsls	r5, r5, #1
 8003c76:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			fs->winsect = sector;
 8003c7a:	f8c4 7230 	str.w	r7, [r4, #560]	; 0x230
 8003c7e:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
			ST_WORD(p, (WORD)val);
 8003c82:	5360      	strh	r0, [r4, r5]
			fs->wflag = 1;
 8003c84:	f884 9204 	strb.w	r9, [r4, #516]	; 0x204
 8003c88:	e7a3      	b.n	8003bd2 <remove_chain.part.12+0x34a>
			fs->winsect = sector;
 8003c8a:	4647      	mov	r7, r8
 8003c8c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003c90:	f8c4 8230 	str.w	r8, [r4, #560]	; 0x230
			wc = fs->win.d8[bc++ % SS(fs)];
 8003c94:	f106 0801 	add.w	r8, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c98:	eb02 2a58 	add.w	sl, r2, r8, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8003c9c:	f3c6 0608 	ubfx	r6, r6, #0, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ca0:	45ba      	cmp	sl, r7
			wc = fs->win.d8[bc++ % SS(fs)];
 8003ca2:	5da6      	ldrb	r6, [r4, r6]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ca4:	d00e      	beq.n	8003cc4 <remove_chain.part.12+0x43c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003ca6:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8003caa:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003cae:	b9a3      	cbnz	r3, 8003cda <remove_chain.part.12+0x452>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	4652      	mov	r2, sl
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f7ff fd17 	bl	80036e8 <disk_read>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	f47f ae3c 	bne.w	8003938 <remove_chain.part.12+0xb0>
			fs->winsect = sector;
 8003cc0:	f8c4 a230 	str.w	sl, [r4, #560]	; 0x230
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003cc4:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8003cc8:	5ce3      	ldrb	r3, [r4, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003cca:	07e9      	lsls	r1, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003ccc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003cd0:	bf4c      	ite	mi
 8003cd2:	0936      	lsrmi	r6, r6, #4
 8003cd4:	f3c6 060b 	ubfxpl	r6, r6, #0, #12
 8003cd8:	e67b      	b.n	80039d2 <remove_chain.part.12+0x14a>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003cda:	2301      	movs	r3, #1
 8003cdc:	463a      	mov	r2, r7
 8003cde:	4621      	mov	r1, r4
 8003ce0:	f7ff fd10 	bl	8003704 <disk_write>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d05b      	beq.n	8003da0 <remove_chain.part.12+0x518>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003ce8:	2001      	movs	r0, #1
 8003cea:	e5e4      	b.n	80038b6 <remove_chain.part.12+0x2e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003cec:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8003cf0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003cf4:	b34b      	cbz	r3, 8003d4a <remove_chain.part.12+0x4c2>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	f7ff fd02 	bl	8003704 <disk_write>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1f1      	bne.n	8003ce8 <remove_chain.part.12+0x460>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d04:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003d08:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003d0c:	eba8 0202 	sub.w	r2, r8, r2
 8003d10:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003d12:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8003d16:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d1a:	d216      	bcs.n	8003d4a <remove_chain.part.12+0x4c2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d1c:	f894 a203 	ldrb.w	sl, [r4, #515]	; 0x203
 8003d20:	f1ba 0f01 	cmp.w	sl, #1
 8003d24:	d804      	bhi.n	8003d30 <remove_chain.part.12+0x4a8>
 8003d26:	e010      	b.n	8003d4a <remove_chain.part.12+0x4c2>
 8003d28:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003d2c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8003d30:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d32:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003d36:	4642      	mov	r2, r8
 8003d38:	2301      	movs	r3, #1
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	f7ff fce2 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d40:	f1ba 0f01 	cmp.w	sl, #1
 8003d44:	d1f0      	bne.n	8003d28 <remove_chain.part.12+0x4a0>
 8003d46:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	463a      	mov	r2, r7
 8003d4e:	4621      	mov	r1, r4
 8003d50:	f7ff fcca 	bl	80036e8 <disk_read>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	f47f adef 	bne.w	8003938 <remove_chain.part.12+0xb0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003d5a:	00ad      	lsls	r5, r5, #2
 8003d5c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			fs->winsect = sector;
 8003d60:	f8c4 7230 	str.w	r7, [r4, #560]	; 0x230
 8003d64:	e72d      	b.n	8003bc2 <remove_chain.part.12+0x33a>
			ST_WORD(p, (WORD)val);
 8003d66:	f04f 0300 	mov.w	r3, #0
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003d6a:	006d      	lsls	r5, r5, #1
 8003d6c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8003d70:	5363      	strh	r3, [r4, r5]
			fs->wflag = 1;
 8003d72:	f884 9204 	strb.w	r9, [r4, #516]	; 0x204
 8003d76:	e72c      	b.n	8003bd2 <remove_chain.part.12+0x34a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d78:	45ba      	cmp	sl, r7
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d7a:	f804 5008 	strb.w	r5, [r4, r8]
			fs->wflag = 1;
 8003d7e:	f884 9204 	strb.w	r9, [r4, #516]	; 0x204
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d82:	f47f ae94 	bne.w	8003aae <remove_chain.part.12+0x226>
			p = &fs->win.d8[bc % SS(fs)];
 8003d86:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003d8a:	f814 000b 	ldrb.w	r0, [r4, fp]
 8003d8e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8003d92:	f804 000b 	strb.w	r0, [r4, fp]
 8003d96:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
			fs->wflag = 1;
 8003d9a:	f884 9204 	strb.w	r9, [r4, #516]	; 0x204
 8003d9e:	e718      	b.n	8003bd2 <remove_chain.part.12+0x34a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003da0:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003da4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003da8:	1aba      	subs	r2, r7, r2
 8003daa:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003dac:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8003db0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003db4:	f4bf af7c 	bcs.w	8003cb0 <remove_chain.part.12+0x428>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003db8:	f894 b203 	ldrb.w	fp, [r4, #515]	; 0x203
 8003dbc:	f1bb 0f01 	cmp.w	fp, #1
 8003dc0:	d804      	bhi.n	8003dcc <remove_chain.part.12+0x544>
 8003dc2:	e775      	b.n	8003cb0 <remove_chain.part.12+0x428>
 8003dc4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003dc8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8003dcc:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003dce:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003dd2:	463a      	mov	r2, r7
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	f7ff fc94 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ddc:	f1bb 0f01 	cmp.w	fp, #1
 8003de0:	d1f0      	bne.n	8003dc4 <remove_chain.part.12+0x53c>
 8003de2:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003de6:	e763      	b.n	8003cb0 <remove_chain.part.12+0x428>
			p = &fs->win.d8[bc % SS(fs)];
 8003de8:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003dec:	2000      	movs	r0, #0
 8003dee:	e7d0      	b.n	8003d92 <remove_chain.part.12+0x50a>

08003df0 <get_fat.part.9>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8003df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 8003df4:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8003df8:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8003dfa:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8003dfc:	460d      	mov	r5, r1
		switch (fs->fs_type) {
 8003dfe:	d037      	beq.n	8003e70 <get_fat.part.9+0x80>
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d025      	beq.n	8003e50 <get_fat.part.9+0x60>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d002      	beq.n	8003e0e <get_fat.part.9+0x1e>
			val = 1;	/* Internal error */
 8003e08:	2001      	movs	r0, #1
}
 8003e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e0e:	f8d0 2224 	ldr.w	r2, [r0, #548]	; 0x224
			bc = (UINT)clst; bc += bc / 2;
 8003e12:	eb01 0651 	add.w	r6, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e16:	f8d0 7230 	ldr.w	r7, [r0, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e1a:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e1e:	45b8      	cmp	r8, r7
 8003e20:	f040 80a6 	bne.w	8003f70 <get_fat.part.9+0x180>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003e24:	f106 0801 	add.w	r8, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003e28:	eb02 2958 	add.w	r9, r2, r8, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8003e2c:	f3c6 0608 	ubfx	r6, r6, #0, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e30:	45b9      	cmp	r9, r7
			wc = fs->win.d8[bc++ % SS(fs)];
 8003e32:	5da6      	ldrb	r6, [r4, r6]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e34:	f040 80d4 	bne.w	8003fe0 <get_fat.part.9+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003e38:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8003e3c:	5ce0      	ldrb	r0, [r4, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003e3e:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003e40:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003e44:	bf4c      	ite	mi
 8003e46:	0900      	lsrmi	r0, r0, #4
 8003e48:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e50:	f8d0 6224 	ldr.w	r6, [r0, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e54:	f8d0 7230 	ldr.w	r7, [r0, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003e58:	eb06 16d1 	add.w	r6, r6, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e5c:	42be      	cmp	r6, r7
 8003e5e:	d14b      	bne.n	8003ef8 <get_fat.part.9+0x108>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003e60:	00ad      	lsls	r5, r5, #2
 8003e62:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8003e66:	5960      	ldr	r0, [r4, r5]
 8003e68:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e70:	f8d0 6224 	ldr.w	r6, [r0, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e74:	f8d0 7230 	ldr.w	r7, [r0, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003e78:	eb06 2611 	add.w	r6, r6, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003e7c:	42be      	cmp	r6, r7
 8003e7e:	d035      	beq.n	8003eec <get_fat.part.9+0xfc>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e80:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8003e84:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003e88:	b33b      	cbz	r3, 8003eda <get_fat.part.9+0xea>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	463a      	mov	r2, r7
 8003e8e:	4621      	mov	r1, r4
 8003e90:	f7ff fc38 	bl	8003704 <disk_write>
 8003e94:	2800      	cmp	r0, #0
 8003e96:	f040 80da 	bne.w	800404e <get_fat.part.9+0x25e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003e9a:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003e9e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003ea2:	1aba      	subs	r2, r7, r2
 8003ea4:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003ea6:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003eaa:	d214      	bcs.n	8003ed6 <get_fat.part.9+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003eac:	f894 8203 	ldrb.w	r8, [r4, #515]	; 0x203
 8003eb0:	f1b8 0f01 	cmp.w	r8, #1
 8003eb4:	d802      	bhi.n	8003ebc <get_fat.part.9+0xcc>
 8003eb6:	e00e      	b.n	8003ed6 <get_fat.part.9+0xe6>
 8003eb8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003ebc:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ebe:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003ec2:	463a      	mov	r2, r7
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003ecc:	f7ff fc1a 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003ed0:	f1b8 0f01 	cmp.w	r8, #1
 8003ed4:	d1f0      	bne.n	8003eb8 <get_fat.part.9+0xc8>
 8003ed6:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003eda:	2301      	movs	r3, #1
 8003edc:	4632      	mov	r2, r6
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f7ff fc02 	bl	80036e8 <disk_read>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d13d      	bne.n	8003f64 <get_fat.part.9+0x174>
			fs->winsect = sector;
 8003ee8:	f8c4 6230 	str.w	r6, [r4, #560]	; 0x230
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003eec:	006d      	lsls	r5, r5, #1
 8003eee:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8003ef2:	5b60      	ldrh	r0, [r4, r5]
}
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003ef8:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8003efc:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003f00:	b34b      	cbz	r3, 8003f56 <get_fat.part.9+0x166>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003f02:	2301      	movs	r3, #1
 8003f04:	463a      	mov	r2, r7
 8003f06:	4621      	mov	r1, r4
 8003f08:	f7ff fbfc 	bl	8003704 <disk_write>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f040 809e 	bne.w	800404e <get_fat.part.9+0x25e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f12:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003f16:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003f1a:	1aba      	subs	r2, r7, r2
 8003f1c:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003f1e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8003f22:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f26:	d216      	bcs.n	8003f56 <get_fat.part.9+0x166>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f28:	f894 8203 	ldrb.w	r8, [r4, #515]	; 0x203
 8003f2c:	f1b8 0f01 	cmp.w	r8, #1
 8003f30:	d804      	bhi.n	8003f3c <get_fat.part.9+0x14c>
 8003f32:	e010      	b.n	8003f56 <get_fat.part.9+0x166>
 8003f34:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003f38:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8003f3c:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f3e:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003f42:	463a      	mov	r2, r7
 8003f44:	2301      	movs	r3, #1
 8003f46:	4621      	mov	r1, r4
 8003f48:	f7ff fbdc 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f4c:	f1b8 0f01 	cmp.w	r8, #1
 8003f50:	d1f0      	bne.n	8003f34 <get_fat.part.9+0x144>
 8003f52:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003f56:	2301      	movs	r3, #1
 8003f58:	4632      	mov	r2, r6
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	f7ff fbc4 	bl	80036e8 <disk_read>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d078      	beq.n	8004056 <get_fat.part.9+0x266>
			fs->winsect = sector;
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
}
 8003f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f70:	f890 2204 	ldrb.w	r2, [r0, #516]	; 0x204
 8003f74:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8003f78:	b32a      	cbz	r2, 8003fc6 <get_fat.part.9+0x1d6>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003f7a:	463a      	mov	r2, r7
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	f7ff fbc1 	bl	8003704 <disk_write>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d163      	bne.n	800404e <get_fat.part.9+0x25e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f86:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003f8a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003f8e:	1aba      	subs	r2, r7, r2
 8003f90:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8003f92:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f96:	d214      	bcs.n	8003fc2 <get_fat.part.9+0x1d2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f98:	f894 9203 	ldrb.w	r9, [r4, #515]	; 0x203
 8003f9c:	f1b9 0f01 	cmp.w	r9, #1
 8003fa0:	d802      	bhi.n	8003fa8 <get_fat.part.9+0x1b8>
 8003fa2:	e00e      	b.n	8003fc2 <get_fat.part.9+0x1d2>
 8003fa4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8003fa8:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003faa:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003fae:	463a      	mov	r2, r7
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003fb8:	f7ff fba4 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003fbc:	f1b9 0f01 	cmp.w	r9, #1
 8003fc0:	d1f0      	bne.n	8003fa4 <get_fat.part.9+0x1b4>
 8003fc2:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4642      	mov	r2, r8
 8003fca:	4621      	mov	r1, r4
 8003fcc:	f7ff fb8c 	bl	80036e8 <disk_read>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d1c7      	bne.n	8003f64 <get_fat.part.9+0x174>
			fs->winsect = sector;
 8003fd4:	4647      	mov	r7, r8
 8003fd6:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003fda:	f8c4 8230 	str.w	r8, [r4, #560]	; 0x230
 8003fde:	e721      	b.n	8003e24 <get_fat.part.9+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003fe0:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8003fe4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8003fe8:	b33b      	cbz	r3, 800403a <get_fat.part.9+0x24a>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003fea:	2301      	movs	r3, #1
 8003fec:	463a      	mov	r2, r7
 8003fee:	4621      	mov	r1, r4
 8003ff0:	f7ff fb88 	bl	8003704 <disk_write>
 8003ff4:	bb58      	cbnz	r0, 800404e <get_fat.part.9+0x25e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003ff6:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8003ffa:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003ffe:	1aba      	subs	r2, r7, r2
 8004000:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004002:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8004006:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800400a:	d216      	bcs.n	800403a <get_fat.part.9+0x24a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800400c:	f894 a203 	ldrb.w	sl, [r4, #515]	; 0x203
 8004010:	f1ba 0f01 	cmp.w	sl, #1
 8004014:	d804      	bhi.n	8004020 <get_fat.part.9+0x230>
 8004016:	e010      	b.n	800403a <get_fat.part.9+0x24a>
 8004018:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800401c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8004020:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004022:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004026:	463a      	mov	r2, r7
 8004028:	2301      	movs	r3, #1
 800402a:	4621      	mov	r1, r4
 800402c:	f7ff fb6a 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004030:	f1ba 0f01 	cmp.w	sl, #1
 8004034:	d1f0      	bne.n	8004018 <get_fat.part.9+0x228>
 8004036:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800403a:	2301      	movs	r3, #1
 800403c:	464a      	mov	r2, r9
 800403e:	4621      	mov	r1, r4
 8004040:	f7ff fb52 	bl	80036e8 <disk_read>
 8004044:	2800      	cmp	r0, #0
 8004046:	d18d      	bne.n	8003f64 <get_fat.part.9+0x174>
			fs->winsect = sector;
 8004048:	f8c4 9230 	str.w	r9, [r4, #560]	; 0x230
 800404c:	e6f4      	b.n	8003e38 <get_fat.part.9+0x48>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800404e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fs->winsect = sector;
 8004056:	f8c4 6230 	str.w	r6, [r4, #560]	; 0x230
 800405a:	e701      	b.n	8003e60 <get_fat.part.9+0x70>

0800405c <dir_next.constprop.16>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory table index next                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800405c:	b570      	push	{r4, r5, r6, lr}
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800405e:	f8b0 4206 	ldrh.w	r4, [r0, #518]	; 0x206
 8004062:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004064:	b2a3      	uxth	r3, r4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d044      	beq.n	80040f4 <dir_next.constprop.16+0x98>
 800406a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800406e:	2b00      	cmp	r3, #0
 8004070:	d040      	beq.n	80040f4 <dir_next.constprop.16+0x98>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004072:	f014 060f 	ands.w	r6, r4, #15
 8004076:	4605      	mov	r5, r0
 8004078:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
 800407c:	d12e      	bne.n	80040dc <dir_next.constprop.16+0x80>
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
 800407e:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8004082:	3301      	adds	r3, #1
 8004084:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 8004088:	b381      	cbz	r1, 80040ec <dir_next.constprop.16+0x90>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800408a:	f892 3202 	ldrb.w	r3, [r2, #514]	; 0x202
 800408e:	3b01      	subs	r3, #1
 8004090:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
 8004094:	d122      	bne.n	80040dc <dir_next.constprop.16+0x80>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004096:	2901      	cmp	r1, #1
 8004098:	d92e      	bls.n	80040f8 <dir_next.constprop.16+0x9c>
 800409a:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 800409e:	4299      	cmp	r1, r3
 80040a0:	d22a      	bcs.n	80040f8 <dir_next.constprop.16+0x9c>
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7ff fea4 	bl	8003df0 <get_fat.part.9>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
 80040a8:	2801      	cmp	r0, #1
 80040aa:	d925      	bls.n	80040f8 <dir_next.constprop.16+0x9c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d025      	beq.n	80040fc <dir_next.constprop.16+0xa0>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80040b0:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
 80040b4:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 80040b8:	4298      	cmp	r0, r3
 80040ba:	d21b      	bcs.n	80040f4 <dir_next.constprop.16+0x98>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80040bc:	3b02      	subs	r3, #2
	clst -= 2;
 80040be:	1e81      	subs	r1, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80040c0:	4299      	cmp	r1, r3
 80040c2:	bf28      	it	cs
 80040c4:	2300      	movcs	r3, #0
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80040c6:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
	return clst * fs->csize + fs->database;
 80040ca:	bf3e      	ittt	cc
 80040cc:	f892 3202 	ldrbcc.w	r3, [r2, #514]	; 0x202
 80040d0:	f8d2 022c 	ldrcc.w	r0, [r2, #556]	; 0x22c
 80040d4:	fb01 0303 	mlacc	r3, r1, r3, r0
				dp->sect = clust2sect(dp->fs, clst);
 80040d8:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80040dc:	eb02 1246 	add.w	r2, r2, r6, lsl #5
 80040e0:	f8c5 2214 	str.w	r2, [r5, #532]	; 0x214
	dp->index = (WORD)i;	/* Current index */
 80040e4:	f8a5 4206 	strh.w	r4, [r5, #518]	; 0x206

	return FR_OK;
 80040e8:	2000      	movs	r0, #0
}
 80040ea:	bd70      	pop	{r4, r5, r6, pc}
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80040ec:	f8b2 3208 	ldrh.w	r3, [r2, #520]	; 0x208
 80040f0:	429c      	cmp	r4, r3
 80040f2:	d3f3      	bcc.n	80040dc <dir_next.constprop.16+0x80>
		return FR_NO_FILE;
 80040f4:	2004      	movs	r0, #4
}
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
				if (clst <= 1) return FR_INT_ERR;
 80040f8:	2002      	movs	r0, #2
}
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80040fc:	2001      	movs	r0, #1
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}

08004100 <dir_find.part.11>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
 8004100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	res = dir_sdi(dp, 0);			/* Rewind directory object */
	if (res != FR_OK) return res;

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004108:	f04f 0aff 	mov.w	sl, #255	; 0xff
FRESULT dir_find (
 800410c:	4605      	mov	r5, r0
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800410e:	4699      	mov	r9, r3
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004110:	46d0      	mov	r8, sl
 8004112:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8004116:	f8d0 7210 	ldr.w	r7, [r0, #528]	; 0x210
FRESULT dir_find (
 800411a:	b083      	sub	sp, #12
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800411c:	f8a0 3224 	strh.w	r3, [r0, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004120:	f8d4 6230 	ldr.w	r6, [r4, #560]	; 0x230
 8004124:	42be      	cmp	r6, r7
 8004126:	d03e      	beq.n	80041a6 <dir_find.part.11+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004128:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 800412c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004130:	b34b      	cbz	r3, 8004186 <dir_find.part.11+0x86>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004132:	2301      	movs	r3, #1
 8004134:	4632      	mov	r2, r6
 8004136:	4621      	mov	r1, r4
 8004138:	f7ff fae4 	bl	8003704 <disk_write>
 800413c:	2800      	cmp	r0, #0
 800413e:	f040 811c 	bne.w	800437a <dir_find.part.11+0x27a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004142:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8004146:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800414a:	1ab2      	subs	r2, r6, r2
 800414c:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800414e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8004152:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004156:	d216      	bcs.n	8004186 <dir_find.part.11+0x86>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004158:	f894 b203 	ldrb.w	fp, [r4, #515]	; 0x203
 800415c:	f1bb 0f01 	cmp.w	fp, #1
 8004160:	d804      	bhi.n	800416c <dir_find.part.11+0x6c>
 8004162:	e010      	b.n	8004186 <dir_find.part.11+0x86>
 8004164:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004168:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800416c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800416e:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004172:	4632      	mov	r2, r6
 8004174:	2301      	movs	r3, #1
 8004176:	4621      	mov	r1, r4
 8004178:	f7ff fac4 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800417c:	f1bb 0f01 	cmp.w	fp, #1
 8004180:	d1f0      	bne.n	8004164 <dir_find.part.11+0x64>
 8004182:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004186:	2301      	movs	r3, #1
 8004188:	463a      	mov	r2, r7
 800418a:	4621      	mov	r1, r4
 800418c:	f7ff faac 	bl	80036e8 <disk_read>
 8004190:	b138      	cbz	r0, 80041a2 <dir_find.part.11+0xa2>
			fs->winsect = sector;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8004196:	2001      	movs	r0, #1
			fs->winsect = sector;
 8004198:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
#endif
		res = dir_next(dp, 0);		/* Next entry */
	} while (res == FR_OK);

	return res;
}
 800419c:	b003      	add	sp, #12
 800419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80041a2:	f8c4 7230 	str.w	r7, [r4, #560]	; 0x230
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80041a6:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
		c = dir[DIR_Name];
 80041aa:	7823      	ldrb	r3, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80041ac:	b363      	cbz	r3, 8004208 <dir_find.part.11+0x108>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80041ae:	2be5      	cmp	r3, #229	; 0xe5
 80041b0:	d006      	beq.n	80041c0 <dir_find.part.11+0xc0>
		a = dir[DIR_Attr] & AM_MASK;
 80041b2:	7ae2      	ldrb	r2, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80041b4:	0717      	lsls	r7, r2, #28
		a = dir[DIR_Attr] & AM_MASK;
 80041b6:	f002 013f 	and.w	r1, r2, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80041ba:	d529      	bpl.n	8004210 <dir_find.part.11+0x110>
 80041bc:	290f      	cmp	r1, #15
 80041be:	d05f      	beq.n	8004280 <dir_find.part.11+0x180>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80041c0:	f8a5 9224 	strh.w	r9, [r5, #548]	; 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80041c4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = dp->index + 1;
 80041c8:	f8b5 6206 	ldrh.w	r6, [r5, #518]	; 0x206
 80041cc:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80041ce:	b2b3      	uxth	r3, r6
 80041d0:	b1d3      	cbz	r3, 8004208 <dir_find.part.11+0x108>
 80041d2:	f8d5 7210 	ldr.w	r7, [r5, #528]	; 0x210
 80041d6:	b1bf      	cbz	r7, 8004208 <dir_find.part.11+0x108>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80041d8:	f016 0b0f 	ands.w	fp, r6, #15
 80041dc:	f8d5 4200 	ldr.w	r4, [r5, #512]	; 0x200
 80041e0:	d10b      	bne.n	80041fa <dir_find.part.11+0xfa>
		if (!dp->clust) {		/* Static table */
 80041e2:	f8d5 120c 	ldr.w	r1, [r5, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 80041e6:	3701      	adds	r7, #1
 80041e8:	f8c5 7210 	str.w	r7, [r5, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 80041ec:	2900      	cmp	r1, #0
 80041ee:	f040 80b0 	bne.w	8004352 <dir_find.part.11+0x252>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80041f2:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
 80041f6:	429e      	cmp	r6, r3
 80041f8:	d206      	bcs.n	8004208 <dir_find.part.11+0x108>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80041fa:	eb04 134b 	add.w	r3, r4, fp, lsl #5
 80041fe:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
	dp->index = (WORD)i;	/* Current index */
 8004202:	f8a5 6206 	strh.w	r6, [r5, #518]	; 0x206
 8004206:	e78b      	b.n	8004120 <dir_find.part.11+0x20>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004208:	2004      	movs	r0, #4
}
 800420a:	b003      	add	sp, #12
 800420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004210:	290f      	cmp	r1, #15
 8004212:	d035      	beq.n	8004280 <dir_find.part.11+0x180>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004214:	f1b8 0f00 	cmp.w	r8, #0
 8004218:	f000 80b1 	beq.w	800437e <dir_find.part.11+0x27e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800421c:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
 8004220:	7ad1      	ldrb	r1, [r2, #11]
 8004222:	07c9      	lsls	r1, r1, #31
 8004224:	d4cc      	bmi.n	80041c0 <dir_find.part.11+0xc0>
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004226:	7811      	ldrb	r1, [r2, #0]
 8004228:	4299      	cmp	r1, r3
 800422a:	d1c9      	bne.n	80041c0 <dir_find.part.11+0xc0>
 800422c:	7861      	ldrb	r1, [r4, #1]
 800422e:	7853      	ldrb	r3, [r2, #1]
 8004230:	4299      	cmp	r1, r3
 8004232:	d1c5      	bne.n	80041c0 <dir_find.part.11+0xc0>
 8004234:	78a1      	ldrb	r1, [r4, #2]
 8004236:	7893      	ldrb	r3, [r2, #2]
 8004238:	4299      	cmp	r1, r3
 800423a:	d1c1      	bne.n	80041c0 <dir_find.part.11+0xc0>
 800423c:	78e1      	ldrb	r1, [r4, #3]
 800423e:	78d3      	ldrb	r3, [r2, #3]
 8004240:	4299      	cmp	r1, r3
 8004242:	d1bd      	bne.n	80041c0 <dir_find.part.11+0xc0>
 8004244:	7921      	ldrb	r1, [r4, #4]
 8004246:	7913      	ldrb	r3, [r2, #4]
 8004248:	4299      	cmp	r1, r3
 800424a:	d1b9      	bne.n	80041c0 <dir_find.part.11+0xc0>
 800424c:	7961      	ldrb	r1, [r4, #5]
 800424e:	7953      	ldrb	r3, [r2, #5]
 8004250:	4299      	cmp	r1, r3
 8004252:	d1b5      	bne.n	80041c0 <dir_find.part.11+0xc0>
 8004254:	79a1      	ldrb	r1, [r4, #6]
 8004256:	7993      	ldrb	r3, [r2, #6]
 8004258:	4299      	cmp	r1, r3
 800425a:	d1b1      	bne.n	80041c0 <dir_find.part.11+0xc0>
 800425c:	79e1      	ldrb	r1, [r4, #7]
 800425e:	79d3      	ldrb	r3, [r2, #7]
 8004260:	4299      	cmp	r1, r3
 8004262:	d1ad      	bne.n	80041c0 <dir_find.part.11+0xc0>
 8004264:	7a21      	ldrb	r1, [r4, #8]
 8004266:	7a13      	ldrb	r3, [r2, #8]
 8004268:	4299      	cmp	r1, r3
 800426a:	d1a9      	bne.n	80041c0 <dir_find.part.11+0xc0>
 800426c:	7a61      	ldrb	r1, [r4, #9]
 800426e:	7a53      	ldrb	r3, [r2, #9]
 8004270:	4299      	cmp	r1, r3
 8004272:	d1a5      	bne.n	80041c0 <dir_find.part.11+0xc0>
 8004274:	7aa1      	ldrb	r1, [r4, #10]
 8004276:	7a93      	ldrb	r3, [r2, #10]
 8004278:	4299      	cmp	r1, r3
 800427a:	d1a1      	bne.n	80041c0 <dir_find.part.11+0xc0>
 800427c:	2000      	movs	r0, #0
 800427e:	e78d      	b.n	800419c <dir_find.part.11+0x9c>
				if (dp->lfn) {
 8004280:	f8d5 7220 	ldr.w	r7, [r5, #544]	; 0x220
 8004284:	2f00      	cmp	r7, #0
 8004286:	d09f      	beq.n	80041c8 <dir_find.part.11+0xc8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004288:	065e      	lsls	r6, r3, #25
 800428a:	f140 80c1 	bpl.w	8004410 <dir_find.part.11+0x310>
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800428e:	f8b5 1206 	ldrh.w	r1, [r5, #518]	; 0x206
						sum = dir[LDIR_Chksum];
 8004292:	f894 a00d 	ldrb.w	sl, [r4, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004296:	f003 08bf 	and.w	r8, r3, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800429a:	f8a5 1224 	strh.w	r1, [r5, #548]	; 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800429e:	7b63      	ldrb	r3, [r4, #13]
 80042a0:	4553      	cmp	r3, sl
 80042a2:	d18f      	bne.n	80041c4 <dir_find.part.11+0xc4>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80042a4:	7826      	ldrb	r6, [r4, #0]
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80042a6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80042aa:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 80042ae:	3e01      	subs	r6, #1
 80042b0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80042b4:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80042b8:	f003 f954 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80042bc:	2efe      	cmp	r6, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80042be:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80042c0:	d880      	bhi.n	80041c4 <dir_find.part.11+0xc4>
 80042c2:	0073      	lsls	r3, r6, #1
 80042c4:	f837 0016 	ldrh.w	r0, [r7, r6, lsl #1]
 80042c8:	9301      	str	r3, [sp, #4]
 80042ca:	f003 f94b 	bl	8007564 <ff_wtoupper>
 80042ce:	9b00      	ldr	r3, [sp, #0]
 80042d0:	f106 0b01 	add.w	fp, r6, #1
 80042d4:	4283      	cmp	r3, r0
 80042d6:	f47f af75 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80042da:	f8b4 0003 	ldrh.w	r0, [r4, #3]
		if (wc) {	/* Last character has not been processed */
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 80b4 	bne.w	800444c <dir_find.part.11+0x34c>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80042e4:	4548      	cmp	r0, r9
 80042e6:	f47f af6d 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80042ea:	f8b4 0005 	ldrh.w	r0, [r4, #5]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80042ee:	4548      	cmp	r0, r9
 80042f0:	f47f af68 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80042f4:	f8b4 0007 	ldrh.w	r0, [r4, #7]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80042f8:	4548      	cmp	r0, r9
 80042fa:	f47f af63 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80042fe:	f8b4 0009 	ldrh.w	r0, [r4, #9]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004302:	4548      	cmp	r0, r9
 8004304:	f47f af5e 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004308:	89e0      	ldrh	r0, [r4, #14]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800430a:	4548      	cmp	r0, r9
 800430c:	f47f af5a 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004310:	8a20      	ldrh	r0, [r4, #16]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004312:	4548      	cmp	r0, r9
 8004314:	f47f af56 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004318:	8a60      	ldrh	r0, [r4, #18]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800431a:	4548      	cmp	r0, r9
 800431c:	f47f af52 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004320:	8aa0      	ldrh	r0, [r4, #20]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004322:	4548      	cmp	r0, r9
 8004324:	f47f af4e 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004328:	8ae0      	ldrh	r0, [r4, #22]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800432a:	4548      	cmp	r0, r9
 800432c:	f47f af4a 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004330:	8b20      	ldrh	r0, [r4, #24]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004332:	4548      	cmp	r0, r9
 8004334:	f47f af46 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004338:	8ba0      	ldrh	r0, [r4, #28]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800433a:	4548      	cmp	r0, r9
 800433c:	f47f af42 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004340:	8be0      	ldrh	r0, [r4, #30]
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004342:	4548      	cmp	r0, r9
 8004344:	f47f af3e 	bne.w	80041c4 <dir_find.part.11+0xc4>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004348:	f108 38ff 	add.w	r8, r8, #4294967295
 800434c:	fa5f f888 	uxtb.w	r8, r8
 8004350:	e73a      	b.n	80041c8 <dir_find.part.11+0xc8>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004352:	f894 3202 	ldrb.w	r3, [r4, #514]	; 0x202
 8004356:	3b01      	subs	r3, #1
 8004358:	ea13 1316 	ands.w	r3, r3, r6, lsr #4
 800435c:	f47f af4d 	bne.w	80041fa <dir_find.part.11+0xfa>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004360:	2901      	cmp	r1, #1
 8004362:	d959      	bls.n	8004418 <dir_find.part.11+0x318>
 8004364:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004368:	4299      	cmp	r1, r3
 800436a:	d255      	bcs.n	8004418 <dir_find.part.11+0x318>
 800436c:	4620      	mov	r0, r4
 800436e:	f7ff fd3f 	bl	8003df0 <get_fat.part.9>
				if (clst <= 1) return FR_INT_ERR;
 8004372:	2801      	cmp	r0, #1
 8004374:	d950      	bls.n	8004418 <dir_find.part.11+0x318>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004376:	1c43      	adds	r3, r0, #1
 8004378:	d150      	bne.n	800441c <dir_find.part.11+0x31c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800437a:	2001      	movs	r0, #1
 800437c:	e70e      	b.n	800419c <dir_find.part.11+0x9c>
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800437e:	01da      	lsls	r2, r3, #7
 8004380:	7861      	ldrb	r1, [r4, #1]
 8004382:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8004386:	4411      	add	r1, r2
 8004388:	f3c1 0246 	ubfx	r2, r1, #1, #7
 800438c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8004390:	78a1      	ldrb	r1, [r4, #2]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	4411      	add	r1, r2
 8004396:	f3c1 0246 	ubfx	r2, r1, #1, #7
 800439a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800439e:	78e1      	ldrb	r1, [r4, #3]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	4411      	add	r1, r2
 80043a4:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80043a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80043ac:	7921      	ldrb	r1, [r4, #4]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	4411      	add	r1, r2
 80043b2:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80043b6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80043ba:	7961      	ldrb	r1, [r4, #5]
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	4411      	add	r1, r2
 80043c0:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80043c4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80043c8:	79a1      	ldrb	r1, [r4, #6]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	4411      	add	r1, r2
 80043ce:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80043d2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80043d6:	79e1      	ldrb	r1, [r4, #7]
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	4411      	add	r1, r2
 80043dc:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80043e0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80043e4:	7a21      	ldrb	r1, [r4, #8]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	4411      	add	r1, r2
 80043ea:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80043ee:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80043f2:	7a61      	ldrb	r1, [r4, #9]
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440a      	add	r2, r1
 80043f8:	f3c2 0146 	ubfx	r1, r2, #1, #7
 80043fc:	7aa0      	ldrb	r0, [r4, #10]
 80043fe:	ea41 12c2 	orr.w	r2, r1, r2, lsl #7
 8004402:	4402      	add	r2, r0
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8004404:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8004408:	4552      	cmp	r2, sl
 800440a:	f47f af07 	bne.w	800421c <dir_find.part.11+0x11c>
 800440e:	e735      	b.n	800427c <dir_find.part.11+0x17c>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004410:	4543      	cmp	r3, r8
 8004412:	f47f aed7 	bne.w	80041c4 <dir_find.part.11+0xc4>
 8004416:	e742      	b.n	800429e <dir_find.part.11+0x19e>
				if (clst <= 1) return FR_INT_ERR;
 8004418:	2002      	movs	r0, #2
 800441a:	e6bf      	b.n	800419c <dir_find.part.11+0x9c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800441c:	f8d5 4200 	ldr.w	r4, [r5, #512]	; 0x200
 8004420:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004424:	4298      	cmp	r0, r3
 8004426:	f4bf aeef 	bcs.w	8004208 <dir_find.part.11+0x108>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800442a:	3b02      	subs	r3, #2
	clst -= 2;
 800442c:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800442e:	429a      	cmp	r2, r3
 8004430:	bf28      	it	cs
 8004432:	2700      	movcs	r7, #0
				dp->clust = clst;				/* Initialize data for new cluster */
 8004434:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
	return clst * fs->csize + fs->database;
 8004438:	bf3e      	ittt	cc
 800443a:	f894 7202 	ldrbcc.w	r7, [r4, #514]	; 0x202
 800443e:	f8d4 322c 	ldrcc.w	r3, [r4, #556]	; 0x22c
 8004442:	fb02 3707 	mlacc	r7, r2, r7, r3
				dp->sect = clust2sect(dp->fs, clst);
 8004446:	f8c5 7210 	str.w	r7, [r5, #528]	; 0x210
 800444a:	e6d6      	b.n	80041fa <dir_find.part.11+0xfa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800444c:	f003 f88a 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004450:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004454:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004456:	f43f aeb5 	beq.w	80041c4 <dir_find.part.11+0xc4>
 800445a:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
 800445e:	f003 f881 	bl	8007564 <ff_wtoupper>
 8004462:	9b00      	ldr	r3, [sp, #0]
 8004464:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8004468:	4283      	cmp	r3, r0
 800446a:	f47f aeab 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800446e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
		if (wc) {	/* Last character has not been processed */
 8004472:	2b00      	cmp	r3, #0
 8004474:	f43f af3b 	beq.w	80042ee <dir_find.part.11+0x1ee>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004478:	f003 f874 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800447c:	2efd      	cmp	r6, #253	; 0xfd
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800447e:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004480:	f43f aea0 	beq.w	80041c4 <dir_find.part.11+0xc4>
 8004484:	44bb      	add	fp, r7
 8004486:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 800448a:	f003 f86b 	bl	8007564 <ff_wtoupper>
 800448e:	9b00      	ldr	r3, [sp, #0]
 8004490:	4283      	cmp	r3, r0
 8004492:	f47f ae97 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004496:	f8b4 0007 	ldrh.w	r0, [r4, #7]
		if (wc) {	/* Last character has not been processed */
 800449a:	2b00      	cmp	r3, #0
 800449c:	f43f af2c 	beq.w	80042f8 <dir_find.part.11+0x1f8>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80044a0:	f003 f860 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80044a4:	2efc      	cmp	r6, #252	; 0xfc
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80044a6:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80044a8:	f43f ae8c 	beq.w	80041c4 <dir_find.part.11+0xc4>
 80044ac:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 80044b0:	f003 f858 	bl	8007564 <ff_wtoupper>
 80044b4:	9b00      	ldr	r3, [sp, #0]
 80044b6:	4283      	cmp	r3, r0
 80044b8:	f47f ae84 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80044bc:	f8b4 0009 	ldrh.w	r0, [r4, #9]
		if (wc) {	/* Last character has not been processed */
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f43f af1e 	beq.w	8004302 <dir_find.part.11+0x202>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80044c6:	f003 f84d 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80044ca:	2efb      	cmp	r6, #251	; 0xfb
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80044cc:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80044ce:	f43f ae79 	beq.w	80041c4 <dir_find.part.11+0xc4>
 80044d2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80044d6:	f003 f845 	bl	8007564 <ff_wtoupper>
 80044da:	9b00      	ldr	r3, [sp, #0]
 80044dc:	4283      	cmp	r3, r0
 80044de:	f47f ae71 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80044e2:	89e0      	ldrh	r0, [r4, #14]
		if (wc) {	/* Last character has not been processed */
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f43f af10 	beq.w	800430a <dir_find.part.11+0x20a>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80044ea:	f003 f83b 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80044ee:	2efa      	cmp	r6, #250	; 0xfa
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80044f0:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80044f2:	f43f ae67 	beq.w	80041c4 <dir_find.part.11+0xc4>
 80044f6:	f8bb 0008 	ldrh.w	r0, [fp, #8]
 80044fa:	f003 f833 	bl	8007564 <ff_wtoupper>
 80044fe:	9b00      	ldr	r3, [sp, #0]
 8004500:	4283      	cmp	r3, r0
 8004502:	f47f ae5f 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004506:	8a20      	ldrh	r0, [r4, #16]
		if (wc) {	/* Last character has not been processed */
 8004508:	2b00      	cmp	r3, #0
 800450a:	f43f af02 	beq.w	8004312 <dir_find.part.11+0x212>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800450e:	f003 f829 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004512:	2ef9      	cmp	r6, #249	; 0xf9
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004514:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004516:	f43f ae55 	beq.w	80041c4 <dir_find.part.11+0xc4>
 800451a:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800451e:	f003 f821 	bl	8007564 <ff_wtoupper>
 8004522:	9b00      	ldr	r3, [sp, #0]
 8004524:	4283      	cmp	r3, r0
 8004526:	f47f ae4d 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800452a:	8a60      	ldrh	r0, [r4, #18]
		if (wc) {	/* Last character has not been processed */
 800452c:	2b00      	cmp	r3, #0
 800452e:	f43f aef4 	beq.w	800431a <dir_find.part.11+0x21a>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004532:	f003 f817 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004536:	2ef8      	cmp	r6, #248	; 0xf8
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004538:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800453a:	f43f ae43 	beq.w	80041c4 <dir_find.part.11+0xc4>
 800453e:	f8bb 000c 	ldrh.w	r0, [fp, #12]
 8004542:	f003 f80f 	bl	8007564 <ff_wtoupper>
 8004546:	9b00      	ldr	r3, [sp, #0]
 8004548:	4283      	cmp	r3, r0
 800454a:	f47f ae3b 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800454e:	8aa0      	ldrh	r0, [r4, #20]
		if (wc) {	/* Last character has not been processed */
 8004550:	2b00      	cmp	r3, #0
 8004552:	f43f aee6 	beq.w	8004322 <dir_find.part.11+0x222>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004556:	f003 f805 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800455a:	2ef7      	cmp	r6, #247	; 0xf7
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800455c:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800455e:	f43f ae31 	beq.w	80041c4 <dir_find.part.11+0xc4>
 8004562:	f8bb 000e 	ldrh.w	r0, [fp, #14]
 8004566:	f002 fffd 	bl	8007564 <ff_wtoupper>
 800456a:	9b00      	ldr	r3, [sp, #0]
 800456c:	4283      	cmp	r3, r0
 800456e:	f47f ae29 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004572:	8ae0      	ldrh	r0, [r4, #22]
		if (wc) {	/* Last character has not been processed */
 8004574:	2b00      	cmp	r3, #0
 8004576:	f43f aed8 	beq.w	800432a <dir_find.part.11+0x22a>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800457a:	f002 fff3 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800457e:	2ef6      	cmp	r6, #246	; 0xf6
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004580:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004582:	f43f ae1f 	beq.w	80041c4 <dir_find.part.11+0xc4>
 8004586:	f8bb 0010 	ldrh.w	r0, [fp, #16]
 800458a:	f002 ffeb 	bl	8007564 <ff_wtoupper>
 800458e:	9b00      	ldr	r3, [sp, #0]
 8004590:	4283      	cmp	r3, r0
 8004592:	f47f ae17 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004596:	8b20      	ldrh	r0, [r4, #24]
		if (wc) {	/* Last character has not been processed */
 8004598:	2b00      	cmp	r3, #0
 800459a:	f43f aeca 	beq.w	8004332 <dir_find.part.11+0x232>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800459e:	f002 ffe1 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80045a2:	2ef5      	cmp	r6, #245	; 0xf5
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80045a4:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80045a6:	f43f ae0d 	beq.w	80041c4 <dir_find.part.11+0xc4>
 80045aa:	f8bb 0012 	ldrh.w	r0, [fp, #18]
 80045ae:	f002 ffd9 	bl	8007564 <ff_wtoupper>
 80045b2:	9b00      	ldr	r3, [sp, #0]
 80045b4:	4283      	cmp	r3, r0
 80045b6:	f47f ae05 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80045ba:	8ba0      	ldrh	r0, [r4, #28]
		if (wc) {	/* Last character has not been processed */
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f43f aebc 	beq.w	800433a <dir_find.part.11+0x23a>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80045c2:	f002 ffcf 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80045c6:	2ef4      	cmp	r6, #244	; 0xf4
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80045c8:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80045ca:	f43f adfb 	beq.w	80041c4 <dir_find.part.11+0xc4>
 80045ce:	f8bb 0014 	ldrh.w	r0, [fp, #20]
 80045d2:	f002 ffc7 	bl	8007564 <ff_wtoupper>
 80045d6:	9b00      	ldr	r3, [sp, #0]
 80045d8:	4283      	cmp	r3, r0
 80045da:	f47f adf3 	bne.w	80041c4 <dir_find.part.11+0xc4>
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80045de:	8be0      	ldrh	r0, [r4, #30]
		if (wc) {	/* Last character has not been processed */
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f43f aeae 	beq.w	8004342 <dir_find.part.11+0x242>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80045e6:	f002 ffbd 	bl	8007564 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80045ea:	2ef3      	cmp	r6, #243	; 0xf3
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 80045ec:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 80045ee:	f43f ade9 	beq.w	80041c4 <dir_find.part.11+0xc4>
 80045f2:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80045f6:	f002 ffb5 	bl	8007564 <ff_wtoupper>
 80045fa:	9b00      	ldr	r3, [sp, #0]
 80045fc:	4283      	cmp	r3, r0
 80045fe:	f47f ade1 	bne.w	80041c4 <dir_find.part.11+0xc4>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004602:	7821      	ldrb	r1, [r4, #0]
 8004604:	0648      	lsls	r0, r1, #25
 8004606:	f57f ae9f 	bpl.w	8004348 <dir_find.part.11+0x248>
 800460a:	2b00      	cmp	r3, #0
 800460c:	f43f ae9c 	beq.w	8004348 <dir_find.part.11+0x248>
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	443b      	add	r3, r7
 8004614:	8b5b      	ldrh	r3, [r3, #26]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f43f ae96 	beq.w	8004348 <dir_find.part.11+0x248>
 800461c:	e5d2      	b.n	80041c4 <dir_find.part.11+0xc4>
 800461e:	bf00      	nop

08004620 <put_fat.part.10>:
FRESULT put_fat (
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 8004624:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
FRESULT put_fat (
 8004628:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 800462a:	2b02      	cmp	r3, #2
FRESULT put_fat (
 800462c:	460d      	mov	r5, r1
 800462e:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8004630:	f000 8082 	beq.w	8004738 <put_fat.part.10+0x118>
 8004634:	2b03      	cmp	r3, #3
 8004636:	d069      	beq.n	800470c <put_fat.part.10+0xec>
 8004638:	2b01      	cmp	r3, #1
 800463a:	d002      	beq.n	8004642 <put_fat.part.10+0x22>
			res = FR_INT_ERR;
 800463c:	2002      	movs	r0, #2
}
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004642:	f8d0 2224 	ldr.w	r2, [r0, #548]	; 0x224
			bc = (UINT)clst; bc += bc / 2;
 8004646:	eb01 0851 	add.w	r8, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800464a:	f8d0 7230 	ldr.w	r7, [r0, #560]	; 0x230
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800464e:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004652:	45b9      	cmp	r9, r7
 8004654:	f040 80f6 	bne.w	8004844 <put_fat.part.10+0x224>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004658:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800465c:	f015 0501 	ands.w	r5, r5, #1
 8004660:	eb02 2a59 	add.w	sl, r2, r9, lsr #9
			p = &fs->win.d8[bc++ % SS(fs)];
 8004664:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004668:	f000 8126 	beq.w	80048b8 <put_fat.part.10+0x298>
			fs->wflag = 1;
 800466c:	2201      	movs	r2, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800466e:	f814 3008 	ldrb.w	r3, [r4, r8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004672:	4557      	cmp	r7, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800467c:	f804 3008 	strb.w	r3, [r4, r8]
			fs->wflag = 1;
 8004680:	f884 2204 	strb.w	r2, [r4, #516]	; 0x204
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004684:	f000 812c 	beq.w	80048e0 <put_fat.part.10+0x2c0>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004688:	2301      	movs	r3, #1
 800468a:	463a      	mov	r2, r7
 800468c:	4621      	mov	r1, r4
 800468e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004692:	f7ff f837 	bl	8003704 <disk_write>
 8004696:	2800      	cmp	r0, #0
 8004698:	f040 810b 	bne.w	80048b2 <put_fat.part.10+0x292>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800469c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80046a0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80046a4:	1aba      	subs	r2, r7, r2
 80046a6:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80046a8:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80046ac:	d214      	bcs.n	80046d8 <put_fat.part.10+0xb8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046ae:	f894 8203 	ldrb.w	r8, [r4, #515]	; 0x203
 80046b2:	f1b8 0f01 	cmp.w	r8, #1
 80046b6:	d802      	bhi.n	80046be <put_fat.part.10+0x9e>
 80046b8:	e00e      	b.n	80046d8 <put_fat.part.10+0xb8>
 80046ba:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 80046be:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046c0:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80046c4:	463a      	mov	r2, r7
 80046c6:	2301      	movs	r3, #1
 80046c8:	4621      	mov	r1, r4
 80046ca:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80046ce:	f7ff f819 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046d2:	f1b8 0f01 	cmp.w	r8, #1
 80046d6:	d1f0      	bne.n	80046ba <put_fat.part.10+0x9a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80046d8:	2301      	movs	r3, #1
 80046da:	4652      	mov	r2, sl
 80046dc:	4621      	mov	r1, r4
 80046de:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80046e2:	f7ff f801 	bl	80036e8 <disk_read>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	f040 80a5 	bne.w	8004836 <put_fat.part.10+0x216>
			fs->winsect = sector;
 80046ec:	f8c4 a230 	str.w	sl, [r4, #560]	; 0x230
			p = &fs->win.d8[bc % SS(fs)];
 80046f0:	f3c9 0308 	ubfx	r3, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	f000 80e9 	beq.w	80048cc <put_fat.part.10+0x2ac>
 80046fa:	f3c6 1607 	ubfx	r6, r6, #4, #8
			fs->wflag = 1;
 80046fe:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004700:	54e6      	strb	r6, [r4, r3]
			fs->wflag = 1;
 8004702:	f884 2204 	strb.w	r2, [r4, #516]	; 0x204
 8004706:	2000      	movs	r0, #0
}
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800470c:	f8d0 7224 	ldr.w	r7, [r0, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004710:	f8d0 8230 	ldr.w	r8, [r0, #560]	; 0x230
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004714:	eb07 17d1 	add.w	r7, r7, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004718:	4547      	cmp	r7, r8
 800471a:	d156      	bne.n	80047ca <put_fat.part.10+0x1aa>
			fs->wflag = 1;
 800471c:	2201      	movs	r2, #1
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800471e:	00ad      	lsls	r5, r5, #2
 8004720:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			val |= LD_DWORD(p) & 0xF0000000;
 8004724:	5963      	ldr	r3, [r4, r5]
			fs->wflag = 1;
 8004726:	2000      	movs	r0, #0
			val |= LD_DWORD(p) & 0xF0000000;
 8004728:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800472c:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
 800472e:	5166      	str	r6, [r4, r5]
			fs->wflag = 1;
 8004730:	f884 2204 	strb.w	r2, [r4, #516]	; 0x204
}
 8004734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004738:	f8d0 7224 	ldr.w	r7, [r0, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 800473c:	f8d0 8230 	ldr.w	r8, [r0, #560]	; 0x230
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004740:	eb07 2711 	add.w	r7, r7, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004744:	4547      	cmp	r7, r8
 8004746:	d036      	beq.n	80047b6 <put_fat.part.10+0x196>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004748:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 800474c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004750:	b343      	cbz	r3, 80047a4 <put_fat.part.10+0x184>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004752:	2301      	movs	r3, #1
 8004754:	4642      	mov	r2, r8
 8004756:	4621      	mov	r1, r4
 8004758:	f7fe ffd4 	bl	8003704 <disk_write>
 800475c:	2800      	cmp	r0, #0
 800475e:	f040 80a8 	bne.w	80048b2 <put_fat.part.10+0x292>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004762:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8004766:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800476a:	eba8 0202 	sub.w	r2, r8, r2
 800476e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004770:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004774:	d214      	bcs.n	80047a0 <put_fat.part.10+0x180>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004776:	f894 9203 	ldrb.w	r9, [r4, #515]	; 0x203
 800477a:	f1b9 0f01 	cmp.w	r9, #1
 800477e:	d802      	bhi.n	8004786 <put_fat.part.10+0x166>
 8004780:	e00e      	b.n	80047a0 <put_fat.part.10+0x180>
 8004782:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8004786:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004788:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800478c:	4642      	mov	r2, r8
 800478e:	2301      	movs	r3, #1
 8004790:	4621      	mov	r1, r4
 8004792:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004796:	f7fe ffb5 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800479a:	f1b9 0f01 	cmp.w	r9, #1
 800479e:	d1f0      	bne.n	8004782 <put_fat.part.10+0x162>
 80047a0:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80047a4:	2301      	movs	r3, #1
 80047a6:	463a      	mov	r2, r7
 80047a8:	4621      	mov	r1, r4
 80047aa:	f7fe ff9d 	bl	80036e8 <disk_read>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d141      	bne.n	8004836 <put_fat.part.10+0x216>
			fs->winsect = sector;
 80047b2:	f8c4 7230 	str.w	r7, [r4, #560]	; 0x230
			fs->wflag = 1;
 80047b6:	2301      	movs	r3, #1
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80047b8:	409d      	lsls	r5, r3
 80047ba:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 80047be:	5366      	strh	r6, [r4, r5]
			fs->wflag = 1;
 80047c0:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
 80047c4:	2000      	movs	r0, #0
}
 80047c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80047ca:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 80047ce:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80047d2:	b34b      	cbz	r3, 8004828 <put_fat.part.10+0x208>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80047d4:	2301      	movs	r3, #1
 80047d6:	4642      	mov	r2, r8
 80047d8:	4621      	mov	r1, r4
 80047da:	f7fe ff93 	bl	8003704 <disk_write>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d167      	bne.n	80048b2 <put_fat.part.10+0x292>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80047e2:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80047e6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80047ea:	eba8 0202 	sub.w	r2, r8, r2
 80047ee:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80047f0:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 80047f4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80047f8:	d216      	bcs.n	8004828 <put_fat.part.10+0x208>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80047fa:	f894 9203 	ldrb.w	r9, [r4, #515]	; 0x203
 80047fe:	f1b9 0f01 	cmp.w	r9, #1
 8004802:	d804      	bhi.n	800480e <put_fat.part.10+0x1ee>
 8004804:	e010      	b.n	8004828 <put_fat.part.10+0x208>
 8004806:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800480a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800480e:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004810:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004814:	4642      	mov	r2, r8
 8004816:	2301      	movs	r3, #1
 8004818:	4621      	mov	r1, r4
 800481a:	f7fe ff73 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800481e:	f1b9 0f01 	cmp.w	r9, #1
 8004822:	d1f0      	bne.n	8004806 <put_fat.part.10+0x1e6>
 8004824:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004828:	2301      	movs	r3, #1
 800482a:	463a      	mov	r2, r7
 800482c:	4621      	mov	r1, r4
 800482e:	f7fe ff5b 	bl	80036e8 <disk_read>
 8004832:	2800      	cmp	r0, #0
 8004834:	d051      	beq.n	80048da <put_fat.part.10+0x2ba>
			fs->winsect = sector;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 800483a:	2001      	movs	r0, #1
			fs->winsect = sector;
 800483c:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
}
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004844:	f890 2204 	ldrb.w	r2, [r0, #516]	; 0x204
 8004848:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800484c:	b322      	cbz	r2, 8004898 <put_fat.part.10+0x278>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800484e:	463a      	mov	r2, r7
 8004850:	4621      	mov	r1, r4
 8004852:	f7fe ff57 	bl	8003704 <disk_write>
 8004856:	bb60      	cbnz	r0, 80048b2 <put_fat.part.10+0x292>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004858:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 800485c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004860:	1aba      	subs	r2, r7, r2
 8004862:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004864:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004868:	d214      	bcs.n	8004894 <put_fat.part.10+0x274>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800486a:	f894 a203 	ldrb.w	sl, [r4, #515]	; 0x203
 800486e:	f1ba 0f01 	cmp.w	sl, #1
 8004872:	d802      	bhi.n	800487a <put_fat.part.10+0x25a>
 8004874:	e00e      	b.n	8004894 <put_fat.part.10+0x274>
 8004876:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 800487a:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800487c:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004880:	463a      	mov	r2, r7
 8004882:	2301      	movs	r3, #1
 8004884:	4621      	mov	r1, r4
 8004886:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800488a:	f7fe ff3b 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800488e:	f1ba 0f01 	cmp.w	sl, #1
 8004892:	d1f0      	bne.n	8004876 <put_fat.part.10+0x256>
 8004894:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004898:	2301      	movs	r3, #1
 800489a:	464a      	mov	r2, r9
 800489c:	4621      	mov	r1, r4
 800489e:	f7fe ff23 	bl	80036e8 <disk_read>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d1c7      	bne.n	8004836 <put_fat.part.10+0x216>
			fs->winsect = sector;
 80048a6:	464f      	mov	r7, r9
 80048a8:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80048ac:	f8c4 9230 	str.w	r9, [r4, #560]	; 0x230
 80048b0:	e6d2      	b.n	8004658 <put_fat.part.10+0x38>
			res = FR_INT_ERR;
 80048b2:	2001      	movs	r0, #1
}
 80048b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fs->wflag = 1;
 80048b8:	2301      	movs	r3, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80048ba:	4557      	cmp	r7, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048bc:	f804 6008 	strb.w	r6, [r4, r8]
			fs->wflag = 1;
 80048c0:	f884 3204 	strb.w	r3, [r4, #516]	; 0x204
	if (sector != fs->winsect) {	/* Window offset changed? */
 80048c4:	f47f aee0 	bne.w	8004688 <put_fat.part.10+0x68>
			p = &fs->win.d8[bc % SS(fs)];
 80048c8:	f3c9 0308 	ubfx	r3, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048cc:	5ce2      	ldrb	r2, [r4, r3]
 80048ce:	f3c6 2103 	ubfx	r1, r6, #8, #4
 80048d2:	f022 060f 	bic.w	r6, r2, #15
 80048d6:	430e      	orrs	r6, r1
 80048d8:	e711      	b.n	80046fe <put_fat.part.10+0xde>
			fs->winsect = sector;
 80048da:	f8c4 7230 	str.w	r7, [r4, #560]	; 0x230
 80048de:	e71d      	b.n	800471c <put_fat.part.10+0xfc>
			p = &fs->win.d8[bc % SS(fs)];
 80048e0:	f3c9 0308 	ubfx	r3, r9, #0, #9
 80048e4:	e709      	b.n	80046fa <put_fat.part.10+0xda>
 80048e6:	bf00      	nop

080048e8 <create_chain>:
{
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	4605      	mov	r5, r0
 80048ee:	b083      	sub	sp, #12
	if (clst == 0) {		/* Create a new chain */
 80048f0:	468b      	mov	fp, r1
 80048f2:	2900      	cmp	r1, #0
 80048f4:	d153      	bne.n	800499e <create_chain+0xb6>
		scl = fs->last_clust;			/* Get suggested start point */
 80048f6:	f8d0 7210 	ldr.w	r7, [r0, #528]	; 0x210
 80048fa:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80048fe:	2f00      	cmp	r7, #0
 8004900:	d159      	bne.n	80049b6 <create_chain+0xce>
 8004902:	2701      	movs	r7, #1
 8004904:	463c      	mov	r4, r7
 8004906:	f8cd b004 	str.w	fp, [sp, #4]
		ncl++;							/* Next cluster */
 800490a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800490c:	429c      	cmp	r4, r3
 800490e:	d36d      	bcc.n	80049ec <create_chain+0x104>
			if (ncl > scl) return 0;	/* No free cluster */
 8004910:	2f01      	cmp	r7, #1
 8004912:	f240 8179 	bls.w	8004c08 <create_chain+0x320>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004916:	2b02      	cmp	r3, #2
 8004918:	d948      	bls.n	80049ac <create_chain+0xc4>
		switch (fs->fs_type) {
 800491a:	f895 3200 	ldrb.w	r3, [r5, #512]	; 0x200
			ncl = 2;
 800491e:	2402      	movs	r4, #2
		switch (fs->fs_type) {
 8004920:	2b02      	cmp	r3, #2
 8004922:	d069      	beq.n	80049f8 <create_chain+0x110>
 8004924:	2b03      	cmp	r3, #3
 8004926:	f000 80b3 	beq.w	8004a90 <create_chain+0x1a8>
 800492a:	2b01      	cmp	r3, #1
 800492c:	d13e      	bne.n	80049ac <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800492e:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
			bc = (UINT)clst; bc += bc / 2;
 8004932:	eb04 0654 	add.w	r6, r4, r4, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004936:	f8d5 8230 	ldr.w	r8, [r5, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800493a:	eb02 2a56 	add.w	sl, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800493e:	45c2      	cmp	sl, r8
 8004940:	f000 80e1 	beq.w	8004b06 <create_chain+0x21e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004944:	f895 2204 	ldrb.w	r2, [r5, #516]	; 0x204
 8004948:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 800494c:	b1ba      	cbz	r2, 800497e <create_chain+0x96>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800494e:	4642      	mov	r2, r8
 8004950:	4629      	mov	r1, r5
 8004952:	f7fe fed7 	bl	8003704 <disk_write>
 8004956:	2800      	cmp	r0, #0
 8004958:	d142      	bne.n	80049e0 <create_chain+0xf8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800495a:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 800495e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004962:	eba8 0202 	sub.w	r2, r8, r2
 8004966:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004968:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800496c:	d205      	bcs.n	800497a <create_chain+0x92>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800496e:	f895 9203 	ldrb.w	r9, [r5, #515]	; 0x203
 8004972:	f1b9 0f01 	cmp.w	r9, #1
 8004976:	f200 8139 	bhi.w	8004bec <create_chain+0x304>
 800497a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800497e:	2301      	movs	r3, #1
 8004980:	4652      	mov	r2, sl
 8004982:	4629      	mov	r1, r5
 8004984:	f7fe feb0 	bl	80036e8 <disk_read>
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 80b7 	beq.w	8004afc <create_chain+0x214>
			fs->winsect = sector;
 800498e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8004992:	4620      	mov	r0, r4
			fs->winsect = sector;
 8004994:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
}
 8004998:	b003      	add	sp, #12
 800499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800499e:	2901      	cmp	r1, #1
 80049a0:	d904      	bls.n	80049ac <create_chain+0xc4>
 80049a2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 80049a6:	4299      	cmp	r1, r3
 80049a8:	f0c0 80fc 	bcc.w	8004ba4 <create_chain+0x2bc>
			val = 1;	/* Internal error */
 80049ac:	2401      	movs	r4, #1
}
 80049ae:	4620      	mov	r0, r4
 80049b0:	b003      	add	sp, #12
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80049b6:	429f      	cmp	r7, r3
 80049b8:	bf28      	it	cs
 80049ba:	2701      	movcs	r7, #1
 80049bc:	e7a2      	b.n	8004904 <create_chain+0x1c>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80049be:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 80049c2:	f8dd b004 	ldr.w	fp, [sp, #4]
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	d9f0      	bls.n	80049ac <create_chain+0xc4>
 80049ca:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f7ff fe25 	bl	8004620 <put_fat.part.10>
	if (res == FR_OK && clst != 0) {
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f000 811b 	beq.w	8004c12 <create_chain+0x32a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80049dc:	2801      	cmp	r0, #1
 80049de:	d1e5      	bne.n	80049ac <create_chain+0xc4>
			fs->winsect = sector;
 80049e0:	f04f 34ff 	mov.w	r4, #4294967295
}
 80049e4:	4620      	mov	r0, r4
 80049e6:	b003      	add	sp, #12
 80049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80049ec:	2c01      	cmp	r4, #1
 80049ee:	d9dd      	bls.n	80049ac <create_chain+0xc4>
		switch (fs->fs_type) {
 80049f0:	f895 3200 	ldrb.w	r3, [r5, #512]	; 0x200
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d195      	bne.n	8004924 <create_chain+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049f8:	f8d5 6224 	ldr.w	r6, [r5, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 80049fc:	f8d5 8230 	ldr.w	r8, [r5, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a00:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a04:	4546      	cmp	r6, r8
 8004a06:	d035      	beq.n	8004a74 <create_chain+0x18c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a08:	f895 3204 	ldrb.w	r3, [r5, #516]	; 0x204
 8004a0c:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8004a10:	b33b      	cbz	r3, 8004a62 <create_chain+0x17a>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004a12:	2301      	movs	r3, #1
 8004a14:	4642      	mov	r2, r8
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fe fe74 	bl	8003704 <disk_write>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d1df      	bne.n	80049e0 <create_chain+0xf8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a20:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8004a24:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004a28:	eba8 0202 	sub.w	r2, r8, r2
 8004a2c:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004a2e:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a32:	d214      	bcs.n	8004a5e <create_chain+0x176>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a34:	f895 9203 	ldrb.w	r9, [r5, #515]	; 0x203
 8004a38:	f1b9 0f01 	cmp.w	r9, #1
 8004a3c:	d802      	bhi.n	8004a44 <create_chain+0x15c>
 8004a3e:	e00e      	b.n	8004a5e <create_chain+0x176>
 8004a40:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
					wsect += fs->fsize;
 8004a44:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a46:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004a4a:	4642      	mov	r2, r8
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4629      	mov	r1, r5
 8004a50:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8004a54:	f7fe fe56 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a58:	f1b9 0f01 	cmp.w	r9, #1
 8004a5c:	d1f0      	bne.n	8004a40 <create_chain+0x158>
 8004a5e:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004a62:	2301      	movs	r3, #1
 8004a64:	4632      	mov	r2, r6
 8004a66:	4629      	mov	r1, r5
 8004a68:	f7fe fe3e 	bl	80036e8 <disk_read>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d18e      	bne.n	800498e <create_chain+0xa6>
			fs->winsect = sector;
 8004a70:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004a74:	0063      	lsls	r3, r4, #1
 8004a76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
			val = LD_WORD(p);
 8004a7a:	5aee      	ldrh	r6, [r5, r3]
		if (cs == 0) break;				/* Found a free cluster */
 8004a7c:	2e00      	cmp	r6, #0
 8004a7e:	d09e      	beq.n	80049be <create_chain+0xd6>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004a80:	2e01      	cmp	r6, #1
 8004a82:	d093      	beq.n	80049ac <create_chain+0xc4>
		if (ncl == scl) return 0;		/* No free cluster */
 8004a84:	42a7      	cmp	r7, r4
 8004a86:	f000 80bf 	beq.w	8004c08 <create_chain+0x320>
 8004a8a:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8004a8e:	e73c      	b.n	800490a <create_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a90:	f8d5 6224 	ldr.w	r6, [r5, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a94:	f8d5 8230 	ldr.w	r8, [r5, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a98:	eb06 16d4 	add.w	r6, r6, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a9c:	4546      	cmp	r6, r8
 8004a9e:	d026      	beq.n	8004aee <create_chain+0x206>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004aa0:	f895 3204 	ldrb.w	r3, [r5, #516]	; 0x204
 8004aa4:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8004aa8:	b1bb      	cbz	r3, 8004ada <create_chain+0x1f2>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004aaa:	2301      	movs	r3, #1
 8004aac:	4642      	mov	r2, r8
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f7fe fe28 	bl	8003704 <disk_write>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	d193      	bne.n	80049e0 <create_chain+0xf8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ab8:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8004abc:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004ac0:	eba8 0202 	sub.w	r2, r8, r2
 8004ac4:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004ac6:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
 8004aca:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ace:	d204      	bcs.n	8004ada <create_chain+0x1f2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ad0:	f895 9203 	ldrb.w	r9, [r5, #515]	; 0x203
 8004ad4:	f1b9 0f01 	cmp.w	r9, #1
 8004ad8:	d878      	bhi.n	8004bcc <create_chain+0x2e4>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004ada:	2301      	movs	r3, #1
 8004adc:	4632      	mov	r2, r6
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fe fe02 	bl	80036e8 <disk_read>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	f47f af52 	bne.w	800498e <create_chain+0xa6>
			fs->winsect = sector;
 8004aea:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004aee:	00a3      	lsls	r3, r4, #2
 8004af0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004af4:	58ee      	ldr	r6, [r5, r3]
 8004af6:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8004afa:	e7bf      	b.n	8004a7c <create_chain+0x194>
			fs->winsect = sector;
 8004afc:	46d0      	mov	r8, sl
 8004afe:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8004b02:	f8c5 a230 	str.w	sl, [r5, #560]	; 0x230
			wc = fs->win.d8[bc++ % SS(fs)];
 8004b06:	f106 0a01 	add.w	sl, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b0a:	eb02 295a 	add.w	r9, r2, sl, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8004b0e:	f3c6 0608 	ubfx	r6, r6, #0, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b12:	45c1      	cmp	r9, r8
			wc = fs->win.d8[bc++ % SS(fs)];
 8004b14:	5dae      	ldrb	r6, [r5, r6]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b16:	d039      	beq.n	8004b8c <create_chain+0x2a4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b18:	f895 3204 	ldrb.w	r3, [r5, #516]	; 0x204
 8004b1c:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8004b20:	b353      	cbz	r3, 8004b78 <create_chain+0x290>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004b22:	2301      	movs	r3, #1
 8004b24:	4642      	mov	r2, r8
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fe fdec 	bl	8003704 <disk_write>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f47f af57 	bne.w	80049e0 <create_chain+0xf8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b32:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8004b36:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004b3a:	eba8 0202 	sub.w	r2, r8, r2
 8004b3e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004b40:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
 8004b44:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b48:	d216      	bcs.n	8004b78 <create_chain+0x290>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b4a:	f895 b203 	ldrb.w	fp, [r5, #515]	; 0x203
 8004b4e:	f1bb 0f01 	cmp.w	fp, #1
 8004b52:	d804      	bhi.n	8004b5e <create_chain+0x276>
 8004b54:	e010      	b.n	8004b78 <create_chain+0x290>
 8004b56:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004b5a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
					wsect += fs->fsize;
 8004b5e:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b60:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004b64:	4642      	mov	r2, r8
 8004b66:	2301      	movs	r3, #1
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f7fe fdcb 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b6e:	f1bb 0f01 	cmp.w	fp, #1
 8004b72:	d1f0      	bne.n	8004b56 <create_chain+0x26e>
 8004b74:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004b78:	2301      	movs	r3, #1
 8004b7a:	464a      	mov	r2, r9
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	f7fe fdb3 	bl	80036e8 <disk_read>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	f47f af03 	bne.w	800498e <create_chain+0xa6>
			fs->winsect = sector;
 8004b88:	f8c5 9230 	str.w	r9, [r5, #560]	; 0x230
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004b8c:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 8004b90:	f815 300a 	ldrb.w	r3, [r5, sl]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004b94:	07e1      	lsls	r1, r4, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004b96:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004b9a:	bf4c      	ite	mi
 8004b9c:	0936      	lsrmi	r6, r6, #4
 8004b9e:	f3c6 060b 	ubfxpl	r6, r6, #0, #12
 8004ba2:	e76b      	b.n	8004a7c <create_chain+0x194>
 8004ba4:	f7ff f924 	bl	8003df0 <get_fat.part.9>
		if (cs < 2) return 1;			/* Invalid value */
 8004ba8:	2801      	cmp	r0, #1
 8004baa:	4604      	mov	r4, r0
 8004bac:	f67f aefe 	bls.w	80049ac <create_chain+0xc4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	f43f af15 	beq.w	80049e0 <create_chain+0xf8>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004bb6:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8004bba:	42a3      	cmp	r3, r4
 8004bbc:	f63f aef7 	bhi.w	80049ae <create_chain+0xc6>
 8004bc0:	465f      	mov	r7, fp
 8004bc2:	e69f      	b.n	8004904 <create_chain+0x1c>
 8004bc4:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8004bc8:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
					wsect += fs->fsize;
 8004bcc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bce:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	f7fe fd94 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bdc:	f1b9 0f01 	cmp.w	r9, #1
 8004be0:	d1f0      	bne.n	8004bc4 <create_chain+0x2dc>
 8004be2:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8004be6:	e778      	b.n	8004ada <create_chain+0x1f2>
 8004be8:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
					wsect += fs->fsize;
 8004bec:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004bee:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004bf2:	4642      	mov	r2, r8
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8004bfc:	f7fe fd82 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c00:	f1b9 0f01 	cmp.w	r9, #1
 8004c04:	d1f0      	bne.n	8004be8 <create_chain+0x300>
 8004c06:	e6b8      	b.n	800497a <create_chain+0x92>
			if (ncl > scl) return 0;	/* No free cluster */
 8004c08:	2400      	movs	r4, #0
}
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	b003      	add	sp, #12
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_OK && clst != 0) {
 8004c12:	f1bb 0f00 	cmp.w	fp, #0
 8004c16:	d010      	beq.n	8004c3a <create_chain+0x352>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004c18:	f1bb 0f01 	cmp.w	fp, #1
 8004c1c:	f67f aec6 	bls.w	80049ac <create_chain+0xc4>
 8004c20:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8004c24:	459b      	cmp	fp, r3
 8004c26:	f4bf aec1 	bcs.w	80049ac <create_chain+0xc4>
 8004c2a:	4659      	mov	r1, fp
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7ff fcf6 	bl	8004620 <put_fat.part.10>
	if (res == FR_OK) {
 8004c34:	2800      	cmp	r0, #0
 8004c36:	f47f aed1 	bne.w	80049dc <create_chain+0xf4>
		if (fs->free_clust != 0xFFFFFFFF) {
 8004c3a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		fs->last_clust = ncl;			/* Update FSINFO */
 8004c3e:	f8c5 4210 	str.w	r4, [r5, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	f43f aeb3 	beq.w	80049ae <create_chain+0xc6>
			fs->fsi_flag |= 1;
 8004c48:	f895 2205 	ldrb.w	r2, [r5, #517]	; 0x205
			fs->free_clust--;
 8004c4c:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8004c52:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
			fs->fsi_flag |= 1;
 8004c56:	f885 2205 	strb.w	r2, [r5, #517]	; 0x205
 8004c5a:	e6a8      	b.n	80049ae <create_chain+0xc6>

08004c5c <f_write.part.14>:
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004c5c:	f8d0 c208 	ldr.w	ip, [r0, #520]	; 0x208
FRESULT f_write (
 8004c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004c64:	eb1c 0f02 	cmn.w	ip, r2
FRESULT f_write (
 8004c68:	4604      	mov	r4, r0
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8004c6a:	f080 80b7 	bcs.w	8004ddc <f_write.part.14+0x180>
 8004c6e:	4615      	mov	r5, r2

	for ( ;  btw;							/* Repeat until all data written */
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	f000 80b3 	beq.w	8004ddc <f_write.part.14+0x180>
 8004c76:	460f      	mov	r7, r1
 8004c78:	4698      	mov	r8, r3
 8004c7a:	f500 7600 	add.w	r6, r0, #512	; 0x200
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8004c7e:	f3cc 0308 	ubfx	r3, ip, #0, #9
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d16c      	bne.n	8004d60 <f_write.part.14+0x104>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004c86:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004c8a:	ea4f 235c 	mov.w	r3, ip, lsr #9
 8004c8e:	f890 e202 	ldrb.w	lr, [r0, #514]	; 0x202
 8004c92:	f10e 3bff 	add.w	fp, lr, #4294967295
 8004c96:	ea0b 0b03 	and.w	fp, fp, r3
			if (!csect) {					/* On the cluster boundary? */
 8004c9a:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8004c9e:	d115      	bne.n	8004ccc <f_write.part.14+0x70>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004ca0:	f1bc 0f00 	cmp.w	ip, #0
 8004ca4:	f040 80be 	bne.w	8004e24 <f_write.part.14+0x1c8>
					clst = fp->sclust;		/* Follow from the origin */
 8004ca8:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8107 	beq.w	8004ec0 <f_write.part.14+0x264>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	f000 8134 	beq.w	8004f20 <f_write.part.14+0x2c4>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	f000 80d6 	beq.w	8004e6a <f_write.part.14+0x20e>
				fp->clust = clst;			/* Update current cluster */
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8004cbe:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8004cc2:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8004cc6:	b90a      	cbnz	r2, 8004ccc <f_write.part.14+0x70>
 8004cc8:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8004ccc:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004cd0:	065b      	lsls	r3, r3, #25
 8004cd2:	f100 8094 	bmi.w	8004dfe <f_write.part.14+0x1a2>
	clst -= 2;
 8004cd6:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004cda:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
	clst -= 2;
 8004cde:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ce0:	3b02      	subs	r3, #2
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	f080 8112 	bcs.w	8004f0c <f_write.part.14+0x2b0>
	return clst * fs->csize + fs->database;
 8004ce8:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8004cec:	f8d0 122c 	ldr.w	r1, [r0, #556]	; 0x22c
 8004cf0:	fb03 1202 	mla	r2, r3, r2, r1
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	f000 8109 	beq.w	8004f0c <f_write.part.14+0x2b0>
			sect += csect;
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004cfa:	ea5f 2955 	movs.w	r9, r5, lsr #9
			sect += csect;
 8004cfe:	eb02 0a0b 	add.w	sl, r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004d02:	d01e      	beq.n	8004d42 <f_write.part.14+0xe6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004d04:	eb0b 0209 	add.w	r2, fp, r9
 8004d08:	4293      	cmp	r3, r2
					cc = fp->fs->csize - csect;
 8004d0a:	bf38      	it	cc
 8004d0c:	eba3 090b 	subcc.w	r9, r3, fp
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8004d10:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004d14:	464b      	mov	r3, r9
 8004d16:	4652      	mov	r2, sl
 8004d18:	4639      	mov	r1, r7
 8004d1a:	f7fe fcf3 	bl	8003704 <disk_write>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f000 80ab 	beq.w	8004e7a <f_write.part.14+0x21e>
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 8004d24:	2501      	movs	r5, #1
 8004d26:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004d2a:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
	if (fs &&
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80a0 	beq.w	8004e74 <f_write.part.14+0x218>
		ff_rel_grant(fs->sobj);
 8004d34:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8004d38:	f002 fc4c 	bl	80075d4 <ff_rel_grant>
						ABORT(fp->fs, FR_DISK_ERR);
 8004d3c:	4628      	mov	r0, r5

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 8004d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8004d42:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004d46:	f8d4 c208 	ldr.w	ip, [r4, #520]	; 0x208
 8004d4a:	459a      	cmp	sl, r3
 8004d4c:	d004      	beq.n	8004d58 <f_write.part.14+0xfc>
				if (fp->fptr < fp->fsize &&
 8004d4e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8004d52:	4563      	cmp	r3, ip
 8004d54:	f200 809f 	bhi.w	8004e96 <f_write.part.14+0x23a>
			fp->dsect = sect;
 8004d58:	f8c4 a218 	str.w	sl, [r4, #536]	; 0x218
 8004d5c:	f3cc 0308 	ubfx	r3, ip, #0, #9
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8004d60:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8004d64:	42aa      	cmp	r2, r5
 8004d66:	bf28      	it	cs
 8004d68:	462a      	movcs	r2, r5
	while (cnt >= sizeof (int)) {
 8004d6a:	2a03      	cmp	r2, #3
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8004d6c:	4423      	add	r3, r4
	while (cnt >= sizeof (int)) {
 8004d6e:	f240 808f 	bls.w	8004e90 <f_write.part.14+0x234>
 8004d72:	1f11      	subs	r1, r2, #4
 8004d74:	f021 0103 	bic.w	r1, r1, #3
 8004d78:	f101 0e04 	add.w	lr, r1, #4
 8004d7c:	eb03 090e 	add.w	r9, r3, lr
 8004d80:	1f39      	subs	r1, r7, #4
		*(int*)d = *(int*)s;
 8004d82:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8004d86:	f843 0b04 	str.w	r0, [r3], #4
	while (cnt >= sizeof (int)) {
 8004d8a:	454b      	cmp	r3, r9
 8004d8c:	d1f9      	bne.n	8004d82 <f_write.part.14+0x126>
	while (cnt--)
 8004d8e:	f012 0003 	ands.w	r0, r2, #3
 8004d92:	eb07 010e 	add.w	r1, r7, lr
 8004d96:	d00f      	beq.n	8004db8 <f_write.part.14+0x15c>
		*d++ = *s++;
 8004d98:	f891 c000 	ldrb.w	ip, [r1]
	while (cnt--)
 8004d9c:	2801      	cmp	r0, #1
		*d++ = *s++;
 8004d9e:	f883 c000 	strb.w	ip, [r3]
	while (cnt--)
 8004da2:	d007      	beq.n	8004db4 <f_write.part.14+0x158>
		*d++ = *s++;
 8004da4:	f891 c001 	ldrb.w	ip, [r1, #1]
	while (cnt--)
 8004da8:	2802      	cmp	r0, #2
		*d++ = *s++;
 8004daa:	f883 c001 	strb.w	ip, [r3, #1]
 8004dae:	bf1c      	itt	ne
 8004db0:	7889      	ldrbne	r1, [r1, #2]
 8004db2:	7099      	strbne	r1, [r3, #2]
 8004db4:	f8d4 c208 	ldr.w	ip, [r4, #520]	; 0x208
		fp->flag |= FA__DIRTY;
 8004db8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc8:	4494      	add	ip, r2
 8004dca:	4413      	add	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
 8004dcc:	1aad      	subs	r5, r5, r2
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004dce:	f8c4 c208 	str.w	ip, [r4, #520]	; 0x208
 8004dd2:	4417      	add	r7, r2
 8004dd4:	f8c8 3000 	str.w	r3, [r8]
	for ( ;  btw;							/* Repeat until all data written */
 8004dd8:	f47f af51 	bne.w	8004c7e <f_write.part.14+0x22>
 8004ddc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004de0:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8004de4:	4563      	cmp	r3, ip
 8004de6:	d201      	bcs.n	8004dec <f_write.part.14+0x190>
 8004de8:	f8c4 c20c 	str.w	ip, [r4, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004dec:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
	if (fs &&
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0a0      	beq.n	8004d3e <f_write.part.14+0xe2>
 8004dfc:	e02f      	b.n	8004e5e <f_write.part.14+0x202>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004dfe:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004e02:	2301      	movs	r3, #1
 8004e04:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8004e08:	4621      	mov	r1, r4
 8004e0a:	f7fe fc7b 	bl	8003704 <disk_write>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d188      	bne.n	8004d24 <f_write.part.14+0xc8>
				fp->flag &= ~FA__DIRTY;
 8004e12:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004e16:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8004e22:	e758      	b.n	8004cd6 <f_write.part.14+0x7a>
					if (fp->cltbl)
 8004e24:	f8d4 1224 	ldr.w	r1, [r4, #548]	; 0x224
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d053      	beq.n	8004ed4 <f_write.part.14+0x278>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e2c:	684a      	ldr	r2, [r1, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004e2e:	fbb3 f3fe 	udiv	r3, r3, lr
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e32:	3104      	adds	r1, #4
		if (!ncl) return 0;		/* End of table? (error) */
 8004e34:	b14a      	cbz	r2, 8004e4a <f_write.part.14+0x1ee>
		if (cl < ncl) break;	/* In this fragment? */
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d202      	bcs.n	8004e40 <f_write.part.14+0x1e4>
 8004e3a:	e039      	b.n	8004eb0 <f_write.part.14+0x254>
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d837      	bhi.n	8004eb0 <f_write.part.14+0x254>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e40:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e42:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 8004e46:	2a00      	cmp	r2, #0
 8004e48:	d1f8      	bne.n	8004e3c <f_write.part.14+0x1e0>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004e4a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8004e4e:	459c      	cmp	ip, r3
 8004e50:	d8ca      	bhi.n	8004de8 <f_write.part.14+0x18c>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004e52:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004e56:	f043 0320 	orr.w	r3, r3, #32
 8004e5a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
		ff_rel_grant(fs->sobj);
 8004e5e:	f8d0 020c 	ldr.w	r0, [r0, #524]	; 0x20c
 8004e62:	f002 fbb7 	bl	80075d4 <ff_rel_grant>
	LEAVE_FF(fp->fs, FR_OK);
 8004e66:	2000      	movs	r0, #0
 8004e68:	e769      	b.n	8004d3e <f_write.part.14+0xe2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004e6a:	2501      	movs	r5, #1
 8004e6c:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
	if (fs &&
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d14e      	bne.n	8004f12 <f_write.part.14+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004e74:	2001      	movs	r0, #1
}
 8004e76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004e7a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8004e7e:	eba2 020a 	sub.w	r2, r2, sl
 8004e82:	4591      	cmp	r9, r2
 8004e84:	d831      	bhi.n	8004eea <f_write.part.14+0x28e>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8004e86:	ea4f 2249 	mov.w	r2, r9, lsl #9
 8004e8a:	f8d4 c208 	ldr.w	ip, [r4, #520]	; 0x208
 8004e8e:	e799      	b.n	8004dc4 <f_write.part.14+0x168>
	while (cnt >= sizeof (int)) {
 8004e90:	4639      	mov	r1, r7
 8004e92:	4610      	mov	r0, r2
 8004e94:	e780      	b.n	8004d98 <f_write.part.14+0x13c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8004e96:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	4652      	mov	r2, sl
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	f7fe fc22 	bl	80036e8 <disk_read>
				if (fp->fptr < fp->fsize &&
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f47f af3d 	bne.w	8004d24 <f_write.part.14+0xc8>
 8004eaa:	f8d4 c208 	ldr.w	ip, [r4, #520]	; 0x208
 8004eae:	e753      	b.n	8004d58 <f_write.part.14+0xfc>
	return cl + *tbl;	/* Return the cluster number */
 8004eb0:	684a      	ldr	r2, [r1, #4]
 8004eb2:	4413      	add	r3, r2
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f aefc 	bne.w	8004cb2 <f_write.part.14+0x56>
 8004eba:	f8d4 c208 	ldr.w	ip, [r4, #520]	; 0x208
 8004ebe:	e78f      	b.n	8004de0 <f_write.part.14+0x184>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	f7ff fd11 	bl	80048e8 <create_chain>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f47f aef0 	bne.w	8004cb2 <f_write.part.14+0x56>
 8004ed2:	e7f2      	b.n	8004eba <f_write.part.14+0x25e>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004ed4:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8004ed8:	f7ff fd06 	bl	80048e8 <create_chain>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f47f aee5 	bne.w	8004cb2 <f_write.part.14+0x56>
 8004ee8:	e7e7      	b.n	8004eba <f_write.part.14+0x25e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8004eea:	4623      	mov	r3, r4
 8004eec:	eb07 2242 	add.w	r2, r7, r2, lsl #9
 8004ef0:	3a04      	subs	r2, #4
		*(int*)d = *(int*)s;
 8004ef2:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8004ef6:	f843 1b04 	str.w	r1, [r3], #4
	while (cnt >= sizeof (int)) {
 8004efa:	42b3      	cmp	r3, r6
 8004efc:	d1f9      	bne.n	8004ef2 <f_write.part.14+0x296>
					fp->flag &= ~FA__DIRTY;
 8004efe:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f06:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8004f0a:	e7bc      	b.n	8004e86 <f_write.part.14+0x22a>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004f0c:	2502      	movs	r5, #2
 8004f0e:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
		ff_rel_grant(fs->sobj);
 8004f12:	f8d0 020c 	ldr.w	r0, [r0, #524]	; 0x20c
 8004f16:	f002 fb5d 	bl	80075d4 <ff_rel_grant>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004f1a:	4628      	mov	r0, r5
}
 8004f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004f20:	2502      	movs	r5, #2
 8004f22:	f884 5207 	strb.w	r5, [r4, #519]	; 0x207
	if (fs &&
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1f3      	bne.n	8004f12 <f_write.part.14+0x2b6>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e7f6      	b.n	8004f1c <f_write.part.14+0x2c0>
 8004f2e:	bf00      	nop

08004f30 <dir_sdi>:
{
 8004f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004f34:	f8d0 6208 	ldr.w	r6, [r0, #520]	; 0x208
{
 8004f38:	b083      	sub	sp, #12
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004f3a:	2e01      	cmp	r6, #1
{
 8004f3c:	4607      	mov	r7, r0
	dp->index = (WORD)idx;	/* Current index */
 8004f3e:	f8a0 1206 	strh.w	r1, [r0, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004f42:	f000 811b 	beq.w	800517c <dir_sdi+0x24c>
 8004f46:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8004f4a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004f4e:	42b3      	cmp	r3, r6
 8004f50:	f240 8114 	bls.w	800517c <dir_sdi+0x24c>
 8004f54:	460d      	mov	r5, r1
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	f000 8114 	beq.w	8005184 <dir_sdi+0x254>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004f5c:	f894 8202 	ldrb.w	r8, [r4, #514]	; 0x202
 8004f60:	ea4f 1808 	mov.w	r8, r8, lsl #4
		while (idx >= ic) {	/* Follow cluster chain */
 8004f64:	4545      	cmp	r5, r8
 8004f66:	f0c0 8103 	bcc.w	8005170 <dir_sdi+0x240>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004f6a:	2e01      	cmp	r6, #1
 8004f6c:	f240 8106 	bls.w	800517c <dir_sdi+0x24c>
 8004f70:	42b3      	cmp	r3, r6
 8004f72:	f240 8103 	bls.w	800517c <dir_sdi+0x24c>
		switch (fs->fs_type) {
 8004f76:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	f000 8124 	beq.w	80051c8 <dir_sdi+0x298>
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	f000 80a1 	beq.w	80050c8 <dir_sdi+0x198>
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	f040 80f8 	bne.w	800517c <dir_sdi+0x24c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f8c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
			bc = (UINT)clst; bc += bc / 2;
 8004f90:	eb06 0a56 	add.w	sl, r6, r6, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f94:	f8d4 9230 	ldr.w	r9, [r4, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f98:	eb02 2b5a 	add.w	fp, r2, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f9c:	45cb      	cmp	fp, r9
 8004f9e:	d03d      	beq.n	800501c <dir_sdi+0xec>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fa0:	f894 2204 	ldrb.w	r2, [r4, #516]	; 0x204
 8004fa4:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004fa8:	b35a      	cbz	r2, 8005002 <dir_sdi+0xd2>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004faa:	464a      	mov	r2, r9
 8004fac:	4621      	mov	r1, r4
 8004fae:	f7fe fba9 	bl	8003704 <disk_write>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	f040 8156 	bne.w	8005264 <dir_sdi+0x334>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fb8:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8004fbc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004fc0:	eba9 0202 	sub.w	r2, r9, r2
 8004fc4:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8004fc6:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fca:	d218      	bcs.n	8004ffe <dir_sdi+0xce>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fcc:	f894 2203 	ldrb.w	r2, [r4, #515]	; 0x203
 8004fd0:	2a01      	cmp	r2, #1
 8004fd2:	d914      	bls.n	8004ffe <dir_sdi+0xce>
 8004fd4:	f8cd 8000 	str.w	r8, [sp]
 8004fd8:	4690      	mov	r8, r2
 8004fda:	e001      	b.n	8004fe0 <dir_sdi+0xb0>
 8004fdc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8004fe0:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fe2:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004fe6:	464a      	mov	r2, r9
 8004fe8:	2301      	movs	r3, #1
 8004fea:	4621      	mov	r1, r4
 8004fec:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004ff0:	f7fe fb88 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ff4:	f1b8 0f01 	cmp.w	r8, #1
 8004ff8:	d1f0      	bne.n	8004fdc <dir_sdi+0xac>
 8004ffa:	f8dd 8000 	ldr.w	r8, [sp]
 8004ffe:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005002:	2301      	movs	r3, #1
 8005004:	465a      	mov	r2, fp
 8005006:	4621      	mov	r1, r4
 8005008:	f7fe fb6e 	bl	80036e8 <disk_read>
 800500c:	2800      	cmp	r0, #0
 800500e:	f040 8115 	bne.w	800523c <dir_sdi+0x30c>
			fs->winsect = sector;
 8005012:	46d9      	mov	r9, fp
 8005014:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8005018:	f8c4 b230 	str.w	fp, [r4, #560]	; 0x230
			wc = fs->win.d8[bc++ % SS(fs)];
 800501c:	f10a 0b01 	add.w	fp, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005020:	eb02 235b 	add.w	r3, r2, fp, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8005024:	f3ca 0a08 	ubfx	sl, sl, #0, #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005028:	454b      	cmp	r3, r9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800502a:	9300      	str	r3, [sp, #0]
			wc = fs->win.d8[bc++ % SS(fs)];
 800502c:	f814 a00a 	ldrb.w	sl, [r4, sl]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005030:	d03e      	beq.n	80050b0 <dir_sdi+0x180>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005032:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 8005036:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800503a:	b373      	cbz	r3, 800509a <dir_sdi+0x16a>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800503c:	2301      	movs	r3, #1
 800503e:	464a      	mov	r2, r9
 8005040:	4621      	mov	r1, r4
 8005042:	f7fe fb5f 	bl	8003704 <disk_write>
 8005046:	2800      	cmp	r0, #0
 8005048:	f040 810c 	bne.w	8005264 <dir_sdi+0x334>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800504c:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8005050:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005054:	eba9 0202 	sub.w	r2, r9, r2
 8005058:	429a      	cmp	r2, r3
			fs->wflag = 0;
 800505a:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 800505e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005062:	d21a      	bcs.n	800509a <dir_sdi+0x16a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005064:	f894 2203 	ldrb.w	r2, [r4, #515]	; 0x203
 8005068:	2a01      	cmp	r2, #1
 800506a:	d916      	bls.n	800509a <dir_sdi+0x16a>
 800506c:	f8cd 8004 	str.w	r8, [sp, #4]
 8005070:	4690      	mov	r8, r2
 8005072:	e003      	b.n	800507c <dir_sdi+0x14c>
 8005074:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005078:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800507c:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800507e:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005082:	464a      	mov	r2, r9
 8005084:	2301      	movs	r3, #1
 8005086:	4621      	mov	r1, r4
 8005088:	f7fe fb3c 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800508c:	f1b8 0f01 	cmp.w	r8, #1
 8005090:	d1f0      	bne.n	8005074 <dir_sdi+0x144>
 8005092:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005096:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800509a:	2301      	movs	r3, #1
 800509c:	9a00      	ldr	r2, [sp, #0]
 800509e:	4621      	mov	r1, r4
 80050a0:	f7fe fb22 	bl	80036e8 <disk_read>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f040 80c9 	bne.w	800523c <dir_sdi+0x30c>
			fs->winsect = sector;
 80050aa:	9b00      	ldr	r3, [sp, #0]
 80050ac:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80050b0:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 80050b4:	f814 300b 	ldrb.w	r3, [r4, fp]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80050b8:	07f2      	lsls	r2, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80050ba:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80050be:	bf4c      	ite	mi
 80050c0:	091e      	lsrmi	r6, r3, #4
 80050c2:	f3c3 060b 	ubfxpl	r6, r3, #0, #12
 80050c6:	e046      	b.n	8005156 <dir_sdi+0x226>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050c8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 80050cc:	f8d4 a230 	ldr.w	sl, [r4, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050d0:	eb03 19d6 	add.w	r9, r3, r6, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80050d4:	45d1      	cmp	r9, sl
 80050d6:	d038      	beq.n	800514a <dir_sdi+0x21a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80050d8:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 80050dc:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80050e0:	b353      	cbz	r3, 8005138 <dir_sdi+0x208>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80050e2:	2301      	movs	r3, #1
 80050e4:	4652      	mov	r2, sl
 80050e6:	4621      	mov	r1, r4
 80050e8:	f7fe fb0c 	bl	8003704 <disk_write>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f040 80b9 	bne.w	8005264 <dir_sdi+0x334>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80050f2:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80050f6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80050fa:	ebaa 0202 	sub.w	r2, sl, r2
 80050fe:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005100:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8005104:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005108:	d216      	bcs.n	8005138 <dir_sdi+0x208>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800510a:	f894 b203 	ldrb.w	fp, [r4, #515]	; 0x203
 800510e:	f1bb 0f01 	cmp.w	fp, #1
 8005112:	d804      	bhi.n	800511e <dir_sdi+0x1ee>
 8005114:	e010      	b.n	8005138 <dir_sdi+0x208>
 8005116:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800511a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800511e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005120:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005124:	4652      	mov	r2, sl
 8005126:	2301      	movs	r3, #1
 8005128:	4621      	mov	r1, r4
 800512a:	f7fe faeb 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800512e:	f1bb 0f01 	cmp.w	fp, #1
 8005132:	d1f0      	bne.n	8005116 <dir_sdi+0x1e6>
 8005134:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005138:	2301      	movs	r3, #1
 800513a:	464a      	mov	r2, r9
 800513c:	4621      	mov	r1, r4
 800513e:	f7fe fad3 	bl	80036e8 <disk_read>
 8005142:	2800      	cmp	r0, #0
 8005144:	d17a      	bne.n	800523c <dir_sdi+0x30c>
			fs->winsect = sector;
 8005146:	f8c4 9230 	str.w	r9, [r4, #560]	; 0x230
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800514a:	00b6      	lsls	r6, r6, #2
 800514c:	f406 76fe 	and.w	r6, r6, #508	; 0x1fc
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005150:	59a6      	ldr	r6, [r4, r6]
 8005152:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005156:	2e01      	cmp	r6, #1
 8005158:	d910      	bls.n	800517c <dir_sdi+0x24c>
 800515a:	f8d7 4200 	ldr.w	r4, [r7, #512]	; 0x200
 800515e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005162:	42b3      	cmp	r3, r6
 8005164:	d90a      	bls.n	800517c <dir_sdi+0x24c>
			idx -= ic;
 8005166:	eba5 0508 	sub.w	r5, r5, r8
		while (idx >= ic) {	/* Follow cluster chain */
 800516a:	45a8      	cmp	r8, r5
 800516c:	f67f af03 	bls.w	8004f76 <dir_sdi+0x46>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005170:	3b02      	subs	r3, #2
	clst -= 2;
 8005172:	1eb2      	subs	r2, r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005174:	429a      	cmp	r2, r3
 8005176:	d36e      	bcc.n	8005256 <dir_sdi+0x326>
	dp->clust = clst;	/* Current cluster# */
 8005178:	f8c7 620c 	str.w	r6, [r7, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800517c:	2002      	movs	r0, #2
}
 800517e:	b003      	add	sp, #12
 8005180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005184:	f894 2200 	ldrb.w	r2, [r4, #512]	; 0x200
 8005188:	2a03      	cmp	r2, #3
 800518a:	d017      	beq.n	80051bc <dir_sdi+0x28c>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800518c:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
 8005190:	42ab      	cmp	r3, r5
 8005192:	d9f3      	bls.n	800517c <dir_sdi+0x24c>
		sect = dp->fs->dirbase;
 8005194:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
	dp->clust = clst;	/* Current cluster# */
 8005198:	f8c7 620c 	str.w	r6, [r7, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0ed      	beq.n	800517c <dir_sdi+0x24c>
	return FR_OK;
 80051a0:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80051a2:	f005 020f 	and.w	r2, r5, #15
 80051a6:	eb04 1442 	add.w	r4, r4, r2, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80051aa:	eb03 1515 	add.w	r5, r3, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80051ae:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80051b2:	f8c7 5210 	str.w	r5, [r7, #528]	; 0x210
}
 80051b6:	b003      	add	sp, #12
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = dp->fs->dirbase;
 80051bc:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	d0e3      	beq.n	800518c <dir_sdi+0x25c>
 80051c4:	4616      	mov	r6, r2
 80051c6:	e6c9      	b.n	8004f5c <dir_sdi+0x2c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051c8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
	if (sector != fs->winsect) {	/* Window offset changed? */
 80051cc:	f8d4 a230 	ldr.w	sl, [r4, #560]	; 0x230
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051d0:	eb03 2916 	add.w	r9, r3, r6, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80051d4:	45d1      	cmp	r9, sl
 80051d6:	d039      	beq.n	800524c <dir_sdi+0x31c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051d8:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 80051dc:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80051e0:	b333      	cbz	r3, 8005230 <dir_sdi+0x300>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80051e2:	2301      	movs	r3, #1
 80051e4:	4652      	mov	r2, sl
 80051e6:	4621      	mov	r1, r4
 80051e8:	f7fe fa8c 	bl	8003704 <disk_write>
 80051ec:	bbd0      	cbnz	r0, 8005264 <dir_sdi+0x334>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051ee:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80051f2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80051f6:	ebaa 0202 	sub.w	r2, sl, r2
 80051fa:	429a      	cmp	r2, r3
			fs->wflag = 0;
 80051fc:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005200:	d214      	bcs.n	800522c <dir_sdi+0x2fc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005202:	f894 b203 	ldrb.w	fp, [r4, #515]	; 0x203
 8005206:	f1bb 0f01 	cmp.w	fp, #1
 800520a:	d802      	bhi.n	8005212 <dir_sdi+0x2e2>
 800520c:	e00e      	b.n	800522c <dir_sdi+0x2fc>
 800520e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
					wsect += fs->fsize;
 8005212:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005214:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005218:	4652      	mov	r2, sl
 800521a:	2301      	movs	r3, #1
 800521c:	4621      	mov	r1, r4
 800521e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005222:	f7fe fa6f 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005226:	f1bb 0f01 	cmp.w	fp, #1
 800522a:	d1f0      	bne.n	800520e <dir_sdi+0x2de>
 800522c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005230:	2301      	movs	r3, #1
 8005232:	464a      	mov	r2, r9
 8005234:	4621      	mov	r1, r4
 8005236:	f7fe fa57 	bl	80036e8 <disk_read>
 800523a:	b128      	cbz	r0, 8005248 <dir_sdi+0x318>
			fs->winsect = sector;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005240:	2001      	movs	r0, #1
			fs->winsect = sector;
 8005242:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
 8005246:	e79a      	b.n	800517e <dir_sdi+0x24e>
 8005248:	f8c4 9230 	str.w	r9, [r4, #560]	; 0x230
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800524c:	0076      	lsls	r6, r6, #1
 800524e:	f406 76ff 	and.w	r6, r6, #510	; 0x1fe
			val = LD_WORD(p);
 8005252:	5ba6      	ldrh	r6, [r4, r6]
 8005254:	e77f      	b.n	8005156 <dir_sdi+0x226>
	return clst * fs->csize + fs->database;
 8005256:	f894 3202 	ldrb.w	r3, [r4, #514]	; 0x202
 800525a:	f8d4 122c 	ldr.w	r1, [r4, #556]	; 0x22c
 800525e:	fb02 1303 	mla	r3, r2, r3, r1
 8005262:	e799      	b.n	8005198 <dir_sdi+0x268>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005264:	2001      	movs	r0, #1
 8005266:	e78a      	b.n	800517e <dir_sdi+0x24e>

08005268 <dir_register>:
{
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 800526c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
 8005270:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
		*(int*)d = *(int*)s;
 8005274:	68a2      	ldr	r2, [r4, #8]
{
 8005276:	b089      	sub	sp, #36	; 0x24
	fn = dp->fn; lfn = dp->lfn;
 8005278:	9303      	str	r3, [sp, #12]
 800527a:	f3c2 6307 	ubfx	r3, r2, #24, #8
 800527e:	f88d 3017 	strb.w	r3, [sp, #23]
 8005282:	b2db      	uxtb	r3, r3
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005284:	07dd      	lsls	r5, r3, #31
{
 8005286:	4683      	mov	fp, r0
 8005288:	9304      	str	r3, [sp, #16]
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800528a:	f140 823c 	bpl.w	8005706 <dir_register+0x49e>
		*(int*)d = *(int*)s;
 800528e:	e9d4 6500 	ldrd	r6, r5, [r4]
		for (n = 1; n < 100; n++) {
 8005292:	f04f 0801 	mov.w	r8, #1
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005296:	2000      	movs	r0, #0
		for (n = 1; n < 100; n++) {
 8005298:	4643      	mov	r3, r8
 800529a:	b2d7      	uxtb	r7, r2
 800529c:	f3c2 2107 	ubfx	r1, r2, #8, #8
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80052a0:	72e0      	strb	r0, [r4, #11]
 80052a2:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80052a6:	f8cb 0220 	str.w	r0, [fp, #544]	; 0x220
		*(int*)d = *(int*)s;
 80052aa:	e9c4 6500 	strd	r6, r5, [r4]
 80052ae:	9701      	str	r7, [sp, #4]
 80052b0:	b2c8      	uxtb	r0, r1
		*d++ = *s++;
 80052b2:	7227      	strb	r7, [r4, #8]
 80052b4:	72a2      	strb	r2, [r4, #10]
				if (sr & 0x10000) sr ^= 0x11021;
 80052b6:	4fd5      	ldr	r7, [pc, #852]	; (800560c <dir_register+0x3a4>)
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	9002      	str	r0, [sp, #8]
		*d++ = *s++;
 80052bc:	7261      	strb	r1, [r4, #9]
 80052be:	9200      	str	r2, [sp, #0]
		c = (seq % 16) + '0';
 80052c0:	f003 020f 	and.w	r2, r3, #15
 80052c4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		if (c > '9') c += 7;
 80052c8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80052cc:	bf88      	it	hi
 80052ce:	f102 0c37 	addhi.w	ip, r2, #55	; 0x37
	} while (seq);
 80052d2:	091a      	lsrs	r2, r3, #4
		ns[i--] = c;
 80052d4:	f88d c01f 	strb.w	ip, [sp, #31]
	} while (seq);
 80052d8:	f000 81e8 	beq.w	80056ac <dir_register+0x444>
		c = (seq % 16) + '0';
 80052dc:	f002 020f 	and.w	r2, r2, #15
 80052e0:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80052e4:	2939      	cmp	r1, #57	; 0x39
 80052e6:	bf88      	it	hi
 80052e8:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 80052ec:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
 80052ee:	f88d 101e 	strb.w	r1, [sp, #30]
	} while (seq);
 80052f2:	f000 81e6 	beq.w	80056c2 <dir_register+0x45a>
		c = (seq % 16) + '0';
 80052f6:	f002 020f 	and.w	r2, r2, #15
 80052fa:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 80052fe:	2939      	cmp	r1, #57	; 0x39
 8005300:	bf88      	it	hi
 8005302:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 8005306:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
 8005308:	f88d 101d 	strb.w	r1, [sp, #29]
	} while (seq);
 800530c:	f000 81ea 	beq.w	80056e4 <dir_register+0x47c>
		c = (seq % 16) + '0';
 8005310:	f002 020f 	and.w	r2, r2, #15
 8005314:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 8005318:	2939      	cmp	r1, #57	; 0x39
 800531a:	bf88      	it	hi
 800531c:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 8005320:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
 8005322:	f88d 101c 	strb.w	r1, [sp, #28]
	} while (seq);
 8005326:	f000 823f 	beq.w	80057a8 <dir_register+0x540>
		c = (seq % 16) + '0';
 800532a:	f002 020f 	and.w	r2, r2, #15
 800532e:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 8005332:	2939      	cmp	r1, #57	; 0x39
 8005334:	bf88      	it	hi
 8005336:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 800533a:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
 800533c:	f88d 101b 	strb.w	r1, [sp, #27]
	} while (seq);
 8005340:	f000 82bc 	beq.w	80058bc <dir_register+0x654>
		c = (seq % 16) + '0';
 8005344:	f002 020f 	and.w	r2, r2, #15
 8005348:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 800534c:	2939      	cmp	r1, #57	; 0x39
 800534e:	bf88      	it	hi
 8005350:	f102 0137 	addhi.w	r1, r2, #55	; 0x37
	} while (seq);
 8005354:	ea5f 6e13 	movs.w	lr, r3, lsr #24
		ns[i--] = c;
 8005358:	f88d 101a 	strb.w	r1, [sp, #26]
	} while (seq);
 800535c:	f000 82b5 	beq.w	80058ca <dir_register+0x662>
		c = (seq % 16) + '0';
 8005360:	f00e 0e0f 	and.w	lr, lr, #15
 8005364:	f10e 0230 	add.w	r2, lr, #48	; 0x30
		if (c > '9') c += 7;
 8005368:	2a39      	cmp	r2, #57	; 0x39
 800536a:	bf88      	it	hi
 800536c:	f10e 0237 	addhi.w	r2, lr, #55	; 0x37
	} while (seq);
 8005370:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
 8005372:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 8005376:	f000 82ad 	beq.w	80058d4 <dir_register+0x66c>
		c = (seq % 16) + '0';
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f103 0130 	add.w	r1, r3, #48	; 0x30
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005380:	7822      	ldrb	r2, [r4, #0]
		if (c > '9') c += 7;
 8005382:	2939      	cmp	r1, #57	; 0x39
 8005384:	bf88      	it	hi
 8005386:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800538a:	2a20      	cmp	r2, #32
		ns[i--] = c;
 800538c:	f88d 1018 	strb.w	r1, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005390:	f000 842b 	beq.w	8005bea <dir_register+0x982>
		ns[i--] = c;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005398:	f06f 0e01 	mvn.w	lr, #1
 800539c:	2000      	movs	r0, #0
 800539e:	e003      	b.n	80053a8 <dir_register+0x140>
 80053a0:	5c62      	ldrb	r2, [r4, r1]
 80053a2:	4608      	mov	r0, r1
 80053a4:	2a20      	cmp	r2, #32
 80053a6:	d00f      	beq.n	80053c8 <dir_register+0x160>
		if (IsDBCS1(dst[j])) {
 80053a8:	327f      	adds	r2, #127	; 0x7f
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	2a7d      	cmp	r2, #125	; 0x7d
 80053ae:	f100 0101 	add.w	r1, r0, #1
 80053b2:	d803      	bhi.n	80053bc <dir_register+0x154>
			if (j == i - 1) break;
 80053b4:	4570      	cmp	r0, lr
 80053b6:	f000 8174 	beq.w	80056a2 <dir_register+0x43a>
 80053ba:	1c81      	adds	r1, r0, #2
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80053bc:	4299      	cmp	r1, r3
 80053be:	eb04 0a01 	add.w	sl, r4, r1
 80053c2:	f101 0901 	add.w	r9, r1, #1
 80053c6:	d3eb      	bcc.n	80053a0 <dir_register+0x138>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	f240 8121 	bls.w	8005610 <dir_register+0x3a8>
 80053ce:	2220      	movs	r2, #32
	} while (j < 8);
 80053d0:	f1b9 0f07 	cmp.w	r9, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053d4:	f88a 2000 	strb.w	r2, [sl]
	} while (j < 8);
 80053d8:	d861      	bhi.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053da:	1c88      	adds	r0, r1, #2
	} while (j < 8);
 80053dc:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053de:	f804 2009 	strb.w	r2, [r4, r9]
	} while (j < 8);
 80053e2:	d05c      	beq.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053e4:	2b07      	cmp	r3, #7
 80053e6:	f101 0203 	add.w	r2, r1, #3
 80053ea:	eb04 0e00 	add.w	lr, r4, r0
 80053ee:	f200 812d 	bhi.w	800564c <dir_register+0x3e4>
 80053f2:	f10d 0e20 	add.w	lr, sp, #32
 80053f6:	449e      	add	lr, r3
 80053f8:	f81e 9c08 	ldrb.w	r9, [lr, #-8]
	} while (j < 8);
 80053fc:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80053fe:	f103 0e01 	add.w	lr, r3, #1
 8005402:	f804 9000 	strb.w	r9, [r4, r0]
	} while (j < 8);
 8005406:	d04a      	beq.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005408:	f1be 0f08 	cmp.w	lr, #8
 800540c:	f000 8124 	beq.w	8005658 <dir_register+0x3f0>
 8005410:	a808      	add	r0, sp, #32
 8005412:	4486      	add	lr, r0
 8005414:	f81e 0c08 	ldrb.w	r0, [lr, #-8]
 8005418:	f101 0904 	add.w	r9, r1, #4
	} while (j < 8);
 800541c:	f1b9 0f08 	cmp.w	r9, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005420:	54a0      	strb	r0, [r4, r2]
 8005422:	f103 0e02 	add.w	lr, r3, #2
	} while (j < 8);
 8005426:	d03a      	beq.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005428:	f1be 0f08 	cmp.w	lr, #8
 800542c:	f101 0005 	add.w	r0, r1, #5
 8005430:	eb04 0209 	add.w	r2, r4, r9
 8005434:	f000 8118 	beq.w	8005668 <dir_register+0x400>
 8005438:	aa08      	add	r2, sp, #32
 800543a:	4496      	add	lr, r2
 800543c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
	} while (j < 8);
 8005440:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005442:	f103 0203 	add.w	r2, r3, #3
 8005446:	f804 e009 	strb.w	lr, [r4, r9]
	} while (j < 8);
 800544a:	d028      	beq.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800544c:	2a08      	cmp	r2, #8
 800544e:	f000 8110 	beq.w	8005672 <dir_register+0x40a>
 8005452:	f10d 0e20 	add.w	lr, sp, #32
 8005456:	4472      	add	r2, lr
 8005458:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800545c:	f101 0e06 	add.w	lr, r1, #6
	} while (j < 8);
 8005460:	f1be 0f08 	cmp.w	lr, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005464:	5422      	strb	r2, [r4, r0]
 8005466:	f103 0304 	add.w	r3, r3, #4
	} while (j < 8);
 800546a:	d018      	beq.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800546c:	2b08      	cmp	r3, #8
 800546e:	f101 0007 	add.w	r0, r1, #7
 8005472:	eb04 020e 	add.w	r2, r4, lr
 8005476:	f000 8104 	beq.w	8005682 <dir_register+0x41a>
 800547a:	aa08      	add	r2, sp, #32
 800547c:	441a      	add	r2, r3
 800547e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
	} while (j < 8);
 8005482:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005484:	f804 200e 	strb.w	r2, [r4, lr]
	} while (j < 8);
 8005488:	d009      	beq.n	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800548a:	2b06      	cmp	r3, #6
 800548c:	f040 80fe 	bne.w	800568c <dir_register+0x424>
	} while (j < 8);
 8005490:	3101      	adds	r1, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005492:	bf08      	it	eq
 8005494:	2320      	moveq	r3, #32
 8005496:	f804 c000 	strb.w	ip, [r4, r0]
 800549a:	bf08      	it	eq
 800549c:	71e3      	strbeq	r3, [r4, #7]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800549e:	2100      	movs	r1, #0
 80054a0:	4658      	mov	r0, fp
 80054a2:	f7ff fd45 	bl	8004f30 <dir_sdi>
	if (res != FR_OK) return res;
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f040 8123 	bne.w	80056f2 <dir_register+0x48a>
 80054ac:	4658      	mov	r0, fp
 80054ae:	f7fe fe27 	bl	8004100 <dir_find.part.11>
			if (res != FR_OK) break;
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f040 811d 	bne.w	80056f2 <dir_register+0x48a>
		for (n = 1; n < 100; n++) {
 80054b8:	f108 0801 	add.w	r8, r8, #1
 80054bc:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 80054c0:	f000 80e9 	beq.w	8005696 <dir_register+0x42e>
		*d++ = *s++;
 80054c4:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80054c6:	f1b8 0f05 	cmp.w	r8, #5
		*d++ = *s++;
 80054ca:	7223      	strb	r3, [r4, #8]
 80054cc:	9b02      	ldr	r3, [sp, #8]
		*(int*)d = *(int*)s;
 80054ce:	e9c4 6500 	strd	r6, r5, [r4]
		*d++ = *s++;
 80054d2:	7263      	strb	r3, [r4, #9]
 80054d4:	9b00      	ldr	r3, [sp, #0]
 80054d6:	72a3      	strb	r3, [r4, #10]
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80054d8:	f240 80ab 	bls.w	8005632 <dir_register+0x3ca>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	f1a3 0c02 	sub.w	ip, r3, #2
 80054e2:	4643      	mov	r3, r8
 80054e4:	e08b      	b.n	80055fe <dir_register+0x396>
				sr = (sr << 1) + (wc & 1);
 80054e6:	f002 0101 	and.w	r1, r2, #1
 80054ea:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80054ee:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 80054f0:	ea4f 0352 	mov.w	r3, r2, lsr #1
				if (sr & 0x10000) sr ^= 0x11021;
 80054f4:	bf48      	it	mi
 80054f6:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005500:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 8005502:	ea4f 0392 	mov.w	r3, r2, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 8005506:	bf48      	it	mi
 8005508:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005512:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 8005514:	ea4f 01d2 	mov.w	r1, r2, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8005518:	bf48      	it	mi
 800551a:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 800551c:	f001 0101 	and.w	r1, r1, #1
 8005520:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005524:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 8005526:	ea4f 1112 	mov.w	r1, r2, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 800552a:	bf48      	it	mi
 800552c:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 800552e:	f001 0101 	and.w	r1, r1, #1
 8005532:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005536:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 8005538:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 800553c:	bf48      	it	mi
 800553e:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005548:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 800554a:	ea4f 1392 	mov.w	r3, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800554e:	bf48      	it	mi
 8005550:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800555a:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 800555c:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8005560:	bf48      	it	mi
 8005562:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 8005564:	f001 0101 	and.w	r1, r1, #1
 8005568:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800556c:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 800556e:	ea4f 2112 	mov.w	r1, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8005572:	bf48      	it	mi
 8005574:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 8005576:	f001 0101 	and.w	r1, r1, #1
 800557a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800557e:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 8005580:	ea4f 2352 	mov.w	r3, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8005584:	bf48      	it	mi
 8005586:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8005590:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 8005592:	ea4f 2392 	mov.w	r3, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8005596:	bf48      	it	mi
 8005598:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055a2:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 80055a4:	ea4f 21d2 	mov.w	r1, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 80055a8:	bf48      	it	mi
 80055aa:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 80055ac:	f001 0101 	and.w	r1, r1, #1
 80055b0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055b4:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 80055b6:	ea4f 3112 	mov.w	r1, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 80055ba:	bf48      	it	mi
 80055bc:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 80055be:	f001 0101 	and.w	r1, r1, #1
 80055c2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055c6:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 80055c8:	ea4f 3352 	mov.w	r3, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 80055cc:	bf48      	it	mi
 80055ce:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055d8:	03c8      	lsls	r0, r1, #15
				wc >>= 1;
 80055da:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 80055de:	bf48      	it	mi
 80055e0:	4079      	eormi	r1, r7
				sr = (sr << 1) + (wc & 1);
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055ea:	03d9      	lsls	r1, r3, #15
				wc >>= 1;
 80055ec:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 80055f0:	bf48      	it	mi
 80055f2:	407b      	eormi	r3, r7
				sr = (sr << 1) + (wc & 1);
 80055f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055f8:	03da      	lsls	r2, r3, #15
 80055fa:	bf48      	it	mi
 80055fc:	407b      	eormi	r3, r7
		while (*lfn) {	/* Create a CRC */
 80055fe:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8005602:	2a00      	cmp	r2, #0
 8005604:	f47f af6f 	bne.w	80054e6 <dir_register+0x27e>
 8005608:	e65a      	b.n	80052c0 <dir_register+0x58>
 800560a:	bf00      	nop
 800560c:	00011021 	.word	0x00011021
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005610:	227e      	movs	r2, #126	; 0x7e
	} while (j < 8);
 8005612:	f1b9 0f07 	cmp.w	r9, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005616:	f88a 2000 	strb.w	r2, [sl]
 800561a:	f103 0201 	add.w	r2, r3, #1
	} while (j < 8);
 800561e:	f63f af3e 	bhi.w	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005622:	2a07      	cmp	r2, #7
 8005624:	d807      	bhi.n	8005636 <dir_register+0x3ce>
 8005626:	a808      	add	r0, sp, #32
 8005628:	4402      	add	r2, r0
 800562a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800562e:	3302      	adds	r3, #2
 8005630:	e6d3      	b.n	80053da <dir_register+0x172>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005632:	4643      	mov	r3, r8
 8005634:	e644      	b.n	80052c0 <dir_register+0x58>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005636:	2320      	movs	r3, #32
 8005638:	f101 0e02 	add.w	lr, r1, #2
	} while (j < 8);
 800563c:	f1be 0f08 	cmp.w	lr, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005640:	f804 3009 	strb.w	r3, [r4, r9]
	} while (j < 8);
 8005644:	f43f af2b 	beq.w	800549e <dir_register+0x236>
 8005648:	44a6      	add	lr, r4
 800564a:	1cca      	adds	r2, r1, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800564c:	2320      	movs	r3, #32
	} while (j < 8);
 800564e:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005650:	f88e 3000 	strb.w	r3, [lr]
	} while (j < 8);
 8005654:	f43f af23 	beq.w	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005658:	2020      	movs	r0, #32
 800565a:	1d0b      	adds	r3, r1, #4
	} while (j < 8);
 800565c:	2b08      	cmp	r3, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800565e:	54a0      	strb	r0, [r4, r2]
	} while (j < 8);
 8005660:	f43f af1d 	beq.w	800549e <dir_register+0x236>
 8005664:	18e2      	adds	r2, r4, r3
 8005666:	1d48      	adds	r0, r1, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005668:	2320      	movs	r3, #32
	} while (j < 8);
 800566a:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800566c:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 800566e:	f43f af16 	beq.w	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005672:	2220      	movs	r2, #32
 8005674:	1d8b      	adds	r3, r1, #6
	} while (j < 8);
 8005676:	2b08      	cmp	r3, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005678:	5422      	strb	r2, [r4, r0]
	} while (j < 8);
 800567a:	f43f af10 	beq.w	800549e <dir_register+0x236>
 800567e:	18e2      	adds	r2, r4, r3
 8005680:	1dc8      	adds	r0, r1, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005682:	2320      	movs	r3, #32
	} while (j < 8);
 8005684:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005686:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 8005688:	f43f af09 	beq.w	800549e <dir_register+0x236>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800568c:	f04f 0c20 	mov.w	ip, #32
 8005690:	e6fe      	b.n	8005490 <dir_register+0x228>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005692:	2804      	cmp	r0, #4
 8005694:	d101      	bne.n	800569a <dir_register+0x432>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005696:	f04f 0a07 	mov.w	sl, #7
}
 800569a:	4650      	mov	r0, sl
 800569c:	b009      	add	sp, #36	; 0x24
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (j == i - 1) break;
 80056a2:	4689      	mov	r9, r1
 80056a4:	eb04 0a00 	add.w	sl, r4, r0
 80056a8:	4601      	mov	r1, r0
 80056aa:	e68d      	b.n	80053c8 <dir_register+0x160>
	ns[i] = '~';
 80056ac:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80056ae:	7822      	ldrb	r2, [r4, #0]
	ns[i] = '~';
 80056b0:	f88d 301e 	strb.w	r3, [sp, #30]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80056b4:	2a20      	cmp	r2, #32
 80056b6:	f000 831b 	beq.w	8005cf0 <dir_register+0xa88>
		ns[i--] = c;
 80056ba:	2306      	movs	r3, #6
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80056bc:	f04f 0e05 	mov.w	lr, #5
 80056c0:	e66c      	b.n	800539c <dir_register+0x134>
	ns[i] = '~';
 80056c2:	237e      	movs	r3, #126	; 0x7e
 80056c4:	f04f 0e04 	mov.w	lr, #4
 80056c8:	f88d 301d 	strb.w	r3, [sp, #29]
		ns[i--] = c;
 80056cc:	2305      	movs	r3, #5
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80056ce:	7822      	ldrb	r2, [r4, #0]
 80056d0:	2a20      	cmp	r2, #32
 80056d2:	f47f ae63 	bne.w	800539c <dir_register+0x134>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056d6:	227e      	movs	r2, #126	; 0x7e
 80056d8:	7022      	strb	r2, [r4, #0]
 80056da:	1c5a      	adds	r2, r3, #1
			if (j == i - 1) break;
 80056dc:	2100      	movs	r1, #0
 80056de:	f04f 0901 	mov.w	r9, #1
 80056e2:	e7a0      	b.n	8005626 <dir_register+0x3be>
	ns[i] = '~';
 80056e4:	237e      	movs	r3, #126	; 0x7e
 80056e6:	f04f 0e03 	mov.w	lr, #3
 80056ea:	f88d 301c 	strb.w	r3, [sp, #28]
		ns[i--] = c;
 80056ee:	2304      	movs	r3, #4
 80056f0:	e7ed      	b.n	80056ce <dir_register+0x466>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80056f2:	2804      	cmp	r0, #4
 80056f4:	4682      	mov	sl, r0
 80056f6:	d1d0      	bne.n	800569a <dir_register+0x432>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80056f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80056fc:	72e3      	strb	r3, [r4, #11]
 80056fe:	9b03      	ldr	r3, [sp, #12]
 8005700:	f8cb 3220 	str.w	r3, [fp, #544]	; 0x220
 8005704:	9b04      	ldr	r3, [sp, #16]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005706:	079b      	lsls	r3, r3, #30
 8005708:	d455      	bmi.n	80057b6 <dir_register+0x54e>
		nent = 1;
 800570a:	2301      	movs	r3, #1
 800570c:	9300      	str	r3, [sp, #0]
	res = dir_sdi(dp, 0);
 800570e:	2100      	movs	r1, #0
 8005710:	4658      	mov	r0, fp
 8005712:	f7ff fc0d 	bl	8004f30 <dir_sdi>
	if (res == FR_OK) {
 8005716:	4682      	mov	sl, r0
 8005718:	2800      	cmp	r0, #0
 800571a:	d1ba      	bne.n	8005692 <dir_register+0x42a>
		n = 0;
 800571c:	4604      	mov	r4, r0
 800571e:	f8db 9200 	ldr.w	r9, [fp, #512]	; 0x200
 8005722:	f8db 5210 	ldr.w	r5, [fp, #528]	; 0x210
 8005726:	9003      	str	r0, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005728:	f8d9 6230 	ldr.w	r6, [r9, #560]	; 0x230
 800572c:	42ae      	cmp	r6, r5
 800572e:	d057      	beq.n	80057e0 <dir_register+0x578>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005730:	f899 3204 	ldrb.w	r3, [r9, #516]	; 0x204
 8005734:	f899 0201 	ldrb.w	r0, [r9, #513]	; 0x201
 8005738:	b333      	cbz	r3, 8005788 <dir_register+0x520>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800573a:	2301      	movs	r3, #1
 800573c:	4632      	mov	r2, r6
 800573e:	4649      	mov	r1, r9
 8005740:	f7fd ffe0 	bl	8003704 <disk_write>
 8005744:	2800      	cmp	r0, #0
 8005746:	f040 80b3 	bne.w	80058b0 <dir_register+0x648>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800574a:	f8d9 2224 	ldr.w	r2, [r9, #548]	; 0x224
 800574e:	f8d9 321c 	ldr.w	r3, [r9, #540]	; 0x21c
 8005752:	1ab2      	subs	r2, r6, r2
 8005754:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005756:	f889 0204 	strb.w	r0, [r9, #516]	; 0x204
 800575a:	f899 0201 	ldrb.w	r0, [r9, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800575e:	d213      	bcs.n	8005788 <dir_register+0x520>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005760:	f899 7203 	ldrb.w	r7, [r9, #515]	; 0x203
 8005764:	2f01      	cmp	r7, #1
 8005766:	d804      	bhi.n	8005772 <dir_register+0x50a>
 8005768:	e00e      	b.n	8005788 <dir_register+0x520>
 800576a:	f8d9 321c 	ldr.w	r3, [r9, #540]	; 0x21c
 800576e:	f899 0201 	ldrb.w	r0, [r9, #513]	; 0x201
					wsect += fs->fsize;
 8005772:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005774:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005776:	4632      	mov	r2, r6
 8005778:	2301      	movs	r3, #1
 800577a:	4649      	mov	r1, r9
 800577c:	f7fd ffc2 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005780:	2f01      	cmp	r7, #1
 8005782:	d1f2      	bne.n	800576a <dir_register+0x502>
 8005784:	f899 0201 	ldrb.w	r0, [r9, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005788:	2301      	movs	r3, #1
 800578a:	462a      	mov	r2, r5
 800578c:	4649      	mov	r1, r9
 800578e:	f7fd ffab 	bl	80036e8 <disk_read>
 8005792:	b318      	cbz	r0, 80057dc <dir_register+0x574>
				res = FR_DISK_ERR;
 8005794:	f04f 0a01 	mov.w	sl, #1
			fs->winsect = sector;
 8005798:	f04f 33ff 	mov.w	r3, #4294967295
}
 800579c:	4650      	mov	r0, sl
			fs->winsect = sector;
 800579e:	f8c9 3230 	str.w	r3, [r9, #560]	; 0x230
}
 80057a2:	b009      	add	sp, #36	; 0x24
 80057a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 80057a8:	237e      	movs	r3, #126	; 0x7e
 80057aa:	f04f 0e02 	mov.w	lr, #2
 80057ae:	f88d 301b 	strb.w	r3, [sp, #27]
		ns[i--] = c;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e78b      	b.n	80056ce <dir_register+0x466>
		for (n = 0; lfn[n]; n++) ;
 80057b6:	9a03      	ldr	r2, [sp, #12]
 80057b8:	8813      	ldrh	r3, [r2, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0a5      	beq.n	800570a <dir_register+0x4a2>
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <dir_register+0x55c>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f832 1f02 	ldrh.w	r1, [r2, #2]!
 80057c8:	1c58      	adds	r0, r3, #1
 80057ca:	2900      	cmp	r1, #0
 80057cc:	d1f9      	bne.n	80057c2 <dir_register+0x55a>
 80057ce:	4ac4      	ldr	r2, [pc, #784]	; (8005ae0 <dir_register+0x878>)
 80057d0:	331a      	adds	r3, #26
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	e798      	b.n	800570e <dir_register+0x4a6>
			fs->winsect = sector;
 80057dc:	f8c9 5230 	str.w	r5, [r9, #560]	; 0x230
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80057e0:	f8db 3214 	ldr.w	r3, [fp, #532]	; 0x214
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2be5      	cmp	r3, #229	; 0xe5
 80057e8:	d026      	beq.n	8005838 <dir_register+0x5d0>
 80057ea:	b32b      	cbz	r3, 8005838 <dir_register+0x5d0>
				n = 0;					/* Not a blank entry. Restart to search */
 80057ec:	2600      	movs	r6, #0
	i = dp->index + 1;
 80057ee:	f8bb 4206 	ldrh.w	r4, [fp, #518]	; 0x206
 80057f2:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80057f4:	b2a3      	uxth	r3, r4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f43f af4d 	beq.w	8005696 <dir_register+0x42e>
 80057fc:	f8db 5210 	ldr.w	r5, [fp, #528]	; 0x210
 8005800:	2d00      	cmp	r5, #0
 8005802:	f43f af48 	beq.w	8005696 <dir_register+0x42e>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005806:	f014 070f 	ands.w	r7, r4, #15
 800580a:	f8db 9200 	ldr.w	r9, [fp, #512]	; 0x200
 800580e:	d10b      	bne.n	8005828 <dir_register+0x5c0>
		if (!dp->clust) {		/* Static table */
 8005810:	f8db 120c 	ldr.w	r1, [fp, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8005814:	3501      	adds	r5, #1
 8005816:	f8cb 5210 	str.w	r5, [fp, #528]	; 0x210
		if (!dp->clust) {		/* Static table */
 800581a:	2900      	cmp	r1, #0
 800581c:	d162      	bne.n	80058e4 <dir_register+0x67c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800581e:	f8b9 3208 	ldrh.w	r3, [r9, #520]	; 0x208
 8005822:	429c      	cmp	r4, r3
 8005824:	f4bf af37 	bcs.w	8005696 <dir_register+0x42e>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005828:	eb09 1747 	add.w	r7, r9, r7, lsl #5
	dp->index = (WORD)i;	/* Current index */
 800582c:	f8ab 4206 	strh.w	r4, [fp, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005830:	f8cb 7214 	str.w	r7, [fp, #532]	; 0x214
 8005834:	4634      	mov	r4, r6
 8005836:	e777      	b.n	8005728 <dir_register+0x4c0>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005838:	9b00      	ldr	r3, [sp, #0]
 800583a:	1c66      	adds	r6, r4, #1
 800583c:	42b3      	cmp	r3, r6
 800583e:	d1d6      	bne.n	80057ee <dir_register+0x586>
 8005840:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005844:	2c00      	cmp	r4, #0
 8005846:	f040 80b3 	bne.w	80059b0 <dir_register+0x748>
		res = move_window(dp->fs, dp->sect);
 800584a:	f8db 4200 	ldr.w	r4, [fp, #512]	; 0x200
 800584e:	f8db 7210 	ldr.w	r7, [fp, #528]	; 0x210
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005852:	f8d4 5230 	ldr.w	r5, [r4, #560]	; 0x230
 8005856:	42af      	cmp	r7, r5
 8005858:	d078      	beq.n	800594c <dir_register+0x6e4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800585a:	f894 3204 	ldrb.w	r3, [r4, #516]	; 0x204
 800585e:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8096 	beq.w	8005994 <dir_register+0x72c>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005868:	2301      	movs	r3, #1
 800586a:	462a      	mov	r2, r5
 800586c:	4621      	mov	r1, r4
 800586e:	f7fd ff49 	bl	8003704 <disk_write>
 8005872:	b9e8      	cbnz	r0, 80058b0 <dir_register+0x648>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005874:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 8005878:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800587c:	1aaa      	subs	r2, r5, r2
 800587e:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005880:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
 8005884:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005888:	f080 8084 	bcs.w	8005994 <dir_register+0x72c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800588c:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8005890:	2e01      	cmp	r6, #1
 8005892:	d97f      	bls.n	8005994 <dir_register+0x72c>
					wsect += fs->fsize;
 8005894:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005896:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005898:	462a      	mov	r2, r5
 800589a:	2301      	movs	r3, #1
 800589c:	4621      	mov	r1, r4
 800589e:	f7fd ff31 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058a2:	2e01      	cmp	r6, #1
 80058a4:	d074      	beq.n	8005990 <dir_register+0x728>
 80058a6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80058aa:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80058ae:	e7f1      	b.n	8005894 <dir_register+0x62c>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80058b0:	f04f 0a01 	mov.w	sl, #1
}
 80058b4:	4650      	mov	r0, sl
 80058b6:	b009      	add	sp, #36	; 0x24
 80058b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 80058bc:	237e      	movs	r3, #126	; 0x7e
 80058be:	f04f 0e01 	mov.w	lr, #1
 80058c2:	f88d 301a 	strb.w	r3, [sp, #26]
		ns[i--] = c;
 80058c6:	2302      	movs	r3, #2
 80058c8:	e701      	b.n	80056ce <dir_register+0x466>
	ns[i] = '~';
 80058ca:	237e      	movs	r3, #126	; 0x7e
 80058cc:	f88d 3019 	strb.w	r3, [sp, #25]
		ns[i--] = c;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e6fc      	b.n	80056ce <dir_register+0x466>
	ns[i] = '~';
 80058d4:	217e      	movs	r1, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80058d6:	2201      	movs	r2, #1
	ns[i] = '~';
 80058d8:	f88d 1018 	strb.w	r1, [sp, #24]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80058dc:	7021      	strb	r1, [r4, #0]
 80058de:	4691      	mov	r9, r2
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80058e0:	4619      	mov	r1, r3
 80058e2:	e6a0      	b.n	8005626 <dir_register+0x3be>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80058e4:	f899 3202 	ldrb.w	r3, [r9, #514]	; 0x202
 80058e8:	3b01      	subs	r3, #1
 80058ea:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	d19a      	bne.n	8005828 <dir_register+0x5c0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80058f2:	2901      	cmp	r1, #1
 80058f4:	f240 8176 	bls.w	8005be4 <dir_register+0x97c>
 80058f8:	f8d9 3218 	ldr.w	r3, [r9, #536]	; 0x218
 80058fc:	4299      	cmp	r1, r3
 80058fe:	f080 8171 	bcs.w	8005be4 <dir_register+0x97c>
 8005902:	4648      	mov	r0, r9
 8005904:	f7fe fa74 	bl	8003df0 <get_fat.part.9>
				if (clst <= 1) return FR_INT_ERR;
 8005908:	2801      	cmp	r0, #1
 800590a:	4682      	mov	sl, r0
 800590c:	f240 816a 	bls.w	8005be4 <dir_register+0x97c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005910:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005914:	d0cc      	beq.n	80058b0 <dir_register+0x648>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005916:	f8db 9200 	ldr.w	r9, [fp, #512]	; 0x200
 800591a:	f8d9 3218 	ldr.w	r3, [r9, #536]	; 0x218
 800591e:	4298      	cmp	r0, r3
 8005920:	f080 8154 	bcs.w	8005bcc <dir_register+0x964>
 8005924:	1e82      	subs	r2, r0, #2
 8005926:	9202      	str	r2, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005928:	3b02      	subs	r3, #2
 800592a:	429a      	cmp	r2, r3
 800592c:	bf28      	it	cs
 800592e:	2500      	movcs	r5, #0
				dp->clust = clst;				/* Initialize data for new cluster */
 8005930:	f8cb a20c 	str.w	sl, [fp, #524]	; 0x20c
	return clst * fs->csize + fs->database;
 8005934:	bf3e      	ittt	cc
 8005936:	f899 5202 	ldrbcc.w	r5, [r9, #514]	; 0x202
 800593a:	f8d9 322c 	ldrcc.w	r3, [r9, #556]	; 0x22c
 800593e:	fb02 3505 	mlacc	r5, r2, r5, r3
				dp->sect = clust2sect(dp->fs, clst);
 8005942:	f8cb 5210 	str.w	r5, [fp, #528]	; 0x210
 8005946:	e76f      	b.n	8005828 <dir_register+0x5c0>
			fs->winsect = sector;
 8005948:	f8c4 7230 	str.w	r7, [r4, #560]	; 0x230
 800594c:	2220      	movs	r2, #32
 800594e:	2100      	movs	r1, #0
 8005950:	f8db 0214 	ldr.w	r0, [fp, #532]	; 0x214
 8005954:	f003 fdd5 	bl	8009502 <memset>
			dp->fs->wflag = 1;
 8005958:	2101      	movs	r1, #1
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800595a:	f8db 2218 	ldr.w	r2, [fp, #536]	; 0x218
 800595e:	f8db 3214 	ldr.w	r3, [fp, #532]	; 0x214
		*(int*)d = *(int*)s;
 8005962:	6810      	ldr	r0, [r2, #0]
 8005964:	6018      	str	r0, [r3, #0]
 8005966:	6850      	ldr	r0, [r2, #4]
 8005968:	6058      	str	r0, [r3, #4]
		*d++ = *s++;
 800596a:	7a10      	ldrb	r0, [r2, #8]
 800596c:	7218      	strb	r0, [r3, #8]
 800596e:	7a50      	ldrb	r0, [r2, #9]
 8005970:	7258      	strb	r0, [r3, #9]
 8005972:	7a92      	ldrb	r2, [r2, #10]
 8005974:	729a      	strb	r2, [r3, #10]
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005976:	f8db 3218 	ldr.w	r3, [fp, #536]	; 0x218
 800597a:	f8db 2214 	ldr.w	r2, [fp, #532]	; 0x214
 800597e:	7adb      	ldrb	r3, [r3, #11]
 8005980:	f003 0318 	and.w	r3, r3, #24
 8005984:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 8005986:	f8db 3200 	ldr.w	r3, [fp, #512]	; 0x200
 800598a:	f883 1204 	strb.w	r1, [r3, #516]	; 0x204
 800598e:	e684      	b.n	800569a <dir_register+0x432>
 8005990:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005994:	2301      	movs	r3, #1
 8005996:	463a      	mov	r2, r7
 8005998:	4621      	mov	r1, r4
 800599a:	f7fd fea5 	bl	80036e8 <disk_read>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d0d2      	beq.n	8005948 <dir_register+0x6e0>
			fs->winsect = sector;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 80059a6:	f04f 0a01 	mov.w	sl, #1
			fs->winsect = sector;
 80059aa:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
 80059ae:	e674      	b.n	800569a <dir_register+0x432>
		res = dir_sdi(dp, dp->index - nent);
 80059b0:	f8bb 1206 	ldrh.w	r1, [fp, #518]	; 0x206
 80059b4:	4658      	mov	r0, fp
 80059b6:	1b09      	subs	r1, r1, r4
 80059b8:	f7ff faba 	bl	8004f30 <dir_sdi>
		if (res == FR_OK) {
 80059bc:	2800      	cmp	r0, #0
 80059be:	f040 8192 	bne.w	8005ce6 <dir_register+0xa7e>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80059c2:	f8db 3218 	ldr.w	r3, [fp, #536]	; 0x218
	dir[LDIR_Type] = 0;
 80059c6:	4606      	mov	r6, r0
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80059c8:	7819      	ldrb	r1, [r3, #0]
 80059ca:	7858      	ldrb	r0, [r3, #1]
 80059cc:	01ca      	lsls	r2, r1, #7
 80059ce:	ea42 0251 	orr.w	r2, r2, r1, lsr #1
 80059d2:	1811      	adds	r1, r2, r0
 80059d4:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80059d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80059dc:	7899      	ldrb	r1, [r3, #2]
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	4411      	add	r1, r2
 80059e2:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80059e6:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80059ea:	78d9      	ldrb	r1, [r3, #3]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	4411      	add	r1, r2
 80059f0:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80059f4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80059f8:	7919      	ldrb	r1, [r3, #4]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	4411      	add	r1, r2
 80059fe:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8005a02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005a06:	7959      	ldrb	r1, [r3, #5]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	4411      	add	r1, r2
 8005a0c:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8005a10:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005a14:	7999      	ldrb	r1, [r3, #6]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	4411      	add	r1, r2
 8005a1a:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8005a1e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005a22:	79d9      	ldrb	r1, [r3, #7]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	4411      	add	r1, r2
 8005a28:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8005a2c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005a30:	7a19      	ldrb	r1, [r3, #8]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	4411      	add	r1, r2
 8005a36:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8005a3a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8005a3e:	7a59      	ldrb	r1, [r3, #9]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	440a      	add	r2, r1
 8005a44:	7a99      	ldrb	r1, [r3, #10]
 8005a46:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8005a4a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8005a4e:	440b      	add	r3, r1
 8005a50:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8005a54:	9300      	str	r3, [sp, #0]
				res = move_window(dp->fs, dp->sect);
 8005a56:	f8db 5200 	ldr.w	r5, [fp, #512]	; 0x200
 8005a5a:	f8db 9210 	ldr.w	r9, [fp, #528]	; 0x210
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a5e:	f8d5 7230 	ldr.w	r7, [r5, #560]	; 0x230
 8005a62:	45b9      	cmp	r9, r7
 8005a64:	d040      	beq.n	8005ae8 <dir_register+0x880>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a66:	f895 3204 	ldrb.w	r3, [r5, #516]	; 0x204
 8005a6a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8005a6e:	b34b      	cbz	r3, 8005ac4 <dir_register+0x85c>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005a70:	2301      	movs	r3, #1
 8005a72:	463a      	mov	r2, r7
 8005a74:	4629      	mov	r1, r5
 8005a76:	f7fd fe45 	bl	8003704 <disk_write>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f47f af18 	bne.w	80058b0 <dir_register+0x648>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a80:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8005a84:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8005a88:	1aba      	subs	r2, r7, r2
 8005a8a:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005a8c:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
 8005a90:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a94:	d216      	bcs.n	8005ac4 <dir_register+0x85c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a96:	f895 8203 	ldrb.w	r8, [r5, #515]	; 0x203
 8005a9a:	f1b8 0f01 	cmp.w	r8, #1
 8005a9e:	d804      	bhi.n	8005aaa <dir_register+0x842>
 8005aa0:	e010      	b.n	8005ac4 <dir_register+0x85c>
 8005aa2:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8005aa6:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
					wsect += fs->fsize;
 8005aaa:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aac:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fd fe25 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005aba:	f1b8 0f01 	cmp.w	r8, #1
 8005abe:	d1f0      	bne.n	8005aa2 <dir_register+0x83a>
 8005ac0:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	464a      	mov	r2, r9
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7fd fe0d 	bl	80036e8 <disk_read>
 8005ace:	b148      	cbz	r0, 8005ae4 <dir_register+0x87c>
			fs->winsect = sector;
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8005ad4:	f04f 0a01 	mov.w	sl, #1
			fs->winsect = sector;
 8005ad8:	f8c5 3230 	str.w	r3, [r5, #560]	; 0x230
 8005adc:	e5dd      	b.n	800569a <dir_register+0x432>
 8005ade:	bf00      	nop
 8005ae0:	4ec4ec4f 	.word	0x4ec4ec4f
 8005ae4:	f8c5 9230 	str.w	r9, [r5, #560]	; 0x230
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005ae8:	b2e5      	uxtb	r5, r4
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005aea:	1e6a      	subs	r2, r5, #1
 8005aec:	eb02 0142 	add.w	r1, r2, r2, lsl #1
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005af0:	f8db 3214 	ldr.w	r3, [fp, #532]	; 0x214
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8005af4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005af8:	9900      	ldr	r1, [sp, #0]
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005afa:	f8db 0220 	ldr.w	r0, [fp, #544]	; 0x220
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8005afe:	7359      	strb	r1, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b00:	f04f 010f 	mov.w	r1, #15
	dir[LDIR_Type] = 0;
 8005b04:	731e      	strb	r6, [r3, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b06:	72d9      	strb	r1, [r3, #11]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005b08:	835e      	strh	r6, [r3, #26]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005b0a:	f830 c012 	ldrh.w	ip, [r0, r2, lsl #1]
 8005b0e:	0057      	lsls	r7, r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005b10:	f8a3 c001 	strh.w	ip, [r3, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005b14:	f1bc 0f00 	cmp.w	ip, #0
 8005b18:	d13a      	bne.n	8005b90 <dir_register+0x928>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1e:	f8a3 2003 	strh.w	r2, [r3, #3]
 8005b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b26:	f8a3 2005 	strh.w	r2, [r3, #5]
 8005b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b2e:	f8a3 2007 	strh.w	r2, [r3, #7]
 8005b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b36:	f8a3 2009 	strh.w	r2, [r3, #9]
 8005b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b3e:	81da      	strh	r2, [r3, #14]
 8005b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b44:	821a      	strh	r2, [r3, #16]
 8005b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b4a:	825a      	strh	r2, [r3, #18]
 8005b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b50:	829a      	strh	r2, [r3, #20]
 8005b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b56:	82da      	strh	r2, [r3, #22]
 8005b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b5c:	831a      	strh	r2, [r3, #24]
 8005b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b62:	839a      	strh	r2, [r3, #28]
 8005b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b68:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005b6a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
				dp->fs->wflag = 1;
 8005b6e:	f04f 0201 	mov.w	r2, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005b72:	701d      	strb	r5, [r3, #0]
				dp->fs->wflag = 1;
 8005b74:	f8db 3200 	ldr.w	r3, [fp, #512]	; 0x200
				res = dir_next(dp, 0);	/* Next entry */
 8005b78:	4658      	mov	r0, fp
				dp->fs->wflag = 1;
 8005b7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 8005b7e:	f7fe fa6d 	bl	800405c <dir_next.constprop.16>
			} while (res == FR_OK && --nent);
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f040 80af 	bne.w	8005ce6 <dir_register+0xa7e>
 8005b88:	3c01      	subs	r4, #1
 8005b8a:	f47f af64 	bne.w	8005a56 <dir_register+0x7ee>
 8005b8e:	e65c      	b.n	800584a <dir_register+0x5e2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005b90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b94:	458c      	cmp	ip, r1
 8005b96:	f000 80a8 	beq.w	8005cea <dir_register+0xa82>
 8005b9a:	3201      	adds	r2, #1
 8005b9c:	f830 c012 	ldrh.w	ip, [r0, r2, lsl #1]
 8005ba0:	0052      	lsls	r2, r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005ba2:	f8a3 c003 	strh.w	ip, [r3, #3]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005ba6:	f1bc 0f00 	cmp.w	ip, #0
 8005baa:	d102      	bne.n	8005bb2 <dir_register+0x94a>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005bac:	f8a3 1005 	strh.w	r1, [r3, #5]
 8005bb0:	e7bb      	b.n	8005b2a <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005bb2:	458c      	cmp	ip, r1
 8005bb4:	d0b5      	beq.n	8005b22 <dir_register+0x8ba>
 8005bb6:	4402      	add	r2, r0
 8005bb8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005bbc:	f8a3 c005 	strh.w	ip, [r3, #5]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005bc0:	f1bc 0f00 	cmp.w	ip, #0
 8005bc4:	d117      	bne.n	8005bf6 <dir_register+0x98e>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005bc6:	f8a3 1007 	strh.w	r1, [r3, #7]
 8005bca:	e7b2      	b.n	8005b32 <dir_register+0x8ca>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005bcc:	4648      	mov	r0, r9
 8005bce:	f8db 120c 	ldr.w	r1, [fp, #524]	; 0x20c
 8005bd2:	f7fe fe89 	bl	80048e8 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005bd6:	4682      	mov	sl, r0
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f43f ad5c 	beq.w	8005696 <dir_register+0x42e>
					if (clst == 1) return FR_INT_ERR;
 8005bde:	2801      	cmp	r0, #1
 8005be0:	f040 808a 	bne.w	8005cf8 <dir_register+0xa90>
				if (clst <= 1) return FR_INT_ERR;
 8005be4:	f04f 0a02 	mov.w	sl, #2
 8005be8:	e557      	b.n	800569a <dir_register+0x432>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005bea:	7062      	strb	r2, [r4, #1]
 8005bec:	f104 0e02 	add.w	lr, r4, #2
 8005bf0:	2203      	movs	r2, #3
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	e52a      	b.n	800564c <dir_register+0x3e4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005bf6:	458c      	cmp	ip, r1
 8005bf8:	d097      	beq.n	8005b2a <dir_register+0x8c2>
 8005bfa:	f8b2 c004 	ldrh.w	ip, [r2, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005bfe:	f8a3 c007 	strh.w	ip, [r3, #7]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c02:	f1bc 0f00 	cmp.w	ip, #0
 8005c06:	d102      	bne.n	8005c0e <dir_register+0x9a6>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c08:	f8a3 1009 	strh.w	r1, [r3, #9]
 8005c0c:	e795      	b.n	8005b3a <dir_register+0x8d2>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c0e:	458c      	cmp	ip, r1
 8005c10:	d08f      	beq.n	8005b32 <dir_register+0x8ca>
 8005c12:	f8b2 c006 	ldrh.w	ip, [r2, #6]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c16:	f8a3 c009 	strh.w	ip, [r3, #9]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c1a:	f1bc 0f00 	cmp.w	ip, #0
 8005c1e:	d101      	bne.n	8005c24 <dir_register+0x9bc>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c20:	81d9      	strh	r1, [r3, #14]
 8005c22:	e78d      	b.n	8005b40 <dir_register+0x8d8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c24:	458c      	cmp	ip, r1
 8005c26:	d088      	beq.n	8005b3a <dir_register+0x8d2>
 8005c28:	f8b2 c008 	ldrh.w	ip, [r2, #8]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c2c:	f8a3 c00e 	strh.w	ip, [r3, #14]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c30:	f1bc 0f00 	cmp.w	ip, #0
 8005c34:	d084      	beq.n	8005b40 <dir_register+0x8d8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c36:	458c      	cmp	ip, r1
 8005c38:	d082      	beq.n	8005b40 <dir_register+0x8d8>
 8005c3a:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c3e:	f8a3 c010 	strh.w	ip, [r3, #16]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c42:	f1bc 0f00 	cmp.w	ip, #0
 8005c46:	d101      	bne.n	8005c4c <dir_register+0x9e4>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c48:	8259      	strh	r1, [r3, #18]
 8005c4a:	e77f      	b.n	8005b4c <dir_register+0x8e4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c4c:	458c      	cmp	ip, r1
 8005c4e:	f43f af7a 	beq.w	8005b46 <dir_register+0x8de>
 8005c52:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c56:	f8a3 c012 	strh.w	ip, [r3, #18]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c5a:	f1bc 0f00 	cmp.w	ip, #0
 8005c5e:	d101      	bne.n	8005c64 <dir_register+0x9fc>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c60:	8299      	strh	r1, [r3, #20]
 8005c62:	e776      	b.n	8005b52 <dir_register+0x8ea>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c64:	458c      	cmp	ip, r1
 8005c66:	f43f af71 	beq.w	8005b4c <dir_register+0x8e4>
 8005c6a:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c6e:	f8a3 c014 	strh.w	ip, [r3, #20]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c72:	f1bc 0f00 	cmp.w	ip, #0
 8005c76:	d101      	bne.n	8005c7c <dir_register+0xa14>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c78:	82d9      	strh	r1, [r3, #22]
 8005c7a:	e76d      	b.n	8005b58 <dir_register+0x8f0>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c7c:	458c      	cmp	ip, r1
 8005c7e:	f43f af68 	beq.w	8005b52 <dir_register+0x8ea>
 8005c82:	f8b2 c010 	ldrh.w	ip, [r2, #16]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c86:	f8a3 c016 	strh.w	ip, [r3, #22]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005c8a:	f1bc 0f00 	cmp.w	ip, #0
 8005c8e:	d101      	bne.n	8005c94 <dir_register+0xa2c>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c90:	8319      	strh	r1, [r3, #24]
 8005c92:	e764      	b.n	8005b5e <dir_register+0x8f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005c94:	458c      	cmp	ip, r1
 8005c96:	f43f af5f 	beq.w	8005b58 <dir_register+0x8f0>
 8005c9a:	f8b2 c012 	ldrh.w	ip, [r2, #18]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005c9e:	f8a3 c018 	strh.w	ip, [r3, #24]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005ca2:	f1bc 0f00 	cmp.w	ip, #0
 8005ca6:	f43f af5a 	beq.w	8005b5e <dir_register+0x8f6>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005caa:	458c      	cmp	ip, r1
 8005cac:	f43f af57 	beq.w	8005b5e <dir_register+0x8f6>
 8005cb0:	f8b2 c014 	ldrh.w	ip, [r2, #20]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005cb4:	f8a3 c01c 	strh.w	ip, [r3, #28]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005cb8:	f1bc 0f00 	cmp.w	ip, #0
 8005cbc:	d101      	bne.n	8005cc2 <dir_register+0xa5a>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005cbe:	83d9      	strh	r1, [r3, #30]
 8005cc0:	e753      	b.n	8005b6a <dir_register+0x902>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005cc2:	458c      	cmp	ip, r1
 8005cc4:	f43f af4e 	beq.w	8005b64 <dir_register+0x8fc>
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005cc8:	f64f 7cfd 	movw	ip, #65533	; 0xfffd
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005ccc:	8ad1      	ldrh	r1, [r2, #22]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005cce:	1e4a      	subs	r2, r1, #1
 8005cd0:	b292      	uxth	r2, r2
 8005cd2:	4562      	cmp	r2, ip
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005cd4:	83d9      	strh	r1, [r3, #30]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005cd6:	f63f af48 	bhi.w	8005b6a <dir_register+0x902>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005cda:	4438      	add	r0, r7
 8005cdc:	8b42      	ldrh	r2, [r0, #26]
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	f43f af43 	beq.w	8005b6a <dir_register+0x902>
 8005ce4:	e743      	b.n	8005b6e <dir_register+0x906>
 8005ce6:	4682      	mov	sl, r0
 8005ce8:	e4d7      	b.n	800569a <dir_register+0x432>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005cea:	f8a3 c003 	strh.w	ip, [r3, #3]
 8005cee:	e718      	b.n	8005b22 <dir_register+0x8ba>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005cf0:	7023      	strb	r3, [r4, #0]
 8005cf2:	2207      	movs	r2, #7
		ns[i--] = c;
 8005cf4:	2306      	movs	r3, #6
 8005cf6:	e4f1      	b.n	80056dc <dir_register+0x474>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005cf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005cfc:	f43f add8 	beq.w	80058b0 <dir_register+0x648>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005d00:	f8db 5200 	ldr.w	r5, [fp, #512]	; 0x200
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d04:	f895 3204 	ldrb.w	r3, [r5, #516]	; 0x204
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d163      	bne.n	8005dd4 <dir_register+0xb6c>
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d12:	2100      	movs	r1, #0
 8005d14:	f003 fbf5 	bl	8009502 <memset>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005d18:	f8db 5200 	ldr.w	r5, [fp, #512]	; 0x200
	clst -= 2;
 8005d1c:	f1aa 0102 	sub.w	r1, sl, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d20:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
	clst -= 2;
 8005d24:	9102      	str	r1, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d26:	3b02      	subs	r3, #2
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	f895 2202 	ldrb.w	r2, [r5, #514]	; 0x202
 8005d2e:	d34b      	bcc.n	8005dc8 <dir_register+0xb60>
 8005d30:	f04f 0800 	mov.w	r8, #0
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005d34:	f8c5 8230 	str.w	r8, [r5, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005d38:	b3da      	cbz	r2, 8005db2 <dir_register+0xb4a>
						dp->fs->wflag = 1;
 8005d3a:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005d3e:	4642      	mov	r2, r8
						dp->fs->wflag = 1;
 8005d40:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005d44:	4629      	mov	r1, r5
 8005d46:	2301      	movs	r3, #1
 8005d48:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8005d4c:	f7fd fcda 	bl	8003704 <disk_write>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	f47f adad 	bne.w	80058b0 <dir_register+0x648>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d56:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 8005d5a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8005d5e:	eba8 0202 	sub.w	r2, r8, r2
 8005d62:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8005d64:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d68:	d214      	bcs.n	8005d94 <dir_register+0xb2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d6a:	f895 9203 	ldrb.w	r9, [r5, #515]	; 0x203
 8005d6e:	f1b9 0f01 	cmp.w	r9, #1
 8005d72:	d802      	bhi.n	8005d7a <dir_register+0xb12>
 8005d74:	e00e      	b.n	8005d94 <dir_register+0xb2c>
 8005d76:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
					wsect += fs->fsize;
 8005d7a:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d7c:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005d80:	4642      	mov	r2, r8
 8005d82:	2301      	movs	r3, #1
 8005d84:	4629      	mov	r1, r5
 8005d86:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8005d8a:	f7fd fcbb 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d8e:	f1b9 0f01 	cmp.w	r9, #1
 8005d92:	d1f0      	bne.n	8005d76 <dir_register+0xb0e>
						dp->fs->winsect++;
 8005d94:	f8db 5200 	ldr.w	r5, [fp, #512]	; 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005d98:	9901      	ldr	r1, [sp, #4]
						dp->fs->winsect++;
 8005d9a:	f8d5 2230 	ldr.w	r2, [r5, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005d9e:	f895 3202 	ldrb.w	r3, [r5, #514]	; 0x202
 8005da2:	3101      	adds	r1, #1
						dp->fs->winsect++;
 8005da4:	f102 0801 	add.w	r8, r2, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005da8:	4299      	cmp	r1, r3
 8005daa:	9101      	str	r1, [sp, #4]
						dp->fs->winsect++;
 8005dac:	f8c5 8230 	str.w	r8, [r5, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005db0:	d3c3      	bcc.n	8005d3a <dir_register+0xad2>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005db2:	f8d5 3230 	ldr.w	r3, [r5, #560]	; 0x230
 8005db6:	9a01      	ldr	r2, [sp, #4]
 8005db8:	46a9      	mov	r9, r5
 8005dba:	1a9a      	subs	r2, r3, r2
 8005dbc:	f8c5 2230 	str.w	r2, [r5, #560]	; 0x230
 8005dc0:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
 8005dc4:	9a02      	ldr	r2, [sp, #8]
 8005dc6:	e5af      	b.n	8005928 <dir_register+0x6c0>
	return clst * fs->csize + fs->database;
 8005dc8:	f8d5 322c 	ldr.w	r3, [r5, #556]	; 0x22c
 8005dcc:	9902      	ldr	r1, [sp, #8]
 8005dce:	fb02 3801 	mla	r8, r2, r1, r3
 8005dd2:	e7af      	b.n	8005d34 <dir_register+0xacc>
		wsect = fs->winsect;	/* Current sector number */
 8005dd4:	f8d5 8230 	ldr.w	r8, [r5, #560]	; 0x230
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4642      	mov	r2, r8
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8005de2:	f7fd fc8f 	bl	8003704 <disk_write>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f47f ad62 	bne.w	80058b0 <dir_register+0x648>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dec:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
 8005df0:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
 8005df4:	eba8 0303 	sub.w	r3, r8, r3
 8005df8:	4293      	cmp	r3, r2
			fs->wflag = 0;
 8005dfa:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dfe:	d211      	bcs.n	8005e24 <dir_register+0xbbc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e00:	f895 9203 	ldrb.w	r9, [r5, #515]	; 0x203
 8005e04:	f1b9 0f01 	cmp.w	r9, #1
 8005e08:	d90c      	bls.n	8005e24 <dir_register+0xbbc>
					wsect += fs->fsize;
 8005e0a:	f8d5 221c 	ldr.w	r2, [r5, #540]	; 0x21c
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005e0e:	2301      	movs	r3, #1
					wsect += fs->fsize;
 8005e10:	4490      	add	r8, r2
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005e12:	4642      	mov	r2, r8
 8005e14:	4629      	mov	r1, r5
 8005e16:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8005e1a:	f7fd fc73 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005e22:	e7ef      	b.n	8005e04 <dir_register+0xb9c>
 8005e24:	f8db 5200 	ldr.w	r5, [fp, #512]	; 0x200
 8005e28:	e770      	b.n	8005d0c <dir_register+0xaa4>
 8005e2a:	bf00      	nop

08005e2c <follow_path>:
{
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005e30:	780b      	ldrb	r3, [r1, #0]
{
 8005e32:	b083      	sub	sp, #12
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005e34:	2b2f      	cmp	r3, #47	; 0x2f
{
 8005e36:	460d      	mov	r5, r1
 8005e38:	4607      	mov	r7, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005e3a:	d05a      	beq.n	8005ef2 <follow_path+0xc6>
 8005e3c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e3e:	d058      	beq.n	8005ef2 <follow_path+0xc6>
	dp->sclust = 0;							/* Always start from the root directory */
 8005e40:	2400      	movs	r4, #0
 8005e42:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e46:	782b      	ldrb	r3, [r5, #0]
 8005e48:	2b1f      	cmp	r3, #31
 8005e4a:	f240 8126 	bls.w	800609a <follow_path+0x26e>
 8005e4e:	4629      	mov	r1, r5
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005e50:	780b      	ldrb	r3, [r1, #0]
 8005e52:	460d      	mov	r5, r1
 8005e54:	2b2f      	cmp	r3, #47	; 0x2f
 8005e56:	f101 0101 	add.w	r1, r1, #1
 8005e5a:	d0f9      	beq.n	8005e50 <follow_path+0x24>
 8005e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e5e:	d0f7      	beq.n	8005e50 <follow_path+0x24>
		w = p[si++];					/* Get a character */
 8005e60:	b298      	uxth	r0, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005e62:	281f      	cmp	r0, #31
	lfn = dp->lfn;
 8005e64:	f8d7 8220 	ldr.w	r8, [r7, #544]	; 0x220
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005e68:	d93f      	bls.n	8005eea <follow_path+0xbe>
 8005e6a:	282f      	cmp	r0, #47	; 0x2f
 8005e6c:	d03d      	beq.n	8005eea <follow_path+0xbe>
 8005e6e:	285c      	cmp	r0, #92	; 0x5c
 8005e70:	d03b      	beq.n	8005eea <follow_path+0xbe>
	si = di = 0;
 8005e72:	2400      	movs	r4, #0
 8005e74:	f1a8 0602 	sub.w	r6, r8, #2
 8005e78:	46a1      	mov	r9, r4
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005e7a:	46b2      	mov	sl, r6
		w = p[si++];					/* Get a character */
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	e010      	b.n	8005ea2 <follow_path+0x76>
		lfn[di++] = w;					/* Store the Unicode character */
 8005e80:	f82a 0f02 	strh.w	r0, [sl, #2]!
		w = p[si++];					/* Get a character */
 8005e84:	f815 3009 	ldrb.w	r3, [r5, r9]
		lfn[di++] = w;					/* Store the Unicode character */
 8005e88:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 8005e8a:	b298      	uxth	r0, r3
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005e8c:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8005e8e:	f109 0101 	add.w	r1, r9, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005e92:	f240 80fe 	bls.w	8006092 <follow_path+0x266>
 8005e96:	282f      	cmp	r0, #47	; 0x2f
 8005e98:	d035      	beq.n	8005f06 <follow_path+0xda>
 8005e9a:	285c      	cmp	r0, #92	; 0x5c
 8005e9c:	d033      	beq.n	8005f06 <follow_path+0xda>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005e9e:	2cff      	cmp	r4, #255	; 0xff
 8005ea0:	d023      	beq.n	8005eea <follow_path+0xbe>
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8005ea2:	337f      	adds	r3, #127	; 0x7f
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b7d      	cmp	r3, #125	; 0x7d
 8005ea8:	d82b      	bhi.n	8005f02 <follow_path+0xd6>
			b = (BYTE)p[si++];			/* Get 2nd byte */
 8005eaa:	5c6b      	ldrb	r3, [r5, r1]
 8005eac:	f109 0902 	add.w	r9, r9, #2
			if (!IsDBCS2(b))
 8005eb0:	f023 0220 	bic.w	r2, r3, #32
 8005eb4:	3a41      	subs	r2, #65	; 0x41
			w = (w << 8) + b;			/* Create a DBC */
 8005eb6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
			if (!IsDBCS2(b))
 8005eba:	2a19      	cmp	r2, #25
			w = (w << 8) + b;			/* Create a DBC */
 8005ebc:	b280      	uxth	r0, r0
			if (!IsDBCS2(b))
 8005ebe:	d903      	bls.n	8005ec8 <follow_path+0x9c>
 8005ec0:	337f      	adds	r3, #127	; 0x7f
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b7d      	cmp	r3, #125	; 0x7d
 8005ec6:	d810      	bhi.n	8005eea <follow_path+0xbe>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005ec8:	2101      	movs	r1, #1
 8005eca:	f001 fa63 	bl	8007394 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005ece:	b160      	cbz	r0, 8005eea <follow_path+0xbe>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005ed0:	287f      	cmp	r0, #127	; 0x7f
 8005ed2:	d8d5      	bhi.n	8005e80 <follow_path+0x54>
	while (*str && *str != chr) str++;
 8005ed4:	2822      	cmp	r0, #34	; 0x22
 8005ed6:	d008      	beq.n	8005eea <follow_path+0xbe>
 8005ed8:	232a      	movs	r3, #42	; 0x2a
 8005eda:	4a9a      	ldr	r2, [pc, #616]	; (8006144 <follow_path+0x318>)
 8005edc:	e003      	b.n	8005ee6 <follow_path+0xba>
 8005ede:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0cc      	beq.n	8005e80 <follow_path+0x54>
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	d1f9      	bne.n	8005ede <follow_path+0xb2>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005eea:	2006      	movs	r0, #6
}
 8005eec:	b003      	add	sp, #12
 8005eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dp->sclust = 0;							/* Always start from the root directory */
 8005ef2:	2400      	movs	r4, #0
		path++;
 8005ef4:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8005ef6:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005efa:	782b      	ldrb	r3, [r5, #0]
 8005efc:	2b1f      	cmp	r3, #31
 8005efe:	d8a6      	bhi.n	8005e4e <follow_path+0x22>
 8005f00:	e0cb      	b.n	800609a <follow_path+0x26e>
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 8005f02:	4689      	mov	r9, r1
 8005f04:	e7e0      	b.n	8005ec8 <follow_path+0x9c>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005f06:	f04f 0a00 	mov.w	sl, #0
	*path = &p[si];						/* Return pointer to the next segment */
 8005f0a:	440d      	add	r5, r1
 8005f0c:	eb08 0244 	add.w	r2, r8, r4, lsl #1
		w = lfn[di - 1];
 8005f10:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d001      	beq.n	8005f1c <follow_path+0xf0>
 8005f18:	2b2e      	cmp	r3, #46	; 0x2e
 8005f1a:	d102      	bne.n	8005f22 <follow_path+0xf6>
	while (di) {						/* Strip trailing spaces and dots */
 8005f1c:	3c01      	subs	r4, #1
 8005f1e:	d1f7      	bne.n	8005f10 <follow_path+0xe4>
 8005f20:	e7e3      	b.n	8005eea <follow_path+0xbe>
		*d++ = (BYTE)val;
 8005f22:	2220      	movs	r2, #32
 8005f24:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8005f28:	f04f 0900 	mov.w	r9, #0
	mem_set(dp->fn, ' ', 11);
 8005f2c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
	lfn[di] = 0;						/* LFN is created */
 8005f30:	f828 9014 	strh.w	r9, [r8, r4, lsl #1]
		*d++ = (BYTE)val;
 8005f34:	6019      	str	r1, [r3, #0]
 8005f36:	6059      	str	r1, [r3, #4]
 8005f38:	721a      	strb	r2, [r3, #8]
 8005f3a:	725a      	strb	r2, [r3, #9]
 8005f3c:	729a      	strb	r2, [r3, #10]
	lfn[di] = 0;						/* LFN is created */
 8005f3e:	eb08 0344 	add.w	r3, r8, r4, lsl #1
 8005f42:	e001      	b.n	8005f48 <follow_path+0x11c>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005f44:	f109 0901 	add.w	r9, r9, #1
 8005f48:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8005f4c:	2820      	cmp	r0, #32
 8005f4e:	d0f9      	beq.n	8005f44 <follow_path+0x118>
 8005f50:	282e      	cmp	r0, #46	; 0x2e
 8005f52:	d0f7      	beq.n	8005f44 <follow_path+0x118>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005f54:	f1b9 0f00 	cmp.w	r9, #0
 8005f58:	d001      	beq.n	8005f5e <follow_path+0x132>
 8005f5a:	f04a 0a03 	orr.w	sl, sl, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005f5e:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8005f62:	2a2e      	cmp	r2, #46	; 0x2e
 8005f64:	d001      	beq.n	8005f6a <follow_path+0x13e>
 8005f66:	3c01      	subs	r4, #1
 8005f68:	d1f9      	bne.n	8005f5e <follow_path+0x132>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 8005f6a:	f04f 0b00 	mov.w	fp, #0
 8005f6e:	2308      	movs	r3, #8
 8005f70:	465e      	mov	r6, fp
		w = lfn[si++];					/* Get an LFN character */
 8005f72:	f109 0901 	add.w	r9, r9, #1
		if (!w) break;					/* Break on end of the LFN */
 8005f76:	b328      	cbz	r0, 8005fc4 <follow_path+0x198>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005f78:	2820      	cmp	r0, #32
 8005f7a:	d071      	beq.n	8006060 <follow_path+0x234>
 8005f7c:	282e      	cmp	r0, #46	; 0x2e
 8005f7e:	d072      	beq.n	8006066 <follow_path+0x23a>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005f80:	459b      	cmp	fp, r3
 8005f82:	d27b      	bcs.n	800607c <follow_path+0x250>
 8005f84:	45a1      	cmp	r9, r4
 8005f86:	d070      	beq.n	800606a <follow_path+0x23e>
		if (w >= 0x80) {				/* Non ASCII character */
 8005f88:	287f      	cmp	r0, #127	; 0x7f
 8005f8a:	f200 808f 	bhi.w	80060ac <follow_path+0x280>
	while (*str && *str != chr) str++;
 8005f8e:	282b      	cmp	r0, #43	; 0x2b
 8005f90:	d009      	beq.n	8005fa6 <follow_path+0x17a>
 8005f92:	222c      	movs	r2, #44	; 0x2c
 8005f94:	496c      	ldr	r1, [pc, #432]	; (8006148 <follow_path+0x31c>)
 8005f96:	e004      	b.n	8005fa2 <follow_path+0x176>
 8005f98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	f000 80b3 	beq.w	8006108 <follow_path+0x2dc>
 8005fa2:	4282      	cmp	r2, r0
 8005fa4:	d1f8      	bne.n	8005f98 <follow_path+0x16c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005fa6:	465a      	mov	r2, fp
 8005fa8:	205f      	movs	r0, #95	; 0x5f
 8005faa:	f04a 0a03 	orr.w	sl, sl, #3
		dp->fn[i++] = (BYTE)w;
 8005fae:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8005fb2:	f102 0b01 	add.w	fp, r2, #1
 8005fb6:	5488      	strb	r0, [r1, r2]
 8005fb8:	f838 0019 	ldrh.w	r0, [r8, r9, lsl #1]
		w = lfn[si++];					/* Get an LFN character */
 8005fbc:	f109 0901 	add.w	r9, r9, #1
		if (!w) break;					/* Break on end of the LFN */
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d1d9      	bne.n	8005f78 <follow_path+0x14c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8005fc4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8005fc8:	7811      	ldrb	r1, [r2, #0]
 8005fca:	29e5      	cmp	r1, #229	; 0xe5
 8005fcc:	d103      	bne.n	8005fd6 <follow_path+0x1aa>
 8005fce:	2105      	movs	r1, #5
 8005fd0:	7011      	strb	r1, [r2, #0]
 8005fd2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
	if (ni == 8) b <<= 2;
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	bf04      	itt	eq
 8005fda:	00b6      	lsleq	r6, r6, #2
 8005fdc:	b2f6      	uxtbeq	r6, r6
 8005fde:	f006 030c 	and.w	r3, r6, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d052      	beq.n	800608c <follow_path+0x260>
 8005fe6:	f006 0603 	and.w	r6, r6, #3
 8005fea:	2e03      	cmp	r6, #3
 8005fec:	d04e      	beq.n	800608c <follow_path+0x260>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005fee:	f01a 0f02 	tst.w	sl, #2
 8005ff2:	d107      	bne.n	8006004 <follow_path+0x1d8>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005ff4:	2e01      	cmp	r6, #1
 8005ff6:	bf08      	it	eq
 8005ff8:	f04a 0a10 	orreq.w	sl, sl, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	bf08      	it	eq
 8006000:	f04a 0a08 	orreq.w	sl, sl, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006004:	f882 a00b 	strb.w	sl, [r2, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006008:	2100      	movs	r1, #0
 800600a:	4638      	mov	r0, r7
 800600c:	f7fe ff90 	bl	8004f30 <dir_sdi>
	if (res != FR_OK) return res;
 8006010:	b9d8      	cbnz	r0, 800604a <follow_path+0x21e>
 8006012:	4638      	mov	r0, r7
 8006014:	f7fe f874 	bl	8004100 <dir_find.part.11>
			ns = dp->fn[NSFLAG];
 8006018:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800601c:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800601e:	b9b8      	cbnz	r0, 8006050 <follow_path+0x224>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006020:	0759      	lsls	r1, r3, #29
 8006022:	f53f af63 	bmi.w	8005eec <follow_path+0xc0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006026:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800602a:	7ada      	ldrb	r2, [r3, #11]
 800602c:	06d2      	lsls	r2, r2, #27
 800602e:	d55a      	bpl.n	80060e6 <follow_path+0x2ba>
			dp->sclust = ld_clust(dp->fs, dir);
 8006030:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006034:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8006036:	f891 1200 	ldrb.w	r1, [r1, #512]	; 0x200
 800603a:	2903      	cmp	r1, #3
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800603c:	bf04      	itt	eq
 800603e:	8a9b      	ldrheq	r3, [r3, #20]
 8006040:	ea42 4203 	orreq.w	r2, r2, r3, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 8006044:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006048:	e701      	b.n	8005e4e <follow_path+0x22>
			ns = dp->fn[NSFLAG];
 800604a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800604e:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006050:	2804      	cmp	r0, #4
 8006052:	f47f af4b 	bne.w	8005eec <follow_path+0xc0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006056:	f013 0f04 	tst.w	r3, #4
 800605a:	bf08      	it	eq
 800605c:	2005      	moveq	r0, #5
 800605e:	e745      	b.n	8005eec <follow_path+0xc0>
			cf |= NS_LOSS | NS_LFN; continue;
 8006060:	f04a 0a03 	orr.w	sl, sl, #3
 8006064:	e7a8      	b.n	8005fb8 <follow_path+0x18c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006066:	45a1      	cmp	r9, r4
 8006068:	d1fa      	bne.n	8006060 <follow_path+0x234>
			if (ni == 11) {				/* Long extension */
 800606a:	2b0b      	cmp	r3, #11
 800606c:	d03f      	beq.n	80060ee <follow_path+0x2c2>
			b <<= 2; continue;
 800606e:	00b6      	lsls	r6, r6, #2
 8006070:	b2f6      	uxtb	r6, r6
 8006072:	46a1      	mov	r9, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006074:	230b      	movs	r3, #11
 8006076:	f04f 0b08 	mov.w	fp, #8
 800607a:	e79d      	b.n	8005fb8 <follow_path+0x18c>
			if (ni == 11) {				/* Long extension */
 800607c:	2b0b      	cmp	r3, #11
 800607e:	d036      	beq.n	80060ee <follow_path+0x2c2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006080:	45a1      	cmp	r9, r4
 8006082:	d0f4      	beq.n	800606e <follow_path+0x242>
 8006084:	f04a 0a03 	orr.w	sl, sl, #3
			if (si > di) break;			/* No extension */
 8006088:	d89c      	bhi.n	8005fc4 <follow_path+0x198>
 800608a:	e7f0      	b.n	800606e <follow_path+0x242>
		cf |= NS_LFN;
 800608c:	f04a 0a02 	orr.w	sl, sl, #2
 8006090:	e7b8      	b.n	8006004 <follow_path+0x1d8>
	*path = &p[si];						/* Return pointer to the next segment */
 8006092:	440d      	add	r5, r1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006094:	f04f 0a04 	mov.w	sl, #4
 8006098:	e738      	b.n	8005f0c <follow_path+0xe0>
		res = dir_sdi(dp, 0);
 800609a:	4621      	mov	r1, r4
 800609c:	4638      	mov	r0, r7
 800609e:	f7fe ff47 	bl	8004f30 <dir_sdi>
		dp->dir = 0;
 80060a2:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
}
 80060a6:	b003      	add	sp, #12
 80060a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ac:	9301      	str	r3, [sp, #4]
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 80060ae:	f001 fa59 	bl	8007564 <ff_wtoupper>
 80060b2:	2100      	movs	r1, #0
 80060b4:	f001 f96e 	bl	8007394 <ff_convert>
		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 80060b8:	28ff      	cmp	r0, #255	; 0xff
			cf |= NS_LFN;				/* Force create LFN entry */
 80060ba:	f04a 0102 	orr.w	r1, sl, #2
		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	d93a      	bls.n	8006138 <follow_path+0x30c>
			if (i >= ni - 1) {
 80060c2:	1e5a      	subs	r2, r3, #1
 80060c4:	4593      	cmp	fp, r2
 80060c6:	d20a      	bcs.n	80060de <follow_path+0x2b2>
			dp->fn[i++] = (BYTE)(w >> 8);
 80060c8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80060cc:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80060d0:	f802 c00b 	strb.w	ip, [r2, fp]
			cf |= NS_LFN;				/* Force create LFN entry */
 80060d4:	468a      	mov	sl, r1
			dp->fn[i++] = (BYTE)(w >> 8);
 80060d6:	f10b 0201 	add.w	r2, fp, #1
 80060da:	b2c0      	uxtb	r0, r0
 80060dc:	e767      	b.n	8005fae <follow_path+0x182>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 80060de:	f04a 0a03 	orr.w	sl, sl, #3
 80060e2:	469b      	mov	fp, r3
 80060e4:	e768      	b.n	8005fb8 <follow_path+0x18c>
				res = FR_NO_PATH; break;
 80060e6:	2005      	movs	r0, #5
}
 80060e8:	b003      	add	sp, #12
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80060ee:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
				cf |= NS_LOSS | NS_LFN; break;
 80060f2:	f04a 0a03 	orr.w	sl, sl, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80060f6:	7813      	ldrb	r3, [r2, #0]
 80060f8:	2be5      	cmp	r3, #229	; 0xe5
 80060fa:	f47f af70 	bne.w	8005fde <follow_path+0x1b2>
 80060fe:	2305      	movs	r3, #5
 8006100:	7013      	strb	r3, [r2, #0]
 8006102:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8006106:	e76a      	b.n	8005fde <follow_path+0x1b2>
				if (IsUpper(w)) {		/* ASCII large capital */
 8006108:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
 800610c:	b292      	uxth	r2, r2
 800610e:	2a19      	cmp	r2, #25
 8006110:	d804      	bhi.n	800611c <follow_path+0x2f0>
					b |= 2;
 8006112:	f046 0602 	orr.w	r6, r6, #2
 8006116:	b2c0      	uxtb	r0, r0
 8006118:	465a      	mov	r2, fp
 800611a:	e748      	b.n	8005fae <follow_path+0x182>
					if (IsLower(w)) {	/* ASCII small capital */
 800611c:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
 8006120:	b292      	uxth	r2, r2
 8006122:	2a19      	cmp	r2, #25
 8006124:	d805      	bhi.n	8006132 <follow_path+0x306>
						b |= 1; w -= 0x20;
 8006126:	3820      	subs	r0, #32
 8006128:	465a      	mov	r2, fp
 800612a:	b2c0      	uxtb	r0, r0
 800612c:	f046 0601 	orr.w	r6, r6, #1
 8006130:	e73d      	b.n	8005fae <follow_path+0x182>
 8006132:	b2c0      	uxtb	r0, r0
					if (IsLower(w)) {	/* ASCII small capital */
 8006134:	465a      	mov	r2, fp
 8006136:	e73a      	b.n	8005fae <follow_path+0x182>
			cf |= NS_LFN;				/* Force create LFN entry */
 8006138:	468a      	mov	sl, r1
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800613a:	2800      	cmp	r0, #0
 800613c:	f43f af33 	beq.w	8005fa6 <follow_path+0x17a>
 8006140:	e725      	b.n	8005f8e <follow_path+0x162>
 8006142:	bf00      	nop
 8006144:	0800970d 	.word	0x0800970d
 8006148:	08009719 	.word	0x08009719

0800614c <f_mount>:
{
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	b084      	sub	sp, #16
	if (*path) {	/* If the pointer is not a null */
 8006152:	2900      	cmp	r1, #0
 8006154:	d04f      	beq.n	80061f6 <f_mount+0xaa>
 8006156:	460c      	mov	r4, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006158:	7809      	ldrb	r1, [r1, #0]
 800615a:	4605      	mov	r5, r0
 800615c:	291f      	cmp	r1, #31
 800615e:	4617      	mov	r7, r2
 8006160:	d909      	bls.n	8006176 <f_mount+0x2a>
 8006162:	293a      	cmp	r1, #58	; 0x3a
 8006164:	d047      	beq.n	80061f6 <f_mount+0xaa>
 8006166:	4622      	mov	r2, r4
 8006168:	e001      	b.n	800616e <f_mount+0x22>
 800616a:	2b3a      	cmp	r3, #58	; 0x3a
 800616c:	d03c      	beq.n	80061e8 <f_mount+0x9c>
 800616e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006172:	2b1f      	cmp	r3, #31
 8006174:	d8f9      	bhi.n	800616a <f_mount+0x1e>
		vol = 0;		/* Drive 0 */
 8006176:	f04f 0800 	mov.w	r8, #0
	cfs = FatFs[vol];					/* Pointer to fs object */
 800617a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800645c <f_mount+0x310>
 800617e:	f859 6028 	ldr.w	r6, [r9, r8, lsl #2]
	if (cfs) {
 8006182:	b196      	cbz	r6, 80061aa <f_mount+0x5e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006184:	4bb2      	ldr	r3, [pc, #712]	; (8006450 <f_mount+0x304>)
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8006186:	f8d6 020c 	ldr.w	r0, [r6, #524]	; 0x20c
		if (Files[i].fs == fs) Files[i].fs = 0;
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4296      	cmp	r6, r2
 800618e:	bf04      	itt	eq
 8006190:	2200      	moveq	r2, #0
 8006192:	601a      	streq	r2, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	4296      	cmp	r6, r2
 8006198:	bf04      	itt	eq
 800619a:	2200      	moveq	r2, #0
 800619c:	60da      	streq	r2, [r3, #12]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800619e:	f001 fa09 	bl	80075b4 <ff_del_syncobj>
 80061a2:	b1e0      	cbz	r0, 80061de <f_mount+0x92>
		cfs->fs_type = 0;				/* Clear old fs object */
 80061a4:	2300      	movs	r3, #0
 80061a6:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
	if (fs) {
 80061aa:	b18d      	cbz	r5, 80061d0 <f_mount+0x84>
		fs->fs_type = 0;				/* Clear new fs object */
 80061ac:	2600      	movs	r6, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80061ae:	f505 7103 	add.w	r1, r5, #524	; 0x20c
		fs->fs_type = 0;				/* Clear new fs object */
 80061b2:	f885 6200 	strb.w	r6, [r5, #512]	; 0x200
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80061b6:	fa5f f088 	uxtb.w	r0, r8
 80061ba:	f001 f9eb 	bl	8007594 <ff_cre_syncobj>
 80061be:	b170      	cbz	r0, 80061de <f_mount+0x92>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061c0:	2f01      	cmp	r7, #1
	FatFs[vol] = fs;					/* Register new fs object */
 80061c2:	f849 5028 	str.w	r5, [r9, r8, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061c6:	d01b      	beq.n	8006200 <f_mount+0xb4>
}
 80061c8:	4630      	mov	r0, r6
 80061ca:	b004      	add	sp, #16
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061d0:	462e      	mov	r6, r5
}
 80061d2:	4630      	mov	r0, r6
	FatFs[vol] = fs;					/* Register new fs object */
 80061d4:	f849 5028 	str.w	r5, [r9, r8, lsl #2]
}
 80061d8:	b004      	add	sp, #16
 80061da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80061de:	2602      	movs	r6, #2
}
 80061e0:	4630      	mov	r0, r6
 80061e2:	b004      	add	sp, #16
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			i = *tp++ - '0'; 
 80061e8:	1c63      	adds	r3, r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80061ea:	429a      	cmp	r2, r3
			i = *tp++ - '0'; 
 80061ec:	f1a1 0830 	sub.w	r8, r1, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80061f0:	d101      	bne.n	80061f6 <f_mount+0xaa>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80061f2:	2930      	cmp	r1, #48	; 0x30
 80061f4:	d0c1      	beq.n	800617a <f_mount+0x2e>
 80061f6:	260b      	movs	r6, #11
}
 80061f8:	4630      	mov	r0, r6
 80061fa:	b004      	add	sp, #16
 80061fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006200:	7821      	ldrb	r1, [r4, #0]
 8006202:	291f      	cmp	r1, #31
 8006204:	d90b      	bls.n	800621e <f_mount+0xd2>
 8006206:	293a      	cmp	r1, #58	; 0x3a
 8006208:	bf18      	it	ne
 800620a:	4622      	movne	r2, r4
 800620c:	d102      	bne.n	8006214 <f_mount+0xc8>
 800620e:	e7f2      	b.n	80061f6 <f_mount+0xaa>
 8006210:	2b3a      	cmp	r3, #58	; 0x3a
 8006212:	d01c      	beq.n	800624e <f_mount+0x102>
 8006214:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006218:	2b1f      	cmp	r3, #31
 800621a:	d8f9      	bhi.n	8006210 <f_mount+0xc4>
		vol = 0;		/* Drive 0 */
 800621c:	2600      	movs	r6, #0
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800621e:	2d00      	cmp	r5, #0
 8006220:	d07b      	beq.n	800631a <f_mount+0x1ce>
	return ff_req_grant(fs->sobj);
 8006222:	f8d5 020c 	ldr.w	r0, [r5, #524]	; 0x20c
 8006226:	f001 f9cb 	bl	80075c0 <ff_req_grant>
	ENTER_FF(fs);						/* Lock the volume */
 800622a:	b170      	cbz	r0, 800624a <f_mount+0xfe>
	if (fs->fs_type) {					/* If the volume has been mounted */
 800622c:	f895 3200 	ldrb.w	r3, [r5, #512]	; 0x200
 8006230:	b1ab      	cbz	r3, 800625e <f_mount+0x112>
		stat = disk_status(fs->drv);
 8006232:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8006236:	f7fd fa3d 	bl	80036b4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800623a:	07c3      	lsls	r3, r0, #31
 800623c:	d40f      	bmi.n	800625e <f_mount+0x112>
 800623e:	2600      	movs	r6, #0
		ff_rel_grant(fs->sobj);
 8006240:	f8d5 020c 	ldr.w	r0, [r5, #524]	; 0x20c
 8006244:	f001 f9c6 	bl	80075d4 <ff_rel_grant>
 8006248:	e7be      	b.n	80061c8 <f_mount+0x7c>
	ENTER_FF(fs);						/* Lock the volume */
 800624a:	260f      	movs	r6, #15
 800624c:	e7bc      	b.n	80061c8 <f_mount+0x7c>
			i = *tp++ - '0'; 
 800624e:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006250:	42a2      	cmp	r2, r4
			i = *tp++ - '0'; 
 8006252:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006256:	d1ce      	bne.n	80061f6 <f_mount+0xaa>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006258:	2930      	cmp	r1, #48	; 0x30
 800625a:	d0e0      	beq.n	800621e <f_mount+0xd2>
 800625c:	e7cb      	b.n	80061f6 <f_mount+0xaa>
	fs->fs_type = 0;					/* Clear the file system object */
 800625e:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006260:	b2f0      	uxtb	r0, r6
 8006262:	f885 0201 	strb.w	r0, [r5, #513]	; 0x201
	fs->fs_type = 0;					/* Clear the file system object */
 8006266:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800626a:	f7fd fa2d 	bl	80036c8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800626e:	f000 0001 	and.w	r0, r0, #1
 8006272:	f000 02ff 	and.w	r2, r0, #255	; 0xff
 8006276:	2800      	cmp	r0, #0
 8006278:	d14d      	bne.n	8006316 <f_mount+0x1ca>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800627a:	f04f 34ff 	mov.w	r4, #4294967295
 800627e:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
 8006282:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006286:	2301      	movs	r3, #1
 8006288:	4629      	mov	r1, r5
 800628a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 800628e:	f7fd fa2b 	bl	80036e8 <disk_read>
 8006292:	b118      	cbz	r0, 800629c <f_mount+0x150>
			fs->winsect = sector;
 8006294:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
 8006298:	2601      	movs	r6, #1
 800629a:	e7d1      	b.n	8006240 <f_mount+0xf4>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800629c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80062a0:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
			fs->winsect = sector;
 80062a4:	f8c5 0230 	str.w	r0, [r5, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d132      	bne.n	8006312 <f_mount+0x1c6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80062ac:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 80062b0:	4c68      	ldr	r4, [pc, #416]	; (8006454 <f_mount+0x308>)
 80062b2:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80062b6:	42a1      	cmp	r1, r4
 80062b8:	d031      	beq.n	800631e <f_mount+0x1d2>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80062ba:	f8d5 1052 	ldr.w	r1, [r5, #82]	; 0x52
 80062be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80062c2:	42a1      	cmp	r1, r4
 80062c4:	d02b      	beq.n	800631e <f_mount+0x1d2>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80062c6:	f895 41c2 	ldrb.w	r4, [r5, #450]	; 0x1c2
 80062ca:	b10c      	cbz	r4, 80062d0 <f_mount+0x184>
 80062cc:	f8d5 41c6 	ldr.w	r4, [r5, #454]	; 0x1c6
 80062d0:	f895 11d2 	ldrb.w	r1, [r5, #466]	; 0x1d2
 80062d4:	b109      	cbz	r1, 80062da <f_mount+0x18e>
 80062d6:	f8d5 11d6 	ldr.w	r1, [r5, #470]	; 0x1d6
 80062da:	f895 01e2 	ldrb.w	r0, [r5, #482]	; 0x1e2
 80062de:	9101      	str	r1, [sp, #4]
 80062e0:	b108      	cbz	r0, 80062e6 <f_mount+0x19a>
 80062e2:	f8d5 01e6 	ldr.w	r0, [r5, #486]	; 0x1e6
 80062e6:	f895 11f2 	ldrb.w	r1, [r5, #498]	; 0x1f2
 80062ea:	9002      	str	r0, [sp, #8]
 80062ec:	b109      	cbz	r1, 80062f2 <f_mount+0x1a6>
 80062ee:	f8d5 11f6 	ldr.w	r1, [r5, #502]	; 0x1f6
 80062f2:	9103      	str	r1, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80062f4:	2c00      	cmp	r4, #0
 80062f6:	f040 810a 	bne.w	800650e <f_mount+0x3c2>
			bsect = br[i];
 80062fa:	9c01      	ldr	r4, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	f040 80db 	bne.w	80064b8 <f_mount+0x36c>
			bsect = br[i];
 8006302:	9c02      	ldr	r4, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006304:	2c00      	cmp	r4, #0
 8006306:	f040 80ab 	bne.w	8006460 <f_mount+0x314>
			bsect = br[i];
 800630a:	9c03      	ldr	r4, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800630c:	2c00      	cmp	r4, #0
 800630e:	f040 8088 	bne.w	8006422 <f_mount+0x2d6>
 8006312:	260d      	movs	r6, #13
 8006314:	e794      	b.n	8006240 <f_mount+0xf4>
 8006316:	2603      	movs	r6, #3
 8006318:	e792      	b.n	8006240 <f_mount+0xf4>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800631a:	260c      	movs	r6, #12
 800631c:	e754      	b.n	80061c8 <f_mount+0x7c>
	bsect = 0;
 800631e:	4604      	mov	r4, r0
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006320:	f8b5 300b 	ldrh.w	r3, [r5, #11]
 8006324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006328:	d1f3      	bne.n	8006312 <f_mount+0x1c6>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800632a:	f8b5 c016 	ldrh.w	ip, [r5, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800632e:	f1bc 0f00 	cmp.w	ip, #0
 8006332:	d101      	bne.n	8006338 <f_mount+0x1ec>
 8006334:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006338:	f895 e010 	ldrb.w	lr, [r5, #16]
	fs->fsize = fasize;
 800633c:	f8c5 c21c 	str.w	ip, [r5, #540]	; 0x21c
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006340:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006344:	2b01      	cmp	r3, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006346:	f885 e203 	strb.w	lr, [r5, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800634a:	d8e2      	bhi.n	8006312 <f_mount+0x1c6>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800634c:	7b68      	ldrb	r0, [r5, #13]
 800634e:	f885 0202 	strb.w	r0, [r5, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006352:	2800      	cmp	r0, #0
 8006354:	d0dd      	beq.n	8006312 <f_mount+0x1c6>
 8006356:	1e43      	subs	r3, r0, #1
 8006358:	4203      	tst	r3, r0
 800635a:	d1da      	bne.n	8006312 <f_mount+0x1c6>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800635c:	f8b5 8011 	ldrh.w	r8, [r5, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006360:	f018 0f0f 	tst.w	r8, #15
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006364:	f8a5 8208 	strh.w	r8, [r5, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006368:	d1d3      	bne.n	8006312 <f_mount+0x1c6>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800636a:	f8b5 3013 	ldrh.w	r3, [r5, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800636e:	b903      	cbnz	r3, 8006372 <f_mount+0x226>
 8006370:	6a2b      	ldr	r3, [r5, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006372:	89ee      	ldrh	r6, [r5, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006374:	2e00      	cmp	r6, #0
 8006376:	d0cc      	beq.n	8006312 <f_mount+0x1c6>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006378:	fb0c fe0e 	mul.w	lr, ip, lr
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800637c:	eb06 1118 	add.w	r1, r6, r8, lsr #4
 8006380:	4471      	add	r1, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006382:	4299      	cmp	r1, r3
 8006384:	d8c5      	bhi.n	8006312 <f_mount+0x1c6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	fbb3 f0f0 	udiv	r0, r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800638c:	2800      	cmp	r0, #0
 800638e:	d0c0      	beq.n	8006312 <f_mount+0x1c6>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006390:	f640 7af5 	movw	sl, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006394:	f64f 79f5 	movw	r9, #65525	; 0xfff5
	fmt = FS_FAT12;
 8006398:	4550      	cmp	r0, sl
 800639a:	bf8c      	ite	hi
 800639c:	f04f 0a02 	movhi.w	sl, #2
 80063a0:	f04f 0a01 	movls.w	sl, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80063a4:	4548      	cmp	r0, r9
 80063a6:	4426      	add	r6, r4
 80063a8:	4421      	add	r1, r4
 80063aa:	f100 0302 	add.w	r3, r0, #2
 80063ae:	f240 8121 	bls.w	80065f4 <f_mount+0x4a8>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80063b2:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80063b6:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80063ba:	f8c5 6224 	str.w	r6, [r5, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80063be:	f8c5 122c 	str.w	r1, [r5, #556]	; 0x22c
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80063c2:	f1b8 0f00 	cmp.w	r8, #0
 80063c6:	d1a4      	bne.n	8006312 <f_mount+0x1c6>
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80063c8:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80063ca:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80063cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063d0:	ebbc 2f53 	cmp.w	ip, r3, lsr #9
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80063d4:	f8c5 1228 	str.w	r1, [r5, #552]	; 0x228
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80063d8:	d39b      	bcc.n	8006312 <f_mount+0x1c6>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 80063de:	2080      	movs	r0, #128	; 0x80
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80063e0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80063e2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80063e6:	2901      	cmp	r1, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80063e8:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
	fs->fsi_flag = 0x80;
 80063ec:	f885 0205 	strb.w	r0, [r5, #517]	; 0x205
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80063f0:	f000 80da 	beq.w	80065a8 <f_mount+0x45c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80063f4:	2703      	movs	r7, #3
	fs->id = ++Fsid;	/* File system mount ID */
 80063f6:	4918      	ldr	r1, [pc, #96]	; (8006458 <f_mount+0x30c>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <f_mount+0x304>)
	fs->id = ++Fsid;	/* File system mount ID */
 80063fa:	880a      	ldrh	r2, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063fc:	6818      	ldr	r0, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80063fe:	3201      	adds	r2, #1
 8006400:	b292      	uxth	r2, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006402:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;	/* File system mount ID */
 8006404:	800a      	strh	r2, [r1, #0]
 8006406:	f8a5 2206 	strh.w	r2, [r5, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 800640a:	bf04      	itt	eq
 800640c:	2200      	moveq	r2, #0
 800640e:	601a      	streq	r2, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
	fs->fs_type = fmt;	/* FAT sub-type */
 8006412:	f885 7200 	strb.w	r7, [r5, #512]	; 0x200
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006416:	42aa      	cmp	r2, r5
 8006418:	f47f af11 	bne.w	800623e <f_mount+0xf2>
 800641c:	2600      	movs	r6, #0
 800641e:	60de      	str	r6, [r3, #12]
 8006420:	e70e      	b.n	8006240 <f_mount+0xf4>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006422:	f04f 36ff 	mov.w	r6, #4294967295
 8006426:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006428:	42b4      	cmp	r4, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800642a:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 800642e:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006432:	f000 8085 	beq.w	8006540 <f_mount+0x3f4>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006436:	2301      	movs	r3, #1
 8006438:	4622      	mov	r2, r4
 800643a:	4629      	mov	r1, r5
 800643c:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8006440:	f7fd f952 	bl	80036e8 <disk_read>
 8006444:	2800      	cmp	r0, #0
 8006446:	d079      	beq.n	800653c <f_mount+0x3f0>
			fs->winsect = sector;
 8006448:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
 800644c:	e724      	b.n	8006298 <f_mount+0x14c>
 800644e:	bf00      	nop
 8006450:	2000033c 	.word	0x2000033c
 8006454:	00544146 	.word	0x00544146
 8006458:	20000354 	.word	0x20000354
 800645c:	20000338 	.word	0x20000338
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006460:	f04f 36ff 	mov.w	r6, #4294967295
 8006464:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006466:	42b4      	cmp	r4, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006468:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 800646c:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006470:	d00b      	beq.n	800648a <f_mount+0x33e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006472:	2301      	movs	r3, #1
 8006474:	4622      	mov	r2, r4
 8006476:	4629      	mov	r1, r5
 8006478:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 800647c:	f7fd f934 	bl	80036e8 <disk_read>
 8006480:	2800      	cmp	r0, #0
 8006482:	f040 808b 	bne.w	800659c <f_mount+0x450>
			fs->winsect = sector;
 8006486:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800648a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800648e:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
 8006492:	429a      	cmp	r2, r3
 8006494:	f47f af39 	bne.w	800630a <f_mount+0x1be>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006498:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 800649c:	4977      	ldr	r1, [pc, #476]	; (800667c <f_mount+0x530>)
 800649e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064a2:	428b      	cmp	r3, r1
 80064a4:	f43f af3c 	beq.w	8006320 <f_mount+0x1d4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80064a8:	f8d5 3052 	ldr.w	r3, [r5, #82]	; 0x52
 80064ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064b0:	428b      	cmp	r3, r1
 80064b2:	f47f af2a 	bne.w	800630a <f_mount+0x1be>
 80064b6:	e733      	b.n	8006320 <f_mount+0x1d4>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80064b8:	f04f 36ff 	mov.w	r6, #4294967295
 80064bc:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80064be:	42b4      	cmp	r4, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80064c0:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 80064c4:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 80064c8:	d00a      	beq.n	80064e0 <f_mount+0x394>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80064ca:	2301      	movs	r3, #1
 80064cc:	4622      	mov	r2, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 80064d4:	f7fd f908 	bl	80036e8 <disk_read>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d15c      	bne.n	8006596 <f_mount+0x44a>
			fs->winsect = sector;
 80064dc:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80064e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064e4:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
 80064e8:	429a      	cmp	r2, r3
 80064ea:	f47f af0a 	bne.w	8006302 <f_mount+0x1b6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80064ee:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 80064f2:	4962      	ldr	r1, [pc, #392]	; (800667c <f_mount+0x530>)
 80064f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	428b      	cmp	r3, r1
 80064fa:	f43f af11 	beq.w	8006320 <f_mount+0x1d4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80064fe:	f8d5 3052 	ldr.w	r3, [r5, #82]	; 0x52
 8006502:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006506:	428b      	cmp	r3, r1
 8006508:	f47f aefb 	bne.w	8006302 <f_mount+0x1b6>
 800650c:	e708      	b.n	8006320 <f_mount+0x1d4>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800650e:	f04f 36ff 	mov.w	r6, #4294967295
 8006512:	2100      	movs	r1, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006514:	42b4      	cmp	r4, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006516:	f885 1204 	strb.w	r1, [r5, #516]	; 0x204
 800651a:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 800651e:	d126      	bne.n	800656e <f_mount+0x422>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006520:	4956      	ldr	r1, [pc, #344]	; (800667c <f_mount+0x530>)
 8006522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006526:	428b      	cmp	r3, r1
 8006528:	f43f aefa 	beq.w	8006320 <f_mount+0x1d4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800652c:	f8d5 3052 	ldr.w	r3, [r5, #82]	; 0x52
 8006530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006534:	428b      	cmp	r3, r1
 8006536:	f47f aee0 	bne.w	80062fa <f_mount+0x1ae>
 800653a:	e6f1      	b.n	8006320 <f_mount+0x1d4>
			fs->winsect = sector;
 800653c:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006540:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006544:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
 8006548:	429a      	cmp	r2, r3
 800654a:	f47f aee2 	bne.w	8006312 <f_mount+0x1c6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800654e:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 8006552:	494a      	ldr	r1, [pc, #296]	; (800667c <f_mount+0x530>)
 8006554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006558:	428b      	cmp	r3, r1
 800655a:	f43f aee1 	beq.w	8006320 <f_mount+0x1d4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800655e:	f8d5 3052 	ldr.w	r3, [r5, #82]	; 0x52
 8006562:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006566:	428b      	cmp	r3, r1
 8006568:	f47f aed3 	bne.w	8006312 <f_mount+0x1c6>
 800656c:	e6d8      	b.n	8006320 <f_mount+0x1d4>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800656e:	2301      	movs	r3, #1
 8006570:	4622      	mov	r2, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8006578:	f7fd f8b6 	bl	80036e8 <disk_read>
 800657c:	b988      	cbnz	r0, 80065a2 <f_mount+0x456>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800657e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006582:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
			fs->winsect = sector;
 8006586:	f8c5 4230 	str.w	r4, [r5, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800658a:	429a      	cmp	r2, r3
 800658c:	f47f aeb5 	bne.w	80062fa <f_mount+0x1ae>
 8006590:	f8d5 3036 	ldr.w	r3, [r5, #54]	; 0x36
 8006594:	e7c4      	b.n	8006520 <f_mount+0x3d4>
			fs->winsect = sector;
 8006596:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
 800659a:	e6b2      	b.n	8006302 <f_mount+0x1b6>
 800659c:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
 80065a0:	e6b3      	b.n	800630a <f_mount+0x1be>
 80065a2:	f8c5 6230 	str.w	r6, [r5, #560]	; 0x230
 80065a6:	e6a8      	b.n	80062fa <f_mount+0x1ae>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065a8:	f8d5 3230 	ldr.w	r3, [r5, #560]	; 0x230
		&& move_window(fs, bsect + 1) == FR_OK)
 80065ac:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80065ae:	4299      	cmp	r1, r3
 80065b0:	d148      	bne.n	8006644 <f_mount+0x4f8>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
		fs->fsi_flag = 0;
 80065b6:	2100      	movs	r1, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065b8:	429a      	cmp	r2, r3
		fs->fsi_flag = 0;
 80065ba:	f885 1205 	strb.w	r1, [r5, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065be:	f47f af19 	bne.w	80063f4 <f_mount+0x2a8>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80065c2:	4b2f      	ldr	r3, [pc, #188]	; (8006680 <f_mount+0x534>)
 80065c4:	682a      	ldr	r2, [r5, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	f47f af14 	bne.w	80063f4 <f_mount+0x2a8>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80065cc:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80065d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065d4:	f8d5 21e4 	ldr.w	r2, [r5, #484]	; 0x1e4
 80065d8:	3320      	adds	r3, #32
 80065da:	429a      	cmp	r2, r3
 80065dc:	f47f af0a 	bne.w	80063f4 <f_mount+0x2a8>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80065e0:	f8d5 21e8 	ldr.w	r2, [r5, #488]	; 0x1e8
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80065e4:	f8d5 31ec 	ldr.w	r3, [r5, #492]	; 0x1ec
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80065e8:	f8c5 2214 	str.w	r2, [r5, #532]	; 0x214
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80065ec:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 80065f0:	2703      	movs	r7, #3
 80065f2:	e700      	b.n	80063f6 <f_mount+0x2aa>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80065f4:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80065f8:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80065fc:	f8c5 6224 	str.w	r6, [r5, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8006600:	f8c5 122c 	str.w	r1, [r5, #556]	; 0x22c
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006604:	f1b8 0f00 	cmp.w	r8, #0
 8006608:	f43f ae83 	beq.w	8006312 <f_mount+0x1c6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800660c:	4476      	add	r6, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800660e:	f1ba 0f02 	cmp.w	sl, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006612:	f8c5 6228 	str.w	r6, [r5, #552]	; 0x228
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006616:	d01e      	beq.n	8006656 <f_mount+0x50a>
 8006618:	f003 0201 	and.w	r2, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800661c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006624:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 8006628:	ebbc 2f53 	cmp.w	ip, r3, lsr #9
 800662c:	f4ff ae71 	bcc.w	8006312 <f_mount+0x1c6>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8006634:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006636:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 800663a:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
	fs->fsi_flag = 0x80;
 800663e:	f885 2205 	strb.w	r2, [r5, #517]	; 0x205
 8006642:	e6d8      	b.n	80063f6 <f_mount+0x2aa>
 8006644:	4628      	mov	r0, r5
 8006646:	f7fd f879 	bl	800373c <move_window.part.3>
		&& move_window(fs, bsect + 1) == FR_OK)
 800664a:	2800      	cmp	r0, #0
 800664c:	f47f aed2 	bne.w	80063f4 <f_mount+0x2a8>
 8006650:	f8b5 21fe 	ldrh.w	r2, [r5, #510]	; 0x1fe
 8006654:	e7ad      	b.n	80065b2 <f_mount+0x466>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006656:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006658:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800665c:	ebbc 2f53 	cmp.w	ip, r3, lsr #9
 8006660:	f4ff ae57 	bcc.w	8006312 <f_mount+0x1c6>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8006668:	2280      	movs	r2, #128	; 0x80
 800666a:	4657      	mov	r7, sl
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800666c:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 8006670:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
	fs->fsi_flag = 0x80;
 8006674:	f885 2205 	strb.w	r2, [r5, #517]	; 0x205
 8006678:	e6bd      	b.n	80063f6 <f_mount+0x2aa>
 800667a:	bf00      	nop
 800667c:	00544146 	.word	0x00544146
 8006680:	41615252 	.word	0x41615252

08006684 <f_open>:
{
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
	if (!fp) return FR_INVALID_OBJECT;
 800668c:	2800      	cmp	r0, #0
 800668e:	d074      	beq.n	800677a <f_open+0xf6>
 8006690:	4604      	mov	r4, r0
	fp->fs = 0;			/* Clear file object */
 8006692:	2000      	movs	r0, #0
 8006694:	460d      	mov	r5, r1
 8006696:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
	*rfs = 0;
 800669a:	9086      	str	r0, [sp, #536]	; 0x218
	if (*path) {	/* If the pointer is not a null */
 800669c:	2900      	cmp	r1, #0
 800669e:	f000 814d 	beq.w	800693c <f_open+0x2b8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80066a2:	780f      	ldrb	r7, [r1, #0]
 80066a4:	4616      	mov	r6, r2
 80066a6:	2f1f      	cmp	r7, #31
 80066a8:	d90b      	bls.n	80066c2 <f_open+0x3e>
 80066aa:	2f3a      	cmp	r7, #58	; 0x3a
 80066ac:	f000 8146 	beq.w	800693c <f_open+0x2b8>
 80066b0:	460b      	mov	r3, r1
 80066b2:	e002      	b.n	80066ba <f_open+0x36>
 80066b4:	2a3a      	cmp	r2, #58	; 0x3a
 80066b6:	d055      	beq.n	8006764 <f_open+0xe0>
 80066b8:	460b      	mov	r3, r1
 80066ba:	785a      	ldrb	r2, [r3, #1]
 80066bc:	1c59      	adds	r1, r3, #1
 80066be:	2a1f      	cmp	r2, #31
 80066c0:	d8f8      	bhi.n	80066b4 <f_open+0x30>
		vol = 0;		/* Drive 0 */
 80066c2:	f04f 0800 	mov.w	r8, #0
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066c6:	4bb0      	ldr	r3, [pc, #704]	; (8006988 <f_open+0x304>)
 80066c8:	f853 7028 	ldr.w	r7, [r3, r8, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	f000 8159 	beq.w	8006984 <f_open+0x300>
	return ff_req_grant(fs->sobj);
 80066d2:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80066d6:	f000 ff73 	bl	80075c0 <ff_req_grant>
	ENTER_FF(fs);						/* Lock the volume */
 80066da:	2800      	cmp	r0, #0
 80066dc:	f000 8134 	beq.w	8006948 <f_open+0x2c4>
	*rfs = fs;							/* Return pointer to the file system object */
 80066e0:	9786      	str	r7, [sp, #536]	; 0x218
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066e2:	f897 3200 	ldrb.w	r3, [r7, #512]	; 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80066e6:	f006 091e 	and.w	r9, r6, #30
	if (fs->fs_type) {					/* If the volume has been mounted */
 80066ea:	b193      	cbz	r3, 8006712 <f_open+0x8e>
		stat = disk_status(fs->drv);
 80066ec:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 80066f0:	f7fc ffe0 	bl	80036b4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80066f4:	07c3      	lsls	r3, r0, #31
 80066f6:	d40c      	bmi.n	8006712 <f_open+0x8e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80066f8:	f1b9 0f00 	cmp.w	r9, #0
 80066fc:	f000 80d8 	beq.w	80068b0 <f_open+0x22c>
 8006700:	0740      	lsls	r0, r0, #29
 8006702:	f140 80d5 	bpl.w	80068b0 <f_open+0x22c>
	LEAVE_FF(dj.fs, res);
 8006706:	9b86      	ldr	r3, [sp, #536]	; 0x218
				return FR_WRITE_PROTECTED;
 8006708:	250a      	movs	r5, #10
	if (fs &&
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 81b7 	bne.w	8006a7e <f_open+0x3fa>
 8006710:	e034      	b.n	800677c <f_open+0xf8>
	fs->fs_type = 0;					/* Clear the file system object */
 8006712:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006714:	fa5f f088 	uxtb.w	r0, r8
	fs->fs_type = 0;					/* Clear the file system object */
 8006718:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800671c:	f887 0201 	strb.w	r0, [r7, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006720:	f7fc ffd2 	bl	80036c8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006724:	07c3      	lsls	r3, r0, #31
 8006726:	f100 81f9 	bmi.w	8006b1c <f_open+0x498>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	d001      	beq.n	8006734 <f_open+0xb0>
 8006730:	0741      	lsls	r1, r0, #29
 8006732:	d4e8      	bmi.n	8006706 <f_open+0x82>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006734:	2200      	movs	r2, #0
 8006736:	f04f 38ff 	mov.w	r8, #4294967295
 800673a:	f887 2204 	strb.w	r2, [r7, #516]	; 0x204
 800673e:	f8c7 8230 	str.w	r8, [r7, #560]	; 0x230
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006742:	2301      	movs	r3, #1
 8006744:	4639      	mov	r1, r7
 8006746:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800674a:	f7fc ffcd 	bl	80036e8 <disk_read>
 800674e:	2800      	cmp	r0, #0
 8006750:	f000 8120 	beq.w	8006994 <f_open+0x310>
			fs->winsect = sector;
 8006754:	f8c7 8230 	str.w	r8, [r7, #560]	; 0x230
	LEAVE_FF(dj.fs, res);
 8006758:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 800675a:	2501      	movs	r5, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 818e 	bne.w	8006a7e <f_open+0x3fa>
 8006762:	e00b      	b.n	800677c <f_open+0xf8>
			i = *tp++ - '0'; 
 8006764:	3501      	adds	r5, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006766:	42a9      	cmp	r1, r5
			i = *tp++ - '0'; 
 8006768:	f1a7 0830 	sub.w	r8, r7, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800676c:	f040 80e6 	bne.w	800693c <f_open+0x2b8>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006770:	2f30      	cmp	r7, #48	; 0x30
 8006772:	f040 80e3 	bne.w	800693c <f_open+0x2b8>
					*path = ++tt;
 8006776:	1c9d      	adds	r5, r3, #2
 8006778:	e7a5      	b.n	80066c6 <f_open+0x42>
	if (!fp) return FR_INVALID_OBJECT;
 800677a:	2509      	movs	r5, #9
}
 800677c:	4628      	mov	r0, r5
 800677e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bsect = 0;
 8006786:	4680      	mov	r8, r0
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006788:	f8b7 200b 	ldrh.w	r2, [r7, #11]
 800678c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006790:	f040 8170 	bne.w	8006a74 <f_open+0x3f0>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006794:	8afa      	ldrh	r2, [r7, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006796:	b902      	cbnz	r2, 800679a <f_open+0x116>
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800679a:	7c39      	ldrb	r1, [r7, #16]
	fs->fsize = fasize;
 800679c:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80067a0:	1e48      	subs	r0, r1, #1
 80067a2:	2801      	cmp	r0, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80067a4:	f887 1203 	strb.w	r1, [r7, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80067a8:	f200 8164 	bhi.w	8006a74 <f_open+0x3f0>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80067ac:	f897 c00d 	ldrb.w	ip, [r7, #13]
 80067b0:	f887 c202 	strb.w	ip, [r7, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80067b4:	f1bc 0f00 	cmp.w	ip, #0
 80067b8:	f000 815c 	beq.w	8006a74 <f_open+0x3f0>
 80067bc:	f10c 30ff 	add.w	r0, ip, #4294967295
 80067c0:	ea10 0f0c 	tst.w	r0, ip
 80067c4:	f040 8156 	bne.w	8006a74 <f_open+0x3f0>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80067c8:	f8b7 b011 	ldrh.w	fp, [r7, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80067cc:	f01b 0f0f 	tst.w	fp, #15
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80067d0:	f8a7 b208 	strh.w	fp, [r7, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80067d4:	f040 814e 	bne.w	8006a74 <f_open+0x3f0>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80067d8:	f8b7 9013 	ldrh.w	r9, [r7, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80067dc:	f1b9 0f00 	cmp.w	r9, #0
 80067e0:	d101      	bne.n	80067e6 <f_open+0x162>
 80067e2:	f8d7 9020 	ldr.w	r9, [r7, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80067e6:	89f8      	ldrh	r0, [r7, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f000 8143 	beq.w	8006a74 <f_open+0x3f0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80067ee:	fb02 f101 	mul.w	r1, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80067f2:	eb00 1e1b 	add.w	lr, r0, fp, lsr #4
 80067f6:	448e      	add	lr, r1
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80067f8:	45ce      	cmp	lr, r9
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80067fa:	9101      	str	r1, [sp, #4]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80067fc:	f200 813a 	bhi.w	8006a74 <f_open+0x3f0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006800:	eba9 090e 	sub.w	r9, r9, lr
 8006804:	fbb9 fcfc 	udiv	ip, r9, ip
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006808:	f1bc 0f00 	cmp.w	ip, #0
 800680c:	f000 8132 	beq.w	8006a74 <f_open+0x3f0>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006810:	f640 79f5 	movw	r9, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006814:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8006818:	eb00 0a08 	add.w	sl, r0, r8
 800681c:	44c6      	add	lr, r8
	fmt = FS_FAT12;
 800681e:	45cc      	cmp	ip, r9
 8006820:	bf8c      	ite	hi
 8006822:	f04f 0902 	movhi.w	r9, #2
 8006826:	f04f 0901 	movls.w	r9, #1
 800682a:	f10c 0002 	add.w	r0, ip, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800682e:	458c      	cmp	ip, r1
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006830:	f8c7 0218 	str.w	r0, [r7, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8006834:	f8c7 8220 	str.w	r8, [r7, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006838:	f8c7 a224 	str.w	sl, [r7, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800683c:	f8c7 e22c 	str.w	lr, [r7, #556]	; 0x22c
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006840:	f240 8339 	bls.w	8006eb6 <f_open+0x832>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006844:	f1bb 0f00 	cmp.w	fp, #0
 8006848:	f040 8114 	bne.w	8006a74 <f_open+0x3f0>
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800684c:	0081      	lsls	r1, r0, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800684e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006854:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006858:	f8c7 0228 	str.w	r0, [r7, #552]	; 0x228
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800685c:	f0c0 810a 	bcc.w	8006a74 <f_open+0x3f0>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006860:	f04f 32ff 	mov.w	r2, #4294967295
	fs->fsi_flag = 0x80;
 8006864:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006866:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 800686a:	f8c7 2210 	str.w	r2, [r7, #528]	; 0x210
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800686e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
	fs->fsi_flag = 0x80;
 8006870:	f887 1205 	strb.w	r1, [r7, #517]	; 0x205
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006874:	2a01      	cmp	r2, #1
 8006876:	f000 8343 	beq.w	8006f00 <f_open+0x87c>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800687a:	f04f 0903 	mov.w	r9, #3
	fs->id = ++Fsid;	/* File system mount ID */
 800687e:	4a43      	ldr	r2, [pc, #268]	; (800698c <f_open+0x308>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006880:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8006990 <f_open+0x30c>
	fs->id = ++Fsid;	/* File system mount ID */
 8006884:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 8006886:	f887 9200 	strb.w	r9, [r7, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800688a:	3301      	adds	r3, #1
 800688c:	b29b      	uxth	r3, r3
 800688e:	8013      	strh	r3, [r2, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006890:	f8d8 2000 	ldr.w	r2, [r8]
	fs->id = ++Fsid;	/* File system mount ID */
 8006894:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006898:	42ba      	cmp	r2, r7
 800689a:	d102      	bne.n	80068a2 <f_open+0x21e>
 800689c:	2300      	movs	r3, #0
 800689e:	f8c8 3000 	str.w	r3, [r8]
 80068a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068a6:	429f      	cmp	r7, r3
 80068a8:	d102      	bne.n	80068b0 <f_open+0x22c>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c8 300c 	str.w	r3, [r8, #12]
		INIT_BUF(dj);
 80068b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80068b4:	f000 fe90 	bl	80075d8 <ff_memalloc>
 80068b8:	4607      	mov	r7, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d034      	beq.n	8006928 <f_open+0x2a4>
		res = follow_path(&dj, path);	/* Follow the file path */
 80068be:	4629      	mov	r1, r5
		INIT_BUF(dj);
 80068c0:	ab02      	add	r3, sp, #8
		res = follow_path(&dj, path);	/* Follow the file path */
 80068c2:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 80068c4:	978e      	str	r7, [sp, #568]	; 0x238
 80068c6:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 80068c8:	f7ff fab0 	bl	8005e2c <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80068cc:	f006 0a1f 	and.w	sl, r6, #31
		if (res == FR_OK) {
 80068d0:	4605      	mov	r5, r0
 80068d2:	f006 0c1c 	and.w	ip, r6, #28
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d13c      	bne.n	8006954 <f_open+0x2d0>
		dir = dj.dir;
 80068da:	f8dd 922c 	ldr.w	r9, [sp, #556]	; 0x22c
			if (!dir)	/* Default directory itself */
 80068de:	f1b9 0f00 	cmp.w	r9, #0
 80068e2:	f000 81d8 	beq.w	8006c96 <f_open+0x612>
		if (Files[i].fs) {	/* Existing entry */
 80068e6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8006990 <f_open+0x30c>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80068ea:	f02a 0101 	bic.w	r1, sl, #1
		if (Files[i].fs) {	/* Existing entry */
 80068ee:	f8d8 2000 	ldr.w	r2, [r8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80068f2:	9b86      	ldr	r3, [sp, #536]	; 0x218
				Files[i].clu == dp->sclust &&
 80068f4:	9888      	ldr	r0, [sp, #544]	; 0x220
				Files[i].idx == dp->index) break;
 80068f6:	f8bd e21e 	ldrh.w	lr, [sp, #542]	; 0x21e
		if (Files[i].fs) {	/* Existing entry */
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	f000 8113 	beq.w	8006b26 <f_open+0x4a2>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006900:	4293      	cmp	r3, r2
 8006902:	f000 81e9 	beq.w	8006cd8 <f_open+0x654>
		if (Files[i].fs) {	/* Existing entry */
 8006906:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800690a:	2a00      	cmp	r2, #0
 800690c:	f000 8110 	beq.w	8006b30 <f_open+0x4ac>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006910:	429a      	cmp	r2, r3
 8006912:	f000 81f3 	beq.w	8006cfc <f_open+0x678>
		FREE_BUF();
 8006916:	4638      	mov	r0, r7
 8006918:	f000 fe60 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 800691c:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 800691e:	2512      	movs	r5, #18
 8006920:	2b00      	cmp	r3, #0
 8006922:	f040 80ac 	bne.w	8006a7e <f_open+0x3fa>
 8006926:	e729      	b.n	800677c <f_open+0xf8>
		INIT_BUF(dj);
 8006928:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80ac 	beq.w	8006a88 <f_open+0x404>
		ff_rel_grant(fs->sobj);
 8006930:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8006934:	f000 fe4e 	bl	80075d4 <ff_rel_grant>
		INIT_BUF(dj);
 8006938:	2511      	movs	r5, #17
 800693a:	e71f      	b.n	800677c <f_open+0xf8>
 800693c:	250b      	movs	r5, #11
}
 800693e:	4628      	mov	r0, r5
 8006940:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ENTER_FF(fs);						/* Lock the volume */
 8006948:	250f      	movs	r5, #15
}
 800694a:	4628      	mov	r0, r5
 800694c:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8006950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006954:	f1bc 0f00 	cmp.w	ip, #0
 8006958:	f040 8098 	bne.w	8006a8c <f_open+0x408>
		FREE_BUF();
 800695c:	4638      	mov	r0, r7
 800695e:	f000 fe3d 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006962:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 8006964:	2b00      	cmp	r3, #0
 8006966:	f43f af09 	beq.w	800677c <f_open+0xf8>
 800696a:	2d0c      	cmp	r5, #12
 800696c:	f43f af06 	beq.w	800677c <f_open+0xf8>
		res != FR_NOT_ENABLED &&
 8006970:	2d0b      	cmp	r5, #11
 8006972:	f43f af03 	beq.w	800677c <f_open+0xf8>
		res != FR_INVALID_DRIVE &&
 8006976:	2d09      	cmp	r5, #9
 8006978:	f43f af00 	beq.w	800677c <f_open+0xf8>
		res != FR_INVALID_OBJECT &&
 800697c:	2d0f      	cmp	r5, #15
 800697e:	f43f aefd 	beq.w	800677c <f_open+0xf8>
 8006982:	e07c      	b.n	8006a7e <f_open+0x3fa>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006984:	250c      	movs	r5, #12
 8006986:	e6f9      	b.n	800677c <f_open+0xf8>
 8006988:	20000338 	.word	0x20000338
 800698c:	20000354 	.word	0x20000354
 8006990:	2000033c 	.word	0x2000033c
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006994:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006998:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
			fs->winsect = sector;
 800699c:	f8c7 0230 	str.w	r0, [r7, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d167      	bne.n	8006a74 <f_open+0x3f0>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80069a4:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 80069a8:	49c8      	ldr	r1, [pc, #800]	; (8006ccc <f_open+0x648>)
 80069aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80069ae:	428a      	cmp	r2, r1
 80069b0:	f43f aee9 	beq.w	8006786 <f_open+0x102>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80069b4:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 80069b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80069bc:	428a      	cmp	r2, r1
 80069be:	f43f aee2 	beq.w	8006786 <f_open+0x102>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80069c2:	f897 01c2 	ldrb.w	r0, [r7, #450]	; 0x1c2
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f000 8219 	beq.w	8006dfe <f_open+0x77a>
 80069cc:	f8d7 81c6 	ldr.w	r8, [r7, #454]	; 0x1c6
 80069d0:	f897 21d2 	ldrb.w	r2, [r7, #466]	; 0x1d2
 80069d4:	b10a      	cbz	r2, 80069da <f_open+0x356>
 80069d6:	f8d7 21d6 	ldr.w	r2, [r7, #470]	; 0x1d6
 80069da:	9203      	str	r2, [sp, #12]
 80069dc:	f897 21e2 	ldrb.w	r2, [r7, #482]	; 0x1e2
 80069e0:	b10a      	cbz	r2, 80069e6 <f_open+0x362>
 80069e2:	f8d7 21e6 	ldr.w	r2, [r7, #486]	; 0x1e6
 80069e6:	9204      	str	r2, [sp, #16]
 80069e8:	f897 21f2 	ldrb.w	r2, [r7, #498]	; 0x1f2
 80069ec:	b10a      	cbz	r2, 80069f2 <f_open+0x36e>
 80069ee:	f8d7 21f6 	ldr.w	r2, [r7, #502]	; 0x1f6
 80069f2:	9205      	str	r2, [sp, #20]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80069f4:	f1b8 0f00 	cmp.w	r8, #0
 80069f8:	f040 818b 	bne.w	8006d12 <f_open+0x68e>
			bsect = br[i];
 80069fc:	f8dd 800c 	ldr.w	r8, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006a00:	f1b8 0f00 	cmp.w	r8, #0
 8006a04:	f040 819b 	bne.w	8006d3e <f_open+0x6ba>
			bsect = br[i];
 8006a08:	f8dd 8010 	ldr.w	r8, [sp, #16]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006a0c:	f1b8 0f00 	cmp.w	r8, #0
 8006a10:	f040 81ca 	bne.w	8006da8 <f_open+0x724>
			bsect = br[i];
 8006a14:	f8dd 8014 	ldr.w	r8, [sp, #20]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	d02a      	beq.n	8006a74 <f_open+0x3f0>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006a1e:	f04f 39ff 	mov.w	r9, #4294967295
 8006a22:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a24:	45c8      	cmp	r8, r9
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006a26:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8006a2a:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a2e:	d00c      	beq.n	8006a4a <f_open+0x3c6>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006a30:	2301      	movs	r3, #1
 8006a32:	4642      	mov	r2, r8
 8006a34:	4639      	mov	r1, r7
 8006a36:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8006a3a:	f7fc fe55 	bl	80036e8 <disk_read>
 8006a3e:	b110      	cbz	r0, 8006a46 <f_open+0x3c2>
			fs->winsect = sector;
 8006a40:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
 8006a44:	e688      	b.n	8006758 <f_open+0xd4>
 8006a46:	f8c7 8230 	str.w	r8, [r7, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006a4a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006a4e:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d10e      	bne.n	8006a74 <f_open+0x3f0>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006a56:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8006a5a:	499c      	ldr	r1, [pc, #624]	; (8006ccc <f_open+0x648>)
 8006a5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006a60:	428a      	cmp	r2, r1
 8006a62:	f43f ae91 	beq.w	8006788 <f_open+0x104>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006a66:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8006a6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006a6e:	428a      	cmp	r2, r1
 8006a70:	f43f ae8a 	beq.w	8006788 <f_open+0x104>
	LEAVE_FF(dj.fs, res);
 8006a74:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 812c 	beq.w	8006cd4 <f_open+0x650>
 8006a7c:	250d      	movs	r5, #13
		ff_rel_grant(fs->sobj);
 8006a7e:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8006a82:	f000 fda7 	bl	80075d4 <ff_rel_grant>
 8006a86:	e679      	b.n	800677c <f_open+0xf8>
		INIT_BUF(dj);
 8006a88:	2511      	movs	r5, #17
 8006a8a:	e677      	b.n	800677c <f_open+0xf8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006a8c:	2804      	cmp	r0, #4
 8006a8e:	f47f af65 	bne.w	800695c <f_open+0x2d8>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a92:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8006cd0 <f_open+0x64c>
 8006a96:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9a:	b123      	cbz	r3, 8006aa6 <f_open+0x422>
 8006a9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f47f af38 	bne.w	8006916 <f_open+0x292>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006aa6:	a806      	add	r0, sp, #24
 8006aa8:	f7fe fbde 	bl	8005268 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006aac:	f04a 0a08 	orr.w	sl, sl, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ab0:	4605      	mov	r5, r0
				dir = dj.dir;					/* New entry */
 8006ab2:	f8dd 922c 	ldr.w	r9, [sp, #556]	; 0x22c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f47f af50 	bne.w	800695c <f_open+0x2d8>
				dw = GET_FATTIME();				/* Created time */
 8006abc:	f7fc fd86 	bl	80035cc <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f889 200b 	strb.w	r2, [r9, #11]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006ac6:	9b86      	ldr	r3, [sp, #536]	; 0x218
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006ac8:	f8c9 000e 	str.w	r0, [r9, #14]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006acc:	f8c9 201c 	str.w	r2, [r9, #28]
	if (fs->fs_type == FS_FAT32)
 8006ad0:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006ad4:	f8b9 601a 	ldrh.w	r6, [r9, #26]
	if (fs->fs_type == FS_FAT32)
 8006ad8:	2a03      	cmp	r2, #3
 8006ada:	d103      	bne.n	8006ae4 <f_open+0x460>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006adc:	f8b9 2014 	ldrh.w	r2, [r9, #20]
 8006ae0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006ae4:	2200      	movs	r2, #0
				dj.fs->wflag = 1;
 8006ae6:	2101      	movs	r1, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006ae8:	f8a9 201a 	strh.w	r2, [r9, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006aec:	f8a9 2014 	strh.w	r2, [r9, #20]
				dj.fs->wflag = 1;
 8006af0:	f883 1204 	strb.w	r1, [r3, #516]	; 0x204
 8006af4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
				if (cl) {						/* Remove the cluster chain if exist */
 8006af8:	2e00      	cmp	r6, #0
 8006afa:	f000 81cf 	beq.w	8006e9c <f_open+0x818>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006afe:	2e01      	cmp	r6, #1
 8006b00:	d004      	beq.n	8006b0c <f_open+0x488>
 8006b02:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8006b06:	42b1      	cmp	r1, r6
 8006b08:	f200 81ab 	bhi.w	8006e62 <f_open+0x7de>
		FREE_BUF();
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f000 fd65 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006b12:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d16c      	bne.n	8006bf2 <f_open+0x56e>
		res = FR_INT_ERR;
 8006b18:	2502      	movs	r5, #2
 8006b1a:	e62f      	b.n	800677c <f_open+0xf8>
	LEAVE_FF(dj.fs, res);
 8006b1c:	9b86      	ldr	r3, [sp, #536]	; 0x218
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006b1e:	2503      	movs	r5, #3
	if (fs &&
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1ac      	bne.n	8006a7e <f_open+0x3fa>
 8006b24:	e62a      	b.n	800677c <f_open+0xf8>
		if (Files[i].fs) {	/* Existing entry */
 8006b26:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006b2a:	b10a      	cbz	r2, 8006b30 <f_open+0x4ac>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d010      	beq.n	8006b52 <f_open+0x4ce>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006b30:	f1bc 0f00 	cmp.w	ip, #0
 8006b34:	d028      	beq.n	8006b88 <f_open+0x504>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b36:	f899 200b 	ldrb.w	r2, [r9, #11]
 8006b3a:	f012 0f11 	tst.w	r2, #17
 8006b3e:	f000 80b3 	beq.w	8006ca8 <f_open+0x624>
		FREE_BUF();
 8006b42:	4638      	mov	r0, r7
 8006b44:	f000 fd4a 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006b48:	9b86      	ldr	r3, [sp, #536]	; 0x218
					res = FR_DENIED;
 8006b4a:	2507      	movs	r5, #7
	if (fs &&
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d196      	bne.n	8006a7e <f_open+0x3fa>
 8006b50:	e614      	b.n	800677c <f_open+0xf8>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006b52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b56:	4282      	cmp	r2, r0
 8006b58:	d1ea      	bne.n	8006b30 <f_open+0x4ac>
				Files[i].clu == dp->sclust &&
 8006b5a:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8006b5e:	4572      	cmp	r2, lr
 8006b60:	d1e6      	bne.n	8006b30 <f_open+0x4ac>
 8006b62:	2501      	movs	r5, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006b64:	b939      	cbnz	r1, 8006b76 <f_open+0x4f2>
 8006b66:	006a      	lsls	r2, r5, #1
 8006b68:	442a      	add	r2, r5
 8006b6a:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8006b6e:	8952      	ldrh	r2, [r2, #10]
 8006b70:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006b74:	d1dc      	bne.n	8006b30 <f_open+0x4ac>
		FREE_BUF();
 8006b76:	4638      	mov	r0, r7
 8006b78:	f000 fd30 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006b7c:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 8006b7e:	2510      	movs	r5, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f af7c 	bne.w	8006a7e <f_open+0x3fa>
 8006b86:	e5f9      	b.n	800677c <f_open+0xf8>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006b88:	f899 200b 	ldrb.w	r2, [r9, #11]
 8006b8c:	06d5      	lsls	r5, r2, #27
 8006b8e:	f100 8102 	bmi.w	8006d96 <f_open+0x712>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006b92:	07b5      	lsls	r5, r6, #30
 8006b94:	d50a      	bpl.n	8006bac <f_open+0x528>
 8006b96:	07d2      	lsls	r2, r2, #31
 8006b98:	d508      	bpl.n	8006bac <f_open+0x528>
		FREE_BUF();
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f000 fd1e 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006ba0:	9b86      	ldr	r3, [sp, #536]	; 0x218
						res = FR_DENIED;
 8006ba2:	2507      	movs	r5, #7
	if (fs &&
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f43f ade9 	beq.w	800677c <f_open+0xf8>
 8006baa:	e768      	b.n	8006a7e <f_open+0x3fa>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006bac:	0735      	lsls	r5, r6, #28
 8006bae:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8006bb2:	d503      	bpl.n	8006bbc <f_open+0x538>
				mode |= FA__WRITTEN;
 8006bb4:	f04a 0a20 	orr.w	sl, sl, #32
 8006bb8:	f02a 0101 	bic.w	r1, sl, #1
		if (Files[i].fs == dp->fs &&
 8006bbc:	f8d8 5000 	ldr.w	r5, [r8]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006bc0:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
		if (Files[i].fs == dp->fs &&
 8006bc4:	42ab      	cmp	r3, r5
			fp->dir_ptr = dir;
 8006bc6:	f8c4 9220 	str.w	r9, [r4, #544]	; 0x220
		if (Files[i].fs == dp->fs &&
 8006bca:	d05a      	beq.n	8006c82 <f_open+0x5fe>
 8006bcc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8006bd0:	429e      	cmp	r6, r3
 8006bd2:	d010      	beq.n	8006bf6 <f_open+0x572>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006bd4:	2d00      	cmp	r5, #0
 8006bd6:	f000 8114 	beq.w	8006e02 <f_open+0x77e>
 8006bda:	2e00      	cmp	r6, #0
 8006bdc:	f000 8162 	beq.w	8006ea4 <f_open+0x820>
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006be0:	2300      	movs	r3, #0
		FREE_BUF();
 8006be2:	4638      	mov	r0, r7
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006be4:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
		FREE_BUF();
 8006be8:	f000 fcf8 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006bec:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (fs &&
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d092      	beq.n	8006b18 <f_open+0x494>
 8006bf2:	2502      	movs	r5, #2
 8006bf4:	e743      	b.n	8006a7e <f_open+0x3fa>
		if (Files[i].fs == dp->fs &&
 8006bf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006bfa:	4282      	cmp	r2, r0
 8006bfc:	d1ea      	bne.n	8006bd4 <f_open+0x550>
			Files[i].clu == dp->sclust &&
 8006bfe:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8006c02:	4572      	cmp	r2, lr
 8006c04:	d1e6      	bne.n	8006bd4 <f_open+0x550>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c06:	2501      	movs	r5, #1
 8006c08:	006a      	lsls	r2, r5, #1
 8006c0a:	1953      	adds	r3, r2, r5
 8006c0c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006c10:	895b      	ldrh	r3, [r3, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c12:	bb81      	cbnz	r1, 8006c76 <f_open+0x5f2>
 8006c14:	3301      	adds	r3, #1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1c6e      	adds	r6, r5, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c1a:	442a      	add	r2, r5
 8006c1c:	eb08 0882 	add.w	r8, r8, r2, lsl #2
 8006c20:	f8a8 300a 	strh.w	r3, [r8, #10]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c24:	f8c4 6228 	str.w	r6, [r4, #552]	; 0x228
		FREE_BUF();
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f000 fcd7 	bl	80075dc <ff_memfree>
			fp->err = 0;						/* Clear error flag */
 8006c2e:	2200      	movs	r2, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006c30:	9b86      	ldr	r3, [sp, #536]	; 0x218
			fp->flag = mode;					/* File access mode */
 8006c32:	f884 a206 	strb.w	sl, [r4, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8006c36:	f884 2207 	strb.w	r2, [r4, #519]	; 0x207
	if (fs->fs_type == FS_FAT32)
 8006c3a:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
	cl = LD_WORD(dir + DIR_FstClusLO);
 8006c3e:	f8b9 201a 	ldrh.w	r2, [r9, #26]
	if (fs->fs_type == FS_FAT32)
 8006c42:	2903      	cmp	r1, #3
 8006c44:	d103      	bne.n	8006c4e <f_open+0x5ca>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006c46:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8006c4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
			fp->fptr = 0;						/* File pointer */
 8006c4e:	2500      	movs	r5, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006c50:	f8c4 2210 	str.w	r2, [r4, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006c54:	f8d9 101c 	ldr.w	r1, [r9, #28]
			fp->id = fp->fs->id;
 8006c58:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006c5c:	f8c4 120c 	str.w	r1, [r4, #524]	; 0x20c
			fp->fs = dj.fs;	 					/* Validate file object */
 8006c60:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			fp->fptr = 0;						/* File pointer */
 8006c64:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			fp->dsect = 0;
 8006c68:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8006c6c:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
			fp->id = fp->fs->id;
 8006c70:	f8a4 2204 	strh.w	r2, [r4, #516]	; 0x204
 8006c74:	e703      	b.n	8006a7e <f_open+0x3fa>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1b2      	bne.n	8006be0 <f_open+0x55c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c7e:	1c6e      	adds	r6, r5, #1
 8006c80:	e7cb      	b.n	8006c1a <f_open+0x596>
		if (Files[i].fs == dp->fs &&
 8006c82:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006c86:	4290      	cmp	r0, r2
 8006c88:	d1a0      	bne.n	8006bcc <f_open+0x548>
			Files[i].clu == dp->sclust &&
 8006c8a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8006c8e:	4572      	cmp	r2, lr
 8006c90:	d19c      	bne.n	8006bcc <f_open+0x548>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006c92:	2500      	movs	r5, #0
 8006c94:	e7b8      	b.n	8006c08 <f_open+0x584>
		FREE_BUF();
 8006c96:	4638      	mov	r0, r7
 8006c98:	f000 fca0 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006c9c:	9b86      	ldr	r3, [sp, #536]	; 0x218
				res = FR_INVALID_NAME;
 8006c9e:	2506      	movs	r5, #6
	if (fs &&
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f aeec 	bne.w	8006a7e <f_open+0x3fa>
 8006ca6:	e569      	b.n	800677c <f_open+0xf8>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006ca8:	0772      	lsls	r2, r6, #29
 8006caa:	d508      	bpl.n	8006cbe <f_open+0x63a>
		FREE_BUF();
 8006cac:	4638      	mov	r0, r7
 8006cae:	f000 fc95 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006cb2:	9b86      	ldr	r3, [sp, #536]	; 0x218
						res = FR_EXIST;
 8006cb4:	2508      	movs	r5, #8
	if (fs &&
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f47f aee1 	bne.w	8006a7e <f_open+0x3fa>
 8006cbc:	e55e      	b.n	800677c <f_open+0xf8>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006cbe:	0736      	lsls	r6, r6, #28
 8006cc0:	f53f aefc 	bmi.w	8006abc <f_open+0x438>
 8006cc4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8006cc8:	e778      	b.n	8006bbc <f_open+0x538>
 8006cca:	bf00      	nop
 8006ccc:	00544146 	.word	0x00544146
 8006cd0:	2000033c 	.word	0x2000033c
		return FR_NO_FILESYSTEM;
 8006cd4:	250d      	movs	r5, #13
 8006cd6:	e551      	b.n	800677c <f_open+0xf8>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006cd8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006cdc:	4290      	cmp	r0, r2
 8006cde:	f47f ae12 	bne.w	8006906 <f_open+0x282>
				Files[i].clu == dp->sclust &&
 8006ce2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8006ce6:	4572      	cmp	r2, lr
 8006ce8:	f43f af3c 	beq.w	8006b64 <f_open+0x4e0>
		if (Files[i].fs) {	/* Existing entry */
 8006cec:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8006cf0:	2a00      	cmp	r2, #0
 8006cf2:	f43f af1d 	beq.w	8006b30 <f_open+0x4ac>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	f47f ae0d 	bne.w	8006916 <f_open+0x292>
 8006cfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d00:	4282      	cmp	r2, r0
 8006d02:	f47f ae08 	bne.w	8006916 <f_open+0x292>
				Files[i].clu == dp->sclust &&
 8006d06:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8006d0a:	4572      	cmp	r2, lr
 8006d0c:	f47f ae03 	bne.w	8006916 <f_open+0x292>
 8006d10:	e727      	b.n	8006b62 <f_open+0x4de>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006d12:	f04f 39ff 	mov.w	r9, #4294967295
 8006d16:	2200      	movs	r2, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d18:	45c8      	cmp	r8, r9
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006d1a:	f887 2204 	strb.w	r2, [r7, #516]	; 0x204
 8006d1e:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d22:	f000 808e 	beq.w	8006e42 <f_open+0x7be>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d26:	2301      	movs	r3, #1
 8006d28:	4642      	mov	r2, r8
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8006d30:	f7fc fcda 	bl	80036e8 <disk_read>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d07b      	beq.n	8006e30 <f_open+0x7ac>
			fs->winsect = sector;
 8006d38:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
 8006d3c:	e65e      	b.n	80069fc <f_open+0x378>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006d3e:	f04f 39ff 	mov.w	r9, #4294967295
 8006d42:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d44:	45c8      	cmp	r8, r9
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006d46:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8006d4a:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d4e:	d00b      	beq.n	8006d68 <f_open+0x6e4>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d50:	2301      	movs	r3, #1
 8006d52:	4642      	mov	r2, r8
 8006d54:	4639      	mov	r1, r7
 8006d56:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8006d5a:	f7fc fcc5 	bl	80036e8 <disk_read>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f040 80a6 	bne.w	8006eb0 <f_open+0x82c>
			fs->winsect = sector;
 8006d64:	f8c7 8230 	str.w	r8, [r7, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006d68:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006d6c:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8006d70:	4293      	cmp	r3, r2
 8006d72:	f47f ae49 	bne.w	8006a08 <f_open+0x384>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006d76:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8006d7a:	497a      	ldr	r1, [pc, #488]	; (8006f64 <f_open+0x8e0>)
 8006d7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006d80:	428a      	cmp	r2, r1
 8006d82:	f43f ad01 	beq.w	8006788 <f_open+0x104>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006d86:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8006d8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006d8e:	428a      	cmp	r2, r1
 8006d90:	f47f ae3a 	bne.w	8006a08 <f_open+0x384>
 8006d94:	e4f8      	b.n	8006788 <f_open+0x104>
		FREE_BUF();
 8006d96:	4638      	mov	r0, r7
 8006d98:	f000 fc20 	bl	80075dc <ff_memfree>
	LEAVE_FF(dj.fs, res);
 8006d9c:	9b86      	ldr	r3, [sp, #536]	; 0x218
					res = FR_NO_FILE;
 8006d9e:	2504      	movs	r5, #4
	if (fs &&
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f43f aceb 	beq.w	800677c <f_open+0xf8>
 8006da6:	e66a      	b.n	8006a7e <f_open+0x3fa>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006da8:	f04f 39ff 	mov.w	r9, #4294967295
 8006dac:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006dae:	45c8      	cmp	r8, r9
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006db0:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
 8006db4:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006db8:	d00a      	beq.n	8006dd0 <f_open+0x74c>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 8006dc4:	f7fc fc90 	bl	80036e8 <disk_read>
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	d16e      	bne.n	8006eaa <f_open+0x826>
			fs->winsect = sector;
 8006dcc:	f8c7 8230 	str.w	r8, [r7, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006dd0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006dd4:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	f47f ae1b 	bne.w	8006a14 <f_open+0x390>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006dde:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8006de2:	4960      	ldr	r1, [pc, #384]	; (8006f64 <f_open+0x8e0>)
 8006de4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006de8:	428a      	cmp	r2, r1
 8006dea:	f43f accd 	beq.w	8006788 <f_open+0x104>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006dee:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8006df2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006df6:	428a      	cmp	r2, r1
 8006df8:	f47f ae0c 	bne.w	8006a14 <f_open+0x390>
 8006dfc:	e4c4      	b.n	8006788 <f_open+0x104>
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006dfe:	4680      	mov	r8, r0
 8006e00:	e5e6      	b.n	80069d0 <f_open+0x34c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e02:	2601      	movs	r6, #1
		Files[i].ctr = 0;
 8006e04:	f04f 0c00 	mov.w	ip, #0
		Files[i].fs = dp->fs;
 8006e08:	006a      	lsls	r2, r5, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e0a:	4561      	cmp	r1, ip
		Files[i].fs = dp->fs;
 8006e0c:	eb02 0105 	add.w	r1, r2, r5
 8006e10:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8006e14:	f848 3001 	str.w	r3, [r8, r1]
 8006e18:	eb08 0301 	add.w	r3, r8, r1
		Files[i].clu = dp->sclust;
 8006e1c:	6058      	str	r0, [r3, #4]
		Files[i].idx = dp->index;
 8006e1e:	f8a3 e008 	strh.w	lr, [r3, #8]
		Files[i].ctr = 0;
 8006e22:	f8a3 c00a 	strh.w	ip, [r3, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006e26:	bf14      	ite	ne
 8006e28:	f44f 7380 	movne.w	r3, #256	; 0x100
 8006e2c:	2301      	moveq	r3, #1
 8006e2e:	e6f4      	b.n	8006c1a <f_open+0x596>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006e30:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8006e34:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
			fs->winsect = sector;
 8006e38:	f8c7 8230 	str.w	r8, [r7, #560]	; 0x230
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	f47f addd 	bne.w	80069fc <f_open+0x378>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006e42:	f8d7 2036 	ldr.w	r2, [r7, #54]	; 0x36
 8006e46:	4947      	ldr	r1, [pc, #284]	; (8006f64 <f_open+0x8e0>)
 8006e48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e4c:	428a      	cmp	r2, r1
 8006e4e:	f43f ac9b 	beq.w	8006788 <f_open+0x104>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006e52:	f8d7 2052 	ldr.w	r2, [r7, #82]	; 0x52
 8006e56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e5a:	428a      	cmp	r2, r1
 8006e5c:	f47f adce 	bne.w	80069fc <f_open+0x378>
 8006e60:	e492      	b.n	8006788 <f_open+0x104>
 8006e62:	4618      	mov	r0, r3
 8006e64:	4631      	mov	r1, r6
 8006e66:	9201      	str	r2, [sp, #4]
 8006e68:	f7fc fd0e 	bl	8003888 <remove_chain.part.12>
					if (res == FR_OK) {
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f47f ad74 	bne.w	800695c <f_open+0x2d8>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006e74:	9b86      	ldr	r3, [sp, #536]	; 0x218
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e76:	9a01      	ldr	r2, [sp, #4]
 8006e78:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006e7c:	3e01      	subs	r6, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e7e:	4291      	cmp	r1, r2
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006e80:	f8c3 6210 	str.w	r6, [r3, #528]	; 0x210
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006e84:	d00a      	beq.n	8006e9c <f_open+0x818>
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fc fc57 	bl	800373c <move_window.part.3>
		if (res == FR_OK) {
 8006e8e:	4605      	mov	r5, r0
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f47f ad63 	bne.w	800695c <f_open+0x2d8>
 8006e96:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8006e98:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8006e9c:	9888      	ldr	r0, [sp, #544]	; 0x220
 8006e9e:	f8bd e21e 	ldrh.w	lr, [sp, #542]	; 0x21e
 8006ea2:	e687      	b.n	8006bb4 <f_open+0x530>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ea4:	2602      	movs	r6, #2
 8006ea6:	2501      	movs	r5, #1
 8006ea8:	e7ac      	b.n	8006e04 <f_open+0x780>
			fs->winsect = sector;
 8006eaa:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
 8006eae:	e5b1      	b.n	8006a14 <f_open+0x390>
 8006eb0:	f8c7 9230 	str.w	r9, [r7, #560]	; 0x230
 8006eb4:	e5a8      	b.n	8006a08 <f_open+0x384>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006eb6:	f1bb 0f00 	cmp.w	fp, #0
 8006eba:	f43f addb 	beq.w	8006a74 <f_open+0x3f0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006ebe:	9b01      	ldr	r3, [sp, #4]
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ec0:	f1b9 0f02 	cmp.w	r9, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006ec4:	4453      	add	r3, sl
 8006ec6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006eca:	d017      	beq.n	8006efc <f_open+0x878>
 8006ecc:	f04f 0901 	mov.w	r9, #1
 8006ed0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8006ed4:	f000 0001 	and.w	r0, r0, #1
 8006ed8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006edc:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
 8006ee0:	ebb2 2f50 	cmp.w	r2, r0, lsr #9
 8006ee4:	f4ff adc6 	bcc.w	8006a74 <f_open+0x3f0>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006ee8:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8006eec:	2280      	movs	r2, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006eee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8006ef2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	fs->fsi_flag = 0x80;
 8006ef6:	f887 2205 	strb.w	r2, [r7, #517]	; 0x205
 8006efa:	e4c0      	b.n	800687e <f_open+0x1fa>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006efc:	0040      	lsls	r0, r0, #1
 8006efe:	e7ed      	b.n	8006edc <f_open+0x858>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f00:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
		&& move_window(fs, bsect + 1) == FR_OK)
 8006f04:	f108 0101 	add.w	r1, r8, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f08:	4291      	cmp	r1, r2
 8006f0a:	d121      	bne.n	8006f50 <f_open+0x8cc>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f0c:	f64a 2255 	movw	r2, #43605	; 0xaa55
		fs->fsi_flag = 0;
 8006f10:	2100      	movs	r1, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f12:	4293      	cmp	r3, r2
		fs->fsi_flag = 0;
 8006f14:	f887 1205 	strb.w	r1, [r7, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f18:	f47f acaf 	bne.w	800687a <f_open+0x1f6>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006f1c:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <f_open+0x8e4>)
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	f47f acaa 	bne.w	800687a <f_open+0x1f6>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006f26:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8006f2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f2e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8006f32:	3320      	adds	r3, #32
 8006f34:	429a      	cmp	r2, r3
 8006f36:	f47f aca0 	bne.w	800687a <f_open+0x1f6>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006f3a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006f3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8006f42:	f04f 0903 	mov.w	r9, #3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006f46:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006f4a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8006f4e:	e496      	b.n	800687e <f_open+0x1fa>
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7fc fbf3 	bl	800373c <move_window.part.3>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f47f ac8f 	bne.w	800687a <f_open+0x1f6>
 8006f5c:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8006f60:	e7d4      	b.n	8006f0c <f_open+0x888>
 8006f62:	bf00      	nop
 8006f64:	00544146 	.word	0x00544146
 8006f68:	41615252 	.word	0x41615252

08006f6c <f_write>:
{
 8006f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*bw = 0;	/* Clear write byte counter */
 8006f70:	2400      	movs	r4, #0
 8006f72:	601c      	str	r4, [r3, #0]
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d045      	beq.n	8007004 <f_write+0x98>
 8006f78:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8006f7c:	b145      	cbz	r5, 8006f90 <f_write+0x24>
 8006f7e:	f895 4200 	ldrb.w	r4, [r5, #512]	; 0x200
 8006f82:	b12c      	cbz	r4, 8006f90 <f_write+0x24>
 8006f84:	f8b5 6206 	ldrh.w	r6, [r5, #518]	; 0x206
 8006f88:	f8b0 4204 	ldrh.w	r4, [r0, #516]	; 0x204
 8006f8c:	42a6      	cmp	r6, r4
 8006f8e:	d002      	beq.n	8006f96 <f_write+0x2a>
{
 8006f90:	2009      	movs	r0, #9
}
 8006f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f96:	4604      	mov	r4, r0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006f98:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 8006f9c:	460f      	mov	r7, r1
 8006f9e:	4690      	mov	r8, r2
 8006fa0:	461e      	mov	r6, r3
 8006fa2:	f7fc fb87 	bl	80036b4 <disk_status>
 8006fa6:	07c1      	lsls	r1, r0, #31
 8006fa8:	d4f2      	bmi.n	8006f90 <f_write+0x24>
	ENTER_FF(fil->fs);		/* Lock file system */
 8006faa:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return ff_req_grant(fs->sobj);
 8006fae:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8006fb2:	f000 fb05 	bl	80075c0 <ff_req_grant>
	ENTER_FF(fil->fs);		/* Lock file system */
 8006fb6:	b388      	cbz	r0, 800701c <f_write+0xb0>
	if (fp->err)							/* Check error */
 8006fb8:	f894 0207 	ldrb.w	r0, [r4, #519]	; 0x207
 8006fbc:	b9a8      	cbnz	r0, 8006fea <f_write+0x7e>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006fbe:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006fc2:	079b      	lsls	r3, r3, #30
 8006fc4:	d409      	bmi.n	8006fda <f_write+0x6e>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006fc6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	if (fs &&
 8006fca:	b1f3      	cbz	r3, 800700a <f_write+0x9e>
		ff_rel_grant(fs->sobj);
 8006fcc:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8006fd0:	f000 fb00 	bl	80075d4 <ff_rel_grant>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006fd4:	2007      	movs	r0, #7
}
 8006fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fda:	4633      	mov	r3, r6
 8006fdc:	4642      	mov	r2, r8
 8006fde:	4639      	mov	r1, r7
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe6:	f7fd be39 	b.w	8004c5c <f_write.part.14>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006fea:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	if (fs &&
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0cf      	beq.n	8006f92 <f_write+0x26>
		res != FR_INVALID_DRIVE &&
 8006ff2:	280f      	cmp	r0, #15
 8006ff4:	d90c      	bls.n	8007010 <f_write+0xa4>
		ff_rel_grant(fs->sobj);
 8006ff6:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8006ffa:	f000 faeb 	bl	80075d4 <ff_rel_grant>
 8006ffe:	f894 0207 	ldrb.w	r0, [r4, #519]	; 0x207
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007002:	e7c6      	b.n	8006f92 <f_write+0x26>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007004:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8007008:	deff      	udf	#255	; 0xff
		LEAVE_FF(fp->fs, FR_DENIED);
 800700a:	2007      	movs	r0, #7
}
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res != FR_INVALID_DRIVE &&
 8007010:	f44f 421a 	mov.w	r2, #39424	; 0x9a00
 8007014:	40c2      	lsrs	r2, r0
 8007016:	07d2      	lsls	r2, r2, #31
 8007018:	d4bb      	bmi.n	8006f92 <f_write+0x26>
 800701a:	e7ec      	b.n	8006ff6 <f_write+0x8a>
	ENTER_FF(fil->fs);		/* Lock file system */
 800701c:	200f      	movs	r0, #15
 800701e:	e7b8      	b.n	8006f92 <f_write+0x26>

08007020 <f_close>:
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007020:	2800      	cmp	r0, #0
 8007022:	f000 80e0 	beq.w	80071e6 <f_close+0x1c6>
 8007026:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800702e:	b143      	cbz	r3, 8007042 <f_close+0x22>
 8007030:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8007034:	b12a      	cbz	r2, 8007042 <f_close+0x22>
 8007036:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800703a:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 800703e:	4291      	cmp	r1, r2
 8007040:	d003      	beq.n	800704a <f_close+0x2a>
		return FR_INVALID_OBJECT;
 8007042:	2509      	movs	r5, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007044:	4628      	mov	r0, r5
 8007046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704a:	4604      	mov	r4, r0
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800704c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007050:	f7fc fb30 	bl	80036b4 <disk_status>
 8007054:	07c1      	lsls	r1, r0, #31
 8007056:	d4f4      	bmi.n	8007042 <f_close+0x22>
	ENTER_FF(fil->fs);		/* Lock file system */
 8007058:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return ff_req_grant(fs->sobj);
 800705c:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8007060:	f000 faae 	bl	80075c0 <ff_req_grant>
	ENTER_FF(fil->fs);		/* Lock file system */
 8007064:	2800      	cmp	r0, #0
 8007066:	f000 80bc 	beq.w	80071e2 <f_close+0x1c2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800706a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800706e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
 8007072:	069a      	lsls	r2, r3, #26
 8007074:	d435      	bmi.n	80070e2 <f_close+0xc2>
	if (fs &&
 8007076:	2d00      	cmp	r5, #0
 8007078:	d0e3      	beq.n	8007042 <f_close+0x22>
		ff_rel_grant(fs->sobj);
 800707a:	f8d5 020c 	ldr.w	r0, [r5, #524]	; 0x20c
 800707e:	f000 faa9 	bl	80075d4 <ff_rel_grant>
 8007082:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0db      	beq.n	8007042 <f_close+0x22>
 800708a:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 800708e:	2a00      	cmp	r2, #0
 8007090:	d0d7      	beq.n	8007042 <f_close+0x22>
 8007092:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 8007096:	f8b4 2204 	ldrh.w	r2, [r4, #516]	; 0x204
 800709a:	4291      	cmp	r1, r2
 800709c:	d1d1      	bne.n	8007042 <f_close+0x22>
 800709e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80070a2:	f7fc fb07 	bl	80036b4 <disk_status>
 80070a6:	f010 0701 	ands.w	r7, r0, #1
 80070aa:	d1ca      	bne.n	8007042 <f_close+0x22>
	ENTER_FF(fil->fs);		/* Lock file system */
 80070ac:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	return ff_req_grant(fs->sobj);
 80070b0:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80070b4:	f000 fa84 	bl	80075c0 <ff_req_grant>
	ENTER_FF(fil->fs);		/* Lock file system */
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f000 8092 	beq.w	80071e2 <f_close+0x1c2>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80070be:	f8d4 3228 	ldr.w	r3, [r4, #552]	; 0x228
			FATFS *fs = fp->fs;
 80070c2:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f240 80aa 	bls.w	8007222 <f_close+0x202>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80070ce:	2502      	movs	r5, #2
	if (fs &&
 80070d0:	2a00      	cmp	r2, #0
 80070d2:	d0b7      	beq.n	8007044 <f_close+0x24>
		ff_rel_grant(fs->sobj);
 80070d4:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 80070d8:	f000 fa7c 	bl	80075d4 <ff_rel_grant>
}
 80070dc:	4628      	mov	r0, r5
 80070de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (fp->flag & FA__DIRTY) {
 80070e2:	065b      	lsls	r3, r3, #25
 80070e4:	f100 8082 	bmi.w	80071ec <f_close+0x1cc>
			res = move_window(fp->fs, fp->dir_sect);
 80070e8:	f8d4 721c 	ldr.w	r7, [r4, #540]	; 0x21c
	if (sector != fs->winsect) {	/* Window offset changed? */
 80070ec:	f8d5 6230 	ldr.w	r6, [r5, #560]	; 0x230
 80070f0:	42b7      	cmp	r7, r6
 80070f2:	d045      	beq.n	8007180 <f_close+0x160>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070f4:	f895 3204 	ldrb.w	r3, [r5, #516]	; 0x204
 80070f8:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 80070fc:	b33b      	cbz	r3, 800714e <f_close+0x12e>
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80070fe:	2301      	movs	r3, #1
 8007100:	4632      	mov	r2, r6
 8007102:	4629      	mov	r1, r5
 8007104:	f7fc fafe 	bl	8003704 <disk_write>
 8007108:	bb78      	cbnz	r0, 800716a <f_close+0x14a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800710a:	f8d5 2224 	ldr.w	r2, [r5, #548]	; 0x224
 800710e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007112:	1ab2      	subs	r2, r6, r2
 8007114:	429a      	cmp	r2, r3
			fs->wflag = 0;
 8007116:	f885 0204 	strb.w	r0, [r5, #516]	; 0x204
 800711a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800711e:	d216      	bcs.n	800714e <f_close+0x12e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007120:	f895 8203 	ldrb.w	r8, [r5, #515]	; 0x203
 8007124:	f1b8 0f01 	cmp.w	r8, #1
 8007128:	d804      	bhi.n	8007134 <f_close+0x114>
 800712a:	e010      	b.n	800714e <f_close+0x12e>
 800712c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8007130:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
					wsect += fs->fsize;
 8007134:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007136:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800713a:	4632      	mov	r2, r6
 800713c:	2301      	movs	r3, #1
 800713e:	4629      	mov	r1, r5
 8007140:	f7fc fae0 	bl	8003704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007144:	f1b8 0f01 	cmp.w	r8, #1
 8007148:	d1f0      	bne.n	800712c <f_close+0x10c>
 800714a:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800714e:	2301      	movs	r3, #1
 8007150:	463a      	mov	r2, r7
 8007152:	4629      	mov	r1, r5
 8007154:	f7fc fac8 	bl	80036e8 <disk_read>
 8007158:	b180      	cbz	r0, 800717c <f_close+0x15c>
			fs->winsect = sector;
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
	LEAVE_FF(fp->fs, res);
 800715e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
			fs->winsect = sector;
 8007162:	f8c5 2230 	str.w	r2, [r5, #560]	; 0x230
	if (fs &&
 8007166:	b91b      	cbnz	r3, 8007170 <f_close+0x150>
 8007168:	e006      	b.n	8007178 <f_close+0x158>
	LEAVE_FF(fp->fs, res);
 800716a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	if (fs &&
 800716e:	b11b      	cbz	r3, 8007178 <f_close+0x158>
		ff_rel_grant(fs->sobj);
 8007170:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8007174:	f000 fa2e 	bl	80075d4 <ff_rel_grant>
			res = FR_DISK_ERR;
 8007178:	2501      	movs	r5, #1
 800717a:	e763      	b.n	8007044 <f_close+0x24>
			fs->winsect = sector;
 800717c:	f8c5 7230 	str.w	r7, [r5, #560]	; 0x230
				dir = fp->dir_ptr;
 8007180:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007184:	7aeb      	ldrb	r3, [r5, #11]
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800718c:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8007190:	61eb      	str	r3, [r5, #28]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007192:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007196:	0c1a      	lsrs	r2, r3, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007198:	836b      	strh	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800719a:	82aa      	strh	r2, [r5, #20]
				tm = GET_FATTIME();							/* Update updated time */
 800719c:	f7fc fa16 	bl	80035cc <get_fattime>
				ST_WORD(dir + DIR_LstAccDate, 0);
 80071a0:	2300      	movs	r3, #0
				fp->fs->wflag = 1;
 80071a2:	2101      	movs	r1, #1
				ST_DWORD(dir + DIR_WrtTime, tm);
 80071a4:	f8c5 0016 	str.w	r0, [r5, #22]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80071a8:	826b      	strh	r3, [r5, #18]
				fp->flag &= ~FA__WRITTEN;
 80071aa:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80071ae:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 80071b2:	f023 0320 	bic.w	r3, r3, #32
 80071b6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				res = sync_fs(fp->fs);
 80071ba:	4610      	mov	r0, r2
				fp->fs->wflag = 1;
 80071bc:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
				res = sync_fs(fp->fs);
 80071c0:	f7fc faf8 	bl	80037b4 <sync_fs>
	LEAVE_FF(fp->fs, res);
 80071c4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
				res = sync_fs(fp->fs);
 80071c8:	4605      	mov	r5, r0
	if (fs &&
 80071ca:	b333      	cbz	r3, 800721a <f_close+0x1fa>
 80071cc:	280c      	cmp	r0, #12
 80071ce:	f43f af39 	beq.w	8007044 <f_close+0x24>
		res != FR_NOT_ENABLED &&
 80071d2:	280b      	cmp	r0, #11
 80071d4:	f43f af36 	beq.w	8007044 <f_close+0x24>
		res != FR_INVALID_DRIVE &&
 80071d8:	2809      	cmp	r0, #9
 80071da:	f43f af32 	beq.w	8007042 <f_close+0x22>
		res != FR_INVALID_OBJECT &&
 80071de:	280f      	cmp	r0, #15
 80071e0:	d117      	bne.n	8007212 <f_close+0x1f2>
	ENTER_FF(fil->fs);		/* Lock file system */
 80071e2:	250f      	movs	r5, #15
 80071e4:	e72e      	b.n	8007044 <f_close+0x24>
	LEAVE_FF(fp->fs, res);
 80071e6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80071ea:	deff      	udf	#255	; 0xff
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80071ec:	f895 0201 	ldrb.w	r0, [r5, #513]	; 0x201
 80071f0:	2301      	movs	r3, #1
 80071f2:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80071f6:	4621      	mov	r1, r4
 80071f8:	f7fc fa84 	bl	8003704 <disk_write>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d1b4      	bne.n	800716a <f_close+0x14a>
				fp->flag &= ~FA__DIRTY;
 8007200:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8007204:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
 8007208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8007210:	e76a      	b.n	80070e8 <f_close+0xc8>
		ff_rel_grant(fs->sobj);
 8007212:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8007216:	f000 f9dd 	bl	80075d4 <ff_rel_grant>
	if (res == FR_OK)
 800721a:	2d00      	cmp	r5, #0
 800721c:	f43f af31 	beq.w	8007082 <f_close+0x62>
 8007220:	e710      	b.n	8007044 <f_close+0x24>
		n = Files[i].ctr;
 8007222:	0059      	lsls	r1, r3, #1
 8007224:	4e0b      	ldr	r6, [pc, #44]	; (8007254 <f_close+0x234>)
 8007226:	18c8      	adds	r0, r1, r3
 8007228:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800722c:	8945      	ldrh	r5, [r0, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800722e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007232:	d008      	beq.n	8007246 <f_close+0x226>
		if (n) n--;					/* Decrement read mode open count */
 8007234:	b145      	cbz	r5, 8007248 <f_close+0x228>
 8007236:	3d01      	subs	r5, #1
 8007238:	b2ad      	uxth	r5, r5
		Files[i].ctr = n;
 800723a:	8145      	strh	r5, [r0, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800723c:	b125      	cbz	r5, 8007248 <f_close+0x228>
				fp->fs = 0;				/* Invalidate file object */
 800723e:	2500      	movs	r5, #0
 8007240:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
 8007244:	e744      	b.n	80070d0 <f_close+0xb0>
		Files[i].ctr = n;
 8007246:	8147      	strh	r7, [r0, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007248:	2000      	movs	r0, #0
 800724a:	440b      	add	r3, r1
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	50f0      	str	r0, [r6, r3]
 8007250:	e7f5      	b.n	800723e <f_close+0x21e>
 8007252:	bf00      	nop
 8007254:	2000033c 	.word	0x2000033c

08007258 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8007258:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <FATFS_LinkDriver+0x48>)
 800725a:	7a5a      	ldrb	r2, [r3, #9]
 800725c:	2a01      	cmp	r2, #1
 800725e:	d901      	bls.n	8007264 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8007260:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007262:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 8007264:	2200      	movs	r2, #0
{
 8007266:	b4f0      	push	{r4, r5, r6, r7}
    path[1] = ':';
 8007268:	263a      	movs	r6, #58	; 0x3a
    path[2] = '/';
 800726a:	252f      	movs	r5, #47	; 0x2f
    disk.is_initialized[disk.nbr] = 0;
 800726c:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8007270:	7a5f      	ldrb	r7, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8007272:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8007274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007278:	6078      	str	r0, [r7, #4]
    DiskNum = disk.nbr++;
 800727a:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 800727c:	441c      	add	r4, r3
    DiskNum = disk.nbr++;
 800727e:	b2c0      	uxtb	r0, r0
    disk.lun[disk.nbr] = lun;  
 8007280:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8007282:	1c44      	adds	r4, r0, #1
 8007284:	b2e4      	uxtb	r4, r4
    disk.is_initialized[disk.nbr] = 0;
 8007286:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 800728a:	725c      	strb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 800728c:	f803 200c 	strb.w	r2, [r3, ip]
    path[0] = DiskNum + '0';
 8007290:	3030      	adds	r0, #48	; 0x30
 8007292:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 8007294:	704e      	strb	r6, [r1, #1]
    path[3] = 0;
 8007296:	4610      	mov	r0, r2
    path[2] = '/';
 8007298:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 800729a:	70ca      	strb	r2, [r1, #3]
}
 800729c:	bcf0      	pop	{r4, r5, r6, r7}
 800729e:	4770      	bx	lr
 80072a0:	20000358 	.word	0x20000358

080072a4 <SD_initialize>:
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SD_initialize(BYTE lun)
{
	Stat = STA_NOINIT;
 80072a4:	2301      	movs	r3, #1
{
 80072a6:	b510      	push	{r4, lr}
	Stat = STA_NOINIT;
 80072a8:	4c05      	ldr	r4, [pc, #20]	; (80072c0 <SD_initialize+0x1c>)
 80072aa:	7023      	strb	r3, [r4, #0]

	/* Configure the uSD device */
	if (BSP_SD_Init() == MSD_OK)
 80072ac:	f7fc f9de 	bl	800366c <BSP_SD_Init>
 80072b0:	b918      	cbnz	r0, 80072ba <SD_initialize+0x16>
	{
		Stat &= ~STA_NOINIT;
 80072b2:	7823      	ldrb	r3, [r4, #0]
 80072b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80072b8:	7023      	strb	r3, [r4, #0]
	}

	return Stat;
 80072ba:	7820      	ldrb	r0, [r4, #0]
}
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	bf00      	nop
 80072c0:	20000050 	.word	0x20000050

080072c4 <SD_status>:
 * @param  lun : not used
 * @retval DSTATUS: Operation status
 */
DSTATUS SD_status(BYTE lun)
{
	Stat = STA_NOINIT;
 80072c4:	2301      	movs	r3, #1
{
 80072c6:	b510      	push	{r4, lr}
	Stat = STA_NOINIT;
 80072c8:	4c05      	ldr	r4, [pc, #20]	; (80072e0 <SD_status+0x1c>)
 80072ca:	7023      	strb	r3, [r4, #0]

	if (BSP_SD_GetCardState() == MSD_OK)
 80072cc:	f7fc f99c 	bl	8003608 <BSP_SD_GetCardState>
 80072d0:	b918      	cbnz	r0, 80072da <SD_status+0x16>
	{
		Stat &= ~STA_NOINIT;
 80072d2:	7823      	ldrb	r3, [r4, #0]
 80072d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80072d8:	7023      	strb	r3, [r4, #0]
	}

	return Stat;
 80072da:	7820      	ldrb	r0, [r4, #0]
}
 80072dc:	bd10      	pop	{r4, pc}
 80072de:	bf00      	nop
 80072e0:	20000050 	.word	0x20000050

080072e4 <SD_read>:
 * @param  sector: Sector address (LBA)
 * @param  count: Number of sectors to read (1..128)
 * @retval DRESULT: Operation result
 */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80072e4:	b510      	push	{r4, lr}
	DRESULT res = RES_ERROR;
	uint32_t timeout = 100000;

	if (BSP_SD_ReadBlocks_DMA((uint32_t*) buff, (uint32_t) (sector),
 80072e6:	4608      	mov	r0, r1
 80072e8:	4611      	mov	r1, r2
 80072ea:	461a      	mov	r2, r3
 80072ec:	f7fc f970 	bl	80035d0 <BSP_SD_ReadBlocks_DMA>
 80072f0:	b940      	cbnz	r0, 8007304 <SD_read+0x20>
 80072f2:	4c05      	ldr	r4, [pc, #20]	; (8007308 <SD_read+0x24>)
 80072f4:	e001      	b.n	80072fa <SD_read+0x16>
			count) == MSD_OK)
	{
		while (BSP_SD_GetCardState() != MSD_OK)
		{
			if (timeout-- == 0)
 80072f6:	3c01      	subs	r4, #1
 80072f8:	d004      	beq.n	8007304 <SD_read+0x20>
		while (BSP_SD_GetCardState() != MSD_OK)
 80072fa:	f7fc f985 	bl	8003608 <BSP_SD_GetCardState>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d1f9      	bne.n	80072f6 <SD_read+0x12>
		}
		res = RES_OK;
	}

	return res;
}
 8007302:	bd10      	pop	{r4, pc}
	DRESULT res = RES_ERROR;
 8007304:	2001      	movs	r0, #1
}
 8007306:	bd10      	pop	{r4, pc}
 8007308:	000186a1 	.word	0x000186a1

0800730c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
	DRESULT res = RES_ERROR;
	BSP_SD_CardInfo CardInfo;

	if (Stat & STA_NOINIT)
 800730c:	4b16      	ldr	r3, [pc, #88]	; (8007368 <SD_ioctl+0x5c>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	07db      	lsls	r3, r3, #31
 8007312:	d408      	bmi.n	8007326 <SD_ioctl+0x1a>
{
 8007314:	b510      	push	{r4, lr}
 8007316:	4614      	mov	r4, r2
 8007318:	b088      	sub	sp, #32
		return RES_NOTRDY;

	switch (cmd)
 800731a:	2903      	cmp	r1, #3
 800731c:	d820      	bhi.n	8007360 <SD_ioctl+0x54>
 800731e:	e8df f001 	tbb	[pc, r1]
 8007322:	0704      	.short	0x0704
 8007324:	170f      	.short	0x170f
		return RES_NOTRDY;
 8007326:	2003      	movs	r0, #3
	default:
		res = RES_PARERR;
	}

	return res;
}
 8007328:	4770      	bx	lr
		res = RES_OK;
 800732a:	2000      	movs	r0, #0
}
 800732c:	b008      	add	sp, #32
 800732e:	bd10      	pop	{r4, pc}
		BSP_SD_GetCardInfo(&CardInfo);
 8007330:	4668      	mov	r0, sp
 8007332:	f7fc f973 	bl	800361c <BSP_SD_GetCardInfo>
 8007336:	2000      	movs	r0, #0
		*(DWORD*) buff = CardInfo.LogBlockNbr;
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	6023      	str	r3, [r4, #0]
}
 800733c:	b008      	add	sp, #32
 800733e:	bd10      	pop	{r4, pc}
		BSP_SD_GetCardInfo(&CardInfo);
 8007340:	4668      	mov	r0, sp
 8007342:	f7fc f96b 	bl	800361c <BSP_SD_GetCardInfo>
		res = RES_OK;
 8007346:	2000      	movs	r0, #0
		*(WORD*) buff = CardInfo.LogBlockSize;
 8007348:	9b07      	ldr	r3, [sp, #28]
 800734a:	8023      	strh	r3, [r4, #0]
}
 800734c:	b008      	add	sp, #32
 800734e:	bd10      	pop	{r4, pc}
		BSP_SD_GetCardInfo(&CardInfo);
 8007350:	4668      	mov	r0, sp
 8007352:	f7fc f963 	bl	800361c <BSP_SD_GetCardInfo>
		res = RES_OK;
 8007356:	2000      	movs	r0, #0
		*(DWORD*) buff = CardInfo.LogBlockSize;
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	6023      	str	r3, [r4, #0]
}
 800735c:	b008      	add	sp, #32
 800735e:	bd10      	pop	{r4, pc}
		res = RES_PARERR;
 8007360:	2004      	movs	r0, #4
}
 8007362:	b008      	add	sp, #32
 8007364:	bd10      	pop	{r4, pc}
 8007366:	bf00      	nop
 8007368:	20000050 	.word	0x20000050

0800736c <SD_write>:
{
 800736c:	b510      	push	{r4, lr}
	if (BSP_SD_WriteBlocks_DMA((uint32_t*) buff, (uint32_t) (sector),
 800736e:	4608      	mov	r0, r1
 8007370:	4611      	mov	r1, r2
 8007372:	461a      	mov	r2, r3
 8007374:	f7fc f93a 	bl	80035ec <BSP_SD_WriteBlocks_DMA>
 8007378:	b940      	cbnz	r0, 800738c <SD_write+0x20>
 800737a:	4c05      	ldr	r4, [pc, #20]	; (8007390 <SD_write+0x24>)
 800737c:	e001      	b.n	8007382 <SD_write+0x16>
			if (timeout-- == 0)
 800737e:	3c01      	subs	r4, #1
 8007380:	d004      	beq.n	800738c <SD_write+0x20>
		while (BSP_SD_GetCardState() != MSD_OK)
 8007382:	f7fc f941 	bl	8003608 <BSP_SD_GetCardState>
 8007386:	2800      	cmp	r0, #0
 8007388:	d1f9      	bne.n	800737e <SD_write+0x12>
}
 800738a:	bd10      	pop	{r4, pc}
	DRESULT res = RES_ERROR;
 800738c:	2001      	movs	r0, #1
}
 800738e:	bd10      	pop	{r4, pc}
 8007390:	000186a1 	.word	0x000186a1

08007394 <ff_convert>:
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 8007394:	287f      	cmp	r0, #127	; 0x7f
 8007396:	f240 80e0 	bls.w	800755a <ff_convert+0x1c6>
	} else {
		if (dir) {		/* OEMCP to unicode */
			p = oem2uni;
			hi = sizeof oem2uni / 4 - 1;
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800739a:	4a70      	ldr	r2, [pc, #448]	; (800755c <ff_convert+0x1c8>)
{
 800739c:	b470      	push	{r4, r5, r6}
			p = uni2oem;
 800739e:	4c70      	ldr	r4, [pc, #448]	; (8007560 <ff_convert+0x1cc>)
			hi = sizeof uni2oem / 4 - 1;
		}
		li = 0;
		for (n = 16; n; n--) {
			i = li + (hi - li) / 2;
			if (chr == p[i * 2]) break;
 80073a0:	f248 5330 	movw	r3, #34096	; 0x8530
			p = uni2oem;
 80073a4:	2900      	cmp	r1, #0
 80073a6:	bf14      	ite	ne
 80073a8:	4621      	movne	r1, r4
 80073aa:	4611      	moveq	r1, r2
			if (chr == p[i * 2]) break;
 80073ac:	5aca      	ldrh	r2, [r1, r3]
 80073ae:	4290      	cmp	r0, r2
 80073b0:	f000 80ce 	beq.w	8007550 <ff_convert+0x1bc>
			i = li + (hi - li) / 2;
 80073b4:	bf8b      	itete	hi
 80073b6:	f242 134c 	movwhi	r3, #8524	; 0x214c
		li = 0;
 80073ba:	2300      	movls	r3, #0
			if (chr > p[i * 2])
 80073bc:	f244 2498 	movwhi	r4, #17048	; 0x4298
			i = li + (hi - li) / 2;
 80073c0:	f242 144c 	movwls	r4, #8524	; 0x214c
 80073c4:	1ae5      	subs	r5, r4, r3
 80073c6:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 80073ca:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 80073ce:	00aa      	lsls	r2, r5, #2
 80073d0:	42b0      	cmp	r0, r6
 80073d2:	f000 80be 	beq.w	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 80073d6:	bf84      	itt	hi
 80073d8:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 80073da:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 80073dc:	1aec      	subs	r4, r5, r3
 80073de:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80073e2:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 80073e6:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 80073ea:	00a2      	lsls	r2, r4, #2
 80073ec:	42b0      	cmp	r0, r6
 80073ee:	f000 80b0 	beq.w	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 80073f2:	bf84      	itt	hi
 80073f4:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 80073f6:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 80073f8:	1ae5      	subs	r5, r4, r3
 80073fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073fe:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 8007402:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 8007406:	00aa      	lsls	r2, r5, #2
 8007408:	42b0      	cmp	r0, r6
 800740a:	f000 80a2 	beq.w	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 800740e:	bf84      	itt	hi
 8007410:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 8007412:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 8007414:	1aec      	subs	r4, r5, r3
 8007416:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800741a:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 800741e:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 8007422:	00a2      	lsls	r2, r4, #2
 8007424:	42b0      	cmp	r0, r6
 8007426:	f000 8094 	beq.w	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 800742a:	bf84      	itt	hi
 800742c:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 800742e:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 8007430:	1ae5      	subs	r5, r4, r3
 8007432:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007436:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 800743a:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 800743e:	00aa      	lsls	r2, r5, #2
 8007440:	42b0      	cmp	r0, r6
 8007442:	f000 8086 	beq.w	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 8007446:	bf84      	itt	hi
 8007448:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 800744a:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 800744c:	1aec      	subs	r4, r5, r3
 800744e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007452:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 8007456:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 800745a:	00a2      	lsls	r2, r4, #2
 800745c:	42b0      	cmp	r0, r6
 800745e:	d078      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 8007460:	bf84      	itt	hi
 8007462:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 8007464:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 8007466:	1ae5      	subs	r5, r4, r3
 8007468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800746c:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 8007470:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 8007474:	00aa      	lsls	r2, r5, #2
 8007476:	42b0      	cmp	r0, r6
 8007478:	d06b      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 800747a:	bf84      	itt	hi
 800747c:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 800747e:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 8007480:	1aec      	subs	r4, r5, r3
 8007482:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007486:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 800748a:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 800748e:	00a2      	lsls	r2, r4, #2
 8007490:	42b0      	cmp	r0, r6
 8007492:	d05e      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 8007494:	bf84      	itt	hi
 8007496:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 8007498:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 800749a:	1ae5      	subs	r5, r4, r3
 800749c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074a0:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 80074a4:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 80074a8:	00aa      	lsls	r2, r5, #2
 80074aa:	42b0      	cmp	r0, r6
 80074ac:	d051      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 80074ae:	bf84      	itt	hi
 80074b0:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 80074b2:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 80074b4:	1aec      	subs	r4, r5, r3
 80074b6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80074ba:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 80074be:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 80074c2:	00a2      	lsls	r2, r4, #2
 80074c4:	42b0      	cmp	r0, r6
 80074c6:	d044      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 80074c8:	bf84      	itt	hi
 80074ca:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 80074cc:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 80074ce:	1ae5      	subs	r5, r4, r3
 80074d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074d4:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 80074d8:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 80074dc:	00aa      	lsls	r2, r5, #2
 80074de:	42b0      	cmp	r0, r6
 80074e0:	d037      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 80074e2:	bf84      	itt	hi
 80074e4:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 80074e6:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 80074e8:	1aec      	subs	r4, r5, r3
 80074ea:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80074ee:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 80074f2:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 80074f6:	00a2      	lsls	r2, r4, #2
 80074f8:	42b0      	cmp	r0, r6
 80074fa:	d02a      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 80074fc:	bf84      	itt	hi
 80074fe:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 8007500:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 8007502:	1ae5      	subs	r5, r4, r3
 8007504:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007508:	eb03 0565 	add.w	r5, r3, r5, asr #1
			if (chr == p[i * 2]) break;
 800750c:	f831 6025 	ldrh.w	r6, [r1, r5, lsl #2]
 8007510:	00aa      	lsls	r2, r5, #2
 8007512:	42b0      	cmp	r0, r6
 8007514:	d01d      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 8007516:	bf84      	itt	hi
 8007518:	462b      	movhi	r3, r5
			if (chr > p[i * 2])
 800751a:	4625      	movhi	r5, r4
			i = li + (hi - li) / 2;
 800751c:	1aec      	subs	r4, r5, r3
 800751e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8007522:	eb03 0464 	add.w	r4, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 8007526:	f831 6024 	ldrh.w	r6, [r1, r4, lsl #2]
 800752a:	00a2      	lsls	r2, r4, #2
 800752c:	42b0      	cmp	r0, r6
 800752e:	d010      	beq.n	8007552 <ff_convert+0x1be>
			i = li + (hi - li) / 2;
 8007530:	bf84      	itt	hi
 8007532:	4623      	movhi	r3, r4
			if (chr > p[i * 2])
 8007534:	462c      	movhi	r4, r5
			i = li + (hi - li) / 2;
 8007536:	1ae4      	subs	r4, r4, r3
 8007538:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800753c:	eb03 0364 	add.w	r3, r3, r4, asr #1
			if (chr == p[i * 2]) break;
 8007540:	f831 4023 	ldrh.w	r4, [r1, r3, lsl #2]
 8007544:	009a      	lsls	r2, r3, #2
 8007546:	4284      	cmp	r4, r0
 8007548:	d003      	beq.n	8007552 <ff_convert+0x1be>
		}
		c = n ? p[i * 2 + 1] : 0;
	}

	return c;
}
 800754a:	bc70      	pop	{r4, r5, r6}
		c = n ? p[i * 2 + 1] : 0;
 800754c:	2000      	movs	r0, #0
}
 800754e:	4770      	bx	lr
			if (chr == p[i * 2]) break;
 8007550:	461a      	mov	r2, r3
}
 8007552:	bc70      	pop	{r4, r5, r6}
		c = n ? p[i * 2 + 1] : 0;
 8007554:	4411      	add	r1, r2
 8007556:	8848      	ldrh	r0, [r1, #2]
}
 8007558:	4770      	bx	lr
 800755a:	4770      	bx	lr
 800755c:	0801a558 	.word	0x0801a558
 8007560:	08009734 	.word	0x08009734

08007564 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007564:	2861      	cmp	r0, #97	; 0x61
 8007566:	d00e      	beq.n	8007586 <ff_wtoupper+0x22>
 8007568:	2201      	movs	r2, #1
 800756a:	2362      	movs	r3, #98	; 0x62
 800756c:	4907      	ldr	r1, [pc, #28]	; (800758c <ff_wtoupper+0x28>)
 800756e:	4283      	cmp	r3, r0
 8007570:	d005      	beq.n	800757e <ff_wtoupper+0x1a>
 8007572:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8007576:	3201      	adds	r2, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f8      	bne.n	800756e <ff_wtoupper+0xa>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
 800757c:	4770      	bx	lr
 800757e:	4b04      	ldr	r3, [pc, #16]	; (8007590 <ff_wtoupper+0x2c>)
 8007580:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8007584:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007586:	2041      	movs	r0, #65	; 0x41
	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007588:	e7f8      	b.n	800757c <ff_wtoupper+0x18>
 800758a:	bf00      	nop
 800758c:	0801a19a 	.word	0x0801a19a
 8007590:	0801a378 	.word	0x0801a378

08007594 <ff_cre_syncobj>:
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
  int ret;
  
  osSemaphoreDef(SEM);
 8007594:	2300      	movs	r3, #0
{
 8007596:	b510      	push	{r4, lr}
 8007598:	b082      	sub	sp, #8
 800759a:	460c      	mov	r4, r1
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800759c:	4668      	mov	r0, sp
 800759e:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 80075a0:	e9cd 3300 	strd	r3, r3, [sp]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80075a4:	f000 f854 	bl	8007650 <osSemaphoreCreate>
 80075a8:	6020      	str	r0, [r4, #0]
  ret = (*sobj != NULL);
  
  return ret;
}
 80075aa:	3000      	adds	r0, #0
 80075ac:	bf18      	it	ne
 80075ae:	2001      	movne	r0, #1
 80075b0:	b002      	add	sp, #8
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80075b4:	b508      	push	{r3, lr}
  osSemaphoreDelete (sobj);
 80075b6:	f000 f8c9 	bl	800774c <osSemaphoreDelete>
  return 1;
}
 80075ba:	2001      	movs	r0, #1
 80075bc:	bd08      	pop	{r3, pc}
 80075be:	bf00      	nop

080075c0 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80075c0:	b508      	push	{r3, lr}
  int ret = 0;
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80075c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075c6:	f000 f86d 	bl	80076a4 <osSemaphoreWait>
  {
    ret = 1;
  }
  
  return ret;
}
 80075ca:	fab0 f080 	clz	r0, r0
 80075ce:	0940      	lsrs	r0, r0, #5
 80075d0:	bd08      	pop	{r3, pc}
 80075d2:	bf00      	nop

080075d4 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 80075d4:	f000 b892 	b.w	80076fc <osSemaphoreRelease>

080075d8 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 80075d8:	f001 bf78 	b.w	80094cc <malloc>

080075dc <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	free(mblock);	/* Discard the memory block with POSIX API */
 80075dc:	f001 bf7e 	b.w	80094dc <free>

080075e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80075e2:	f001 f8cf 	bl	8008784 <vTaskStartScheduler>
  
  return osOK;
}
 80075e6:	2000      	movs	r0, #0
 80075e8:	bd08      	pop	{r3, pc}
 80075ea:	bf00      	nop

080075ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075ec:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075ee:	6945      	ldr	r5, [r0, #20]
{
 80075f0:	460b      	mov	r3, r1
 80075f2:	e9d0 1600 	ldrd	r1, r6, [r0]
 80075f6:	b086      	sub	sp, #24
 80075f8:	6902      	ldr	r2, [r0, #16]
 80075fa:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075fe:	b16d      	cbz	r5, 800761c <osThreadCreate+0x30>
 8007600:	6980      	ldr	r0, [r0, #24]
 8007602:	b158      	cbz	r0, 800761c <osThreadCreate+0x30>
  if (priority != osPriorityError) {
 8007604:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007606:	bf0c      	ite	eq
 8007608:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800760a:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800760c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007610:	9400      	str	r4, [sp, #0]
 8007612:	4630      	mov	r0, r6
 8007614:	f000 ffd6 	bl	80085c4 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8007618:	b006      	add	sp, #24
 800761a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800761c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800761e:	bf0c      	ite	eq
 8007620:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007622:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007624:	ad05      	add	r5, sp, #20
 8007626:	b292      	uxth	r2, r2
 8007628:	9400      	str	r4, [sp, #0]
 800762a:	4630      	mov	r0, r6
 800762c:	9501      	str	r5, [sp, #4]
 800762e:	f001 f801 	bl	8008634 <xTaskCreate>
 8007632:	2801      	cmp	r0, #1
      return NULL;
 8007634:	bf14      	ite	ne
 8007636:	2000      	movne	r0, #0
 8007638:	9805      	ldreq	r0, [sp, #20]
}
 800763a:	b006      	add	sp, #24
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	bf00      	nop

08007640 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007640:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007642:	2800      	cmp	r0, #0
 8007644:	bf08      	it	eq
 8007646:	2001      	moveq	r0, #1
 8007648:	f001 fa3a 	bl	8008ac0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800764c:	2000      	movs	r0, #0
 800764e:	bd08      	pop	{r3, pc}

08007650 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007650:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007652:	6844      	ldr	r4, [r0, #4]
{ 
 8007654:	b083      	sub	sp, #12
  if (semaphore_def->controlblock != NULL){
 8007656:	b16c      	cbz	r4, 8007674 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8007658:	2901      	cmp	r1, #1
 800765a:	d11d      	bne.n	8007698 <osSemaphoreCreate+0x48>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800765c:	2503      	movs	r5, #3
 800765e:	2200      	movs	r2, #0
 8007660:	4608      	mov	r0, r1
 8007662:	9500      	str	r5, [sp, #0]
 8007664:	4623      	mov	r3, r4
 8007666:	4611      	mov	r1, r2
 8007668:	f000 f952 	bl	8007910 <xQueueGenericCreateStatic>
 800766c:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 800766e:	4628      	mov	r0, r5
 8007670:	b003      	add	sp, #12
 8007672:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8007674:	2901      	cmp	r1, #1
 8007676:	d113      	bne.n	80076a0 <osSemaphoreCreate+0x50>
      vSemaphoreCreateBinary(sema);
 8007678:	4608      	mov	r0, r1
 800767a:	2203      	movs	r2, #3
 800767c:	4621      	mov	r1, r4
 800767e:	f000 f999 	bl	80079b4 <xQueueGenericCreate>
 8007682:	4605      	mov	r5, r0
 8007684:	2800      	cmp	r0, #0
 8007686:	d0f2      	beq.n	800766e <osSemaphoreCreate+0x1e>
 8007688:	4623      	mov	r3, r4
 800768a:	4622      	mov	r2, r4
 800768c:	4621      	mov	r1, r4
 800768e:	f000 f9db 	bl	8007a48 <xQueueGenericSend>
}
 8007692:	4628      	mov	r0, r5
 8007694:	b003      	add	sp, #12
 8007696:	bd30      	pop	{r4, r5, pc}
      return NULL;
 8007698:	2500      	movs	r5, #0
}
 800769a:	4628      	mov	r0, r5
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
      return NULL;
 80076a0:	4625      	mov	r5, r4
 80076a2:	e7e4      	b.n	800766e <osSemaphoreCreate+0x1e>

080076a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80076a4:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80076a6:	2400      	movs	r4, #0
{
 80076a8:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80076aa:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80076ac:	b300      	cbz	r0, 80076f0 <osSemaphoreWait+0x4c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ae:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80076b2:	b933      	cbnz	r3, 80076c2 <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80076b4:	f000 fbb0 	bl	8007e18 <xQueueSemaphoreTake>
 80076b8:	2801      	cmp	r0, #1
 80076ba:	d116      	bne.n	80076ea <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 80076bc:	2000      	movs	r0, #0
}
 80076be:	b002      	add	sp, #8
 80076c0:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076c2:	aa01      	add	r2, sp, #4
 80076c4:	4621      	mov	r1, r4
 80076c6:	f000 fd31 	bl	800812c <xQueueReceiveFromISR>
 80076ca:	2801      	cmp	r0, #1
 80076cc:	d10d      	bne.n	80076ea <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f3      	beq.n	80076bc <osSemaphoreWait+0x18>
 80076d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d8:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <osSemaphoreWait+0x54>)
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
  return osOK;
 80076e4:	4620      	mov	r0, r4
}
 80076e6:	b002      	add	sp, #8
 80076e8:	bd10      	pop	{r4, pc}
      return osErrorOS;
 80076ea:	20ff      	movs	r0, #255	; 0xff
}
 80076ec:	b002      	add	sp, #8
 80076ee:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80076f0:	2080      	movs	r0, #128	; 0x80
}
 80076f2:	b002      	add	sp, #8
 80076f4:	bd10      	pop	{r4, pc}
 80076f6:	bf00      	nop
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <osSemaphoreRelease>:
 80076fc:	b510      	push	{r4, lr}
 80076fe:	2400      	movs	r4, #0
 8007700:	b082      	sub	sp, #8
 8007702:	9401      	str	r4, [sp, #4]
 8007704:	f3ef 8305 	mrs	r3, IPSR
 8007708:	b14b      	cbz	r3, 800771e <osSemaphoreRelease+0x22>
 800770a:	a901      	add	r1, sp, #4
 800770c:	f000 fb2e 	bl	8007d6c <xQueueGiveFromISR>
 8007710:	2801      	cmp	r0, #1
 8007712:	d10a      	bne.n	800772a <osSemaphoreRelease+0x2e>
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	b95b      	cbnz	r3, 8007730 <osSemaphoreRelease+0x34>
 8007718:	2000      	movs	r0, #0
 800771a:	b002      	add	sp, #8
 800771c:	bd10      	pop	{r4, pc}
 800771e:	461a      	mov	r2, r3
 8007720:	4619      	mov	r1, r3
 8007722:	f000 f991 	bl	8007a48 <xQueueGenericSend>
 8007726:	2801      	cmp	r0, #1
 8007728:	d0f6      	beq.n	8007718 <osSemaphoreRelease+0x1c>
 800772a:	20ff      	movs	r0, #255	; 0xff
 800772c:	b002      	add	sp, #8
 800772e:	bd10      	pop	{r4, pc}
 8007730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007734:	4b04      	ldr	r3, [pc, #16]	; (8007748 <osSemaphoreRelease+0x4c>)
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	4620      	mov	r0, r4
 8007742:	b002      	add	sp, #8
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <osSemaphoreDelete>:
 800774c:	b510      	push	{r4, lr}
 800774e:	f3ef 8405 	mrs	r4, IPSR
 8007752:	b91c      	cbnz	r4, 800775c <osSemaphoreDelete+0x10>
 8007754:	f000 fd46 	bl	80081e4 <vQueueDelete>
 8007758:	4620      	mov	r0, r4
 800775a:	bd10      	pop	{r4, pc}
 800775c:	2082      	movs	r0, #130	; 0x82
 800775e:	bd10      	pop	{r4, pc}

08007760 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007760:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007764:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007766:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800776a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800776c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800776e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007770:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop

08007778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop

08007780 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007780:	6843      	ldr	r3, [r0, #4]
{
 8007782:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007784:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007786:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007788:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800778a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800778c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 800778e:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007790:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007792:	6099      	str	r1, [r3, #8]
}
 8007794:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007796:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007798:	6002      	str	r2, [r0, #0]
}
 800779a:	4770      	bx	lr

0800779c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800779c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800779e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077a0:	1c6b      	adds	r3, r5, #1
 80077a2:	d011      	beq.n	80077c8 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077a4:	f100 0208 	add.w	r2, r0, #8
 80077a8:	e000      	b.n	80077ac <vListInsert+0x10>
 80077aa:	461a      	mov	r2, r3
 80077ac:	6853      	ldr	r3, [r2, #4]
 80077ae:	681c      	ldr	r4, [r3, #0]
 80077b0:	42ac      	cmp	r4, r5
 80077b2:	d9fa      	bls.n	80077aa <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80077b4:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80077b6:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80077b8:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80077be:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80077c0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80077c2:	6004      	str	r4, [r0, #0]
}
 80077c4:	bc30      	pop	{r4, r5}
 80077c6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80077c8:	6902      	ldr	r2, [r0, #16]
 80077ca:	6853      	ldr	r3, [r2, #4]
 80077cc:	e7f2      	b.n	80077b4 <vListInsert+0x18>
 80077ce:	bf00      	nop

080077d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80077d0:	6903      	ldr	r3, [r0, #16]
{
 80077d2:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077d4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077d8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077da:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077dc:	6881      	ldr	r1, [r0, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80077de:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077e0:	604a      	str	r2, [r1, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077e2:	bf08      	it	eq
 80077e4:	6059      	streq	r1, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80077e6:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80077e8:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 80077ea:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80077ec:	3a01      	subs	r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077f0:	6818      	ldr	r0, [r3, #0]
}
 80077f2:	bc10      	pop	{r4}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop

080077f8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077fc:	f001 fc32 	bl	8009064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007800:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8007804:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007806:	2c00      	cmp	r4, #0
 8007808:	dd16      	ble.n	8007838 <prvUnlockQueue+0x40>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800780a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800780c:	b1a3      	cbz	r3, 8007838 <prvUnlockQueue+0x40>
 800780e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8007812:	e005      	b.n	8007820 <prvUnlockQueue+0x28>
 8007814:	3c01      	subs	r4, #1
 8007816:	b2e3      	uxtb	r3, r4
 8007818:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800781a:	b16b      	cbz	r3, 8007838 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800781c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800781e:	b15b      	cbz	r3, 8007838 <prvUnlockQueue+0x40>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007820:	4630      	mov	r0, r6
 8007822:	f001 f9ff 	bl	8008c24 <xTaskRemoveFromEventList>
 8007826:	2800      	cmp	r0, #0
 8007828:	d0f4      	beq.n	8007814 <prvUnlockQueue+0x1c>
 800782a:	3c01      	subs	r4, #1
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800782c:	f001 fa92 	bl	8008d54 <vTaskMissedYield>
 8007830:	b2e3      	uxtb	r3, r4
 8007832:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f1      	bne.n	800781c <prvUnlockQueue+0x24>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007838:	23ff      	movs	r3, #255	; 0xff
 800783a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800783e:	f001 fc33 	bl	80090a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007842:	f001 fc0f 	bl	8009064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007846:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800784a:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800784c:	2c00      	cmp	r4, #0
 800784e:	dd16      	ble.n	800787e <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007850:	692b      	ldr	r3, [r5, #16]
 8007852:	b1a3      	cbz	r3, 800787e <prvUnlockQueue+0x86>
 8007854:	f105 0610 	add.w	r6, r5, #16
 8007858:	e005      	b.n	8007866 <prvUnlockQueue+0x6e>
 800785a:	3c01      	subs	r4, #1
 800785c:	b2e3      	uxtb	r3, r4
 800785e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007860:	b16b      	cbz	r3, 800787e <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007862:	692b      	ldr	r3, [r5, #16]
 8007864:	b15b      	cbz	r3, 800787e <prvUnlockQueue+0x86>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007866:	4630      	mov	r0, r6
 8007868:	f001 f9dc 	bl	8008c24 <xTaskRemoveFromEventList>
 800786c:	2800      	cmp	r0, #0
 800786e:	d0f4      	beq.n	800785a <prvUnlockQueue+0x62>
 8007870:	3c01      	subs	r4, #1
				{
					vTaskMissedYield();
 8007872:	f001 fa6f 	bl	8008d54 <vTaskMissedYield>
 8007876:	b2e3      	uxtb	r3, r4
 8007878:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1f1      	bne.n	8007862 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800787e:	23ff      	movs	r3, #255	; 0xff
 8007880:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8007884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007888:	f001 bc0e 	b.w	80090a8 <vPortExitCritical>

0800788c <xQueueGenericReset>:
	configASSERT( pxQueue );
 800788c:	b1e8      	cbz	r0, 80078ca <xQueueGenericReset+0x3e>
{
 800788e:	b570      	push	{r4, r5, r6, lr}
 8007890:	4604      	mov	r4, r0
 8007892:	460d      	mov	r5, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007894:	2600      	movs	r6, #0
	taskENTER_CRITICAL();
 8007896:	f001 fbe5 	bl	8009064 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800789a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 800789e:	20ff      	movs	r0, #255	; 0xff
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078a0:	fb03 f302 	mul.w	r3, r3, r2
 80078a4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80078a6:	1a9a      	subs	r2, r3, r2
 80078a8:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078aa:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078ac:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80078ae:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078b0:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078b4:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 80078b8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80078bc:	b975      	cbnz	r5, 80078dc <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078be:	6923      	ldr	r3, [r4, #16]
 80078c0:	b9ab      	cbnz	r3, 80078ee <xQueueGenericReset+0x62>
	taskEXIT_CRITICAL();
 80078c2:	f001 fbf1 	bl	80090a8 <vPortExitCritical>
}
 80078c6:	2001      	movs	r0, #1
 80078c8:	bd70      	pop	{r4, r5, r6, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	e7fe      	b.n	80078da <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078dc:	f104 0010 	add.w	r0, r4, #16
 80078e0:	f7ff ff3e 	bl	8007760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80078e8:	f7ff ff3a 	bl	8007760 <vListInitialise>
 80078ec:	e7e9      	b.n	80078c2 <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ee:	f104 0010 	add.w	r0, r4, #16
 80078f2:	f001 f997 	bl	8008c24 <xTaskRemoveFromEventList>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0e3      	beq.n	80078c2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80078fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <xQueueGenericReset+0x80>)
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e7da      	b.n	80078c2 <xQueueGenericReset+0x36>
 800790c:	e000ed04 	.word	0xe000ed04

08007910 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007910:	b940      	cbnz	r0, 8007924 <xQueueGenericCreateStatic+0x14>
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	e7fe      	b.n	8007922 <xQueueGenericCreateStatic+0x12>
	{
 8007924:	b510      	push	{r4, lr}
 8007926:	461c      	mov	r4, r3
 8007928:	b082      	sub	sp, #8
		configASSERT( pxStaticQueue != NULL );
 800792a:	b17b      	cbz	r3, 800794c <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800792c:	b36a      	cbz	r2, 800798a <xQueueGenericCreateStatic+0x7a>
 800792e:	b1b1      	cbz	r1, 800795e <xQueueGenericCreateStatic+0x4e>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007930:	2348      	movs	r3, #72	; 0x48
 8007932:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007934:	9b01      	ldr	r3, [sp, #4]
 8007936:	2b48      	cmp	r3, #72	; 0x48
 8007938:	d01a      	beq.n	8007970 <xQueueGenericCreateStatic+0x60>
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	e7fe      	b.n	800794a <xQueueGenericCreateStatic+0x3a>
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	e7fe      	b.n	800795c <xQueueGenericCreateStatic+0x4c>
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	e7fe      	b.n	800796e <xQueueGenericCreateStatic+0x5e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007976:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 800797a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800797c:	2101      	movs	r1, #1
 800797e:	4620      	mov	r0, r4
 8007980:	f7ff ff84 	bl	800788c <xQueueGenericReset>
	}
 8007984:	4620      	mov	r0, r4
 8007986:	b002      	add	sp, #8
 8007988:	bd10      	pop	{r4, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800798a:	b141      	cbz	r1, 800799e <xQueueGenericCreateStatic+0x8e>
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	e7fe      	b.n	800799c <xQueueGenericCreateStatic+0x8c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800799e:	2348      	movs	r3, #72	; 0x48
 80079a0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	2b48      	cmp	r3, #72	; 0x48
 80079a6:	d1c8      	bne.n	800793a <xQueueGenericCreateStatic+0x2a>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	4622      	mov	r2, r4
 80079ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80079b0:	e7e1      	b.n	8007976 <xQueueGenericCreateStatic+0x66>
 80079b2:	bf00      	nop

080079b4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079b4:	b940      	cbnz	r0, 80079c8 <xQueueGenericCreate+0x14>
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	e7fe      	b.n	80079c6 <xQueueGenericCreate+0x12>
	{
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	4606      	mov	r6, r0
 80079cc:	460d      	mov	r5, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 80079ce:	b169      	cbz	r1, 80079ec <xQueueGenericCreate+0x38>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d0:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80079d4:	3048      	adds	r0, #72	; 0x48
 80079d6:	f001 fc83 	bl	80092e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80079da:	4604      	mov	r4, r0
 80079dc:	b380      	cbz	r0, 8007a40 <xQueueGenericCreate+0x8c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079de:	2200      	movs	r2, #0
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80079e0:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079e4:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079e8:	6003      	str	r3, [r0, #0]
 80079ea:	e007      	b.n	80079fc <xQueueGenericCreate+0x48>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80079ec:	2048      	movs	r0, #72	; 0x48
 80079ee:	f001 fc77 	bl	80092e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80079f2:	4604      	mov	r4, r0
 80079f4:	b320      	cbz	r0, 8007a40 <xQueueGenericCreate+0x8c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079f6:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079fa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80079fc:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8007a00:	f001 fb30 	bl	8009064 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a04:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 8007a08:	25ff      	movs	r5, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a0a:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a0c:	fb03 f302 	mul.w	r3, r3, r2
 8007a10:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007a12:	1a9a      	subs	r2, r3, r2
 8007a14:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a16:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a18:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007a1a:	60e2      	str	r2, [r4, #12]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a1c:	e9c4 3101 	strd	r3, r1, [r4, #4]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a20:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8007a24:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a28:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a2c:	f7ff fe98 	bl	8007760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a34:	f7ff fe94 	bl	8007760 <vListInitialise>
	taskEXIT_CRITICAL();
 8007a38:	f001 fb36 	bl	80090a8 <vPortExitCritical>
	}
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007a40:	2400      	movs	r4, #0
	}
 8007a42:	4620      	mov	r0, r4
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
 8007a46:	bf00      	nop

08007a48 <xQueueGenericSend>:
{
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007a50:	2800      	cmp	r0, #0
 8007a52:	f000 8125 	beq.w	8007ca0 <xQueueGenericSend+0x258>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a56:	2900      	cmp	r1, #0
 8007a58:	f000 8115 	beq.w	8007c86 <xQueueGenericSend+0x23e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d10b      	bne.n	8007a78 <xQueueGenericSend+0x30>
 8007a60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a62:	2a01      	cmp	r2, #1
 8007a64:	d008      	beq.n	8007a78 <xQueueGenericSend+0x30>
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	e7fe      	b.n	8007a76 <xQueueGenericSend+0x2e>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a7e:	f001 f96f 	bl	8008d60 <xTaskGetSchedulerState>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f040 80fc 	bne.w	8007c80 <xQueueGenericSend+0x238>
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	b143      	cbz	r3, 8007a9e <xQueueGenericSend+0x56>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGenericSend+0x54>
 8007a9e:	469a      	mov	sl, r3
		taskENTER_CRITICAL();
 8007aa0:	f001 fae0 	bl	8009064 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aa4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		prvLockQueue( pxQueue );
 8007aa8:	f04f 0800 	mov.w	r8, #0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aac:	429a      	cmp	r2, r3
					portYIELD_WITHIN_API();
 8007aae:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8007d68 <xQueueGenericSend+0x320>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ab2:	d375      	bcc.n	8007ba0 <xQueueGenericSend+0x158>
 8007ab4:	2f02      	cmp	r7, #2
 8007ab6:	f000 80fc 	beq.w	8007cb2 <xQueueGenericSend+0x26a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aba:	9d01      	ldr	r5, [sp, #4]
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	f000 814e 	beq.w	8007d5e <xQueueGenericSend+0x316>
				else if( xEntryTimeSet == pdFALSE )
 8007ac2:	f1ba 0f00 	cmp.w	sl, #0
 8007ac6:	d102      	bne.n	8007ace <xQueueGenericSend+0x86>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ac8:	a802      	add	r0, sp, #8
 8007aca:	f001 f8f1 	bl	8008cb0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007ace:	f001 faeb 	bl	80090a8 <vPortExitCritical>
		vTaskSuspendAll();
 8007ad2:	f000 feb7 	bl	8008844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ad6:	f001 fac5 	bl	8009064 <vPortEnterCritical>
 8007ada:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ade:	2bff      	cmp	r3, #255	; 0xff
 8007ae0:	bf08      	it	eq
 8007ae2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8007ae6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007aea:	2bff      	cmp	r3, #255	; 0xff
 8007aec:	bf08      	it	eq
 8007aee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8007af2:	f001 fad9 	bl	80090a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007af6:	a901      	add	r1, sp, #4
 8007af8:	a802      	add	r0, sp, #8
 8007afa:	f001 f8e5 	bl	8008cc8 <xTaskCheckForTimeOut>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f040 8126 	bne.w	8007d50 <xQueueGenericSend+0x308>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b04:	f001 faae 	bl	8009064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d06a      	beq.n	8007be6 <xQueueGenericSend+0x19e>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007b10:	f001 faca 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b14:	f001 faa6 	bl	8009064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007b18:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007b1c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	dd11      	ble.n	8007b46 <xQueueGenericSend+0xfe>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b24:	b17b      	cbz	r3, 8007b46 <xQueueGenericSend+0xfe>
 8007b26:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8007b2a:	e001      	b.n	8007b30 <xQueueGenericSend+0xe8>
 8007b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b2e:	b153      	cbz	r3, 8007b46 <xQueueGenericSend+0xfe>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b30:	4650      	mov	r0, sl
 8007b32:	f001 f877 	bl	8008c24 <xTaskRemoveFromEventList>
 8007b36:	b108      	cbz	r0, 8007b3c <xQueueGenericSend+0xf4>
						vTaskMissedYield();
 8007b38:	f001 f90c 	bl	8008d54 <vTaskMissedYield>
 8007b3c:	3d01      	subs	r5, #1
 8007b3e:	b2eb      	uxtb	r3, r5
 8007b40:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f2      	bne.n	8007b2c <xQueueGenericSend+0xe4>
		pxQueue->cTxLock = queueUNLOCKED;
 8007b46:	23ff      	movs	r3, #255	; 0xff
 8007b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007b4c:	f001 faac 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b50:	f001 fa88 	bl	8009064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b54:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007b58:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b5a:	2d00      	cmp	r5, #0
 8007b5c:	dd11      	ble.n	8007b82 <xQueueGenericSend+0x13a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	b17b      	cbz	r3, 8007b82 <xQueueGenericSend+0x13a>
 8007b62:	f104 0a10 	add.w	sl, r4, #16
 8007b66:	e001      	b.n	8007b6c <xQueueGenericSend+0x124>
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	b153      	cbz	r3, 8007b82 <xQueueGenericSend+0x13a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	f001 f859 	bl	8008c24 <xTaskRemoveFromEventList>
 8007b72:	b108      	cbz	r0, 8007b78 <xQueueGenericSend+0x130>
					vTaskMissedYield();
 8007b74:	f001 f8ee 	bl	8008d54 <vTaskMissedYield>
 8007b78:	3d01      	subs	r5, #1
 8007b7a:	b2eb      	uxtb	r3, r5
 8007b7c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1f2      	bne.n	8007b68 <xQueueGenericSend+0x120>
		pxQueue->cRxLock = queueUNLOCKED;
 8007b82:	23ff      	movs	r3, #255	; 0xff
 8007b84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007b88:	f001 fa8e 	bl	80090a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8007b8c:	f000 ff0e 	bl	80089ac <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007b90:	f001 fa68 	bl	8009064 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b98:	f04f 0a01 	mov.w	sl, #1
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d289      	bcs.n	8007ab4 <xQueueGenericSend+0x6c>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ba0:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ba2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	f000 8087 	beq.w	8007cb8 <xQueueGenericSend+0x270>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007baa:	4631      	mov	r1, r6
	else if( xPosition == queueSEND_TO_BACK )
 8007bac:	2f00      	cmp	r7, #0
 8007bae:	f040 80bb 	bne.w	8007d28 <xQueueGenericSend+0x2e0>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007bb2:	68a0      	ldr	r0, [r4, #8]
 8007bb4:	f001 fc9a 	bl	80094ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007bb8:	68a3      	ldr	r3, [r4, #8]
 8007bba:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bbc:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007bbe:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007bc6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc8:	d379      	bcc.n	8007cbe <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bca:	63a5      	str	r5, [r4, #56]	; 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bcc:	6822      	ldr	r2, [r4, #0]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bd0:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d077      	beq.n	8007cc6 <xQueueGenericSend+0x27e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007bda:	f001 f823 	bl	8008c24 <xTaskRemoveFromEventList>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	f040 8082 	bne.w	8007ce8 <xQueueGenericSend+0x2a0>
 8007be4:	e06f      	b.n	8007cc6 <xQueueGenericSend+0x27e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007be6:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 8007bea:	f001 fa5d 	bl	80090a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007bee:	4650      	mov	r0, sl
 8007bf0:	9901      	ldr	r1, [sp, #4]
 8007bf2:	f000 ffc7 	bl	8008b84 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8007bf6:	f001 fa35 	bl	8009064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007bfa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007bfe:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	dd11      	ble.n	8007c28 <xQueueGenericSend+0x1e0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c06:	b17b      	cbz	r3, 8007c28 <xQueueGenericSend+0x1e0>
 8007c08:	f104 0b24 	add.w	fp, r4, #36	; 0x24
 8007c0c:	e001      	b.n	8007c12 <xQueueGenericSend+0x1ca>
 8007c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c10:	b153      	cbz	r3, 8007c28 <xQueueGenericSend+0x1e0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c12:	4658      	mov	r0, fp
 8007c14:	f001 f806 	bl	8008c24 <xTaskRemoveFromEventList>
 8007c18:	b108      	cbz	r0, 8007c1e <xQueueGenericSend+0x1d6>
						vTaskMissedYield();
 8007c1a:	f001 f89b 	bl	8008d54 <vTaskMissedYield>
 8007c1e:	3d01      	subs	r5, #1
 8007c20:	b2eb      	uxtb	r3, r5
 8007c22:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f2      	bne.n	8007c0e <xQueueGenericSend+0x1c6>
		pxQueue->cTxLock = queueUNLOCKED;
 8007c28:	23ff      	movs	r3, #255	; 0xff
 8007c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007c2e:	f001 fa3b 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007c32:	f001 fa17 	bl	8009064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007c36:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007c3a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	dc0a      	bgt.n	8007c56 <xQueueGenericSend+0x20e>
 8007c40:	e00c      	b.n	8007c5c <xQueueGenericSend+0x214>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c42:	4650      	mov	r0, sl
 8007c44:	f000 ffee 	bl	8008c24 <xTaskRemoveFromEventList>
 8007c48:	b108      	cbz	r0, 8007c4e <xQueueGenericSend+0x206>
					vTaskMissedYield();
 8007c4a:	f001 f883 	bl	8008d54 <vTaskMissedYield>
 8007c4e:	3d01      	subs	r5, #1
 8007c50:	b2eb      	uxtb	r3, r5
 8007c52:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c54:	b113      	cbz	r3, 8007c5c <xQueueGenericSend+0x214>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f2      	bne.n	8007c42 <xQueueGenericSend+0x1fa>
		pxQueue->cRxLock = queueUNLOCKED;
 8007c5c:	23ff      	movs	r3, #255	; 0xff
 8007c5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007c62:	f001 fa21 	bl	80090a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8007c66:	f000 fea1 	bl	80089ac <xTaskResumeAll>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d190      	bne.n	8007b90 <xQueueGenericSend+0x148>
					portYIELD_WITHIN_API();
 8007c6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c72:	f8c9 3000 	str.w	r3, [r9]
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	e787      	b.n	8007b90 <xQueueGenericSend+0x148>
 8007c80:	f04f 0a00 	mov.w	sl, #0
 8007c84:	e70c      	b.n	8007aa0 <xQueueGenericSend+0x58>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c86:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	f43f aee7 	beq.w	8007a5c <xQueueGenericSend+0x14>
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	e7fe      	b.n	8007c9e <xQueueGenericSend+0x256>
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	e7fe      	b.n	8007cb0 <xQueueGenericSend+0x268>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cb4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cb6:	bb02      	cbnz	r2, 8007cfa <xQueueGenericSend+0x2b2>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb8:	6826      	ldr	r6, [r4, #0]
 8007cba:	3501      	adds	r5, #1
 8007cbc:	b14e      	cbz	r6, 8007cd2 <xQueueGenericSend+0x28a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cbe:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d187      	bne.n	8007bd6 <xQueueGenericSend+0x18e>
				taskEXIT_CRITICAL();
 8007cc6:	f001 f9ef 	bl	80090a8 <vPortExitCritical>
				return pdPASS;
 8007cca:	2001      	movs	r0, #1
}
 8007ccc:	b005      	add	sp, #20
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007cd2:	6860      	ldr	r0, [r4, #4]
 8007cd4:	f001 f8aa 	bl	8008e2c <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cd8:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 8007cdc:	6066      	str	r6, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f47f af79 	bne.w	8007bd6 <xQueueGenericSend+0x18e>
					else if( xYieldRequired != pdFALSE )
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d0ee      	beq.n	8007cc6 <xQueueGenericSend+0x27e>
						queueYIELD_IF_USING_PREEMPTION();
 8007ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cec:	4b1e      	ldr	r3, [pc, #120]	; (8007d68 <xQueueGenericSend+0x320>)
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	e7e5      	b.n	8007cc6 <xQueueGenericSend+0x27e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	68e0      	ldr	r0, [r4, #12]
 8007cfe:	f001 fbf5 	bl	80094ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d04:	68e2      	ldr	r2, [r4, #12]
 8007d06:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d08:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d0a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d0c:	4291      	cmp	r1, r2
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d0e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d10:	d916      	bls.n	8007d40 <xQueueGenericSend+0x2f8>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007d18:	2f02      	cmp	r7, #2
 8007d1a:	d011      	beq.n	8007d40 <xQueueGenericSend+0x2f8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0cf      	beq.n	8007cc6 <xQueueGenericSend+0x27e>
 8007d26:	e756      	b.n	8007bd6 <xQueueGenericSend+0x18e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d28:	68e0      	ldr	r0, [r4, #12]
 8007d2a:	f001 fbdf 	bl	80094ec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d30:	68e2      	ldr	r2, [r4, #12]
 8007d32:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d34:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d36:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d38:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d3a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d3c:	d2ec      	bcs.n	8007d18 <xQueueGenericSend+0x2d0>
 8007d3e:	e7e8      	b.n	8007d12 <xQueueGenericSend+0x2ca>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	d1bc      	bne.n	8007cbe <xQueueGenericSend+0x276>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d44:	2301      	movs	r3, #1
 8007d46:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0bb      	beq.n	8007cc6 <xQueueGenericSend+0x27e>
 8007d4e:	e742      	b.n	8007bd6 <xQueueGenericSend+0x18e>
			prvUnlockQueue( pxQueue );
 8007d50:	4620      	mov	r0, r4
 8007d52:	f7ff fd51 	bl	80077f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d56:	f000 fe29 	bl	80089ac <xTaskResumeAll>
			return errQUEUE_FULL;
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	e7b6      	b.n	8007ccc <xQueueGenericSend+0x284>
					taskEXIT_CRITICAL();
 8007d5e:	f001 f9a3 	bl	80090a8 <vPortExitCritical>
					return errQUEUE_FULL;
 8007d62:	4628      	mov	r0, r5
 8007d64:	e7b2      	b.n	8007ccc <xQueueGenericSend+0x284>
 8007d66:	bf00      	nop
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007d6c:	b370      	cbz	r0, 8007dcc <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d70:	b143      	cbz	r3, 8007d84 <xQueueGiveFromISR+0x18>
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	e7fe      	b.n	8007d82 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007d84:	6803      	ldr	r3, [r0, #0]
 8007d86:	b353      	cbz	r3, 8007dde <xQueueGiveFromISR+0x72>
{
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d8e:	f001 fa51 	bl	8009234 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d92:	f3ef 8611 	mrs	r6, BASEPRI
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007da6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d931      	bls.n	8007e12 <xQueueGiveFromISR+0xa6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007db2:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8007db4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007db6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	d01c      	beq.n	8007df6 <xQueueGiveFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	b25b      	sxtb	r3, r3
 8007dc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007dc4:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dc6:	f386 8811 	msr	BASEPRI, r6
}
 8007dca:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007dde:	6843      	ldr	r3, [r0, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0d1      	beq.n	8007d88 <xQueueGiveFromISR+0x1c>
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	e7fe      	b.n	8007df4 <xQueueGiveFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0e3      	beq.n	8007dc4 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e00:	f000 ff10 	bl	8008c24 <xTaskRemoveFromEventList>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d0dd      	beq.n	8007dc4 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8007e08:	2d00      	cmp	r5, #0
 8007e0a:	d0db      	beq.n	8007dc4 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e0c:	2001      	movs	r0, #1
 8007e0e:	6028      	str	r0, [r5, #0]
 8007e10:	e7d9      	b.n	8007dc6 <xQueueGiveFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 8007e12:	2000      	movs	r0, #0
 8007e14:	e7d7      	b.n	8007dc6 <xQueueGiveFromISR+0x5a>
 8007e16:	bf00      	nop

08007e18 <xQueueSemaphoreTake>:
{
 8007e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007e20:	b150      	cbz	r0, 8007e38 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e22:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007e24:	b18d      	cbz	r5, 8007e4a <xQueueSemaphoreTake+0x32>
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	e7fe      	b.n	8007e36 <xQueueSemaphoreTake+0x1e>
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	e7fe      	b.n	8007e48 <xQueueSemaphoreTake+0x30>
 8007e4a:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e4c:	f000 ff88 	bl	8008d60 <xTaskGetSchedulerState>
 8007e50:	b950      	cbnz	r0, 8007e68 <xQueueSemaphoreTake+0x50>
 8007e52:	9d01      	ldr	r5, [sp, #4]
 8007e54:	b145      	cbz	r5, 8007e68 <xQueueSemaphoreTake+0x50>
 8007e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	e7fe      	b.n	8007e66 <xQueueSemaphoreTake+0x4e>
		taskENTER_CRITICAL();
 8007e68:	f001 f8fc 	bl	8009064 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e6e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007e70:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8007e72:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8008128 <xQueueSemaphoreTake+0x310>
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 80b3 	bne.w	8007fe2 <xQueueSemaphoreTake+0x1ca>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8129 	beq.w	80080d6 <xQueueSemaphoreTake+0x2be>
				else if( xEntryTimeSet == pdFALSE )
 8007e84:	b916      	cbnz	r6, 8007e8c <xQueueSemaphoreTake+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e86:	a802      	add	r0, sp, #8
 8007e88:	f000 ff12 	bl	8008cb0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007e8c:	f001 f90c 	bl	80090a8 <vPortExitCritical>
		vTaskSuspendAll();
 8007e90:	f000 fcd8 	bl	8008844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e94:	f001 f8e6 	bl	8009064 <vPortEnterCritical>
 8007e98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e9c:	2bff      	cmp	r3, #255	; 0xff
 8007e9e:	bf08      	it	eq
 8007ea0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8007ea4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ea8:	2bff      	cmp	r3, #255	; 0xff
 8007eaa:	bf08      	it	eq
 8007eac:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8007eb0:	f001 f8fa 	bl	80090a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eb4:	a901      	add	r1, sp, #4
 8007eb6:	a802      	add	r0, sp, #8
 8007eb8:	f000 ff06 	bl	8008cc8 <xTaskCheckForTimeOut>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d144      	bne.n	8007f4a <xQueueSemaphoreTake+0x132>
	taskENTER_CRITICAL();
 8007ec0:	f001 f8d0 	bl	8009064 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 809d 	beq.w	8008006 <xQueueSemaphoreTake+0x1ee>
	taskEXIT_CRITICAL();
 8007ecc:	f001 f8ec 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007ed0:	f001 f8c8 	bl	8009064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007ed4:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8007ed8:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	dd10      	ble.n	8007f00 <xQueueSemaphoreTake+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee0:	b173      	cbz	r3, 8007f00 <xQueueSemaphoreTake+0xe8>
 8007ee2:	f104 0924 	add.w	r9, r4, #36	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	f000 fe9c 	bl	8008c24 <xTaskRemoveFromEventList>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	f040 8087 	bne.w	8008000 <xQueueSemaphoreTake+0x1e8>
 8007ef2:	3e01      	subs	r6, #1
 8007ef4:	b2f3      	uxtb	r3, r6
 8007ef6:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ef8:	b113      	cbz	r3, 8007f00 <xQueueSemaphoreTake+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f2      	bne.n	8007ee6 <xQueueSemaphoreTake+0xce>
		pxQueue->cTxLock = queueUNLOCKED;
 8007f00:	23ff      	movs	r3, #255	; 0xff
 8007f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007f06:	f001 f8cf 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007f0a:	f001 f8ab 	bl	8009064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007f0e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8007f12:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f14:	2e00      	cmp	r6, #0
 8007f16:	dd10      	ble.n	8007f3a <xQueueSemaphoreTake+0x122>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f18:	6923      	ldr	r3, [r4, #16]
 8007f1a:	b173      	cbz	r3, 8007f3a <xQueueSemaphoreTake+0x122>
 8007f1c:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f20:	4648      	mov	r0, r9
 8007f22:	f000 fe7f 	bl	8008c24 <xTaskRemoveFromEventList>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f040 80bf 	bne.w	80080aa <xQueueSemaphoreTake+0x292>
 8007f2c:	3e01      	subs	r6, #1
 8007f2e:	b2f3      	uxtb	r3, r6
 8007f30:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f32:	b113      	cbz	r3, 8007f3a <xQueueSemaphoreTake+0x122>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1f2      	bne.n	8007f20 <xQueueSemaphoreTake+0x108>
		pxQueue->cRxLock = queueUNLOCKED;
 8007f3a:	23ff      	movs	r3, #255	; 0xff
 8007f3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007f40:	f001 f8b2 	bl	80090a8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8007f44:	f000 fd32 	bl	80089ac <xTaskResumeAll>
 8007f48:	e044      	b.n	8007fd4 <xQueueSemaphoreTake+0x1bc>
	taskENTER_CRITICAL();
 8007f4a:	f001 f88b 	bl	8009064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007f4e:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8007f52:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f54:	2e00      	cmp	r6, #0
 8007f56:	dd11      	ble.n	8007f7c <xQueueSemaphoreTake+0x164>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f5a:	b17b      	cbz	r3, 8007f7c <xQueueSemaphoreTake+0x164>
 8007f5c:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8007f60:	e001      	b.n	8007f66 <xQueueSemaphoreTake+0x14e>
 8007f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f64:	b153      	cbz	r3, 8007f7c <xQueueSemaphoreTake+0x164>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f66:	4648      	mov	r0, r9
 8007f68:	f000 fe5c 	bl	8008c24 <xTaskRemoveFromEventList>
 8007f6c:	b108      	cbz	r0, 8007f72 <xQueueSemaphoreTake+0x15a>
						vTaskMissedYield();
 8007f6e:	f000 fef1 	bl	8008d54 <vTaskMissedYield>
 8007f72:	3e01      	subs	r6, #1
 8007f74:	b2f3      	uxtb	r3, r6
 8007f76:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f2      	bne.n	8007f62 <xQueueSemaphoreTake+0x14a>
		pxQueue->cTxLock = queueUNLOCKED;
 8007f7c:	23ff      	movs	r3, #255	; 0xff
 8007f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007f82:	f001 f891 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007f86:	f001 f86d 	bl	8009064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007f8a:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8007f8e:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	dd11      	ble.n	8007fb8 <xQueueSemaphoreTake+0x1a0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	b17b      	cbz	r3, 8007fb8 <xQueueSemaphoreTake+0x1a0>
 8007f98:	f104 0910 	add.w	r9, r4, #16
 8007f9c:	e001      	b.n	8007fa2 <xQueueSemaphoreTake+0x18a>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	b153      	cbz	r3, 8007fb8 <xQueueSemaphoreTake+0x1a0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa2:	4648      	mov	r0, r9
 8007fa4:	f000 fe3e 	bl	8008c24 <xTaskRemoveFromEventList>
 8007fa8:	b108      	cbz	r0, 8007fae <xQueueSemaphoreTake+0x196>
					vTaskMissedYield();
 8007faa:	f000 fed3 	bl	8008d54 <vTaskMissedYield>
 8007fae:	3e01      	subs	r6, #1
 8007fb0:	b2f3      	uxtb	r3, r6
 8007fb2:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f2      	bne.n	8007f9e <xQueueSemaphoreTake+0x186>
		pxQueue->cRxLock = queueUNLOCKED;
 8007fb8:	23ff      	movs	r3, #255	; 0xff
 8007fba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007fbe:	f001 f873 	bl	80090a8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8007fc2:	f000 fcf3 	bl	80089ac <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007fc6:	f001 f84d 	bl	8009064 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d07b      	beq.n	80080c8 <xQueueSemaphoreTake+0x2b0>
	taskEXIT_CRITICAL();
 8007fd0:	f001 f86a 	bl	80090a8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8007fd4:	f001 f846 	bl	8009064 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007fd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fda:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f43f af4d 	beq.w	8007e7c <xQueueSemaphoreTake+0x64>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fe2:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fe8:	b912      	cbnz	r2, 8007ff0 <xQueueSemaphoreTake+0x1d8>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007fea:	f000 ffd9 	bl	8008fa0 <pvTaskIncrementMutexHeldCount>
 8007fee:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f040 8088 	bne.w	8008108 <xQueueSemaphoreTake+0x2f0>
				taskEXIT_CRITICAL();
 8007ff8:	f001 f856 	bl	80090a8 <vPortExitCritical>
				return pdPASS;
 8007ffc:	2501      	movs	r5, #1
 8007ffe:	e066      	b.n	80080ce <xQueueSemaphoreTake+0x2b6>
						vTaskMissedYield();
 8008000:	f000 fea8 	bl	8008d54 <vTaskMissedYield>
 8008004:	e775      	b.n	8007ef2 <xQueueSemaphoreTake+0xda>
	taskEXIT_CRITICAL();
 8008006:	f001 f84f 	bl	80090a8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d052      	beq.n	80080b6 <xQueueSemaphoreTake+0x29e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008010:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8008014:	4648      	mov	r0, r9
 8008016:	9901      	ldr	r1, [sp, #4]
 8008018:	f000 fdb4 	bl	8008b84 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800801c:	f001 f822 	bl	8009064 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008020:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8008024:	b276      	sxtb	r6, r6
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008026:	2e00      	cmp	r6, #0
 8008028:	dc04      	bgt.n	8008034 <xQueueSemaphoreTake+0x21c>
 800802a:	e011      	b.n	8008050 <xQueueSemaphoreTake+0x238>
 800802c:	3e01      	subs	r6, #1
 800802e:	b2f3      	uxtb	r3, r6
 8008030:	b25e      	sxtb	r6, r3
 8008032:	b16b      	cbz	r3, 8008050 <xQueueSemaphoreTake+0x238>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008036:	b15b      	cbz	r3, 8008050 <xQueueSemaphoreTake+0x238>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008038:	4648      	mov	r0, r9
 800803a:	f000 fdf3 	bl	8008c24 <xTaskRemoveFromEventList>
 800803e:	2800      	cmp	r0, #0
 8008040:	d0f4      	beq.n	800802c <xQueueSemaphoreTake+0x214>
 8008042:	3e01      	subs	r6, #1
						vTaskMissedYield();
 8008044:	f000 fe86 	bl	8008d54 <vTaskMissedYield>
 8008048:	b2f3      	uxtb	r3, r6
 800804a:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f1      	bne.n	8008034 <xQueueSemaphoreTake+0x21c>
		pxQueue->cTxLock = queueUNLOCKED;
 8008050:	23ff      	movs	r3, #255	; 0xff
 8008052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008056:	f001 f827 	bl	80090a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800805a:	f001 f803 	bl	8009064 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800805e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8008062:	b276      	sxtb	r6, r6
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008064:	2e00      	cmp	r6, #0
 8008066:	dd0e      	ble.n	8008086 <xQueueSemaphoreTake+0x26e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008068:	6923      	ldr	r3, [r4, #16]
 800806a:	b163      	cbz	r3, 8008086 <xQueueSemaphoreTake+0x26e>
 800806c:	f104 0910 	add.w	r9, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008070:	4648      	mov	r0, r9
 8008072:	f000 fdd7 	bl	8008c24 <xTaskRemoveFromEventList>
 8008076:	b9d8      	cbnz	r0, 80080b0 <xQueueSemaphoreTake+0x298>
 8008078:	3e01      	subs	r6, #1
 800807a:	b2f3      	uxtb	r3, r6
 800807c:	b25e      	sxtb	r6, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800807e:	b113      	cbz	r3, 8008086 <xQueueSemaphoreTake+0x26e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f4      	bne.n	8008070 <xQueueSemaphoreTake+0x258>
		pxQueue->cRxLock = queueUNLOCKED;
 8008086:	23ff      	movs	r3, #255	; 0xff
 8008088:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800808c:	f001 f80c 	bl	80090a8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8008090:	f000 fc8c 	bl	80089ac <xTaskResumeAll>
 8008094:	2800      	cmp	r0, #0
 8008096:	d19d      	bne.n	8007fd4 <xQueueSemaphoreTake+0x1bc>
					portYIELD_WITHIN_API();
 8008098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800809c:	f8c8 3000 	str.w	r3, [r8]
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	e794      	b.n	8007fd4 <xQueueSemaphoreTake+0x1bc>
					vTaskMissedYield();
 80080aa:	f000 fe53 	bl	8008d54 <vTaskMissedYield>
 80080ae:	e73d      	b.n	8007f2c <xQueueSemaphoreTake+0x114>
 80080b0:	f000 fe50 	bl	8008d54 <vTaskMissedYield>
 80080b4:	e7e0      	b.n	8008078 <xQueueSemaphoreTake+0x260>
						taskENTER_CRITICAL();
 80080b6:	f000 ffd5 	bl	8009064 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80080ba:	6860      	ldr	r0, [r4, #4]
 80080bc:	f000 fe60 	bl	8008d80 <xTaskPriorityInherit>
 80080c0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80080c2:	f000 fff1 	bl	80090a8 <vPortExitCritical>
 80080c6:	e7a3      	b.n	8008010 <xQueueSemaphoreTake+0x1f8>
	taskEXIT_CRITICAL();
 80080c8:	f000 ffee 	bl	80090a8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80080cc:	b96d      	cbnz	r5, 80080ea <xQueueSemaphoreTake+0x2d2>
}
 80080ce:	4628      	mov	r0, r5
 80080d0:	b005      	add	sp, #20
 80080d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080d6:	b1a5      	cbz	r5, 8008102 <xQueueSemaphoreTake+0x2ea>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	e7fe      	b.n	80080e8 <xQueueSemaphoreTake+0x2d0>
						taskENTER_CRITICAL();
 80080ea:	f000 ffbb 	bl	8009064 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80080ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080f0:	b119      	cbz	r1, 80080fa <xQueueSemaphoreTake+0x2e2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80080fa:	6860      	ldr	r0, [r4, #4]
 80080fc:	f000 fef2 	bl	8008ee4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8008100:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8008102:	f000 ffd1 	bl	80090a8 <vPortExitCritical>
 8008106:	e7e2      	b.n	80080ce <xQueueSemaphoreTake+0x2b6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008108:	f104 0010 	add.w	r0, r4, #16
 800810c:	f000 fd8a 	bl	8008c24 <xTaskRemoveFromEventList>
 8008110:	2800      	cmp	r0, #0
 8008112:	f43f af71 	beq.w	8007ff8 <xQueueSemaphoreTake+0x1e0>
						queueYIELD_IF_USING_PREEMPTION();
 8008116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811a:	4b03      	ldr	r3, [pc, #12]	; (8008128 <xQueueSemaphoreTake+0x310>)
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	e767      	b.n	8007ff8 <xQueueSemaphoreTake+0x1e0>
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <xQueueReceiveFromISR>:
{
 800812c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008130:	b1b8      	cbz	r0, 8008162 <xQueueReceiveFromISR+0x36>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008132:	2900      	cmp	r1, #0
 8008134:	d038      	beq.n	80081a8 <xQueueReceiveFromISR+0x7c>
 8008136:	4604      	mov	r4, r0
 8008138:	4690      	mov	r8, r2
 800813a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800813c:	f001 f87a 	bl	8009234 <vPortValidateInterruptPriority>
	__asm volatile
 8008140:	f3ef 8711 	mrs	r7, BASEPRI
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008154:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008156:	b96d      	cbnz	r5, 8008174 <xQueueReceiveFromISR+0x48>
			xReturn = pdFAIL;
 8008158:	4628      	mov	r0, r5
	__asm volatile
 800815a:	f387 8811 	msr	BASEPRI, r7
}
 800815e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	e7fe      	b.n	8008172 <xQueueReceiveFromISR+0x46>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008174:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008178:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800817a:	b276      	sxtb	r6, r6
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800817c:	b15a      	cbz	r2, 8008196 <xQueueReceiveFromISR+0x6a>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800817e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008180:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008182:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008184:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008186:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008188:	d302      	bcc.n	8008190 <xQueueReceiveFromISR+0x64>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	60e3      	str	r3, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008190:	4648      	mov	r0, r9
 8008192:	f001 f9ab 	bl	80094ec <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008196:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8008198:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800819a:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800819c:	d010      	beq.n	80081c0 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800819e:	1c73      	adds	r3, r6, #1
 80081a0:	b25b      	sxtb	r3, r3
 80081a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80081a6:	e00d      	b.n	80081c4 <xQueueReceiveFromISR+0x98>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081a8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0c3      	beq.n	8008136 <xQueueReceiveFromISR+0xa>
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	e7fe      	b.n	80081be <xQueueReceiveFromISR+0x92>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	b90b      	cbnz	r3, 80081c8 <xQueueReceiveFromISR+0x9c>
			xReturn = pdPASS;
 80081c4:	2001      	movs	r0, #1
 80081c6:	e7c8      	b.n	800815a <xQueueReceiveFromISR+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081c8:	f104 0010 	add.w	r0, r4, #16
 80081cc:	f000 fd2a 	bl	8008c24 <xTaskRemoveFromEventList>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d0f7      	beq.n	80081c4 <xQueueReceiveFromISR+0x98>
						if( pxHigherPriorityTaskWoken != NULL )
 80081d4:	f1b8 0f00 	cmp.w	r8, #0
 80081d8:	d0f4      	beq.n	80081c4 <xQueueReceiveFromISR+0x98>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80081da:	2001      	movs	r0, #1
 80081dc:	f8c8 0000 	str.w	r0, [r8]
 80081e0:	e7bb      	b.n	800815a <xQueueReceiveFromISR+0x2e>
 80081e2:	bf00      	nop

080081e4 <vQueueDelete>:
	configASSERT( pxQueue );
 80081e4:	b1f0      	cbz	r0, 8008224 <vQueueDelete+0x40>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081e6:	4b23      	ldr	r3, [pc, #140]	; (8008274 <vQueueDelete+0x90>)
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	4290      	cmp	r0, r2
 80081ec:	d032      	beq.n	8008254 <vQueueDelete+0x70>
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	4290      	cmp	r0, r2
 80081f2:	d03c      	beq.n	800826e <vQueueDelete+0x8a>
 80081f4:	695a      	ldr	r2, [r3, #20]
 80081f6:	4290      	cmp	r0, r2
 80081f8:	d037      	beq.n	800826a <vQueueDelete+0x86>
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	4290      	cmp	r0, r2
 80081fe:	d032      	beq.n	8008266 <vQueueDelete+0x82>
 8008200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008202:	4290      	cmp	r0, r2
 8008204:	d02d      	beq.n	8008262 <vQueueDelete+0x7e>
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4290      	cmp	r0, r2
 800820a:	d028      	beq.n	800825e <vQueueDelete+0x7a>
 800820c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820e:	4290      	cmp	r0, r2
 8008210:	d013      	beq.n	800823a <vQueueDelete+0x56>
 8008212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008214:	4290      	cmp	r0, r2
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008216:	bf08      	it	eq
 8008218:	2207      	moveq	r2, #7
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800821a:	d00f      	beq.n	800823c <vQueueDelete+0x58>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800821c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8008220:	b14b      	cbz	r3, 8008236 <vQueueDelete+0x52>
 8008222:	4770      	bx	lr
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	e7fe      	b.n	8008234 <vQueueDelete+0x50>
			vPortFree( pxQueue );
 8008236:	f001 b8e7 	b.w	8009408 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800823a:	2206      	movs	r2, #6
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800823c:	2100      	movs	r1, #0
{
 800823e:	b410      	push	{r4}

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008240:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008244:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008248:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800824c:	6061      	str	r1, [r4, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800824e:	b11b      	cbz	r3, 8008258 <vQueueDelete+0x74>
}
 8008250:	bc10      	pop	{r4}
 8008252:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008254:	2200      	movs	r2, #0
 8008256:	e7f1      	b.n	800823c <vQueueDelete+0x58>
}
 8008258:	bc10      	pop	{r4}
			vPortFree( pxQueue );
 800825a:	f001 b8d5 	b.w	8009408 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800825e:	2205      	movs	r2, #5
 8008260:	e7ec      	b.n	800823c <vQueueDelete+0x58>
 8008262:	2204      	movs	r2, #4
 8008264:	e7ea      	b.n	800823c <vQueueDelete+0x58>
 8008266:	2203      	movs	r2, #3
 8008268:	e7e8      	b.n	800823c <vQueueDelete+0x58>
 800826a:	2202      	movs	r2, #2
 800826c:	e7e6      	b.n	800823c <vQueueDelete+0x58>
 800826e:	2201      	movs	r2, #1
 8008270:	e7e4      	b.n	800823c <vQueueDelete+0x58>
 8008272:	bf00      	nop
 8008274:	20004b6c 	.word	0x20004b6c

08008278 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800827e:	f000 fef1 	bl	8009064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008282:	4a33      	ldr	r2, [pc, #204]	; (8008350 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 8008284:	4d33      	ldr	r5, [pc, #204]	; (8008354 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 8008286:	6813      	ldr	r3, [r2, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d031      	beq.n	80082f6 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008292:	4e31      	ldr	r6, [pc, #196]	; (8008358 <prvAddNewTaskToReadyList+0xe0>)
 8008294:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008296:	6833      	ldr	r3, [r6, #0]
 8008298:	b32b      	cbz	r3, 80082e6 <prvAddNewTaskToReadyList+0x6e>
 800829a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008384 <prvAddNewTaskToReadyList+0x10c>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800829e:	2301      	movs	r3, #1
 80082a0:	492e      	ldr	r1, [pc, #184]	; (800835c <prvAddNewTaskToReadyList+0xe4>)
		uxTaskNumber++;
 80082a2:	4f2f      	ldr	r7, [pc, #188]	; (8008360 <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
 80082a4:	680a      	ldr	r2, [r1, #0]
 80082a6:	4083      	lsls	r3, r0
 80082a8:	4313      	orrs	r3, r2
		uxTaskNumber++;
 80082aa:	683a      	ldr	r2, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80082ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80082b0:	600b      	str	r3, [r1, #0]
		uxTaskNumber++;
 80082b2:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
 80082b4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80082b8:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 80082ba:	603a      	str	r2, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80082bc:	f7ff fa60 	bl	8007780 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082c0:	f000 fef2 	bl	80090a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082c4:	6833      	ldr	r3, [r6, #0]
 80082c6:	b163      	cbz	r3, 80082e2 <prvAddNewTaskToReadyList+0x6a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082c8:	682a      	ldr	r2, [r5, #0]
 80082ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d207      	bcs.n	80082e2 <prvAddNewTaskToReadyList+0x6a>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	4b23      	ldr	r3, [pc, #140]	; (8008364 <prvAddNewTaskToReadyList+0xec>)
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008384 <prvAddNewTaskToReadyList+0x10c>
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 80082f0:	bf98      	it	ls
 80082f2:	602c      	strls	r4, [r5, #0]
 80082f4:	e7d3      	b.n	800829e <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 80082f6:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082f8:	6813      	ldr	r3, [r2, #0]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d004      	beq.n	8008308 <prvAddNewTaskToReadyList+0x90>
 80082fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008300:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008384 <prvAddNewTaskToReadyList+0x10c>
 8008304:	4e14      	ldr	r6, [pc, #80]	; (8008358 <prvAddNewTaskToReadyList+0xe0>)
 8008306:	e7ca      	b.n	800829e <prvAddNewTaskToReadyList+0x26>
 8008308:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008384 <prvAddNewTaskToReadyList+0x10c>
 800830c:	4646      	mov	r6, r8
 800830e:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008312:	4630      	mov	r0, r6
 8008314:	3614      	adds	r6, #20
 8008316:	f7ff fa23 	bl	8007760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800831a:	42b7      	cmp	r7, r6
 800831c:	d1f9      	bne.n	8008312 <prvAddNewTaskToReadyList+0x9a>
	}

	vListInitialise( &xDelayedTaskList1 );
 800831e:	4f12      	ldr	r7, [pc, #72]	; (8008368 <prvAddNewTaskToReadyList+0xf0>)
	vListInitialise( &xDelayedTaskList2 );
 8008320:	4e12      	ldr	r6, [pc, #72]	; (800836c <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8008322:	4638      	mov	r0, r7
 8008324:	f7ff fa1c 	bl	8007760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008328:	4630      	mov	r0, r6
 800832a:	f7ff fa19 	bl	8007760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800832e:	4810      	ldr	r0, [pc, #64]	; (8008370 <prvAddNewTaskToReadyList+0xf8>)
 8008330:	f7ff fa16 	bl	8007760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008334:	480f      	ldr	r0, [pc, #60]	; (8008374 <prvAddNewTaskToReadyList+0xfc>)
 8008336:	f7ff fa13 	bl	8007760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800833a:	480f      	ldr	r0, [pc, #60]	; (8008378 <prvAddNewTaskToReadyList+0x100>)
 800833c:	f7ff fa10 	bl	8007760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008340:	4a0e      	ldr	r2, [pc, #56]	; (800837c <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008342:	4b0f      	ldr	r3, [pc, #60]	; (8008380 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8008344:	6017      	str	r7, [r2, #0]
 8008346:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008348:	601e      	str	r6, [r3, #0]
 800834a:	4e03      	ldr	r6, [pc, #12]	; (8008358 <prvAddNewTaskToReadyList+0xe0>)
 800834c:	e7a7      	b.n	800829e <prvAddNewTaskToReadyList+0x26>
 800834e:	bf00      	nop
 8008350:	200003fc 	.word	0x200003fc
 8008354:	20000364 	.word	0x20000364
 8008358:	20000458 	.word	0x20000458
 800835c:	20000410 	.word	0x20000410
 8008360:	2000040c 	.word	0x2000040c
 8008364:	e000ed04 	.word	0xe000ed04
 8008368:	20000414 	.word	0x20000414
 800836c:	20000428 	.word	0x20000428
 8008370:	20000444 	.word	0x20000444
 8008374:	20000470 	.word	0x20000470
 8008378:	2000045c 	.word	0x2000045c
 800837c:	20000368 	.word	0x20000368
 8008380:	2000036c 	.word	0x2000036c
 8008384:	20000370 	.word	0x20000370

08008388 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800838e:	780e      	ldrb	r6, [r1, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008390:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008394:	6b25      	ldr	r5, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008396:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800839a:	3a01      	subs	r2, #1
		if( pcName[ x ] == 0x00 )
 800839c:	780e      	ldrb	r6, [r1, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800839e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80083a2:	f025 0707 	bic.w	r7, r5, #7
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80083a6:	4681      	mov	r9, r0
 80083a8:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
 80083ac:	469a      	mov	sl, r3
		if( pcName[ x ] == 0x00 )
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	d04d      	beq.n	800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083b2:	784b      	ldrb	r3, [r1, #1]
 80083b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 80083b8:	784b      	ldrb	r3, [r1, #1]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d047      	beq.n	800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083be:	788b      	ldrb	r3, [r1, #2]
 80083c0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 80083c4:	788b      	ldrb	r3, [r1, #2]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d041      	beq.n	800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ca:	78cb      	ldrb	r3, [r1, #3]
 80083cc:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 80083d0:	78cb      	ldrb	r3, [r1, #3]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d03b      	beq.n	800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083d6:	790b      	ldrb	r3, [r1, #4]
 80083d8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80083dc:	790b      	ldrb	r3, [r1, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d035      	beq.n	800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083e2:	794b      	ldrb	r3, [r1, #5]
 80083e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80083e8:	794b      	ldrb	r3, [r1, #5]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02f      	beq.n	800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ee:	798b      	ldrb	r3, [r1, #6]
 80083f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80083f4:	798b      	ldrb	r3, [r1, #6]
 80083f6:	b353      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083f8:	79cb      	ldrb	r3, [r1, #7]
 80083fa:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80083fe:	79cb      	ldrb	r3, [r1, #7]
 8008400:	b32b      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008402:	7a0b      	ldrb	r3, [r1, #8]
 8008404:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 8008408:	7a0b      	ldrb	r3, [r1, #8]
 800840a:	b303      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800840c:	7a4b      	ldrb	r3, [r1, #9]
 800840e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 8008412:	7a4b      	ldrb	r3, [r1, #9]
 8008414:	b1db      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008416:	7a8b      	ldrb	r3, [r1, #10]
 8008418:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800841c:	7a8b      	ldrb	r3, [r1, #10]
 800841e:	b1b3      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008420:	7acb      	ldrb	r3, [r1, #11]
 8008422:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 8008426:	7acb      	ldrb	r3, [r1, #11]
 8008428:	b18b      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800842a:	7b0b      	ldrb	r3, [r1, #12]
 800842c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 8008430:	7b0b      	ldrb	r3, [r1, #12]
 8008432:	b163      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008434:	7b4b      	ldrb	r3, [r1, #13]
 8008436:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800843a:	7b4b      	ldrb	r3, [r1, #13]
 800843c:	b13b      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800843e:	7b8b      	ldrb	r3, [r1, #14]
 8008440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8008444:	7b8b      	ldrb	r3, [r1, #14]
 8008446:	b113      	cbz	r3, 800844e <prvInitialiseNewTask.isra.2+0xc6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008448:	7bcb      	ldrb	r3, [r1, #15]
 800844a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844e:	2d06      	cmp	r5, #6
 8008450:	bf28      	it	cs
 8008452:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008454:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
 8008456:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008458:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800845a:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800845c:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8008460:	64a6      	str	r6, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008462:	f7ff f989 	bl	8007778 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008466:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800846a:	f104 0018 	add.w	r0, r4, #24
 800846e:	f7ff f983 	bl	8007778 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008472:	64e6      	str	r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008474:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008476:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008478:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800847c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800847e:	4652      	mov	r2, sl
 8008480:	4649      	mov	r1, r9
 8008482:	4638      	mov	r0, r7
 8008484:	f000 fdc8 	bl	8009018 <pxPortInitialiseStack>
 8008488:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800848a:	f1b8 0f00 	cmp.w	r8, #0
 800848e:	d001      	beq.n	8008494 <prvInitialiseNewTask.isra.2+0x10c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008490:	f8c8 4000 	str.w	r4, [r8]
}
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008498 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800849c:	4e1b      	ldr	r6, [pc, #108]	; (800850c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800849e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a0:	6833      	ldr	r3, [r6, #0]
{
 80084a2:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a4:	1d18      	adds	r0, r3, #4
{
 80084a6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084a8:	f7ff f992 	bl	80077d0 <uxListRemove>
 80084ac:	b940      	cbnz	r0, 80084c0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084ae:	2201      	movs	r2, #1
 80084b0:	6833      	ldr	r3, [r6, #0]
 80084b2:	4917      	ldr	r1, [pc, #92]	; (8008510 <prvAddCurrentTaskToDelayedList+0x78>)
 80084b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80084b6:	680b      	ldr	r3, [r1, #0]
 80084b8:	4082      	lsls	r2, r0
 80084ba:	ea23 0302 	bic.w	r3, r3, r2
 80084be:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c0:	1c6b      	adds	r3, r5, #1
 80084c2:	d017      	beq.n	80084f4 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084c4:	6833      	ldr	r3, [r6, #0]
 80084c6:	1964      	adds	r4, r4, r5
 80084c8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80084ca:	d20b      	bcs.n	80084e4 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <prvAddCurrentTaskToDelayedList+0x7c>)
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	6831      	ldr	r1, [r6, #0]
 80084d2:	3104      	adds	r1, #4
 80084d4:	f7ff f962 	bl	800779c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80084d8:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <prvAddCurrentTaskToDelayedList+0x80>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 80084de:	bf88      	it	hi
 80084e0:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084e4:	4b0d      	ldr	r3, [pc, #52]	; (800851c <prvAddCurrentTaskToDelayedList+0x84>)
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	6831      	ldr	r1, [r6, #0]
}
 80084ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084ee:	3104      	adds	r1, #4
 80084f0:	f7ff b954 	b.w	800779c <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	d0e5      	beq.n	80084c4 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f8:	6831      	ldr	r1, [r6, #0]
 80084fa:	4809      	ldr	r0, [pc, #36]	; (8008520 <prvAddCurrentTaskToDelayedList+0x88>)
 80084fc:	3104      	adds	r1, #4
}
 80084fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008502:	f7ff b93d 	b.w	8007780 <vListInsertEnd>
 8008506:	bf00      	nop
 8008508:	20000484 	.word	0x20000484
 800850c:	20000364 	.word	0x20000364
 8008510:	20000410 	.word	0x20000410
 8008514:	20000368 	.word	0x20000368
 8008518:	2000043c 	.word	0x2000043c
 800851c:	2000036c 	.word	0x2000036c
 8008520:	2000045c 	.word	0x2000045c

08008524 <prvIdleTask>:
{
 8008524:	b580      	push	{r7, lr}
				taskYIELD();
 8008526:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 800852a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80085b8 <prvIdleTask+0x94>
 800852e:	4e20      	ldr	r6, [pc, #128]	; (80085b0 <prvIdleTask+0x8c>)
 8008530:	4d20      	ldr	r5, [pc, #128]	; (80085b4 <prvIdleTask+0x90>)
 8008532:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80085bc <prvIdleTask+0x98>
 8008536:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80085c0 <prvIdleTask+0x9c>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	b343      	cbz	r3, 8008590 <prvIdleTask+0x6c>
			taskENTER_CRITICAL();
 800853e:	f000 fd91 	bl	8009064 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008542:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008546:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008548:	1d20      	adds	r0, r4, #4
 800854a:	f7ff f941 	bl	80077d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800854e:	6833      	ldr	r3, [r6, #0]
 8008550:	3b01      	subs	r3, #1
 8008552:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	3b01      	subs	r3, #1
 8008558:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800855a:	f000 fda5 	bl	80090a8 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800855e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8008562:	b163      	cbz	r3, 800857e <prvIdleTask+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008564:	2b01      	cmp	r3, #1
 8008566:	d01e      	beq.n	80085a6 <prvIdleTask+0x82>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008568:	2b02      	cmp	r3, #2
 800856a:	d0e6      	beq.n	800853a <prvIdleTask+0x16>
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	e7fe      	b.n	800857c <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 800857e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008580:	f000 ff42 	bl	8009408 <vPortFree>
				vPortFree( pxTCB );
 8008584:	4620      	mov	r0, r4
 8008586:	f000 ff3f 	bl	8009408 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1d6      	bne.n	800853e <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008590:	f8d9 3000 	ldr.w	r3, [r9]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d9d0      	bls.n	800853a <prvIdleTask+0x16>
				taskYIELD();
 8008598:	f8c8 7000 	str.w	r7, [r8]
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	e7c9      	b.n	800853a <prvIdleTask+0x16>
				vPortFree( pxTCB );
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 ff2e 	bl	8009408 <vPortFree>
 80085ac:	e7c5      	b.n	800853a <prvIdleTask+0x16>
 80085ae:	bf00      	nop
 80085b0:	200003fc 	.word	0x200003fc
 80085b4:	20000400 	.word	0x20000400
 80085b8:	20000470 	.word	0x20000470
 80085bc:	20000370 	.word	0x20000370
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <xTaskCreateStatic>:
	{
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c6:	b087      	sub	sp, #28
 80085c8:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80085cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 80085ce:	b1bd      	cbz	r5, 8008600 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 80085d0:	b16c      	cbz	r4, 80085ee <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80085d2:	2754      	movs	r7, #84	; 0x54
 80085d4:	9704      	str	r7, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085d6:	9f04      	ldr	r7, [sp, #16]
 80085d8:	2f54      	cmp	r7, #84	; 0x54
 80085da:	d01a      	beq.n	8008612 <xTaskCreateStatic+0x4e>
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	e7fe      	b.n	80085ec <xTaskCreateStatic+0x28>
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	e7fe      	b.n	80085fe <xTaskCreateStatic+0x3a>
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	e7fe      	b.n	8008610 <xTaskCreateStatic+0x4c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008612:	2702      	movs	r7, #2
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008614:	6325      	str	r5, [r4, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008616:	ad05      	add	r5, sp, #20
 8008618:	9402      	str	r4, [sp, #8]
 800861a:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800861c:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008620:	9501      	str	r5, [sp, #4]
 8008622:	f7ff feb1 	bl	8008388 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff fe26 	bl	8008278 <prvAddNewTaskToReadyList>
	}
 800862c:	9805      	ldr	r0, [sp, #20]
 800862e:	b007      	add	sp, #28
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	bf00      	nop

08008634 <xTaskCreate>:
	{
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008638:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800863c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863e:	4650      	mov	r0, sl
	{
 8008640:	460d      	mov	r5, r1
 8008642:	4699      	mov	r9, r3
 8008644:	9f09      	ldr	r7, [sp, #36]	; 0x24
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008646:	f000 fe4b 	bl	80092e0 <pvPortMalloc>
			if( pxStack != NULL )
 800864a:	2800      	cmp	r0, #0
 800864c:	f000 8096 	beq.w	800877c <xTaskCreate+0x148>
 8008650:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008652:	2054      	movs	r0, #84	; 0x54
 8008654:	f000 fe44 	bl	80092e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008658:	4604      	mov	r4, r0
 800865a:	2800      	cmp	r0, #0
 800865c:	f000 8087 	beq.w	800876e <xTaskCreate+0x13a>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008660:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008662:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008664:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008668:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800866a:	f1aa 0a04 	sub.w	sl, sl, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800866e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8008672:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008674:	4456      	add	r6, sl
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008676:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 800867a:	2b00      	cmp	r3, #0
 800867c:	d04d      	beq.n	800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800867e:	786b      	ldrb	r3, [r5, #1]
 8008680:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 8008684:	786b      	ldrb	r3, [r5, #1]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d047      	beq.n	800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800868a:	78ab      	ldrb	r3, [r5, #2]
 800868c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 8008690:	78ab      	ldrb	r3, [r5, #2]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d041      	beq.n	800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008696:	78eb      	ldrb	r3, [r5, #3]
 8008698:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800869c:	78eb      	ldrb	r3, [r5, #3]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d03b      	beq.n	800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086a2:	792b      	ldrb	r3, [r5, #4]
 80086a4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 80086a8:	792b      	ldrb	r3, [r5, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d035      	beq.n	800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086ae:	796b      	ldrb	r3, [r5, #5]
 80086b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 80086b4:	796b      	ldrb	r3, [r5, #5]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d02f      	beq.n	800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086ba:	79ab      	ldrb	r3, [r5, #6]
 80086bc:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 80086c0:	79ab      	ldrb	r3, [r5, #6]
 80086c2:	b353      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086c4:	79eb      	ldrb	r3, [r5, #7]
 80086c6:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 80086ca:	79eb      	ldrb	r3, [r5, #7]
 80086cc:	b32b      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086ce:	7a2b      	ldrb	r3, [r5, #8]
 80086d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 80086d4:	7a2b      	ldrb	r3, [r5, #8]
 80086d6:	b303      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086d8:	7a6b      	ldrb	r3, [r5, #9]
 80086da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 80086de:	7a6b      	ldrb	r3, [r5, #9]
 80086e0:	b1db      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086e2:	7aab      	ldrb	r3, [r5, #10]
 80086e4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 80086e8:	7aab      	ldrb	r3, [r5, #10]
 80086ea:	b1b3      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086ec:	7aeb      	ldrb	r3, [r5, #11]
 80086ee:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 80086f2:	7aeb      	ldrb	r3, [r5, #11]
 80086f4:	b18b      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086f6:	7b2b      	ldrb	r3, [r5, #12]
 80086f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 80086fc:	7b2b      	ldrb	r3, [r5, #12]
 80086fe:	b163      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008700:	7b6b      	ldrb	r3, [r5, #13]
 8008702:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 8008706:	7b6b      	ldrb	r3, [r5, #13]
 8008708:	b13b      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800870a:	7bab      	ldrb	r3, [r5, #14]
 800870c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 8008710:	7bab      	ldrb	r3, [r5, #14]
 8008712:	b113      	cbz	r3, 800871a <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008714:	7beb      	ldrb	r3, [r5, #15]
 8008716:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800871a:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800871c:	f04f 0a00 	mov.w	sl, #0
 8008720:	2d06      	cmp	r5, #6
 8008722:	bf28      	it	cs
 8008724:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008726:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8008728:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800872a:	6465      	str	r5, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800872c:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8008730:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008734:	f7ff f820 	bl	8007778 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008738:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800873c:	f104 0018 	add.w	r0, r4, #24
 8008740:	f7ff f81a 	bl	8007778 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008744:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008748:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800874a:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800874c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008750:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008752:	464a      	mov	r2, r9
 8008754:	4641      	mov	r1, r8
 8008756:	4630      	mov	r0, r6
 8008758:	f000 fc5e 	bl	8009018 <pxPortInitialiseStack>
 800875c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800875e:	b107      	cbz	r7, 8008762 <xTaskCreate+0x12e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008760:	603c      	str	r4, [r7, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8008762:	4620      	mov	r0, r4
 8008764:	f7ff fd88 	bl	8008278 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008768:	2001      	movs	r0, #1
	}
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 800876e:	4630      	mov	r0, r6
 8008770:	f000 fe4a 	bl	8009408 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008780:	e7f3      	b.n	800876a <xTaskCreate+0x136>
 8008782:	bf00      	nop

08008784 <vTaskStartScheduler>:
{
 8008784:	b530      	push	{r4, r5, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008786:	2400      	movs	r4, #0
{
 8008788:	b08b      	sub	sp, #44	; 0x2c
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800878a:	aa07      	add	r2, sp, #28
 800878c:	a906      	add	r1, sp, #24
 800878e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008790:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008794:	f7f7 fe9e 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008798:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 800879c:	b1c3      	cbz	r3, 80087d0 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800879e:	b175      	cbz	r5, 80087be <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80087a0:	2254      	movs	r2, #84	; 0x54
 80087a2:	9208      	str	r2, [sp, #32]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087a4:	9908      	ldr	r1, [sp, #32]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087a6:	9a07      	ldr	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087a8:	2954      	cmp	r1, #84	; 0x54
 80087aa:	d01a      	beq.n	80087e2 <vTaskStartScheduler+0x5e>
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	e7fe      	b.n	80087bc <vTaskStartScheduler+0x38>
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	e7fe      	b.n	80087ce <vTaskStartScheduler+0x4a>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	e7fe      	b.n	80087e0 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087e2:	2002      	movs	r0, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087e4:	a909      	add	r1, sp, #36	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087e6:	632b      	str	r3, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087e8:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087ec:	4623      	mov	r3, r4
 80087ee:	e9cd 4100 	strd	r4, r1, [sp]
 80087f2:	480f      	ldr	r0, [pc, #60]	; (8008830 <vTaskStartScheduler+0xac>)
 80087f4:	490f      	ldr	r1, [pc, #60]	; (8008834 <vTaskStartScheduler+0xb0>)
 80087f6:	9502      	str	r5, [sp, #8]
 80087f8:	f7ff fdc6 	bl	8008388 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087fc:	4628      	mov	r0, r5
 80087fe:	f7ff fd3b 	bl	8008278 <prvAddNewTaskToReadyList>
		return xReturn;
 8008802:	9b09      	ldr	r3, [sp, #36]	; 0x24
		if( xIdleTaskHandle != NULL )
 8008804:	b193      	cbz	r3, 800882c <vTaskStartScheduler+0xa8>
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008816:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 800881a:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 800881c:	4806      	ldr	r0, [pc, #24]	; (8008838 <vTaskStartScheduler+0xb4>)
		xSchedulerRunning = pdTRUE;
 800881e:	4a07      	ldr	r2, [pc, #28]	; (800883c <vTaskStartScheduler+0xb8>)
		xTickCount = ( TickType_t ) 0U;
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <vTaskStartScheduler+0xbc>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8008822:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8008824:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8008826:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008828:	f000 fca8 	bl	800917c <xPortStartScheduler>
}
 800882c:	b00b      	add	sp, #44	; 0x2c
 800882e:	bd30      	pop	{r4, r5, pc}
 8008830:	08008525 	.word	0x08008525
 8008834:	0802afbc 	.word	0x0802afbc
 8008838:	2000043c 	.word	0x2000043c
 800883c:	20000458 	.word	0x20000458
 8008840:	20000484 	.word	0x20000484

08008844 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008844:	4a02      	ldr	r2, [pc, #8]	; (8008850 <vTaskSuspendAll+0xc>)
 8008846:	6813      	ldr	r3, [r2, #0]
 8008848:	3301      	adds	r3, #1
 800884a:	6013      	str	r3, [r2, #0]
}
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20000408 	.word	0x20000408

08008854 <xTaskIncrementTick>:
{
 8008854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008858:	4b49      	ldr	r3, [pc, #292]	; (8008980 <xTaskIncrementTick+0x12c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	b9cb      	cbnz	r3, 8008892 <xTaskIncrementTick+0x3e>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800885e:	4b49      	ldr	r3, [pc, #292]	; (8008984 <xTaskIncrementTick+0x130>)
 8008860:	681e      	ldr	r6, [r3, #0]
 8008862:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8008864:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008866:	b30e      	cbz	r6, 80088ac <xTaskIncrementTick+0x58>
 8008868:	f8df b138 	ldr.w	fp, [pc, #312]	; 80089a4 <xTaskIncrementTick+0x150>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800886c:	f8db 2000 	ldr.w	r2, [fp]
BaseType_t xSwitchRequired = pdFALSE;
 8008870:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008872:	42b2      	cmp	r2, r6
 8008874:	d928      	bls.n	80088c8 <xTaskIncrementTick+0x74>
 8008876:	4f44      	ldr	r7, [pc, #272]	; (8008988 <xTaskIncrementTick+0x134>)
 8008878:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80089a8 <xTaskIncrementTick+0x154>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800887c:	f8d8 3000 	ldr.w	r3, [r8]
 8008880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008882:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800888a:	2b02      	cmp	r3, #2
 800888c:	bf28      	it	cs
 800888e:	2501      	movcs	r5, #1
 8008890:	e004      	b.n	800889c <xTaskIncrementTick+0x48>
BaseType_t xSwitchRequired = pdFALSE;
 8008892:	2500      	movs	r5, #0
		++uxPendedTicks;
 8008894:	4a3d      	ldr	r2, [pc, #244]	; (800898c <xTaskIncrementTick+0x138>)
 8008896:	6813      	ldr	r3, [r2, #0]
 8008898:	3301      	adds	r3, #1
 800889a:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 800889c:	4b3c      	ldr	r3, [pc, #240]	; (8008990 <xTaskIncrementTick+0x13c>)
 800889e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80088a0:	2b00      	cmp	r3, #0
}
 80088a2:	bf0c      	ite	eq
 80088a4:	4628      	moveq	r0, r5
 80088a6:	2001      	movne	r0, #1
 80088a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80088ac:	4c39      	ldr	r4, [pc, #228]	; (8008994 <xTaskIncrementTick+0x140>)
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d047      	beq.n	8008946 <xTaskIncrementTick+0xf2>
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	e7fe      	b.n	80088c6 <xTaskIncrementTick+0x72>
 80088c8:	4c32      	ldr	r4, [pc, #200]	; (8008994 <xTaskIncrementTick+0x140>)
 80088ca:	4f2f      	ldr	r7, [pc, #188]	; (8008988 <xTaskIncrementTick+0x134>)
 80088cc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80089a8 <xTaskIncrementTick+0x154>
 80088d0:	e02d      	b.n	800892e <xTaskIncrementTick+0xda>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	68d2      	ldr	r2, [r2, #12]
 80088d6:	f8d2 900c 	ldr.w	r9, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088da:	f8d9 1004 	ldr.w	r1, [r9, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088de:	f109 0a04 	add.w	sl, r9, #4
					if( xConstTickCount < xItemValue )
 80088e2:	428e      	cmp	r6, r1
 80088e4:	d32c      	bcc.n	8008940 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e6:	4650      	mov	r0, sl
 80088e8:	f7fe ff72 	bl	80077d0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088ec:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088f0:	f109 0018 	add.w	r0, r9, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088f4:	b109      	cbz	r1, 80088fa <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088f6:	f7fe ff6b 	bl	80077d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088fa:	2101      	movs	r1, #1
 80088fc:	4a26      	ldr	r2, [pc, #152]	; (8008998 <xTaskIncrementTick+0x144>)
 80088fe:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
 8008902:	6813      	ldr	r3, [r2, #0]
 8008904:	fa01 fc00 	lsl.w	ip, r1, r0
 8008908:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800890c:	4651      	mov	r1, sl
 800890e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8008912:	ea4c 0c03 	orr.w	ip, ip, r3
 8008916:	f8c2 c000 	str.w	ip, [r2]
 800891a:	f7fe ff31 	bl	8007780 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800891e:	f8d8 0000 	ldr.w	r0, [r8]
 8008922:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 8008926:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008928:	4291      	cmp	r1, r2
 800892a:	bf28      	it	cs
 800892c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892e:	6822      	ldr	r2, [r4, #0]
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	2a00      	cmp	r2, #0
 8008934:	d1cd      	bne.n	80088d2 <xTaskIncrementTick+0x7e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008936:	f04f 32ff 	mov.w	r2, #4294967295
 800893a:	f8cb 2000 	str.w	r2, [fp]
					break;
 800893e:	e79d      	b.n	800887c <xTaskIncrementTick+0x28>
						xNextTaskUnblockTime = xItemValue;
 8008940:	f8cb 1000 	str.w	r1, [fp]
						break;
 8008944:	e79a      	b.n	800887c <xTaskIncrementTick+0x28>
			taskSWITCH_DELAYED_LISTS();
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <xTaskIncrementTick+0x148>)
 8008948:	6821      	ldr	r1, [r4, #0]
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <xTaskIncrementTick+0x14c>)
 800894e:	6020      	str	r0, [r4, #0]
 8008950:	6019      	str	r1, [r3, #0]
 8008952:	6813      	ldr	r3, [r2, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	b933      	cbnz	r3, 800896c <xTaskIncrementTick+0x118>
		xNextTaskUnblockTime = portMAX_DELAY;
 800895e:	f04f 32ff 	mov.w	r2, #4294967295
 8008962:	f8df b040 	ldr.w	fp, [pc, #64]	; 80089a4 <xTaskIncrementTick+0x150>
 8008966:	f8cb 2000 	str.w	r2, [fp]
 800896a:	e77f      	b.n	800886c <xTaskIncrementTick+0x18>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800896c:	6822      	ldr	r2, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800896e:	f8df b034 	ldr.w	fp, [pc, #52]	; 80089a4 <xTaskIncrementTick+0x150>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008972:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008974:	68d2      	ldr	r2, [r2, #12]
 8008976:	6852      	ldr	r2, [r2, #4]
 8008978:	f8cb 2000 	str.w	r2, [fp]
 800897c:	e776      	b.n	800886c <xTaskIncrementTick+0x18>
 800897e:	bf00      	nop
 8008980:	20000408 	.word	0x20000408
 8008984:	20000484 	.word	0x20000484
 8008988:	20000370 	.word	0x20000370
 800898c:	20000404 	.word	0x20000404
 8008990:	20000488 	.word	0x20000488
 8008994:	20000368 	.word	0x20000368
 8008998:	20000410 	.word	0x20000410
 800899c:	2000036c 	.word	0x2000036c
 80089a0:	20000440 	.word	0x20000440
 80089a4:	2000043c 	.word	0x2000043c
 80089a8:	20000364 	.word	0x20000364

080089ac <xTaskResumeAll>:
{
 80089ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 80089b0:	4c38      	ldr	r4, [pc, #224]	; (8008a94 <xTaskResumeAll+0xe8>)
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	b943      	cbnz	r3, 80089c8 <xTaskResumeAll+0x1c>
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	e7fe      	b.n	80089c6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80089c8:	f000 fb4c 	bl	8009064 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d2:	6824      	ldr	r4, [r4, #0]
 80089d4:	bb7c      	cbnz	r4, 8008a36 <xTaskResumeAll+0x8a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089d6:	4b30      	ldr	r3, [pc, #192]	; (8008a98 <xTaskResumeAll+0xec>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	b363      	cbz	r3, 8008a36 <xTaskResumeAll+0x8a>
 80089dc:	4d2f      	ldr	r5, [pc, #188]	; (8008a9c <xTaskResumeAll+0xf0>)
 80089de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ab4 <xTaskResumeAll+0x108>
					prvAddTaskToReadyList( pxTCB );
 80089e2:	4e2f      	ldr	r6, [pc, #188]	; (8008aa0 <xTaskResumeAll+0xf4>)
 80089e4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8008ab8 <xTaskResumeAll+0x10c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8008abc <xTaskResumeAll+0x110>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ec:	f8da 3000 	ldr.w	r3, [sl]
 80089f0:	b33b      	cbz	r3, 8008a42 <xTaskResumeAll+0x96>
					prvAddTaskToReadyList( pxTCB );
 80089f2:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80089f4:	f8da 300c 	ldr.w	r3, [sl, #12]
 80089f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089fa:	f104 0804 	add.w	r8, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089fe:	f104 0018 	add.w	r0, r4, #24
 8008a02:	f7fe fee5 	bl	80077d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a06:	4640      	mov	r0, r8
 8008a08:	f7fe fee2 	bl	80077d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008a0e:	6832      	ldr	r2, [r6, #0]
 8008a10:	fa07 f300 	lsl.w	r3, r7, r0
 8008a14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	4641      	mov	r1, r8
 8008a1c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	f7fe fead 	bl	8007780 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a26:	f8db 3000 	ldr.w	r3, [fp]
 8008a2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d3dc      	bcc.n	80089ec <xTaskResumeAll+0x40>
						xYieldPending = pdTRUE;
 8008a32:	602f      	str	r7, [r5, #0]
 8008a34:	e7da      	b.n	80089ec <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8008a36:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a38:	f000 fb36 	bl	80090a8 <vPortExitCritical>
}
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxTCB != NULL )
 8008a42:	b13c      	cbz	r4, 8008a54 <xTaskResumeAll+0xa8>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a44:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <xTaskResumeAll+0xf8>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	6812      	ldr	r2, [r2, #0]
 8008a4a:	b9da      	cbnz	r2, 8008a84 <xTaskResumeAll+0xd8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	4b15      	ldr	r3, [pc, #84]	; (8008aa8 <xTaskResumeAll+0xfc>)
 8008a52:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a54:	4e15      	ldr	r6, [pc, #84]	; (8008aac <xTaskResumeAll+0x100>)
 8008a56:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a58:	b13c      	cbz	r4, 8008a6a <xTaskResumeAll+0xbe>
								xYieldPending = pdTRUE;
 8008a5a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008a5c:	f7ff fefa 	bl	8008854 <xTaskIncrementTick>
 8008a60:	b100      	cbz	r0, 8008a64 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 8008a62:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a64:	3c01      	subs	r4, #1
 8008a66:	d1f9      	bne.n	8008a5c <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8008a68:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8008a6a:	682b      	ldr	r3, [r5, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0e2      	beq.n	8008a36 <xTaskResumeAll+0x8a>
					taskYIELD_IF_USING_PREEMPTION();
 8008a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <xTaskResumeAll+0x104>)
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008a80:	2401      	movs	r4, #1
 8008a82:	e7d9      	b.n	8008a38 <xTaskResumeAll+0x8c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a84:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a86:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <xTaskResumeAll+0xfc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a88:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a8a:	68d2      	ldr	r2, [r2, #12]
 8008a8c:	6852      	ldr	r2, [r2, #4]
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	e7e0      	b.n	8008a54 <xTaskResumeAll+0xa8>
 8008a92:	bf00      	nop
 8008a94:	20000408 	.word	0x20000408
 8008a98:	200003fc 	.word	0x200003fc
 8008a9c:	20000488 	.word	0x20000488
 8008aa0:	20000410 	.word	0x20000410
 8008aa4:	20000368 	.word	0x20000368
 8008aa8:	2000043c 	.word	0x2000043c
 8008aac:	20000404 	.word	0x20000404
 8008ab0:	e000ed04 	.word	0xe000ed04
 8008ab4:	20000444 	.word	0x20000444
 8008ab8:	20000370 	.word	0x20000370
 8008abc:	20000364 	.word	0x20000364

08008ac0 <vTaskDelay>:
	{
 8008ac0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ac2:	b198      	cbz	r0, 8008aec <vTaskDelay+0x2c>
			configASSERT( uxSchedulerSuspended == 0 );
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <vTaskDelay+0x40>)
 8008ac6:	6819      	ldr	r1, [r3, #0]
 8008ac8:	b141      	cbz	r1, 8008adc <vTaskDelay+0x1c>
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	e7fe      	b.n	8008ada <vTaskDelay+0x1a>
	++uxSchedulerSuspended;
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	3201      	adds	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ae2:	f7ff fcd9 	bl	8008498 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008ae6:	f7ff ff61 	bl	80089ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008aea:	b938      	cbnz	r0, 8008afc <vTaskDelay+0x3c>
			portYIELD_WITHIN_API();
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <vTaskDelay+0x44>)
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	f3bf 8f6f 	isb	sy
	}
 8008afc:	bd08      	pop	{r3, pc}
 8008afe:	bf00      	nop
 8008b00:	20000408 	.word	0x20000408
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b08:	4b19      	ldr	r3, [pc, #100]	; (8008b70 <vTaskSwitchContext+0x68>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	b9e3      	cbnz	r3, 8008b48 <vTaskSwitchContext+0x40>
		xYieldPending = pdFALSE;
 8008b0e:	4919      	ldr	r1, [pc, #100]	; (8008b74 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b10:	4a19      	ldr	r2, [pc, #100]	; (8008b78 <vTaskSwitchContext+0x70>)
{
 8008b12:	b410      	push	{r4}
		xYieldPending = pdFALSE;
 8008b14:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b16:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b18:	fab3 f383 	clz	r3, r3
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f1c3 031f 	rsb	r3, r3, #31
 8008b22:	4816      	ldr	r0, [pc, #88]	; (8008b7c <vTaskSwitchContext+0x74>)
 8008b24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008b28:	0092      	lsls	r2, r2, #2
 8008b2a:	5881      	ldr	r1, [r0, r2]
 8008b2c:	1884      	adds	r4, r0, r2
 8008b2e:	b179      	cbz	r1, 8008b50 <vTaskSwitchContext+0x48>
 8008b30:	6861      	ldr	r1, [r4, #4]
 8008b32:	3208      	adds	r2, #8
 8008b34:	6849      	ldr	r1, [r1, #4]
 8008b36:	4402      	add	r2, r0
 8008b38:	4291      	cmp	r1, r2
 8008b3a:	6061      	str	r1, [r4, #4]
 8008b3c:	d011      	beq.n	8008b62 <vTaskSwitchContext+0x5a>
 8008b3e:	68ca      	ldr	r2, [r1, #12]
 8008b40:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <vTaskSwitchContext+0x78>)
}
 8008b42:	bc10      	pop	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b44:	601a      	str	r2, [r3, #0]
}
 8008b46:	4770      	bx	lr
		xYieldPending = pdTRUE;
 8008b48:	2201      	movs	r2, #1
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	; (8008b74 <vTaskSwitchContext+0x6c>)
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	4770      	bx	lr
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	e7fe      	b.n	8008b60 <vTaskSwitchContext+0x58>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b62:	2214      	movs	r2, #20
 8008b64:	fb02 0303 	mla	r3, r2, r3, r0
 8008b68:	6849      	ldr	r1, [r1, #4]
 8008b6a:	6059      	str	r1, [r3, #4]
 8008b6c:	e7e7      	b.n	8008b3e <vTaskSwitchContext+0x36>
 8008b6e:	bf00      	nop
 8008b70:	20000408 	.word	0x20000408
 8008b74:	20000488 	.word	0x20000488
 8008b78:	20000410 	.word	0x20000410
 8008b7c:	20000370 	.word	0x20000370
 8008b80:	20000364 	.word	0x20000364

08008b84 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008b84:	b940      	cbnz	r0, 8008b98 <vTaskPlaceOnEventList+0x14>
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	e7fe      	b.n	8008b96 <vTaskPlaceOnEventList+0x12>
{
 8008b98:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b9a:	4d1b      	ldr	r5, [pc, #108]	; (8008c08 <vTaskPlaceOnEventList+0x84>)
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	6829      	ldr	r1, [r5, #0]
 8008ba0:	3118      	adds	r1, #24
 8008ba2:	f7fe fdfb 	bl	800779c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <vTaskPlaceOnEventList+0x88>)
 8008ba8:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008baa:	6828      	ldr	r0, [r5, #0]
 8008bac:	3004      	adds	r0, #4
 8008bae:	f7fe fe0f 	bl	80077d0 <uxListRemove>
 8008bb2:	b940      	cbnz	r0, 8008bc6 <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	682b      	ldr	r3, [r5, #0]
 8008bb8:	4915      	ldr	r1, [pc, #84]	; (8008c10 <vTaskPlaceOnEventList+0x8c>)
 8008bba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008bbc:	680b      	ldr	r3, [r1, #0]
 8008bbe:	4082      	lsls	r2, r0
 8008bc0:	ea23 0302 	bic.w	r3, r3, r2
 8008bc4:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bc6:	1c63      	adds	r3, r4, #1
 8008bc8:	d00f      	beq.n	8008bea <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bca:	682b      	ldr	r3, [r5, #0]
 8008bcc:	19a4      	adds	r4, r4, r6
 8008bce:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bd0:	d212      	bcs.n	8008bf8 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <vTaskPlaceOnEventList+0x90>)
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	6829      	ldr	r1, [r5, #0]
 8008bd8:	3104      	adds	r1, #4
 8008bda:	f7fe fddf 	bl	800779c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bde:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <vTaskPlaceOnEventList+0x94>)
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8008be4:	bf38      	it	cc
 8008be6:	601c      	strcc	r4, [r3, #0]
}
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bea:	6829      	ldr	r1, [r5, #0]
 8008bec:	480b      	ldr	r0, [pc, #44]	; (8008c1c <vTaskPlaceOnEventList+0x98>)
 8008bee:	3104      	adds	r1, #4
}
 8008bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bf4:	f7fe bdc4 	b.w	8007780 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <vTaskPlaceOnEventList+0x9c>)
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	6829      	ldr	r1, [r5, #0]
}
 8008bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c02:	3104      	adds	r1, #4
 8008c04:	f7fe bdca 	b.w	800779c <vListInsert>
 8008c08:	20000364 	.word	0x20000364
 8008c0c:	20000484 	.word	0x20000484
 8008c10:	20000410 	.word	0x20000410
 8008c14:	20000368 	.word	0x20000368
 8008c18:	2000043c 	.word	0x2000043c
 8008c1c:	2000045c 	.word	0x2000045c
 8008c20:	2000036c 	.word	0x2000036c

08008c24 <xTaskRemoveFromEventList>:
{
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008c26:	68c3      	ldr	r3, [r0, #12]
 8008c28:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008c2a:	b354      	cbz	r4, 8008c82 <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c2c:	f104 0518 	add.w	r5, r4, #24
 8008c30:	4628      	mov	r0, r5
 8008c32:	f7fe fdcd 	bl	80077d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c36:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <xTaskRemoveFromEventList+0x74>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	b9eb      	cbnz	r3, 8008c78 <xTaskRemoveFromEventList+0x54>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c3c:	1d26      	adds	r6, r4, #4
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7fe fdc6 	bl	80077d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c44:	2301      	movs	r3, #1
 8008c46:	4d15      	ldr	r5, [pc, #84]	; (8008c9c <xTaskRemoveFromEventList+0x78>)
 8008c48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c4a:	682f      	ldr	r7, [r5, #0]
 8008c4c:	4814      	ldr	r0, [pc, #80]	; (8008ca0 <xTaskRemoveFromEventList+0x7c>)
 8008c4e:	4093      	lsls	r3, r2
 8008c50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c54:	433b      	orrs	r3, r7
 8008c56:	4631      	mov	r1, r6
 8008c58:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	f7fe fd8f 	bl	8007780 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c62:	4b10      	ldr	r3, [pc, #64]	; (8008ca4 <xTaskRemoveFromEventList+0x80>)
 8008c64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d912      	bls.n	8008c94 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4a0d      	ldr	r2, [pc, #52]	; (8008ca8 <xTaskRemoveFromEventList+0x84>)
		xReturn = pdTRUE;
 8008c72:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8008c74:	6013      	str	r3, [r2, #0]
}
 8008c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c78:	4629      	mov	r1, r5
 8008c7a:	480c      	ldr	r0, [pc, #48]	; (8008cac <xTaskRemoveFromEventList+0x88>)
 8008c7c:	f7fe fd80 	bl	8007780 <vListInsertEnd>
 8008c80:	e7ef      	b.n	8008c62 <xTaskRemoveFromEventList+0x3e>
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	e7fe      	b.n	8008c92 <xTaskRemoveFromEventList+0x6e>
		xReturn = pdFALSE;
 8008c94:	2000      	movs	r0, #0
}
 8008c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c98:	20000408 	.word	0x20000408
 8008c9c:	20000410 	.word	0x20000410
 8008ca0:	20000370 	.word	0x20000370
 8008ca4:	20000364 	.word	0x20000364
 8008ca8:	20000488 	.word	0x20000488
 8008cac:	20000444 	.word	0x20000444

08008cb0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cb0:	4a03      	ldr	r2, [pc, #12]	; (8008cc0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cb2:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cb4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	e9c0 2300 	strd	r2, r3, [r0]
}
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	20000440 	.word	0x20000440
 8008cc4:	20000484 	.word	0x20000484

08008cc8 <xTaskCheckForTimeOut>:
{
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008cca:	b340      	cbz	r0, 8008d1e <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 8008ccc:	b1f1      	cbz	r1, 8008d0c <xTaskCheckForTimeOut+0x44>
 8008cce:	460d      	mov	r5, r1
 8008cd0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008cd2:	f000 f9c7 	bl	8009064 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008cd6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008d50 <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 8008cda:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cdc:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8008cde:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8008ce2:	1c59      	adds	r1, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ce4:	eba6 0207 	sub.w	r2, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 8008ce8:	d022      	beq.n	8008d30 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cea:	4818      	ldr	r0, [pc, #96]	; (8008d4c <xTaskCheckForTimeOut+0x84>)
 8008cec:	6821      	ldr	r1, [r4, #0]
 8008cee:	f8d0 e000 	ldr.w	lr, [r0]
 8008cf2:	4571      	cmp	r1, lr
 8008cf4:	d001      	beq.n	8008cfa <xTaskCheckForTimeOut+0x32>
 8008cf6:	42b7      	cmp	r7, r6
 8008cf8:	d925      	bls.n	8008d46 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d81a      	bhi.n	8008d34 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 8008cfe:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8008d00:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8008d02:	602b      	str	r3, [r5, #0]
	taskEXIT_CRITICAL();
 8008d04:	f000 f9d0 	bl	80090a8 <vPortExitCritical>
}
 8008d08:	4630      	mov	r0, r6
 8008d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	e7fe      	b.n	8008d1c <xTaskCheckForTimeOut+0x54>
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	e7fe      	b.n	8008d2e <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 8008d30:	2600      	movs	r6, #0
 8008d32:	e7e7      	b.n	8008d04 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d34:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d36:	f8dc 1000 	ldr.w	r1, [ip]
			*pxTicksToWait -= xElapsedTime;
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8008d3e:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d40:	e9c4 0100 	strd	r0, r1, [r4]
 8008d44:	e7de      	b.n	8008d04 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8008d46:	2601      	movs	r6, #1
 8008d48:	e7dc      	b.n	8008d04 <xTaskCheckForTimeOut+0x3c>
 8008d4a:	bf00      	nop
 8008d4c:	20000440 	.word	0x20000440
 8008d50:	20000484 	.word	0x20000484

08008d54 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008d54:	2201      	movs	r2, #1
 8008d56:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <vTaskMissedYield+0x8>)
 8008d58:	601a      	str	r2, [r3, #0]
}
 8008d5a:	4770      	bx	lr
 8008d5c:	20000488 	.word	0x20000488

08008d60 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <xTaskGetSchedulerState+0x18>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	b133      	cbz	r3, 8008d74 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <xTaskGetSchedulerState+0x1c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d6c:	bf0c      	ite	eq
 8008d6e:	2002      	moveq	r0, #2
 8008d70:	2000      	movne	r0, #0
 8008d72:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d74:	2001      	movs	r0, #1
	}
 8008d76:	4770      	bx	lr
 8008d78:	20000458 	.word	0x20000458
 8008d7c:	20000408 	.word	0x20000408

08008d80 <xTaskPriorityInherit>:
	{
 8008d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8008d84:	4607      	mov	r7, r0
 8008d86:	b1c8      	cbz	r0, 8008dbc <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d88:	4d25      	ldr	r5, [pc, #148]	; (8008e20 <xTaskPriorityInherit+0xa0>)
 8008d8a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008d8c:	6829      	ldr	r1, [r5, #0]
 8008d8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008d90:	428a      	cmp	r2, r1
 8008d92:	d215      	bcs.n	8008dc0 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d94:	6981      	ldr	r1, [r0, #24]
 8008d96:	2900      	cmp	r1, #0
 8008d98:	db04      	blt.n	8008da4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d9a:	6829      	ldr	r1, [r5, #0]
 8008d9c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008d9e:	f1c1 0107 	rsb	r1, r1, #7
 8008da2:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008da4:	4e1f      	ldr	r6, [pc, #124]	; (8008e24 <xTaskPriorityInherit+0xa4>)
 8008da6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008daa:	6979      	ldr	r1, [r7, #20]
 8008dac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008db0:	4291      	cmp	r1, r2
 8008db2:	d00e      	beq.n	8008dd2 <xTaskPriorityInherit+0x52>
				xReturn = pdTRUE;
 8008db4:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008db6:	682a      	ldr	r2, [r5, #0]
 8008db8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008dba:	62fa      	str	r2, [r7, #44]	; 0x2c
	}
 8008dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008dc0:	682a      	ldr	r2, [r5, #0]
 8008dc2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8008dc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008dc6:	4298      	cmp	r0, r3
 8008dc8:	bf2c      	ite	cs
 8008dca:	2000      	movcs	r0, #0
 8008dcc:	2001      	movcc	r0, #1
	}
 8008dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd2:	f107 0804 	add.w	r8, r7, #4
 8008dd6:	4640      	mov	r0, r8
 8008dd8:	f7fe fcfa 	bl	80077d0 <uxListRemove>
 8008ddc:	b968      	cbnz	r0, 8008dfa <xTaskPriorityInherit+0x7a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008de0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	58f3      	ldr	r3, [r6, r3]
 8008de8:	b93b      	cbnz	r3, 8008dfa <xTaskPriorityInherit+0x7a>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4a0e      	ldr	r2, [pc, #56]	; (8008e28 <xTaskPriorityInherit+0xa8>)
 8008dee:	408b      	lsls	r3, r1
 8008df0:	6811      	ldr	r1, [r2, #0]
 8008df2:	ea21 0103 	bic.w	r1, r1, r3
 8008df6:	6011      	str	r1, [r2, #0]
 8008df8:	e000      	b.n	8008dfc <xTaskPriorityInherit+0x7c>
 8008dfa:	4a0b      	ldr	r2, [pc, #44]	; (8008e28 <xTaskPriorityInherit+0xa8>)
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008dfc:	2401      	movs	r4, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dfe:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e00:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e04:	4641      	mov	r1, r8
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e06:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e08:	fa04 f300 	lsl.w	r3, r4, r0
 8008e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008e10:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8008e14:	432b      	orrs	r3, r5
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	f7fe fcb2 	bl	8007780 <vListInsertEnd>
				xReturn = pdTRUE;
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	e7cd      	b.n	8008dbc <xTaskPriorityInherit+0x3c>
 8008e20:	20000364 	.word	0x20000364
 8008e24:	20000370 	.word	0x20000370
 8008e28:	20000410 	.word	0x20000410

08008e2c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008e2c:	b168      	cbz	r0, 8008e4a <xTaskPriorityDisinherit+0x1e>
	{
 8008e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8008e30:	4b29      	ldr	r3, [pc, #164]	; (8008ed8 <xTaskPriorityDisinherit+0xac>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4283      	cmp	r3, r0
 8008e36:	d00a      	beq.n	8008e4e <xTaskPriorityDisinherit+0x22>
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	e7fe      	b.n	8008e48 <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 8008e4a:	2000      	movs	r0, #0
	}
 8008e4c:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 8008e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e50:	b943      	cbnz	r3, 8008e64 <xTaskPriorityDisinherit+0x38>
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	e7fe      	b.n	8008e62 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e64:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008e66:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8008e68:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e6a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008e6c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e6e:	d000      	beq.n	8008e72 <xTaskPriorityDisinherit+0x46>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e70:	b10b      	cbz	r3, 8008e76 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8008e72:	2000      	movs	r0, #0
	}
 8008e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e76:	1d07      	adds	r7, r0, #4
 8008e78:	4604      	mov	r4, r0
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f7fe fca8 	bl	80077d0 <uxListRemove>
 8008e80:	b1b8      	cbz	r0, 8008eb2 <xTaskPriorityDisinherit+0x86>
 8008e82:	4816      	ldr	r0, [pc, #88]	; (8008edc <xTaskPriorityDisinherit+0xb0>)
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <xTaskPriorityDisinherit+0xb4>)
					prvAddTaskToReadyList( pxTCB );
 8008e86:	2501      	movs	r5, #1
 8008e88:	f04f 0c14 	mov.w	ip, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8008e8e:	f8d3 e000 	ldr.w	lr, [r3]
 8008e92:	fa05 f602 	lsl.w	r6, r5, r2
 8008e96:	4639      	mov	r1, r7
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e98:	f1c2 0707 	rsb	r7, r2, #7
					prvAddTaskToReadyList( pxTCB );
 8008e9c:	ea46 060e 	orr.w	r6, r6, lr
 8008ea0:	fb0c 0002 	mla	r0, ip, r2, r0
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ea4:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea6:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ea8:	601e      	str	r6, [r3, #0]
 8008eaa:	f7fe fc69 	bl	8007780 <vListInsertEnd>
					xReturn = pdTRUE;
 8008eae:	4628      	mov	r0, r5
	}
 8008eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008eb2:	2314      	movs	r3, #20
 8008eb4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008eb6:	4809      	ldr	r0, [pc, #36]	; (8008edc <xTaskPriorityDisinherit+0xb0>)
 8008eb8:	fb03 f305 	mul.w	r3, r3, r5
 8008ebc:	58c3      	ldr	r3, [r0, r3]
 8008ebe:	b10b      	cbz	r3, 8008ec4 <xTaskPriorityDisinherit+0x98>
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <xTaskPriorityDisinherit+0xb4>)
 8008ec2:	e7e0      	b.n	8008e86 <xTaskPriorityDisinherit+0x5a>
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <xTaskPriorityDisinherit+0xb4>)
 8008ec8:	fa02 f505 	lsl.w	r5, r2, r5
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	ea22 0205 	bic.w	r2, r2, r5
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e7d7      	b.n	8008e86 <xTaskPriorityDisinherit+0x5a>
 8008ed6:	bf00      	nop
 8008ed8:	20000364 	.word	0x20000364
 8008edc:	20000370 	.word	0x20000370
 8008ee0:	20000410 	.word	0x20000410

08008ee4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008ee4:	b1a8      	cbz	r0, 8008f12 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
 8008ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8008ee8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008eea:	b944      	cbnz	r4, 8008efe <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	e7fe      	b.n	8008efc <vTaskPriorityDisinheritAfterTimeout+0x18>
 8008efe:	6c43      	ldr	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f00:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008f02:	428b      	cmp	r3, r1
 8008f04:	bf38      	it	cc
 8008f06:	460b      	movcc	r3, r1
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d001      	beq.n	8008f10 <vTaskPriorityDisinheritAfterTimeout+0x2c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f0c:	2c01      	cmp	r4, #1
 8008f0e:	d001      	beq.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
 8008f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f12:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8008f14:	491f      	ldr	r1, [pc, #124]	; (8008f94 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8008f16:	6809      	ldr	r1, [r1, #0]
 8008f18:	4281      	cmp	r1, r0
 8008f1a:	d022      	beq.n	8008f62 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f1c:	2514      	movs	r5, #20
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f1e:	6981      	ldr	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f20:	4e1d      	ldr	r6, [pc, #116]	; (8008f98 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f22:	2900      	cmp	r1, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f24:	fb05 6202 	mla	r2, r5, r2, r6
					pxTCB->uxPriority = uxPriorityToUse;
 8008f28:	62c3      	str	r3, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2a:	bfa4      	itt	ge
 8008f2c:	f1c3 0307 	rsbge	r3, r3, #7
 8008f30:	6183      	strge	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f32:	6943      	ldr	r3, [r0, #20]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d1eb      	bne.n	8008f10 <vTaskPriorityDisinheritAfterTimeout+0x2c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f38:	1d07      	adds	r7, r0, #4
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f7fe fc47 	bl	80077d0 <uxListRemove>
 8008f42:	b1b8      	cbz	r0, 8008f74 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8008f44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f46:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
						prvAddTaskToReadyList( pxTCB );
 8008f48:	2201      	movs	r2, #1
 8008f4a:	2414      	movs	r4, #20
 8008f4c:	681d      	ldr	r5, [r3, #0]
 8008f4e:	4082      	lsls	r2, r0
 8008f50:	432a      	orrs	r2, r5
 8008f52:	4639      	mov	r1, r7
 8008f54:	fb04 6000 	mla	r0, r4, r0, r6
 8008f58:	601a      	str	r2, [r3, #0]
	}
 8008f5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8008f5e:	f7fe bc0f 	b.w	8007780 <vListInsertEnd>
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	e7fe      	b.n	8008f72 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 8008f74:	2201      	movs	r2, #1
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008f78:	fb05 f500 	mul.w	r5, r5, r0
 8008f7c:	5973      	ldr	r3, [r6, r5]
 8008f7e:	fa02 f100 	lsl.w	r1, r2, r0
 8008f82:	b10b      	cbz	r3, 8008f88 <vTaskPriorityDisinheritAfterTimeout+0xa4>
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f86:	e7df      	b.n	8008f48 <vTaskPriorityDisinheritAfterTimeout+0x64>
 8008f88:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	ea22 0201 	bic.w	r2, r2, r1
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e7d9      	b.n	8008f48 <vTaskPriorityDisinheritAfterTimeout+0x64>
 8008f94:	20000364 	.word	0x20000364
 8008f98:	20000370 	.word	0x20000370
 8008f9c:	20000410 	.word	0x20000410

08008fa0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <pvTaskIncrementMutexHeldCount+0x14>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	b11a      	cbz	r2, 8008fae <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fa6:	6819      	ldr	r1, [r3, #0]
 8008fa8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8008faa:	3201      	adds	r2, #1
 8008fac:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8008fae:	6818      	ldr	r0, [r3, #0]
	}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	20000364 	.word	0x20000364

08008fb8 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8008fb8:	2200      	movs	r2, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <prvTaskExitError+0x3c>)
{
 8008fbc:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 8008fbe:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 8008fc0:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	d008      	beq.n	8008fd8 <prvTaskExitError+0x20>
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	e7fe      	b.n	8008fd6 <prvTaskExitError+0x1e>
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008fe8:	9b01      	ldr	r3, [sp, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0fc      	beq.n	8008fe8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008fee:	b002      	add	sp, #8
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000054 	.word	0x20000054

08008ff8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ff8:	4806      	ldr	r0, [pc, #24]	; (8009014 <prvPortStartFirstTask+0x1c>)
 8008ffa:	6800      	ldr	r0, [r0, #0]
 8008ffc:	6800      	ldr	r0, [r0, #0]
 8008ffe:	f380 8808 	msr	MSP, r0
 8009002:	b662      	cpsie	i
 8009004:	b661      	cpsie	f
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	df00      	svc	0
 8009010:	bf00      	nop
 8009012:	0000      	.short	0x0000
 8009014:	e000ed08 	.word	0xe000ed08

08009018 <pxPortInitialiseStack>:
{
 8009018:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800901a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800901e:	4b06      	ldr	r3, [pc, #24]	; (8009038 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009020:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009024:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009028:	e940 1402 	strd	r1, r4, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800902c:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 8009030:	bc10      	pop	{r4}
 8009032:	3840      	subs	r0, #64	; 0x40
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	08008fb9 	.word	0x08008fb9
 800903c:	00000000 	.word	0x00000000

08009040 <SVC_Handler>:
	__asm volatile (
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <pxCurrentTCBConst2>)
 8009042:	6819      	ldr	r1, [r3, #0]
 8009044:	6808      	ldr	r0, [r1, #0]
 8009046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800904a:	f380 8809 	msr	PSP, r0
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f04f 0000 	mov.w	r0, #0
 8009056:	f380 8811 	msr	BASEPRI, r0
 800905a:	f04e 0e0d 	orr.w	lr, lr, #13
 800905e:	4770      	bx	lr

08009060 <pxCurrentTCBConst2>:
 8009060:	20000364 	.word	0x20000364

08009064 <vPortEnterCritical>:
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009074:	4a0a      	ldr	r2, [pc, #40]	; (80090a0 <vPortEnterCritical+0x3c>)
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800907a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800907c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800907e:	d000      	beq.n	8009082 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009080:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <vPortEnterCritical+0x40>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f013 0fff 	tst.w	r3, #255	; 0xff
 800908a:	d0f9      	beq.n	8009080 <vPortEnterCritical+0x1c>
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	e7fe      	b.n	800909c <vPortEnterCritical+0x38>
 800909e:	bf00      	nop
 80090a0:	20000054 	.word	0x20000054
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <vPortExitCritical+0x24>)
 80090aa:	6813      	ldr	r3, [r2, #0]
 80090ac:	b943      	cbnz	r3, 80090c0 <vPortExitCritical+0x18>
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	e7fe      	b.n	80090be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80090c0:	3b01      	subs	r3, #1
 80090c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090c4:	b90b      	cbnz	r3, 80090ca <vPortExitCritical+0x22>
	__asm volatile
 80090c6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80090ca:	4770      	bx	lr
 80090cc:	20000054 	.word	0x20000054

080090d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090d0:	f3ef 8009 	mrs	r0, PSP
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <pxCurrentTCBConst>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090e0:	6010      	str	r0, [r2, #0]
 80090e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ea:	f380 8811 	msr	BASEPRI, r0
 80090ee:	f7ff fd0b 	bl	8008b08 <vTaskSwitchContext>
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8811 	msr	BASEPRI, r0
 80090fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	6808      	ldr	r0, [r1, #0]
 8009102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009106:	f380 8809 	msr	PSP, r0
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	4770      	bx	lr

08009110 <pxCurrentTCBConst>:
 8009110:	20000364 	.word	0x20000364

08009114 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009114:	b508      	push	{r3, lr}
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009126:	f7ff fb95 	bl	8008854 <xTaskIncrementTick>
 800912a:	b118      	cbz	r0, 8009134 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800912c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <SysTick_Handler+0x28>)
 8009132:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009134:	2300      	movs	r3, #0
 8009136:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800913a:	bd08      	pop	{r3, pc}
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009140:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009142:	2107      	movs	r1, #7
{
 8009144:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009146:	4a08      	ldr	r2, [pc, #32]	; (8009168 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009148:	4c08      	ldr	r4, [pc, #32]	; (800916c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800914a:	4809      	ldr	r0, [pc, #36]	; (8009170 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800914c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800914e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009150:	6803      	ldr	r3, [r0, #0]
 8009152:	4c08      	ldr	r4, [pc, #32]	; (8009174 <vPortSetupTimerInterrupt+0x34>)
 8009154:	4808      	ldr	r0, [pc, #32]	; (8009178 <vPortSetupTimerInterrupt+0x38>)
 8009156:	fba4 4303 	umull	r4, r3, r4, r3
 800915a:	099b      	lsrs	r3, r3, #6
 800915c:	3b01      	subs	r3, #1
 800915e:	6003      	str	r3, [r0, #0]
}
 8009160:	bc10      	pop	{r4}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009162:	6011      	str	r1, [r2, #0]
}
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	e000e010 	.word	0xe000e010
 800916c:	e000e018 	.word	0xe000e018
 8009170:	20000044 	.word	0x20000044
 8009174:	10624dd3 	.word	0x10624dd3
 8009178:	e000e014 	.word	0xe000e014

0800917c <xPortStartScheduler>:
{
 800917c:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800917e:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009180:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009182:	4b27      	ldr	r3, [pc, #156]	; (8009220 <xPortStartScheduler+0xa4>)
{
 8009184:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009186:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009188:	4926      	ldr	r1, [pc, #152]	; (8009224 <xPortStartScheduler+0xa8>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800918e:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009190:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009192:	4825      	ldr	r0, [pc, #148]	; (8009228 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800919a:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800919e:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091a6:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091a8:	0611      	lsls	r1, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091aa:	6004      	str	r4, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ac:	d510      	bpl.n	80091d0 <xPortStartScheduler+0x54>
 80091ae:	2306      	movs	r3, #6
 80091b0:	e000      	b.n	80091b4 <xPortStartScheduler+0x38>
 80091b2:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80091b8:	1e59      	subs	r1, r3, #1
 80091ba:	0052      	lsls	r2, r2, #1
 80091bc:	b2d2      	uxtb	r2, r2
 80091be:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80091c6:	0612      	lsls	r2, r2, #24
 80091c8:	d4f3      	bmi.n	80091b2 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	d008      	beq.n	80091e2 <xPortStartScheduler+0x66>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	e7fe      	b.n	80091e0 <xPortStartScheduler+0x64>
	uxCriticalNesting = 0;
 80091e2:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091e4:	9901      	ldr	r1, [sp, #4]
 80091e6:	4d0e      	ldr	r5, [pc, #56]	; (8009220 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091e8:	021b      	lsls	r3, r3, #8
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091ea:	4a10      	ldr	r2, [pc, #64]	; (800922c <xPortStartScheduler+0xb0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091ec:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091f2:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091f4:	7029      	strb	r1, [r5, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091f6:	6813      	ldr	r3, [r2, #0]
 80091f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009204:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 8009206:	f7ff ff9b 	bl	8009140 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800920a:	4b09      	ldr	r3, [pc, #36]	; (8009230 <xPortStartScheduler+0xb4>)
 800920c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800920e:	f7ff fef3 	bl	8008ff8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009212:	f7ff fc79 	bl	8008b08 <vTaskSwitchContext>
	prvTaskExitError();
 8009216:	f7ff fecf 	bl	8008fb8 <prvTaskExitError>
}
 800921a:	4620      	mov	r0, r4
 800921c:	b003      	add	sp, #12
 800921e:	bd30      	pop	{r4, r5, pc}
 8009220:	e000e400 	.word	0xe000e400
 8009224:	2000048c 	.word	0x2000048c
 8009228:	20000490 	.word	0x20000490
 800922c:	e000ed20 	.word	0xe000ed20
 8009230:	20000054 	.word	0x20000054

08009234 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009234:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009238:	2b0f      	cmp	r3, #15
 800923a:	d90e      	bls.n	800925a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800923c:	4910      	ldr	r1, [pc, #64]	; (8009280 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800923e:	4a11      	ldr	r2, [pc, #68]	; (8009284 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009240:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009242:	7812      	ldrb	r2, [r2, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d908      	bls.n	800925a <vPortValidateInterruptPriority+0x26>
 8009248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	e7fe      	b.n	8009258 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <vPortValidateInterruptPriority+0x54>)
 800925c:	4a0b      	ldr	r2, [pc, #44]	; (800928c <vPortValidateInterruptPriority+0x58>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009266:	4293      	cmp	r3, r2
 8009268:	d908      	bls.n	800927c <vPortValidateInterruptPriority+0x48>
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	e7fe      	b.n	800927a <vPortValidateInterruptPriority+0x46>
	}
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	e000e3f0 	.word	0xe000e3f0
 8009284:	2000048c 	.word	0x2000048c
 8009288:	e000ed0c 	.word	0xe000ed0c
 800928c:	20000490 	.word	0x20000490

08009290 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009290:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <prvInsertBlockIntoFreeList+0x48>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4282      	cmp	r2, r0
 8009298:	d201      	bcs.n	800929e <prvInsertBlockIntoFreeList+0xe>
 800929a:	4613      	mov	r3, r2
 800929c:	e7fa      	b.n	8009294 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800929e:	685c      	ldr	r4, [r3, #4]
 80092a0:	1919      	adds	r1, r3, r4
 80092a2:	4288      	cmp	r0, r1
 80092a4:	d103      	bne.n	80092ae <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092a6:	6841      	ldr	r1, [r0, #4]
 80092a8:	4618      	mov	r0, r3
 80092aa:	4421      	add	r1, r4
 80092ac:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092ae:	6844      	ldr	r4, [r0, #4]
 80092b0:	1901      	adds	r1, r0, r4
 80092b2:	428a      	cmp	r2, r1
 80092b4:	d109      	bne.n	80092ca <prvInsertBlockIntoFreeList+0x3a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092b6:	4909      	ldr	r1, [pc, #36]	; (80092dc <prvInsertBlockIntoFreeList+0x4c>)
 80092b8:	6809      	ldr	r1, [r1, #0]
 80092ba:	428a      	cmp	r2, r1
 80092bc:	d005      	beq.n	80092ca <prvInsertBlockIntoFreeList+0x3a>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092be:	e9d2 5100 	ldrd	r5, r1, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092c2:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092c4:	e9c0 5100 	strd	r5, r1, [r0]
 80092c8:	e000      	b.n	80092cc <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092ca:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092cc:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092ce:	bf18      	it	ne
 80092d0:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092d2:	bc30      	pop	{r4, r5}
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	200040a4 	.word	0x200040a4
 80092dc:	20000494 	.word	0x20000494

080092e0 <pvPortMalloc>:
{
 80092e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80092e4:	4f41      	ldr	r7, [pc, #260]	; (80093ec <pvPortMalloc+0x10c>)
{
 80092e6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80092e8:	f7ff faac 	bl	8008844 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	d05a      	beq.n	80093a8 <pvPortMalloc+0xc8>
 80092f2:	4b3f      	ldr	r3, [pc, #252]	; (80093f0 <pvPortMalloc+0x110>)
 80092f4:	681e      	ldr	r6, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092f6:	4234      	tst	r4, r6
 80092f8:	d150      	bne.n	800939c <pvPortMalloc+0xbc>
			if( xWantedSize > 0 )
 80092fa:	2c00      	cmp	r4, #0
 80092fc:	d04e      	beq.n	800939c <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80092fe:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009302:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009304:	bf1c      	itt	ne
 8009306:	f023 0307 	bicne.w	r3, r3, #7
 800930a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800930c:	2b00      	cmp	r3, #0
 800930e:	d045      	beq.n	800939c <pvPortMalloc+0xbc>
 8009310:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8009404 <pvPortMalloc+0x124>
 8009314:	f8d8 5000 	ldr.w	r5, [r8]
 8009318:	429d      	cmp	r5, r3
 800931a:	d33f      	bcc.n	800939c <pvPortMalloc+0xbc>
				pxBlock = xStart.pxNextFreeBlock;
 800931c:	4835      	ldr	r0, [pc, #212]	; (80093f4 <pvPortMalloc+0x114>)
 800931e:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009320:	e006      	b.n	8009330 <pvPortMalloc+0x50>
 8009322:	f8d4 c000 	ldr.w	ip, [r4]
 8009326:	f1bc 0f00 	cmp.w	ip, #0
 800932a:	d004      	beq.n	8009336 <pvPortMalloc+0x56>
 800932c:	4620      	mov	r0, r4
 800932e:	4664      	mov	r4, ip
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	4299      	cmp	r1, r3
 8009334:	d3f5      	bcc.n	8009322 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8009336:	4294      	cmp	r4, r2
 8009338:	d030      	beq.n	800939c <pvPortMalloc+0xbc>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800933a:	1aca      	subs	r2, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800933c:	6827      	ldr	r7, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800933e:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6007      	str	r7, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009342:	d910      	bls.n	8009366 <pvPortMalloc+0x86>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009344:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009346:	0741      	lsls	r1, r0, #29
 8009348:	d008      	beq.n	800935c <pvPortMalloc+0x7c>
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	e7fe      	b.n	800935a <pvPortMalloc+0x7a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800935c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800935e:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009360:	f7ff ff96 	bl	8009290 <prvInsertBlockIntoFreeList>
 8009364:	6861      	ldr	r1, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009366:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009368:	4a23      	ldr	r2, [pc, #140]	; (80093f8 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800936a:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800936c:	6810      	ldr	r0, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800936e:	4331      	orrs	r1, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009370:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8009372:	e9c4 3100 	strd	r3, r1, [r4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009376:	f104 0408 	add.w	r4, r4, #8
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800937a:	bf38      	it	cc
 800937c:	6015      	strcc	r5, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800937e:	f8c8 5000 	str.w	r5, [r8]
	( void ) xTaskResumeAll();
 8009382:	f7ff fb13 	bl	80089ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009386:	0763      	lsls	r3, r4, #29
 8009388:	d00b      	beq.n	80093a2 <pvPortMalloc+0xc2>
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	e7fe      	b.n	800939a <pvPortMalloc+0xba>
	( void ) xTaskResumeAll();
 800939c:	f7ff fb06 	bl	80089ac <xTaskResumeAll>
 80093a0:	2400      	movs	r4, #0
}
 80093a2:	4620      	mov	r0, r4
 80093a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 80093a8:	4b14      	ldr	r3, [pc, #80]	; (80093fc <pvPortMalloc+0x11c>)
	xStart.xBlockSize = ( size_t ) 0;
 80093aa:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093ac:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ae:	bf1c      	itt	ne
 80093b0:	3307      	addne	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b2:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093b6:	4619      	mov	r1, r3
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093b8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	uxAddress -= xHeapStructSize;
 80093bc:	4a10      	ldr	r2, [pc, #64]	; (8009400 <pvPortMalloc+0x120>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093be:	f8df c034 	ldr.w	ip, [pc, #52]	; 80093f4 <pvPortMalloc+0x114>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093c2:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093c6:	1ad3      	subs	r3, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 80093c8:	f8cc 0004 	str.w	r0, [ip, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093cc:	f8cc 1000 	str.w	r1, [ip]
	pxEnd = ( void * ) uxAddress;
 80093d0:	603a      	str	r2, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80093d2:	e9c2 0000 	strd	r0, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d6:	4f08      	ldr	r7, [pc, #32]	; (80093f8 <pvPortMalloc+0x118>)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093d8:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093dc:	4809      	ldr	r0, [pc, #36]	; (8009404 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093de:	4904      	ldr	r1, [pc, #16]	; (80093f0 <pvPortMalloc+0x110>)
 80093e0:	462e      	mov	r6, r5
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e2:	603b      	str	r3, [r7, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e4:	6003      	str	r3, [r0, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093e6:	600d      	str	r5, [r1, #0]
 80093e8:	e785      	b.n	80092f6 <pvPortMalloc+0x16>
 80093ea:	bf00      	nop
 80093ec:	20000494 	.word	0x20000494
 80093f0:	20004098 	.word	0x20004098
 80093f4:	200040a4 	.word	0x200040a4
 80093f8:	200040a0 	.word	0x200040a0
 80093fc:	20000498 	.word	0x20000498
 8009400:	20004090 	.word	0x20004090
 8009404:	2000409c 	.word	0x2000409c

08009408 <vPortFree>:
	if( pv != NULL )
 8009408:	b1d0      	cbz	r0, 8009440 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800940a:	4a19      	ldr	r2, [pc, #100]	; (8009470 <vPortFree+0x68>)
 800940c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	4213      	tst	r3, r2
 8009414:	d108      	bne.n	8009428 <vPortFree+0x20>
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	e7fe      	b.n	8009426 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009428:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800942c:	b149      	cbz	r1, 8009442 <vPortFree+0x3a>
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	e7fe      	b.n	800943e <vPortFree+0x36>
 8009440:	4770      	bx	lr
{
 8009442:	b510      	push	{r4, lr}
 8009444:	4604      	mov	r4, r0
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009446:	ea23 0302 	bic.w	r3, r3, r2
 800944a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800944e:	f7ff f9f9 	bl	8008844 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009452:	4a08      	ldr	r2, [pc, #32]	; (8009474 <vPortFree+0x6c>)
 8009454:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009458:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800945a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800945e:	440b      	add	r3, r1
 8009460:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009462:	f7ff ff15 	bl	8009290 <prvInsertBlockIntoFreeList>
}
 8009466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800946a:	f7ff ba9f 	b.w	80089ac <xTaskResumeAll>
 800946e:	bf00      	nop
 8009470:	20004098 	.word	0x20004098
 8009474:	2000409c 	.word	0x2000409c

08009478 <__errno>:
 8009478:	4b01      	ldr	r3, [pc, #4]	; (8009480 <__errno+0x8>)
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	20000058 	.word	0x20000058

08009484 <__libc_init_array>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	2500      	movs	r5, #0
 8009488:	4e0c      	ldr	r6, [pc, #48]	; (80094bc <__libc_init_array+0x38>)
 800948a:	4c0d      	ldr	r4, [pc, #52]	; (80094c0 <__libc_init_array+0x3c>)
 800948c:	1ba4      	subs	r4, r4, r6
 800948e:	10a4      	asrs	r4, r4, #2
 8009490:	42a5      	cmp	r5, r4
 8009492:	d109      	bne.n	80094a8 <__libc_init_array+0x24>
 8009494:	f000 f8f6 	bl	8009684 <_init>
 8009498:	2500      	movs	r5, #0
 800949a:	4e0a      	ldr	r6, [pc, #40]	; (80094c4 <__libc_init_array+0x40>)
 800949c:	4c0a      	ldr	r4, [pc, #40]	; (80094c8 <__libc_init_array+0x44>)
 800949e:	1ba4      	subs	r4, r4, r6
 80094a0:	10a4      	asrs	r4, r4, #2
 80094a2:	42a5      	cmp	r5, r4
 80094a4:	d105      	bne.n	80094b2 <__libc_init_array+0x2e>
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094ac:	4798      	blx	r3
 80094ae:	3501      	adds	r5, #1
 80094b0:	e7ee      	b.n	8009490 <__libc_init_array+0xc>
 80094b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094b6:	4798      	blx	r3
 80094b8:	3501      	adds	r5, #1
 80094ba:	e7f2      	b.n	80094a2 <__libc_init_array+0x1e>
 80094bc:	0802afcc 	.word	0x0802afcc
 80094c0:	0802afcc 	.word	0x0802afcc
 80094c4:	0802afcc 	.word	0x0802afcc
 80094c8:	0802afd0 	.word	0x0802afd0

080094cc <malloc>:
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <malloc+0xc>)
 80094ce:	4601      	mov	r1, r0
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f000 b86b 	b.w	80095ac <_malloc_r>
 80094d6:	bf00      	nop
 80094d8:	20000058 	.word	0x20000058

080094dc <free>:
 80094dc:	4b02      	ldr	r3, [pc, #8]	; (80094e8 <free+0xc>)
 80094de:	4601      	mov	r1, r0
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	f000 b817 	b.w	8009514 <_free_r>
 80094e6:	bf00      	nop
 80094e8:	20000058 	.word	0x20000058

080094ec <memcpy>:
 80094ec:	b510      	push	{r4, lr}
 80094ee:	1e43      	subs	r3, r0, #1
 80094f0:	440a      	add	r2, r1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	d100      	bne.n	80094f8 <memcpy+0xc>
 80094f6:	bd10      	pop	{r4, pc}
 80094f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009500:	e7f7      	b.n	80094f2 <memcpy+0x6>

08009502 <memset>:
 8009502:	4603      	mov	r3, r0
 8009504:	4402      	add	r2, r0
 8009506:	4293      	cmp	r3, r2
 8009508:	d100      	bne.n	800950c <memset+0xa>
 800950a:	4770      	bx	lr
 800950c:	f803 1b01 	strb.w	r1, [r3], #1
 8009510:	e7f9      	b.n	8009506 <memset+0x4>
	...

08009514 <_free_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4605      	mov	r5, r0
 8009518:	2900      	cmp	r1, #0
 800951a:	d043      	beq.n	80095a4 <_free_r+0x90>
 800951c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009520:	1f0c      	subs	r4, r1, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	bfb8      	it	lt
 8009526:	18e4      	addlt	r4, r4, r3
 8009528:	f000 f8aa 	bl	8009680 <__malloc_lock>
 800952c:	4a1e      	ldr	r2, [pc, #120]	; (80095a8 <_free_r+0x94>)
 800952e:	6813      	ldr	r3, [r2, #0]
 8009530:	4610      	mov	r0, r2
 8009532:	b933      	cbnz	r3, 8009542 <_free_r+0x2e>
 8009534:	6063      	str	r3, [r4, #4]
 8009536:	6014      	str	r4, [r2, #0]
 8009538:	4628      	mov	r0, r5
 800953a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953e:	f000 b8a0 	b.w	8009682 <__malloc_unlock>
 8009542:	42a3      	cmp	r3, r4
 8009544:	d90b      	bls.n	800955e <_free_r+0x4a>
 8009546:	6821      	ldr	r1, [r4, #0]
 8009548:	1862      	adds	r2, r4, r1
 800954a:	4293      	cmp	r3, r2
 800954c:	bf01      	itttt	eq
 800954e:	681a      	ldreq	r2, [r3, #0]
 8009550:	685b      	ldreq	r3, [r3, #4]
 8009552:	1852      	addeq	r2, r2, r1
 8009554:	6022      	streq	r2, [r4, #0]
 8009556:	6063      	str	r3, [r4, #4]
 8009558:	6004      	str	r4, [r0, #0]
 800955a:	e7ed      	b.n	8009538 <_free_r+0x24>
 800955c:	4613      	mov	r3, r2
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	b10a      	cbz	r2, 8009566 <_free_r+0x52>
 8009562:	42a2      	cmp	r2, r4
 8009564:	d9fa      	bls.n	800955c <_free_r+0x48>
 8009566:	6819      	ldr	r1, [r3, #0]
 8009568:	1858      	adds	r0, r3, r1
 800956a:	42a0      	cmp	r0, r4
 800956c:	d10b      	bne.n	8009586 <_free_r+0x72>
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	4401      	add	r1, r0
 8009572:	1858      	adds	r0, r3, r1
 8009574:	4282      	cmp	r2, r0
 8009576:	6019      	str	r1, [r3, #0]
 8009578:	d1de      	bne.n	8009538 <_free_r+0x24>
 800957a:	6810      	ldr	r0, [r2, #0]
 800957c:	6852      	ldr	r2, [r2, #4]
 800957e:	4401      	add	r1, r0
 8009580:	6019      	str	r1, [r3, #0]
 8009582:	605a      	str	r2, [r3, #4]
 8009584:	e7d8      	b.n	8009538 <_free_r+0x24>
 8009586:	d902      	bls.n	800958e <_free_r+0x7a>
 8009588:	230c      	movs	r3, #12
 800958a:	602b      	str	r3, [r5, #0]
 800958c:	e7d4      	b.n	8009538 <_free_r+0x24>
 800958e:	6820      	ldr	r0, [r4, #0]
 8009590:	1821      	adds	r1, r4, r0
 8009592:	428a      	cmp	r2, r1
 8009594:	bf01      	itttt	eq
 8009596:	6811      	ldreq	r1, [r2, #0]
 8009598:	6852      	ldreq	r2, [r2, #4]
 800959a:	1809      	addeq	r1, r1, r0
 800959c:	6021      	streq	r1, [r4, #0]
 800959e:	6062      	str	r2, [r4, #4]
 80095a0:	605c      	str	r4, [r3, #4]
 80095a2:	e7c9      	b.n	8009538 <_free_r+0x24>
 80095a4:	bd38      	pop	{r3, r4, r5, pc}
 80095a6:	bf00      	nop
 80095a8:	200040ac 	.word	0x200040ac

080095ac <_malloc_r>:
 80095ac:	b570      	push	{r4, r5, r6, lr}
 80095ae:	1ccd      	adds	r5, r1, #3
 80095b0:	f025 0503 	bic.w	r5, r5, #3
 80095b4:	3508      	adds	r5, #8
 80095b6:	2d0c      	cmp	r5, #12
 80095b8:	bf38      	it	cc
 80095ba:	250c      	movcc	r5, #12
 80095bc:	2d00      	cmp	r5, #0
 80095be:	4606      	mov	r6, r0
 80095c0:	db01      	blt.n	80095c6 <_malloc_r+0x1a>
 80095c2:	42a9      	cmp	r1, r5
 80095c4:	d903      	bls.n	80095ce <_malloc_r+0x22>
 80095c6:	230c      	movs	r3, #12
 80095c8:	6033      	str	r3, [r6, #0]
 80095ca:	2000      	movs	r0, #0
 80095cc:	bd70      	pop	{r4, r5, r6, pc}
 80095ce:	f000 f857 	bl	8009680 <__malloc_lock>
 80095d2:	4a21      	ldr	r2, [pc, #132]	; (8009658 <_malloc_r+0xac>)
 80095d4:	6814      	ldr	r4, [r2, #0]
 80095d6:	4621      	mov	r1, r4
 80095d8:	b991      	cbnz	r1, 8009600 <_malloc_r+0x54>
 80095da:	4c20      	ldr	r4, [pc, #128]	; (800965c <_malloc_r+0xb0>)
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	b91b      	cbnz	r3, 80095e8 <_malloc_r+0x3c>
 80095e0:	4630      	mov	r0, r6
 80095e2:	f000 f83d 	bl	8009660 <_sbrk_r>
 80095e6:	6020      	str	r0, [r4, #0]
 80095e8:	4629      	mov	r1, r5
 80095ea:	4630      	mov	r0, r6
 80095ec:	f000 f838 	bl	8009660 <_sbrk_r>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d124      	bne.n	800963e <_malloc_r+0x92>
 80095f4:	230c      	movs	r3, #12
 80095f6:	4630      	mov	r0, r6
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	f000 f842 	bl	8009682 <__malloc_unlock>
 80095fe:	e7e4      	b.n	80095ca <_malloc_r+0x1e>
 8009600:	680b      	ldr	r3, [r1, #0]
 8009602:	1b5b      	subs	r3, r3, r5
 8009604:	d418      	bmi.n	8009638 <_malloc_r+0x8c>
 8009606:	2b0b      	cmp	r3, #11
 8009608:	d90f      	bls.n	800962a <_malloc_r+0x7e>
 800960a:	600b      	str	r3, [r1, #0]
 800960c:	18cc      	adds	r4, r1, r3
 800960e:	50cd      	str	r5, [r1, r3]
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f836 	bl	8009682 <__malloc_unlock>
 8009616:	f104 000b 	add.w	r0, r4, #11
 800961a:	1d23      	adds	r3, r4, #4
 800961c:	f020 0007 	bic.w	r0, r0, #7
 8009620:	1ac3      	subs	r3, r0, r3
 8009622:	d0d3      	beq.n	80095cc <_malloc_r+0x20>
 8009624:	425a      	negs	r2, r3
 8009626:	50e2      	str	r2, [r4, r3]
 8009628:	e7d0      	b.n	80095cc <_malloc_r+0x20>
 800962a:	684b      	ldr	r3, [r1, #4]
 800962c:	428c      	cmp	r4, r1
 800962e:	bf16      	itet	ne
 8009630:	6063      	strne	r3, [r4, #4]
 8009632:	6013      	streq	r3, [r2, #0]
 8009634:	460c      	movne	r4, r1
 8009636:	e7eb      	b.n	8009610 <_malloc_r+0x64>
 8009638:	460c      	mov	r4, r1
 800963a:	6849      	ldr	r1, [r1, #4]
 800963c:	e7cc      	b.n	80095d8 <_malloc_r+0x2c>
 800963e:	1cc4      	adds	r4, r0, #3
 8009640:	f024 0403 	bic.w	r4, r4, #3
 8009644:	42a0      	cmp	r0, r4
 8009646:	d005      	beq.n	8009654 <_malloc_r+0xa8>
 8009648:	1a21      	subs	r1, r4, r0
 800964a:	4630      	mov	r0, r6
 800964c:	f000 f808 	bl	8009660 <_sbrk_r>
 8009650:	3001      	adds	r0, #1
 8009652:	d0cf      	beq.n	80095f4 <_malloc_r+0x48>
 8009654:	6025      	str	r5, [r4, #0]
 8009656:	e7db      	b.n	8009610 <_malloc_r+0x64>
 8009658:	200040ac 	.word	0x200040ac
 800965c:	200040b0 	.word	0x200040b0

08009660 <_sbrk_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	2300      	movs	r3, #0
 8009664:	4c05      	ldr	r4, [pc, #20]	; (800967c <_sbrk_r+0x1c>)
 8009666:	4605      	mov	r5, r0
 8009668:	4608      	mov	r0, r1
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	f7f7 fb82 	bl	8000d74 <_sbrk>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_sbrk_r+0x1a>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	b103      	cbz	r3, 800967a <_sbrk_r+0x1a>
 8009678:	602b      	str	r3, [r5, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20004bac 	.word	0x20004bac

08009680 <__malloc_lock>:
 8009680:	4770      	bx	lr

08009682 <__malloc_unlock>:
 8009682:	4770      	bx	lr

08009684 <_init>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr

08009690 <_fini>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr
