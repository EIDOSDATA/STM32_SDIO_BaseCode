
SDIO_TEST_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d670  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021a48  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f23c  0802f23c  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802f23c  0802f23c  0003f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f244  0802f244  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f244  0802f244  0003f244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f248  0802f248  0003f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802f24c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f54  200001e0  0802f42c  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002134  0802f42c  00042134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff4c  00000000  00000000  00040209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000470b  00000000  00000000  00060155  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f8  00000000  00000000  00064860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  00065e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026143  00000000  00000000  00067228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016be4  00000000  00000000  0008d36b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce642  00000000  00000000  000a3f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  0017260c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800d7dc 	.word	0x0800d7dc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	0800d7dc 	.word	0x0800d7dc

080001c4 <strlen>:
 80001c4:	4603      	mov	r3, r0
 80001c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ca:	2a00      	cmp	r2, #0
 80001cc:	d1fb      	bne.n	80001c6 <strlen+0x2>
 80001ce:	1a18      	subs	r0, r3, r0
 80001d0:	3801      	subs	r0, #1
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	4604      	mov	r4, r0
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0c03 	orr.w	ip, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	fbbc f7fe 	udiv	r7, ip, lr
 800023a:	fa1f f885 	uxth.w	r8, r5
 800023e:	fb0e c317 	mls	r3, lr, r7, ip
 8000242:	fb07 f908 	mul.w	r9, r7, r8
 8000246:	0c21      	lsrs	r1, r4, #16
 8000248:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024c:	4599      	cmp	r9, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 31ff 	add.w	r1, r7, #4294967295
 8000256:	f080 811c 	bcs.w	8000492 <__udivmoddi4+0x28e>
 800025a:	4599      	cmp	r9, r3
 800025c:	f240 8119 	bls.w	8000492 <__udivmoddi4+0x28e>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	eba3 0309 	sub.w	r3, r3, r9
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	fb00 f108 	mul.w	r1, r0, r8
 8000274:	b2a4      	uxth	r4, r4
 8000276:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027a:	42a1      	cmp	r1, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	192c      	adds	r4, r5, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 8107 	bcs.w	8000496 <__udivmoddi4+0x292>
 8000288:	42a1      	cmp	r1, r4
 800028a:	f240 8104 	bls.w	8000496 <__udivmoddi4+0x292>
 800028e:	3802      	subs	r0, #2
 8000290:	442c      	add	r4, r5
 8000292:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000296:	2700      	movs	r7, #0
 8000298:	1a64      	subs	r4, r4, r1
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	2300      	movs	r3, #0
 800029e:	40d4      	lsrs	r4, r2
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ec 	beq.w	800048c <__udivmoddi4+0x288>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d148      	bne.n	800035c <__udivmoddi4+0x158>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fb 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469c      	mov	ip, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	2701      	movs	r7, #1
 80002f8:	1b49      	subs	r1, r1, r5
 80002fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fe:	fa1f f985 	uxth.w	r9, r5
 8000302:	fbb1 fef8 	udiv	lr, r1, r8
 8000306:	fb08 111e 	mls	r1, r8, lr, r1
 800030a:	fb09 f00e 	mul.w	r0, r9, lr
 800030e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000312:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000316:	4298      	cmp	r0, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x126>
 800031a:	18eb      	adds	r3, r5, r3
 800031c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x124>
 8000322:	4298      	cmp	r0, r3
 8000324:	f200 80cd 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 8000328:	468e      	mov	lr, r1
 800032a:	1a1b      	subs	r3, r3, r0
 800032c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000330:	fb08 3310 	mls	r3, r8, r0, r3
 8000334:	fb09 f900 	mul.w	r9, r9, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033e:	45a1      	cmp	r9, r4
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000342:	192c      	adds	r4, r5, r4
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a1      	cmp	r9, r4
 800034c:	f200 80b6 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000350:	4618      	mov	r0, r3
 8000352:	eba4 0409 	sub.w	r4, r4, r9
 8000356:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800035a:	e79e      	b.n	800029a <__udivmoddi4+0x96>
 800035c:	f1c7 0520 	rsb	r5, r7, #32
 8000360:	40bb      	lsls	r3, r7
 8000362:	fa22 fc05 	lsr.w	ip, r2, r5
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa21 f405 	lsr.w	r4, r1, r5
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fbb4 f9fe 	udiv	r9, r4, lr
 8000376:	fa1f f88c 	uxth.w	r8, ip
 800037a:	fb0e 4419 	mls	r4, lr, r9, r4
 800037e:	fa20 f305 	lsr.w	r3, r0, r5
 8000382:	40b9      	lsls	r1, r7
 8000384:	fb09 fa08 	mul.w	sl, r9, r8
 8000388:	4319      	orrs	r1, r3
 800038a:	0c0b      	lsrs	r3, r1, #16
 800038c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000390:	45a2      	cmp	sl, r4
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f307 	lsl.w	r3, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	45a2      	cmp	sl, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	eba4 040a 	sub.w	r4, r4, sl
 80003b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80003c0:	fb00 fa08 	mul.w	sl, r0, r8
 80003c4:	b289      	uxth	r1, r1
 80003c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x1dc>
 80003ce:	eb1c 0404 	adds.w	r4, ip, r4
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003dc:	3802      	subs	r0, #2
 80003de:	4464      	add	r4, ip
 80003e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e4:	fba0 8902 	umull	r8, r9, r0, r2
 80003e8:	eba4 040a 	sub.w	r4, r4, sl
 80003ec:	454c      	cmp	r4, r9
 80003ee:	4641      	mov	r1, r8
 80003f0:	46ce      	mov	lr, r9
 80003f2:	d354      	bcc.n	800049e <__udivmoddi4+0x29a>
 80003f4:	d051      	beq.n	800049a <__udivmoddi4+0x296>
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d069      	beq.n	80004ce <__udivmoddi4+0x2ca>
 80003fa:	1a5a      	subs	r2, r3, r1
 80003fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000400:	fa04 f505 	lsl.w	r5, r4, r5
 8000404:	fa22 f307 	lsr.w	r3, r2, r7
 8000408:	40fc      	lsrs	r4, r7
 800040a:	431d      	orrs	r5, r3
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	4095      	lsls	r5, r2
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	fa21 f003 	lsr.w	r0, r1, r3
 800041e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000422:	fbb0 f7f8 	udiv	r7, r0, r8
 8000426:	fa1f f985 	uxth.w	r9, r5
 800042a:	fb08 0017 	mls	r0, r8, r7, r0
 800042e:	fa24 f303 	lsr.w	r3, r4, r3
 8000432:	4091      	lsls	r1, r2
 8000434:	fb07 fc09 	mul.w	ip, r7, r9
 8000438:	430b      	orrs	r3, r1
 800043a:	0c19      	lsrs	r1, r3, #16
 800043c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000440:	458c      	cmp	ip, r1
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x254>
 8000448:	1869      	adds	r1, r5, r1
 800044a:	f107 30ff 	add.w	r0, r7, #4294967295
 800044e:	d231      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000450:	458c      	cmp	ip, r1
 8000452:	d92f      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	3f02      	subs	r7, #2
 8000456:	4429      	add	r1, r5
 8000458:	eba1 010c 	sub.w	r1, r1, ip
 800045c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000460:	fb08 1c10 	mls	ip, r8, r0, r1
 8000464:	fb00 fe09 	mul.w	lr, r0, r9
 8000468:	b299      	uxth	r1, r3
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 33ff 	add.w	r3, r0, #4294967295
 8000478:	d218      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047a:	458e      	cmp	lr, r1
 800047c:	d916      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	eba1 010e 	sub.w	r1, r1, lr
 8000486:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048a:	e73a      	b.n	8000302 <__udivmoddi4+0xfe>
 800048c:	4637      	mov	r7, r6
 800048e:	4630      	mov	r0, r6
 8000490:	e708      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000492:	460f      	mov	r7, r1
 8000494:	e6e6      	b.n	8000264 <__udivmoddi4+0x60>
 8000496:	4618      	mov	r0, r3
 8000498:	e6fb      	b.n	8000292 <__udivmoddi4+0x8e>
 800049a:	4543      	cmp	r3, r8
 800049c:	d2ab      	bcs.n	80003f6 <__udivmoddi4+0x1f2>
 800049e:	ebb8 0102 	subs.w	r1, r8, r2
 80004a2:	eb69 020c 	sbc.w	r2, r9, ip
 80004a6:	3801      	subs	r0, #1
 80004a8:	4696      	mov	lr, r2
 80004aa:	e7a4      	b.n	80003f6 <__udivmoddi4+0x1f2>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e7e8      	b.n	8000482 <__udivmoddi4+0x27e>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1dc>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e7cf      	b.n	8000458 <__udivmoddi4+0x254>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	442c      	add	r4, r5
 80004c0:	e747      	b.n	8000352 <__udivmoddi4+0x14e>
 80004c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c6:	442b      	add	r3, r5
 80004c8:	e72f      	b.n	800032a <__udivmoddi4+0x126>
 80004ca:	4638      	mov	r0, r7
 80004cc:	e707      	b.n	80002de <__udivmoddi4+0xda>
 80004ce:	4637      	mov	r7, r6
 80004d0:	e6e8      	b.n	80002a4 <__udivmoddi4+0xa0>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d013      	beq.n	8000518 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00b      	beq.n	8000518 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	e000      	b.n	8000504 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000502:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000504:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000534:	d022      	beq.n	800057c <HAL_GPIO_EXTI_Callback+0x58>
 8000536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800053a:	dc04      	bgt.n	8000546 <HAL_GPIO_EXTI_Callback+0x22>
 800053c:	2b40      	cmp	r3, #64	; 0x40
 800053e:	d009      	beq.n	8000554 <HAL_GPIO_EXTI_Callback+0x30>
 8000540:	2b80      	cmp	r3, #128	; 0x80
 8000542:	d011      	beq.n	8000568 <HAL_GPIO_EXTI_Callback+0x44>
		break;
	case GPIO_PIN_14:
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		break;
	}
}
 8000544:	e02a      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
	switch (GPIO_Pin)
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	d01c      	beq.n	8000586 <HAL_GPIO_EXTI_Callback+0x62>
 800054c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000550:	d01e      	beq.n	8000590 <HAL_GPIO_EXTI_Callback+0x6c>
}
 8000552:	e023      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('6');
 8000554:	2036      	movs	r0, #54	; 0x36
 8000556:	f7ff ffbf 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\r');
 800055a:	200d      	movs	r0, #13
 800055c:	f7ff ffbc 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000560:	200a      	movs	r0, #10
 8000562:	f7ff ffb9 	bl	80004d8 <ITM_SendChar>
		break;
 8000566:	e019      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		ITM_SendChar('7');
 8000568:	2037      	movs	r0, #55	; 0x37
 800056a:	f7ff ffb5 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\r');
 800056e:	200d      	movs	r0, #13
 8000570:	f7ff ffb2 	bl	80004d8 <ITM_SendChar>
		ITM_SendChar('\n');
 8000574:	200a      	movs	r0, #10
 8000576:	f7ff ffaf 	bl	80004d8 <ITM_SendChar>
		break;
 800057a:	e00f      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800057c:	2180      	movs	r1, #128	; 0x80
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000580:	f002 f87d 	bl	800267e <HAL_GPIO_TogglePin>
		break;
 8000584:	e00a      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000586:	2101      	movs	r1, #1
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x80>)
 800058a:	f002 f878 	bl	800267e <HAL_GPIO_TogglePin>
		break;
 800058e:	e005      	b.n	800059c <HAL_GPIO_EXTI_Callback+0x78>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000596:	f002 f872 	bl	800267e <HAL_GPIO_TogglePin>
		break;
 800059a:	bf00      	nop
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020400 	.word	0x40020400

080005a8 <ITM_SendStr>:

void ITM_SendStr(char *str)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	while (*str)
 80005b0:	e007      	b.n	80005c2 <ITM_SendStr+0x1a>
	{
		ITM_SendChar(*str);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff8e 	bl	80004d8 <ITM_SendChar>
		str++;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
	while (*str)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f3      	bne.n	80005b2 <ITM_SendStr+0xa>
	}
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	f5ad 6dae 	sub.w	sp, sp, #1392	; 0x570
 80005da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005dc:	f000 fd80 	bl	80010e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e0:	f000 f86c 	bl	80006bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e4:	f000 f96c 	bl	80008c0 <MX_GPIO_Init>
	MX_DMA_Init();
 80005e8:	f000 f942 	bl	8000870 <MX_DMA_Init>
	MX_ETH_Init();
 80005ec:	f000 f8ae 	bl	800074c <MX_ETH_Init>
	MX_USART3_UART_Init();
 80005f0:	f000 f914 	bl	800081c <MX_USART3_UART_Init>
	MX_USB_DEVICE_Init();
 80005f4:	f00b ffc4 	bl	800c580 <MX_USB_DEVICE_Init>
	MX_SDIO_SD_Init();
 80005f8:	f000 f8f0 	bl	80007dc <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 80005fc:	f007 fbcc 	bl	8007d98 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f000 fddb 	bl	80011bc <HAL_Delay>
	DIR dp;
	FIL temp;
	FILINFO fnp;
	char buf[100];
	volatile int res;
	res = f_mount(&SDFatFS, SDPath, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	4926      	ldr	r1, [pc, #152]	; (80006a4 <main+0xd0>)
 800060a:	4827      	ldr	r0, [pc, #156]	; (80006a8 <main+0xd4>)
 800060c:	f00b f946 	bl	800b89c <f_mount>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000618:	601a      	str	r2, [r3, #0]
	sprintf(buf, "f_mount res=%d\r\n", res);
 800061a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000624:	4921      	ldr	r1, [pc, #132]	; (80006ac <main+0xd8>)
 8000626:	4618      	mov	r0, r3
 8000628:	f00c fd86 	bl	800d138 <siprintf>
	ITM_SendStr(buf);
 800062c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffb9 	bl	80005a8 <ITM_SendStr>
	res = f_open(&temp, "WriteTest.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8000636:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800063a:	220a      	movs	r2, #10
 800063c:	491c      	ldr	r1, [pc, #112]	; (80006b0 <main+0xdc>)
 800063e:	4618      	mov	r0, r3
 8000640:	f00b f974 	bl	800b92c <f_open>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800064c:	601a      	str	r2, [r3, #0]

	char tmp[] = "이미 탈주할 사람의 메시지 입니다.\r\n"
 800064e:	463b      	mov	r3, r7
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <main+0xe0>)
 8000652:	4618      	mov	r0, r3
 8000654:	4611      	mov	r1, r2
 8000656:	2392      	movs	r3, #146	; 0x92
 8000658:	461a      	mov	r2, r3
 800065a:	f00c fca3 	bl	800cfa4 <memcpy>
			"전 강해지기 위해서 탈주하겠습니다!\r\n"
			"아 하하하ㅏ하하하하하ㅏ하하하\r\n";

	f_write(&temp, tmp, strlen(tmp), &res);
 800065e:	463b      	mov	r3, r7
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fdaf 	bl	80001c4 <strlen>
 8000666:	4602      	mov	r2, r0
 8000668:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800066c:	4639      	mov	r1, r7
 800066e:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8000672:	f00b fb3f 	bl	800bcf4 <f_write>
	f_close(&temp);
 8000676:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800067a:	4618      	mov	r0, r3
 800067c:	f00b fd6b 	bl	800c156 <f_close>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <main+0xe4>)
 8000686:	f001 ffe2 	bl	800264e <HAL_GPIO_WritePin>
		HAL_Delay(30);
 800068a:	201e      	movs	r0, #30
 800068c:	f000 fd96 	bl	80011bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0xe4>)
 8000696:	f001 ffda 	bl	800264e <HAL_GPIO_WritePin>
		HAL_Delay(470);
 800069a:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800069e:	f000 fd8d 	bl	80011bc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, SET);
 80006a2:	e7ed      	b.n	8000680 <main+0xac>
 80006a4:	2000040c 	.word	0x2000040c
 80006a8:	2000063c 	.word	0x2000063c
 80006ac:	0800d7f4 	.word	0x0800d7f4
 80006b0:	0800d808 	.word	0x0800d808
 80006b4:	0800d818 	.word	0x0800d818
 80006b8:	40021800 	.word	0x40021800

080006bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b092      	sub	sp, #72	; 0x48
 80006c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00c fc75 	bl	800cfba <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e2:	2301      	movs	r3, #1
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2310      	movs	r3, #16
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2300      	movs	r3, #0
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 80006f2:	230d      	movs	r3, #13
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 80006f6:	23c3      	movs	r3, #195	; 0xc3
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006fe:	2305      	movs	r3, #5
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	4618      	mov	r0, r3
 8000708:	f003 f940 	bl	800398c <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x5a>
	{
		Error_Handler();
 8000712:	f000 f9bd 	bl	8000a90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000726:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2103      	movs	r1, #3
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fb7a 	bl	8003e2c <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x86>
	{
		Error_Handler();
 800073e:	f000 f9a7 	bl	8000a90 <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3748      	adds	r7, #72	; 0x48
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ETH_Init+0x88>)
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_ETH_Init+0x8c>)
 8000754:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_ETH_Init+0x88>)
 8000758:	2201      	movs	r2, #1
 800075a:	605a      	str	r2, [r3, #4]
	heth.Init.Speed = ETH_SPEED_100M;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ETH_Init+0x88>)
 800075e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000762:	609a      	str	r2, [r3, #8]
	heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_ETH_Init+0x88>)
 8000766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076a:	60da      	str	r2, [r3, #12]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_ETH_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_ETH_Init+0x88>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_ETH_Init+0x88>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	2280      	movs	r2, #128	; 0x80
 8000782:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_ETH_Init+0x88>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	3302      	adds	r3, #2
 800078a:	22e1      	movs	r2, #225	; 0xe1
 800078c:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_ETH_Init+0x88>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	3303      	adds	r3, #3
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_ETH_Init+0x88>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	3304      	adds	r3, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_ETH_Init+0x88>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	3305      	adds	r3, #5
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_ETH_Init+0x88>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_ETH_Init+0x88>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_ETH_Init+0x88>)
 80007ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007be:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_ETH_Init+0x88>)
 80007c2:	f001 f933 	bl	8001a2c <HAL_ETH_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ETH_Init+0x84>
	{
		Error_Handler();
 80007cc:	f000 f960 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200003bc 	.word	0x200003bc
 80007d8:	40028000 	.word	0x40028000

080007dc <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <MX_SDIO_SD_Init+0x3c>)
 80007e4:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 10;
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <MX_SDIO_SD_Init+0x38>)
 8000806:	220a      	movs	r2, #10
 8000808:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000338 	.word	0x20000338
 8000818:	40012c00 	.word	0x40012c00

0800081c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART3_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART3_UART_Init+0x4c>)
 8000854:	f005 f90e 	bl	8005a74 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800085e:	f000 f917 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000298 	.word	0x20000298
 800086c:	40004800 	.word	0x40004800

08000870 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_DMA_Init+0x4c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <MX_DMA_Init+0x4c>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_DMA_Init+0x4c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2106      	movs	r1, #6
 8000896:	203b      	movs	r0, #59	; 0x3b
 8000898:	f000 fd89 	bl	80013ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800089c:	203b      	movs	r0, #59	; 0x3b
 800089e:	f000 fda2 	bl	80013e6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2106      	movs	r1, #6
 80008a6:	2045      	movs	r0, #69	; 0x45
 80008a8:	f000 fd81 	bl	80013ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008ac:	2045      	movs	r0, #69	; 0x45
 80008ae:	f000 fd9a 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b67      	ldr	r3, [pc, #412]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a66      	ldr	r2, [pc, #408]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b64      	ldr	r3, [pc, #400]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a58      	ldr	r2, [pc, #352]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b52      	ldr	r3, [pc, #328]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a51      	ldr	r2, [pc, #324]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b4f      	ldr	r3, [pc, #316]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b4b      	ldr	r3, [pc, #300]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a4a      	ldr	r2, [pc, #296]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b48      	ldr	r3, [pc, #288]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b41      	ldr	r3, [pc, #260]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a3c      	ldr	r2, [pc, #240]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b3a      	ldr	r3, [pc, #232]	; (8000a78 <MX_GPIO_Init+0x1b8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a0:	4836      	ldr	r0, [pc, #216]	; (8000a7c <MX_GPIO_Init+0x1bc>)
 80009a2:	f001 fe54 	bl	800264e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4835      	ldr	r0, [pc, #212]	; (8000a80 <MX_GPIO_Init+0x1c0>)
 80009ac:	f001 fe4f 	bl	800264e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : USER_Btn_Pin PC6 PC7 */
	GPIO_InitStruct.Pin = USER_Btn_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 80009b0:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 80009b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	4b33      	ldr	r3, [pc, #204]	; (8000a84 <MX_GPIO_Init+0x1c4>)
 80009b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4830      	ldr	r0, [pc, #192]	; (8000a88 <MX_GPIO_Init+0x1c8>)
 80009c6:	f001 fc8d 	bl	80022e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80009ca:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4826      	ldr	r0, [pc, #152]	; (8000a7c <MX_GPIO_Init+0x1bc>)
 80009e4:	f001 fc7e 	bl	80022e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE11 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14;
 80009e8:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 80009ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <MX_GPIO_Init+0x1c4>)
 80009f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_GPIO_Init+0x1cc>)
 80009fe:	f001 fc71 	bl	80022e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a02:	2304      	movs	r3, #4
 8000a04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MX_GPIO_Init+0x1c0>)
 8000a16:	f001 fc65 	bl	80022e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_GPIO_Init+0x1c0>)
 8000a32:	f001 fc57 	bl	80022e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <MX_GPIO_Init+0x1c0>)
 8000a4a:	f001 fc4b 	bl	80022e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2017      	movs	r0, #23
 8000a54:	f000 fcab 	bl	80013ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a58:	2017      	movs	r0, #23
 8000a5a:	f000 fcc4 	bl	80013e6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2028      	movs	r0, #40	; 0x28
 8000a64:	f000 fca3 	bl	80013ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a68:	2028      	movs	r0, #40	; 0x28
 8000a6a:	f000 fcbc 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3730      	adds	r7, #48	; 0x30
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40021800 	.word	0x40021800
 8000a84:	10110000 	.word	0x10110000
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40021000 	.word	0x40021000

08000a90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x48>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x48>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x48>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x48>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_MspInit+0x48>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_MspInit+0x48>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a55      	ldr	r2, [pc, #340]	; (8000c5c <HAL_ETH_MspInit+0x174>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	f040 80a4 	bne.w	8000c54 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	4b53      	ldr	r3, [pc, #332]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a52      	ldr	r2, [pc, #328]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b50      	ldr	r3, [pc, #320]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a4b      	ldr	r2, [pc, #300]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b52:	6313      	str	r3, [r2, #48]	; 0x30
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b3b      	ldr	r3, [pc, #236]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a36      	ldr	r2, [pc, #216]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd0:	2332      	movs	r3, #50	; 0x32
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	; (8000c64 <HAL_ETH_MspInit+0x17c>)
 8000bec:	f001 fb7a 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf0:	2386      	movs	r3, #134	; 0x86
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	; (8000c68 <HAL_ETH_MspInit+0x180>)
 8000c0c:	f001 fb6a 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	; (8000c6c <HAL_ETH_MspInit+0x184>)
 8000c2e:	f001 fb59 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <HAL_ETH_MspInit+0x188>)
 8000c50:	f001 fb48 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	; 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40028000 	.word	0x40028000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40021800 	.word	0x40021800

08000c74 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a68      	ldr	r2, [pc, #416]	; (8000e34 <HAL_SD_MspInit+0x1c0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f040 80c9 	bne.w	8000e2a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	4b66      	ldr	r3, [pc, #408]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	4a65      	ldr	r2, [pc, #404]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca8:	4b63      	ldr	r3, [pc, #396]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b5f      	ldr	r3, [pc, #380]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a5e      	ldr	r2, [pc, #376]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b58      	ldr	r3, [pc, #352]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a57      	ldr	r2, [pc, #348]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <HAL_SD_MspInit+0x1c4>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cf0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	484c      	ldr	r0, [pc, #304]	; (8000e3c <HAL_SD_MspInit+0x1c8>)
 8000d0a:	f001 faeb 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d1e:	230c      	movs	r3, #12
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4845      	ldr	r0, [pc, #276]	; (8000e40 <HAL_SD_MspInit+0x1cc>)
 8000d2a:	f001 fadb 	bl	80022e4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d30:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <HAL_SD_MspInit+0x1d4>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000d34:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d3a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d3c:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000d60:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d62:	2220      	movs	r2, #32
 8000d64:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d72:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d88:	482e      	ldr	r0, [pc, #184]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d8a:	f000 fb47 	bl	800141c <HAL_DMA_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000d94:	f7ff fe7c 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000d9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d9e:	4a29      	ldr	r2, [pc, #164]	; (8000e44 <HAL_SD_MspInit+0x1d0>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000da6:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <HAL_SD_MspInit+0x1dc>)
 8000da8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dcc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dd8:	2220      	movs	r2, #32
 8000dda:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000dea:	2203      	movs	r2, #3
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000df0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000df8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000dfe:	4813      	ldr	r0, [pc, #76]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000e00:	f000 fb0c 	bl	800141c <HAL_DMA_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000e0a:	f7ff fe41 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_SD_MspInit+0x1d8>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2031      	movs	r0, #49	; 0x31
 8000e20:	f000 fac5 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e24:	2031      	movs	r0, #49	; 0x31
 8000e26:	f000 fade 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012c00 	.word	0x40012c00
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	200002d8 	.word	0x200002d8
 8000e48:	400264a0 	.word	0x400264a0
 8000e4c:	20000238 	.word	0x20000238
 8000e50:	40026458 	.word	0x40026458

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_UART_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12c      	bne.n	8000ed0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_UART_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_UART_MspInit+0x8c>)
 8000ecc:	f001 fa0a 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004800 	.word	0x40004800
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <BusFault_Handler+0x4>

08000f02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f928 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f3c:	2040      	movs	r0, #64	; 0x40
 8000f3e:	f001 fbb7 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000f42:	2080      	movs	r0, #128	; 0x80
 8000f44:	f001 fbb4 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f50:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f54:	f001 fbac 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f5c:	f001 fba8 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f64:	f001 fba4 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f6c:	f001 fba0 	bl	80026b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <SDIO_IRQHandler+0x10>)
 8000f7a:	f003 fd95 	bl	8004aa8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000338 	.word	0x20000338

08000f88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA2_Stream3_IRQHandler+0x10>)
 8000f8e:	f000 fb15 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000238 	.word	0x20000238

08000f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <OTG_FS_IRQHandler+0x10>)
 8000fa2:	f001 fcdc 	bl	800295e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20001d30 	.word	0x20001d30

08000fb0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <DMA2_Stream6_IRQHandler+0x10>)
 8000fb6:	f000 fb01 	bl	80015bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002d8 	.word	0x200002d8

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f00b ff9c 	bl	800cf30 <__errno>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20020000 	.word	0x20020000
 8001024:	00000400 	.word	0x00000400
 8001028:	200001fc 	.word	0x200001fc
 800102c:	20002138 	.word	0x20002138

08001030 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <SystemInit+0x50>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <SystemInit+0x50>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <SystemInit+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <SystemInit+0x50>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <SystemInit+0x50>)
 800104c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <SystemInit+0x50>)
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SystemInit+0x54>)
 800105a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <SystemInit+0x50>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <SystemInit+0x50>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SystemInit+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <SystemInit+0x58>)
 8001070:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001074:	609a      	str	r2, [r3, #8]
#endif
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	24003010 	.word	0x24003010
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x14>
 8001090:	2100      	movs	r1, #0
 8001092:	e003      	b.n	800109c <LoopCopyDataInit>

08001094 <CopyDataInit>:
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <LoopFillZerobss+0x18>)
 8001096:	585b      	ldr	r3, [r3, r1]
 8001098:	5043      	str	r3, [r0, r1]
 800109a:	3104      	adds	r1, #4

0800109c <LoopCopyDataInit>:
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopFillZerobss+0x1c>)
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopFillZerobss+0x20>)
 80010a0:	1842      	adds	r2, r0, r1
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3f6      	bcc.n	8001094 <CopyDataInit>
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x24>)
 80010a8:	e002      	b.n	80010b0 <LoopFillZerobss>

080010aa <FillZerobss>:
 80010aa:	2300      	movs	r3, #0
 80010ac:	f842 3b04 	str.w	r3, [r2], #4

080010b0 <LoopFillZerobss>:
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <LoopFillZerobss+0x28>)
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3f9      	bcc.n	80010aa <FillZerobss>
 80010b6:	f7ff ffbb 	bl	8001030 <SystemInit>
 80010ba:	f00b ff3f 	bl	800cf3c <__libc_init_array>
 80010be:	f7ff fa89 	bl	80005d4 <main>
 80010c2:	4770      	bx	lr
 80010c4:	20020000 	.word	0x20020000
 80010c8:	0802f24c 	.word	0x0802f24c
 80010cc:	20000000 	.word	0x20000000
 80010d0:	200001e0 	.word	0x200001e0
 80010d4:	200001e0 	.word	0x200001e0
 80010d8:	20002134 	.word	0x20002134

080010dc <ADC_IRQHandler>:
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_Init+0x40>)
 80010ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_Init+0x40>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_Init+0x40>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001108:	2003      	movs	r0, #3
 800110a:	f000 f945 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f808 	bl	8001124 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001114:	f7ff fcc2 	bl	8000a9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023c00 	.word	0x40023c00

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_InitTick+0x54>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x58>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f95d 	bl	8001402 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f925 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x5c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	20000008 	.word	0x20000008
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x1c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_IncTick+0x20>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_IncTick+0x20>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000404 	.word	0x20000404

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <HAL_GetTick+0x10>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	20000404 	.word	0x20000404

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff fff0 	bl	80011a8 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_Delay+0x40>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffe0 	bl	80011a8 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000008 	.word	0x20000008

08001200 <__NVIC_SetPriorityGrouping>:
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <__NVIC_EnableIRQ+0x34>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <SysTick_Config>:
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff90 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff2d 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff42 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff90 	bl	80012f0 <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5f 	bl	800129c <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff35 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff febe 	bl	80011a8 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e099      	b.n	800156c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001458:	e00f      	b.n	800147a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145a:	f7ff fea5 	bl	80011a8 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b05      	cmp	r3, #5
 8001466:	d908      	bls.n	800147a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e078      	b.n	800156c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e8      	bne.n	800145a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <HAL_DMA_Init+0x158>)
 8001494:	4013      	ands	r3, r2
 8001496:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4313      	orrs	r3, r2
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f023 0307 	bic.w	r3, r3, #7
 80014fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	2b04      	cmp	r3, #4
 800150c:	d117      	bne.n	800153e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fa09 	bl	8001938 <DMA_CheckFifoParam>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2240      	movs	r2, #64	; 0x40
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800153a:	2301      	movs	r3, #1
 800153c:	e016      	b.n	800156c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f9c2 	bl	80018d0 <DMA_CalcBaseAndBitshift>
 800154c:	4603      	mov	r3, r0
 800154e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	223f      	movs	r2, #63	; 0x3f
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f010803f 	.word	0xf010803f

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d004      	beq.n	8001596 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00c      	b.n	80015b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2205      	movs	r2, #5
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <HAL_DMA_IRQHandler+0x258>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a92      	ldr	r2, [pc, #584]	; (8001818 <HAL_DMA_IRQHandler+0x25c>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a9b      	lsrs	r3, r3, #10
 80015d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2208      	movs	r2, #8
 80015e8:	409a      	lsls	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d013      	beq.n	8001628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2208      	movs	r2, #8
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162c:	2201      	movs	r2, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d012      	beq.n	800165e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164a:	2201      	movs	r2, #1
 800164c:	409a      	lsls	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f043 0202 	orr.w	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2204      	movs	r2, #4
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d012      	beq.n	8001694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2204      	movs	r2, #4
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168c:	f043 0204 	orr.w	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2210      	movs	r2, #16
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4013      	ands	r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d043      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03c      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b6:	2210      	movs	r2, #16
 80016b8:	409a      	lsls	r2, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d018      	beq.n	80016fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d024      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
 80016ea:	e01f      	b.n	800172c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d01b      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
 80016fc:	e016      	b.n	800172c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0208 	bic.w	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2220      	movs	r2, #32
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 808e 	beq.w	800185a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8086 	beq.w	800185a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	2220      	movs	r2, #32
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b05      	cmp	r3, #5
 8001764:	d136      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0216 	bic.w	r2, r2, #22
 8001774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <HAL_DMA_IRQHandler+0x1da>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0208 	bic.w	r2, r2, #8
 80017a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	223f      	movs	r2, #63	; 0x3f
 80017ac:	409a      	lsls	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d07d      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
        }
        return;
 80017d2:	e078      	b.n	80018c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d01c      	beq.n	800181c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d108      	bne.n	8001802 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d030      	beq.n	800185a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
 8001800:	e02b      	b.n	800185a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d027      	beq.n	800185a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
 8001812:	e022      	b.n	800185a <HAL_DMA_IRQHandler+0x29e>
 8001814:	20000000 	.word	0x20000000
 8001818:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0210 	bic.w	r2, r2, #16
 8001838:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185e:	2b00      	cmp	r3, #0
 8001860:	d032      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d022      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2205      	movs	r2, #5
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	3301      	adds	r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	429a      	cmp	r2, r3
 8001890:	d307      	bcc.n	80018a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f2      	bne.n	8001886 <HAL_DMA_IRQHandler+0x2ca>
 80018a0:	e000      	b.n	80018a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4798      	blx	r3
 80018c4:	e000      	b.n	80018c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018c6:	bf00      	nop
    }
  }
}
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop

080018d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	3b10      	subs	r3, #16
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <DMA_CalcBaseAndBitshift+0x60>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <DMA_CalcBaseAndBitshift+0x64>)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d909      	bls.n	8001912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001906:	f023 0303 	bic.w	r3, r3, #3
 800190a:	1d1a      	adds	r2, r3, #4
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	659a      	str	r2, [r3, #88]	; 0x58
 8001910:	e007      	b.n	8001922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	aaaaaaab 	.word	0xaaaaaaab
 8001934:	0800d954 	.word	0x0800d954

08001938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d11f      	bne.n	8001992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d855      	bhi.n	8001a04 <DMA_CheckFifoParam+0xcc>
 8001958:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <DMA_CheckFifoParam+0x28>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001971 	.word	0x08001971
 8001964:	08001983 	.word	0x08001983
 8001968:	08001971 	.word	0x08001971
 800196c:	08001a05 	.word	0x08001a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d045      	beq.n	8001a08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001980:	e042      	b.n	8001a08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800198a:	d13f      	bne.n	8001a0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001990:	e03c      	b.n	8001a0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800199a:	d121      	bne.n	80019e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d836      	bhi.n	8001a10 <DMA_CheckFifoParam+0xd8>
 80019a2:	a201      	add	r2, pc, #4	; (adr r2, 80019a8 <DMA_CheckFifoParam+0x70>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019bf 	.word	0x080019bf
 80019b0:	080019b9 	.word	0x080019b9
 80019b4:	080019d1 	.word	0x080019d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
      break;
 80019bc:	e02f      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d024      	beq.n	8001a14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ce:	e021      	b.n	8001a14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019d8:	d11e      	bne.n	8001a18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019de:	e01b      	b.n	8001a18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d902      	bls.n	80019ec <DMA_CheckFifoParam+0xb4>
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d003      	beq.n	80019f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019ea:	e018      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
      break;
 80019f0:	e015      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00e      	beq.n	8001a1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
      break;
 8001a02:	e00b      	b.n	8001a1c <DMA_CheckFifoParam+0xe4>
      break;
 8001a04:	bf00      	nop
 8001a06:	e00a      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e008      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;
 8001a0c:	bf00      	nop
 8001a0e:	e006      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;
 8001a10:	bf00      	nop
 8001a12:	e004      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;
 8001a14:	bf00      	nop
 8001a16:	e002      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;   
 8001a18:	bf00      	nop
 8001a1a:	e000      	b.n	8001a1e <DMA_CheckFifoParam+0xe6>
      break;
 8001a1c:	bf00      	nop
    }
  } 
  
  return status; 
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop

08001a2c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001a3c:	4ba3      	ldr	r3, [pc, #652]	; (8001ccc <HAL_ETH_Init+0x2a0>)
 8001a3e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e175      	b.n	8001d3e <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d106      	bne.n	8001a6c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff f83e 	bl	8000ae8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <HAL_ETH_Init+0x2a4>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	4a96      	ldr	r2, [pc, #600]	; (8001cd0 <HAL_ETH_Init+0x2a4>)
 8001a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7c:	4b94      	ldr	r3, [pc, #592]	; (8001cd0 <HAL_ETH_Init+0x2a4>)
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_ETH_Init+0x2a8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a91      	ldr	r2, [pc, #580]	; (8001cd4 <HAL_ETH_Init+0x2a8>)
 8001a8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a92:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_ETH_Init+0x2a8>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	498d      	ldr	r1, [pc, #564]	; (8001cd4 <HAL_ETH_Init+0x2a8>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aba:	f7ff fb75 	bl	80011a8 <HAL_GetTick>
 8001abe:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ac0:	e011      	b.n	8001ae6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001ac2:	f7ff fb71 	bl	80011a8 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ad0:	d909      	bls.n	8001ae6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e12b      	b.n	8001d3e <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e4      	bne.n	8001ac2 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f023 031c 	bic.w	r3, r3, #28
 8001b06:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b08:	f002 fb54 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 8001b0c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <HAL_ETH_Init+0x2ac>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d908      	bls.n	8001b28 <HAL_ETH_Init+0xfc>
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4a70      	ldr	r2, [pc, #448]	; (8001cdc <HAL_ETH_Init+0x2b0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d804      	bhi.n	8001b28 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e01a      	b.n	8001b5e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4a6c      	ldr	r2, [pc, #432]	; (8001cdc <HAL_ETH_Init+0x2b0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d908      	bls.n	8001b42 <HAL_ETH_Init+0x116>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_ETH_Init+0x2b4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d804      	bhi.n	8001b42 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f043 030c 	orr.w	r3, r3, #12
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	e00d      	b.n	8001b5e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_ETH_Init+0x2b4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d903      	bls.n	8001b52 <HAL_ETH_Init+0x126>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_ETH_Init+0x2b8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d904      	bls.n	8001b5c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	e000      	b.n	8001b5e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b5c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f953 	bl	8001e18 <HAL_ETH_WritePHYRegister>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b7c:	6939      	ldr	r1, [r7, #16]
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f9b0 	bl	8001ee4 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0d6      	b.n	8001d3e <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b90:	20ff      	movs	r0, #255	; 0xff
 8001b92:	f7ff fb13 	bl	80011bc <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a4 	beq.w	8001ce8 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff fb02 	bl	80011a8 <HAL_GetTick>
 8001ba4:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	461a      	mov	r2, r3
 8001bac:	2101      	movs	r1, #1
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8ca 	bl	8001d48 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001bb4:	f7ff faf8 	bl	80011a8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d90f      	bls.n	8001be6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001bca:	6939      	ldr	r1, [r7, #16]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f989 	bl	8001ee4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0ab      	b.n	8001d3e <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0da      	beq.n	8001ba6 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f90e 	bl	8001e18 <HAL_ETH_WritePHYRegister>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c06:	6939      	ldr	r1, [r7, #16]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f96b 	bl	8001ee4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e091      	b.n	8001d3e <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c1a:	f7ff fac5 	bl	80011a8 <HAL_GetTick>
 8001c1e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	461a      	mov	r2, r3
 8001c26:	2101      	movs	r1, #1
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f88d 	bl	8001d48 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c2e:	f7ff fabb 	bl	80011a8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d90f      	bls.n	8001c60 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c44:	6939      	ldr	r1, [r7, #16]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f94c 	bl	8001ee4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e06e      	b.n	8001d3e <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0da      	beq.n	8001c20 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	461a      	mov	r2, r3
 8001c70:	211f      	movs	r1, #31
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f868 	bl	8001d48 <HAL_ETH_ReadPHYRegister>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c82:	6939      	ldr	r1, [r7, #16]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f92d 	bl	8001ee4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e053      	b.n	8001d3e <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	e002      	b.n	8001cb0 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	e034      	b.n	8001d2c <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e02f      	b.n	8001d2c <HAL_ETH_Init+0x300>
 8001ccc:	03938700 	.word	0x03938700
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	01312cff 	.word	0x01312cff
 8001cdc:	02160ebf 	.word	0x02160ebf
 8001ce0:	039386ff 	.word	0x039386ff
 8001ce4:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f889 	bl	8001e18 <HAL_ETH_WritePHYRegister>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001d10:	6939      	ldr	r1, [r7, #16]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8e6 	bl	8001ee4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00c      	b.n	8001d3e <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d24:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d28:	f7ff fa48 	bl	80011bc <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d2c:	6939      	ldr	r1, [r7, #16]
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8d8 	bl	8001ee4 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3720      	adds	r7, #32
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop

08001d48 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	460b      	mov	r3, r1
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b82      	cmp	r3, #130	; 0x82
 8001d68:	d101      	bne.n	8001d6e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e050      	b.n	8001e10 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2282      	movs	r2, #130	; 0x82
 8001d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 031c 	and.w	r3, r3, #28
 8001d84:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8a1b      	ldrh	r3, [r3, #16]
 8001d8a:	02db      	lsls	r3, r3, #11
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	019b      	lsls	r3, r3, #6
 8001d98:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f023 0302 	bic.w	r3, r3, #2
 8001da8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dba:	f7ff f9f5 	bl	80011a8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc0:	e015      	b.n	8001dee <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001dc2:	f7ff f9f1 	bl	80011a8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d309      	bcc.n	8001de6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e014      	b.n	8001e10 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1e4      	bne.n	8001dc2 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	460b      	mov	r3, r1
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b42      	cmp	r3, #66	; 0x42
 8001e38:	d101      	bne.n	8001e3e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e04e      	b.n	8001edc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2242      	movs	r2, #66	; 0x42
 8001e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 031c 	and.w	r3, r3, #28
 8001e54:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8a1b      	ldrh	r3, [r3, #16]
 8001e5a:	02db      	lsls	r3, r3, #11
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e64:	897b      	ldrh	r3, [r7, #10]
 8001e66:	019b      	lsls	r3, r3, #6
 8001e68:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e94:	f7ff f988 	bl	80011a8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e9a:	e015      	b.n	8001ec8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e9c:	f7ff f984 	bl	80011a8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d309      	bcc.n	8001ec0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e00d      	b.n	8001edc <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e4      	bne.n	8001e9c <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0b0      	sub	sp, #192	; 0xc0
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f00:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f08:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f30:	e001      	b.n	8001f36 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f3a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f40:	2300      	movs	r3, #0
 8001f42:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fbc:	4bac      	ldr	r3, [pc, #688]	; (8002270 <ETH_MACDMAConfig+0x38c>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001fc8:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001fcc:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001fd0:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001fd6:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001fda:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001fde:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001fe4:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001fe8:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001fea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001fec:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001fee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001ff0:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001ff4:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001ff8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ffa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff f8cf 	bl	80011bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002026:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002028:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800202a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800202c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800202e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002030:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002036:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 800203c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800203e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002042:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002048:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800204c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002054:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002056:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff f8aa 	bl	80011bc <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002070:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800207a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002084:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002094:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002098:	4013      	ands	r3, r2
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800209e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80020a8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020ae:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 80020b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020b4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80020ba:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80020bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020c0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80020c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d4:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff f86b 	bl	80011bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ee:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80020f0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80020f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff f856 	bl	80011bc <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002118:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800211e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002122:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800212c:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800213e:	2304      	movs	r3, #4
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800214e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800215e:	2300      	movs	r3, #0
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002162:	2300      	movs	r3, #0
 8002164:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216e:	3318      	adds	r3, #24
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002176:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <ETH_MACDMAConfig+0x390>)
 800217c:	4013      	ands	r3, r2
 800217e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002182:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002184:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002186:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002188:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800218a:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 800218c:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 800218e:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002190:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002192:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002194:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8002196:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002198:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800219a:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 800219e:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 80021a2:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80021a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	3318      	adds	r3, #24
 80021b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c6:	3318      	adds	r3, #24
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7fe fff4 	bl	80011bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021dc:	3318      	adds	r3, #24
 80021de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e2:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80021e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80021e8:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80021ec:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021f0:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80021f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80021f4:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80021f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f8:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80021fa:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80021fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80021fe:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220c:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe ffcd 	bl	80011bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222e:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10f      	bne.n	8002258 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	331c      	adds	r3, #28
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800224c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002254:	331c      	adds	r3, #28
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	461a      	mov	r2, r3
 800225e:	2100      	movs	r1, #0
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f809 	bl	8002278 <ETH_MACAddressConfig>
}
 8002266:	bf00      	nop
 8002268:	37c0      	adds	r7, #192	; 0xc0
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	ff20810f 	.word	0xff20810f
 8002274:	f8de3f23 	.word	0xf8de3f23

08002278 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3305      	adds	r3, #5
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	3204      	adds	r2, #4
 8002290:	7812      	ldrb	r2, [r2, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <ETH_MACAddressConfig+0x64>)
 800229a:	4413      	add	r3, r2
 800229c:	461a      	mov	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3303      	adds	r3, #3
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	061a      	lsls	r2, r3, #24
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3302      	adds	r3, #2
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3301      	adds	r3, #1
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	4313      	orrs	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <ETH_MACAddressConfig+0x68>)
 80022ca:	4413      	add	r3, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40028040 	.word	0x40028040
 80022e0:	40028044 	.word	0x40028044

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	e16f      	b.n	80025d4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2101      	movs	r1, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	4013      	ands	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8161 	beq.w	80025ce <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d00b      	beq.n	800232c <HAL_GPIO_Init+0x48>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002320:	2b11      	cmp	r3, #17
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d130      	bne.n	800238e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002362:	2201      	movs	r2, #1
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	f003 0201 	and.w	r2, r3, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4013      	ands	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0xea>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b12      	cmp	r3, #18
 80023cc:	d123      	bne.n	8002416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0203 	and.w	r2, r3, #3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80bb 	beq.w	80025ce <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b64      	ldr	r3, [pc, #400]	; (80025f0 <HAL_GPIO_Init+0x30c>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	4a63      	ldr	r2, [pc, #396]	; (80025f0 <HAL_GPIO_Init+0x30c>)
 8002462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002466:	6453      	str	r3, [r2, #68]	; 0x44
 8002468:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_GPIO_Init+0x30c>)
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002474:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <HAL_GPIO_Init+0x310>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3302      	adds	r3, #2
 800247c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x314>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d031      	beq.n	8002504 <HAL_GPIO_Init+0x220>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_GPIO_Init+0x318>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d02b      	beq.n	8002500 <HAL_GPIO_Init+0x21c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a55      	ldr	r2, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x31c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d025      	beq.n	80024fc <HAL_GPIO_Init+0x218>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a54      	ldr	r2, [pc, #336]	; (8002604 <HAL_GPIO_Init+0x320>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01f      	beq.n	80024f8 <HAL_GPIO_Init+0x214>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a53      	ldr	r2, [pc, #332]	; (8002608 <HAL_GPIO_Init+0x324>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d019      	beq.n	80024f4 <HAL_GPIO_Init+0x210>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x328>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_GPIO_Init+0x20c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_GPIO_Init+0x32c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00d      	beq.n	80024ec <HAL_GPIO_Init+0x208>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a50      	ldr	r2, [pc, #320]	; (8002614 <HAL_GPIO_Init+0x330>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <HAL_GPIO_Init+0x334>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_GPIO_Init+0x200>
 80024e0:	2308      	movs	r3, #8
 80024e2:	e010      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024e4:	2309      	movs	r3, #9
 80024e6:	e00e      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024e8:	2307      	movs	r3, #7
 80024ea:	e00c      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024ec:	2306      	movs	r3, #6
 80024ee:	e00a      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024f0:	2305      	movs	r3, #5
 80024f2:	e008      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x222>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x222>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x222>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	461a      	mov	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002518:	4936      	ldr	r1, [pc, #216]	; (80025f4 <HAL_GPIO_Init+0x310>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_GPIO_Init+0x338>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800254a:	4a34      	ldr	r2, [pc, #208]	; (800261c <HAL_GPIO_Init+0x338>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_GPIO_Init+0x338>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_GPIO_Init+0x338>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_GPIO_Init+0x338>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_GPIO_Init+0x338>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_GPIO_Init+0x338>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <HAL_GPIO_Init+0x338>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f47f ae88 	bne.w	80022f4 <HAL_GPIO_Init+0x10>
  }
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020800 	.word	0x40020800
 8002604:	40020c00 	.word	0x40020c00
 8002608:	40021000 	.word	0x40021000
 800260c:	40021400 	.word	0x40021400
 8002610:	40021800 	.word	0x40021800
 8002614:	40021c00 	.word	0x40021c00
 8002618:	40022000 	.word	0x40022000
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	887b      	ldrh	r3, [r7, #2]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e001      	b.n	8002642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	807b      	strh	r3, [r7, #2]
 800265a:	4613      	mov	r3, r2
 800265c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265e:	787b      	ldrb	r3, [r7, #1]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002664:	887a      	ldrh	r2, [r7, #2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266a:	e003      	b.n	8002674 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	041a      	lsls	r2, r3, #16
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	041a      	lsls	r2, r3, #16
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43d9      	mvns	r1, r3
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	400b      	ands	r3, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd ff28 	bl	8000524 <HAL_GPIO_EXTI_Callback>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40013c00 	.word	0x40013c00

080026e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b08f      	sub	sp, #60	; 0x3c
 80026e4:	af0a      	add	r7, sp, #40	; 0x28
 80026e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e10f      	b.n	8002912 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f00a f903 	bl	800c918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f004 f93d 	bl	80069b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	687e      	ldr	r6, [r7, #4]
 800273e:	466d      	mov	r5, sp
 8002740:	f106 0410 	add.w	r4, r6, #16
 8002744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002750:	e885 0003 	stmia.w	r5, {r0, r1}
 8002754:	1d33      	adds	r3, r6, #4
 8002756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002758:	6838      	ldr	r0, [r7, #0]
 800275a:	f004 f81f 	bl	800679c <USB_CoreInit>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0d0      	b.n	8002912 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f92a 	bl	80069d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e04a      	b.n	8002818 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	333d      	adds	r3, #61	; 0x3d
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	333c      	adds	r3, #60	; 0x3c
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	b298      	uxth	r0, r3
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3342      	adds	r3, #66	; 0x42
 80027be:	4602      	mov	r2, r0
 80027c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	333f      	adds	r3, #63	; 0x3f
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3344      	adds	r3, #68	; 0x44
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3348      	adds	r3, #72	; 0x48
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3350      	adds	r3, #80	; 0x50
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3af      	bcc.n	8002782 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e044      	b.n	80028b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	1a9b      	subs	r3, r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	3301      	adds	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3b5      	bcc.n	8002828 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	687e      	ldr	r6, [r7, #4]
 80028c4:	466d      	mov	r5, sp
 80028c6:	f106 0410 	add.w	r4, r6, #16
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028da:	1d33      	adds	r3, r6, #4
 80028dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f004 f8a0 	bl	8006a24 <USB_DevInit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2202      	movs	r2, #2
 80028ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00d      	b.n	8002912 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f005 f8d9 	bl	8007ac2 <USB_DevDisconnect>

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800291a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_PCD_Start+0x16>
 800292c:	2302      	movs	r3, #2
 800292e:	e012      	b.n	8002956 <HAL_PCD_Start+0x3c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 f827 	bl	8006990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f005 f89b 	bl	8007a82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800295e:	b590      	push	{r4, r7, lr}
 8002960:	b08d      	sub	sp, #52	; 0x34
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f005 f952 	bl	8007c1e <USB_GetMode>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 838f 	bne.w	80030a0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f005 f8bb 	bl	8007b02 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8385 	beq.w	800309e <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f005 f8b2 	bl	8007b02 <USB_ReadInterrupts>
 800299e:	4603      	mov	r3, r0
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d107      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f002 0202 	and.w	r2, r2, #2
 80029b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f005 f8a0 	bl	8007b02 <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d161      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0210 	bic.w	r2, r2, #16
 80029da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	0c5b      	lsrs	r3, r3, #17
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d124      	bne.n	8002a52 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d035      	beq.n	8002a80 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6a38      	ldr	r0, [r7, #32]
 8002a28:	f004 ff0c 	bl	8007844 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a38:	441a      	add	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a4a:	441a      	add	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	619a      	str	r2, [r3, #24]
 8002a50:	e016      	b.n	8002a80 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	0c5b      	lsrs	r3, r3, #17
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d110      	bne.n	8002a80 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a64:	2208      	movs	r2, #8
 8002a66:	4619      	mov	r1, r3
 8002a68:	6a38      	ldr	r0, [r7, #32]
 8002a6a:	f004 feeb 	bl	8007844 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a7a:	441a      	add	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0210 	orr.w	r2, r2, #16
 8002a8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f005 f834 	bl	8007b02 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aa4:	d16e      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f005 f839 	bl	8007b26 <USB_ReadDevAllOutEpInterrupt>
 8002ab4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ab6:	e062      	b.n	8002b7e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d057      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f005 f85c 	bl	8007b8a <USB_ReadDevOutEPInterrupt>
 8002ad2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aea:	461a      	mov	r2, r3
 8002aec:	2301      	movs	r3, #1
 8002aee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fda2 	bl	800363c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00c      	beq.n	8002b1c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2308      	movs	r3, #8
 8002b12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fe9c 	bl	8003854 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b32:	461a      	mov	r2, r3
 8002b34:	2310      	movs	r3, #16
 8002b36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2320      	movs	r3, #32
 8002b52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3301      	adds	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d199      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 ffba 	bl	8007b02 <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b98:	f040 80c0 	bne.w	8002d1c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 ffd9 	bl	8007b58 <USB_ReadDevAllInEpInterrupt>
 8002ba6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bac:	e0b2      	b.n	8002d14 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a7 	beq.w	8002d08 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 fffd 	bl	8007bc4 <USB_ReadDevInEPInterrupt>
 8002bca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d057      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	2201      	movs	r2, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69f9      	ldr	r1, [r7, #28]
 8002bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c06:	461a      	mov	r2, r3
 8002c08:	2301      	movs	r3, #1
 8002c0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d132      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3348      	adds	r3, #72	; 0x48
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4403      	add	r3, r0
 8002c34:	3344      	adds	r3, #68	; 0x44
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4419      	add	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4403      	add	r3, r0
 8002c48:	3348      	adds	r3, #72	; 0x48
 8002c4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d113      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x31c>
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3350      	adds	r3, #80	; 0x50
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d108      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c72:	461a      	mov	r2, r3
 8002c74:	2101      	movs	r1, #1
 8002c76:	f005 f801 	bl	8007c7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f009 fed8 	bl	800ca36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2310      	movs	r3, #16
 8002cbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2340      	movs	r3, #64	; 0x40
 8002cd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fc0c 	bl	8003520 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f af49 	bne.w	8002bae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f004 feee 	bl	8007b02 <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d30:	d114      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f009 feec 	bl	800cb24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f004 fece 	bl	8007b02 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d70:	d112      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d102      	bne.n	8002d88 <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f009 fea8 	bl	800cad8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d96:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f004 feb0 	bl	8007b02 <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dac:	f040 80c7 	bne.w	8002f3e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2110      	movs	r1, #16
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 ff8e 	bl	8006cec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd4:	e056      	b.n	8002e84 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de2:	461a      	mov	r2, r3
 8002de4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002de8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfa:	0151      	lsls	r1, r2, #5
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	440a      	add	r2, r1
 8002e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1a:	0151      	lsls	r1, r2, #5
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	440a      	add	r2, r1
 8002e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6e:	0151      	lsls	r1, r2, #5
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	440a      	add	r2, r1
 8002e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	3301      	adds	r3, #1
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3a3      	bcc.n	8002dd6 <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ea0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eba:	f043 030b 	orr.w	r3, r3, #11
 8002ebe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed0:	f043 030b 	orr.w	r3, r3, #11
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	e015      	b.n	8002f04 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002eee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002efe:	f043 030b 	orr.w	r3, r3, #11
 8002f02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f004 fea7 	bl	8007c7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fddd 	bl	8007b02 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	d124      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fe6d 	bl	8007c38 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 ff1e 	bl	8006da4 <USB_GetDevSpeed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	f001 f91e 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 8002f78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	4620      	mov	r0, r4
 8002f84:	f003 fc62 	bl	800684c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f009 fd7c 	bl	800ca86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 fdad 	bl	8007b02 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d10a      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f009 fd59 	bl	800ca6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f002 0208 	and.w	r2, r2, #8
 8002fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fd98 	bl	8007b02 <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	d10f      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f009 fdbb 	bl	800cb64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f004 fd7d 	bl	8007b02 <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003012:	d10f      	bne.n	8003034 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f009 fd8e 	bl	800cb40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f004 fd62 	bl	8007b02 <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003048:	d10a      	bne.n	8003060 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f009 fd9c 	bl	800cb88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800305e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fd4c 	bl	8007b02 <USB_ReadInterrupts>
 800306a:	4603      	mov	r3, r0
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b04      	cmp	r3, #4
 8003072:	d115      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f009 fd8c 	bl	800cba4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	e000      	b.n	80030a0 <HAL_PCD_IRQHandler+0x742>
      return;
 800309e:	bf00      	nop
    }
  }
}
 80030a0:	3734      	adds	r7, #52	; 0x34
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}

080030a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_PCD_SetAddress+0x1a>
 80030bc:	2302      	movs	r3, #2
 80030be:	e013      	b.n	80030e8 <HAL_PCD_SetAddress+0x42>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4618      	mov	r0, r3
 80030da:	f004 fcad 	bl	8007a38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	461a      	mov	r2, r3
 80030fe:	4603      	mov	r3, r0
 8003100:	70fb      	strb	r3, [r7, #3]
 8003102:	460b      	mov	r3, r1
 8003104:	803b      	strh	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800310e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da0f      	bge.n	8003136 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3338      	adds	r3, #56	; 0x38
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	705a      	strb	r2, [r3, #1]
 8003134:	e00f      	b.n	8003156 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	f003 020f 	and.w	r2, r3, #15
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003162:	883a      	ldrh	r2, [r7, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	785b      	ldrb	r3, [r3, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003180:	78bb      	ldrb	r3, [r7, #2]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d102      	bne.n	800318c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_PCD_EP_Open+0xaa>
 8003196:	2302      	movs	r3, #2
 8003198:	e00e      	b.n	80031b8 <HAL_PCD_EP_Open+0xc8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fe1f 	bl	8006dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0f      	bge.n	80031f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 020f 	and.w	r2, r3, #15
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3338      	adds	r3, #56	; 0x38
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	705a      	strb	r2, [r3, #1]
 80031f2:	e00f      	b.n	8003214 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_PCD_EP_Close+0x6e>
 800322a:	2302      	movs	r3, #2
 800322c:	e00e      	b.n	800324c <HAL_PCD_EP_Close+0x8c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	4618      	mov	r0, r3
 800323e:	f003 fe5b 	bl	8006ef8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	3304      	adds	r3, #4
 800327c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032b0:	7afb      	ldrb	r3, [r7, #11]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	6979      	ldr	r1, [r7, #20]
 80032c8:	f004 f936 	bl	8007538 <USB_EP0StartXfer>
 80032cc:	e008      	b.n	80032e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6979      	ldr	r1, [r7, #20]
 80032dc:	f003 fee8 	bl	80070b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b083      	sub	sp, #12
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	460b      	mov	r3, r1
 80032f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 020f 	and.w	r2, r3, #15
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800330c:	681b      	ldr	r3, [r3, #0]
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	460b      	mov	r3, r1
 8003326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003328:	7afb      	ldrb	r3, [r7, #11]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	3338      	adds	r3, #56	; 0x38
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2201      	movs	r2, #1
 8003356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003358:	7afb      	ldrb	r3, [r7, #11]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	b2da      	uxtb	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d102      	bne.n	8003372 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003372:	7afb      	ldrb	r3, [r7, #11]
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	f004 f8d5 	bl	8007538 <USB_EP0StartXfer>
 800338e:	e008      	b.n	80033a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	6979      	ldr	r1, [r7, #20]
 800339e:	f003 fe87 	bl	80070b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d901      	bls.n	80033ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e050      	b.n	800346c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	da0f      	bge.n	80033f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3338      	adds	r3, #56	; 0x38
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4413      	add	r3, r2
 80033e6:	3304      	adds	r3, #4
 80033e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	705a      	strb	r2, [r3, #1]
 80033f0:	e00d      	b.n	800340e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_PCD_EP_SetStall+0x82>
 800342a:	2302      	movs	r3, #2
 800342c:	e01e      	b.n	800346c <HAL_PCD_EP_SetStall+0xc0>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fa29 	bl	8007894 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	b2d9      	uxtb	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800345c:	461a      	mov	r2, r3
 800345e:	f004 fc0d 	bl	8007c7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	429a      	cmp	r2, r3
 800348c:	d901      	bls.n	8003492 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e042      	b.n	8003518 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	da0f      	bge.n	80034ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	3338      	adds	r3, #56	; 0x38
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	705a      	strb	r2, [r3, #1]
 80034b8:	e00f      	b.n	80034da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 020f 	and.w	r2, r3, #15
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	3304      	adds	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_PCD_EP_ClrStall+0x86>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e00e      	b.n	8003518 <HAL_PCD_EP_ClrStall+0xa4>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	4618      	mov	r0, r3
 800350a:	f004 fa30 	bl	800796e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af02      	add	r7, sp, #8
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3338      	adds	r3, #56	; 0x38
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d901      	bls.n	8003558 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e06c      	b.n	8003632 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	429a      	cmp	r2, r3
 800356c:	d902      	bls.n	8003574 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3303      	adds	r3, #3
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800357c:	e02b      	b.n	80035d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	d902      	bls.n	800359a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3303      	adds	r3, #3
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	68d9      	ldr	r1, [r3, #12]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	4603      	mov	r3, r0
 80035b8:	6978      	ldr	r0, [r7, #20]
 80035ba:	f004 f90f 	bl	80077dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d809      	bhi.n	8003600 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d203      	bcs.n	8003600 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1be      	bne.n	800357e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d811      	bhi.n	8003630 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	2201      	movs	r2, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	43db      	mvns	r3, r3
 8003626:	6939      	ldr	r1, [r7, #16]
 8003628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800362c:	4013      	ands	r3, r2
 800362e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	333c      	adds	r3, #60	; 0x3c
 8003654:	3304      	adds	r3, #4
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 80a0 	bne.w	80037b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4a72      	ldr	r2, [pc, #456]	; (800384c <PCD_EP_OutXfrComplete_int+0x210>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f240 80dd 	bls.w	8003842 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80d7 	beq.w	8003842 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a6:	6093      	str	r3, [r2, #8]
 80036a8:	e0cb      	b.n	8003842 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	2320      	movs	r3, #32
 80036c4:	6093      	str	r3, [r2, #8]
 80036c6:	e0bc      	b.n	8003842 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 80b7 	bne.w	8003842 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a5d      	ldr	r2, [pc, #372]	; (800384c <PCD_EP_OutXfrComplete_int+0x210>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d90f      	bls.n	80036fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f2:	461a      	mov	r2, r3
 80036f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f8:	6093      	str	r3, [r2, #8]
 80036fa:	e0a2      	b.n	8003842 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800370e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	0159      	lsls	r1, r3, #5
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	440b      	add	r3, r1
 8003718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003722:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4403      	add	r3, r0
 8003732:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003736:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800374a:	6819      	ldr	r1, [r3, #0]
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4403      	add	r3, r0
 800375a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4419      	add	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4403      	add	r3, r0
 8003770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003774:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d114      	bne.n	80037a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d108      	bne.n	80037a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800379e:	461a      	mov	r2, r3
 80037a0:	2101      	movs	r1, #1
 80037a2:	f004 fa6b 	bl	8007c7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f009 f927 	bl	800ca00 <HAL_PCD_DataOutStageCallback>
 80037b2:	e046      	b.n	8003842 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a26      	ldr	r2, [pc, #152]	; (8003850 <PCD_EP_OutXfrComplete_int+0x214>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d124      	bne.n	8003806 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d2:	461a      	mov	r2, r3
 80037d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d8:	6093      	str	r3, [r2, #8]
 80037da:	e032      	b.n	8003842 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	461a      	mov	r2, r3
 80037f4:	2320      	movs	r3, #32
 80037f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f009 f8fe 	bl	800ca00 <HAL_PCD_DataOutStageCallback>
 8003804:	e01d      	b.n	8003842 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d114      	bne.n	8003836 <PCD_EP_OutXfrComplete_int+0x1fa>
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d108      	bne.n	8003836 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800382e:	461a      	mov	r2, r3
 8003830:	2100      	movs	r1, #0
 8003832:	f004 fa23 	bl	8007c7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f009 f8df 	bl	800ca00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	4f54300a 	.word	0x4f54300a
 8003850:	4f54310a 	.word	0x4f54310a

08003854 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	333c      	adds	r3, #60	; 0x3c
 800386c:	3304      	adds	r3, #4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d90e      	bls.n	80038a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a0:	461a      	mov	r2, r3
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f009 f897 	bl	800c9dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <PCD_EP_OutSetupPacket_int+0x88>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d90c      	bls.n	80038d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038c8:	461a      	mov	r2, r3
 80038ca:	2101      	movs	r1, #1
 80038cc:	f004 f9d6 	bl	8007c7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	4f54300a 	.word	0x4f54300a

080038e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
 80038ec:	4613      	mov	r3, r2
 80038ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038fe:	883b      	ldrh	r3, [r7, #0]
 8003900:	0419      	lsls	r1, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	430a      	orrs	r2, r1
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
 800390c:	e028      	b.n	8003960 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	4413      	add	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e00d      	b.n	800393e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	3340      	adds	r3, #64	; 0x40
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4413      	add	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	3301      	adds	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	3b01      	subs	r3, #1
 8003944:	429a      	cmp	r2, r3
 8003946:	d3ec      	bcc.n	8003922 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003948:	883b      	ldrh	r3, [r7, #0]
 800394a:	0418      	lsls	r0, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	3b01      	subs	r3, #1
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4302      	orrs	r2, r0
 8003958:	3340      	adds	r3, #64	; 0x40
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	887a      	ldrh	r2, [r7, #2]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e237      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d050      	beq.n	8003a4c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	4ba3      	ldr	r3, [pc, #652]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d00c      	beq.n	80039d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b6:	4ba0      	ldr	r3, [pc, #640]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d112      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c2:	4b9d      	ldr	r3, [pc, #628]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	4b99      	ldr	r3, [pc, #612]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d036      	beq.n	8003a4a <HAL_RCC_OscConfig+0xbe>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d132      	bne.n	8003a4a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e212      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4b93      	ldr	r3, [pc, #588]	; (8003c3c <HAL_RCC_OscConfig+0x2b0>)
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fd fbd5 	bl	80011a8 <HAL_GetTick>
 80039fe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a02:	f7fd fbd1 	bl	80011a8 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	; 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e1fc      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a14:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x76>
 8003a20:	e014      	b.n	8003a4c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fbc1 	bl	80011a8 <HAL_GetTick>
 8003a26:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2a:	f7fd fbbd 	bl	80011a8 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	; 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1e8      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x9e>
 8003a48:	e000      	b.n	8003a4c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d077      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a58:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a64:	4b74      	ldr	r3, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d126      	bne.n	8003abe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a70:	4b71      	ldr	r3, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d120      	bne.n	8003abe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7c:	4b6e      	ldr	r3, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e1bc      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b68      	ldr	r3, [pc, #416]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	21f8      	movs	r1, #248	; 0xf8
 8003aa2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	fa91 f1a1 	rbit	r1, r1
 8003aaa:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003aac:	6979      	ldr	r1, [r7, #20]
 8003aae:	fab1 f181 	clz	r1, r1
 8003ab2:	b2c9      	uxtb	r1, r1
 8003ab4:	408b      	lsls	r3, r1
 8003ab6:	4960      	ldr	r1, [pc, #384]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abc:	e044      	b.n	8003b48 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02a      	beq.n	8003b1c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac6:	4b5e      	ldr	r3, [pc, #376]	; (8003c40 <HAL_RCC_OscConfig+0x2b4>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd fb6c 	bl	80011a8 <HAL_GetTick>
 8003ad0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fd fb68 	bl	80011a8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e193      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	21f8      	movs	r1, #248	; 0xf8
 8003b00:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6939      	ldr	r1, [r7, #16]
 8003b04:	fa91 f1a1 	rbit	r1, r1
 8003b08:	60f9      	str	r1, [r7, #12]
  return result;
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	fab1 f181 	clz	r1, r1
 8003b10:	b2c9      	uxtb	r1, r1
 8003b12:	408b      	lsls	r3, r1
 8003b14:	4948      	ldr	r1, [pc, #288]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
 8003b1a:	e015      	b.n	8003b48 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_RCC_OscConfig+0x2b4>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fd fb41 	bl	80011a8 <HAL_GetTick>
 8003b26:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fb3d 	bl	80011a8 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e168      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d030      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fd fb21 	bl	80011a8 <HAL_GetTick>
 8003b66:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fd fb1d 	bl	80011a8 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e148      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7c:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x1de>
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <HAL_RCC_OscConfig+0x2b8>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fd fb0a 	bl	80011a8 <HAL_GetTick>
 8003b94:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fd fb06 	bl	80011a8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e131      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 8088 	beq.w	8003cd4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d110      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d123      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <HAL_RCC_OscConfig+0x2bc>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fac4 	bl	80011a8 <HAL_GetTick>
 8003c20:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	e013      	b.n	8003c4c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd fac0 	bl	80011a8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0eb      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40023802 	.word	0x40023802
 8003c40:	42470000 	.word	0x42470000
 8003c44:	42470e80 	.word	0x42470e80
 8003c48:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b72      	ldr	r3, [pc, #456]	; (8003e18 <HAL_RCC_OscConfig+0x48c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0e5      	beq.n	8003c24 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x490>)
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6a:	f7fd fa9d 	bl	80011a8 <HAL_GetTick>
 8003c6e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c70:	e00a      	b.n	8003c88 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c72:	f7fd fa99 	bl	80011a8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0c2      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c88:	4b65      	ldr	r3, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ee      	beq.n	8003c72 <HAL_RCC_OscConfig+0x2e6>
 8003c94:	e014      	b.n	8003cc0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fd fa87 	bl	80011a8 <HAL_GetTick>
 8003c9a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9e:	f7fd fa83 	bl	80011a8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0ac      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb4:	4b5a      	ldr	r3, [pc, #360]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ee      	bne.n	8003c9e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc8:	4b55      	ldr	r3, [pc, #340]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	4a54      	ldr	r2, [pc, #336]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8097 	beq.w	8003e0c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cde:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d061      	beq.n	8003dae <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d146      	bne.n	8003d80 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <HAL_RCC_OscConfig+0x498>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fa56 	bl	80011a8 <HAL_GetTick>
 8003cfc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fa52 	bl	80011a8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e07d      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d1e:	4b40      	ldr	r3, [pc, #256]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <HAL_RCC_OscConfig+0x49c>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	69d1      	ldr	r1, [r2, #28]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6a12      	ldr	r2, [r2, #32]
 8003d2e:	4311      	orrs	r1, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d34:	0192      	lsls	r2, r2, #6
 8003d36:	4311      	orrs	r1, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d3c:	0612      	lsls	r2, r2, #24
 8003d3e:	4311      	orrs	r1, r2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003d44:	0852      	lsrs	r2, r2, #1
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0412      	lsls	r2, r2, #16
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	4934      	ldr	r1, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d52:	4b34      	ldr	r3, [pc, #208]	; (8003e24 <HAL_RCC_OscConfig+0x498>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd fa26 	bl	80011a8 <HAL_GetTick>
 8003d5c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fd fa22 	bl	80011a8 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e04d      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x3d4>
 8003d7e:	e045      	b.n	8003e0c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d80:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <HAL_RCC_OscConfig+0x498>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fd fa0f 	bl	80011a8 <HAL_GetTick>
 8003d8a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fd fa0b 	bl	80011a8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e036      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da0:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x402>
 8003dac:	e02e      	b.n	8003e0c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e029      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_OscConfig+0x494>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d115      	bne.n	8003e08 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d10d      	bne.n	8003e08 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3728      	adds	r7, #40	; 0x28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	40023870 	.word	0x40023870
 8003e20:	40023800 	.word	0x40023800
 8003e24:	42470060 	.word	0x42470060
 8003e28:	f0bc8000 	.word	0xf0bc8000

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0d2      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b6b      	ldr	r3, [pc, #428]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90c      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0be      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e80:	4b5c      	ldr	r3, [pc, #368]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a5b      	ldr	r2, [pc, #364]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003e98:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a55      	ldr	r2, [pc, #340]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4950      	ldr	r1, [pc, #320]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d040      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d115      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e085      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee2:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e079      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	4b40      	ldr	r3, [pc, #256]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e071      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b3c      	ldr	r3, [pc, #240]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4939      	ldr	r1, [pc, #228]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fd f948 	bl	80011a8 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd f944 	bl	80011a8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e059      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d20c      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e03c      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	491b      	ldr	r1, [pc, #108]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f96:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4913      	ldr	r1, [pc, #76]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003faa:	f000 f82b 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fae:	4601      	mov	r1, r0
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb8:	22f0      	movs	r2, #240	; 0xf0
 8003fba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	fa92 f2a2 	rbit	r2, r2
 8003fc2:	60fa      	str	r2, [r7, #12]
  return result;
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	fab2 f282 	clz	r2, r2
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	40d3      	lsrs	r3, r2
 8003fce:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1d0>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1d4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f8a0 	bl	8001124 <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023c00 	.word	0x40023c00
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	0800d93c 	.word	0x0800d93c
 8003ffc:	20000000 	.word	0x20000000
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b04      	cmp	r3, #4
 8004024:	d007      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x32>
 8004026:	2b08      	cmp	r3, #8
 8004028:	d008      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x38>
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 80b4 	bne.w	8004198 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004032:	60bb      	str	r3, [r7, #8]
       break;
 8004034:	e0b3      	b.n	800419e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004036:	4b5e      	ldr	r3, [pc, #376]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004038:	60bb      	str	r3, [r7, #8]
      break;
 800403a:	e0b0      	b.n	800419e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800403c:	4b5a      	ldr	r3, [pc, #360]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004044:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004046:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04a      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b55      	ldr	r3, [pc, #340]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	ea03 0501 	and.w	r5, r3, r1
 8004068:	ea04 0602 	and.w	r6, r4, r2
 800406c:	4629      	mov	r1, r5
 800406e:	4632      	mov	r2, r6
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f04f 0400 	mov.w	r4, #0
 8004078:	0154      	lsls	r4, r2, #5
 800407a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800407e:	014b      	lsls	r3, r1, #5
 8004080:	4619      	mov	r1, r3
 8004082:	4622      	mov	r2, r4
 8004084:	1b49      	subs	r1, r1, r5
 8004086:	eb62 0206 	sbc.w	r2, r2, r6
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f04f 0400 	mov.w	r4, #0
 8004092:	0194      	lsls	r4, r2, #6
 8004094:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004098:	018b      	lsls	r3, r1, #6
 800409a:	1a5b      	subs	r3, r3, r1
 800409c:	eb64 0402 	sbc.w	r4, r4, r2
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	00e2      	lsls	r2, r4, #3
 80040aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040ae:	00d9      	lsls	r1, r3, #3
 80040b0:	460b      	mov	r3, r1
 80040b2:	4614      	mov	r4, r2
 80040b4:	195b      	adds	r3, r3, r5
 80040b6:	eb44 0406 	adc.w	r4, r4, r6
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	0262      	lsls	r2, r4, #9
 80040c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040c8:	0259      	lsls	r1, r3, #9
 80040ca:	460b      	mov	r3, r1
 80040cc:	4614      	mov	r4, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	4621      	mov	r1, r4
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f04f 0400 	mov.w	r4, #0
 80040d8:	461a      	mov	r2, r3
 80040da:	4623      	mov	r3, r4
 80040dc:	f7fc f87a 	bl	80001d4 <__aeabi_uldivmod>
 80040e0:	4603      	mov	r3, r0
 80040e2:	460c      	mov	r4, r1
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e049      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e8:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	f04f 0400 	mov.w	r4, #0
 80040f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	ea03 0501 	and.w	r5, r3, r1
 80040fe:	ea04 0602 	and.w	r6, r4, r2
 8004102:	4629      	mov	r1, r5
 8004104:	4632      	mov	r2, r6
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	f04f 0400 	mov.w	r4, #0
 800410e:	0154      	lsls	r4, r2, #5
 8004110:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004114:	014b      	lsls	r3, r1, #5
 8004116:	4619      	mov	r1, r3
 8004118:	4622      	mov	r2, r4
 800411a:	1b49      	subs	r1, r1, r5
 800411c:	eb62 0206 	sbc.w	r2, r2, r6
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	f04f 0400 	mov.w	r4, #0
 8004128:	0194      	lsls	r4, r2, #6
 800412a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800412e:	018b      	lsls	r3, r1, #6
 8004130:	1a5b      	subs	r3, r3, r1
 8004132:	eb64 0402 	sbc.w	r4, r4, r2
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	00e2      	lsls	r2, r4, #3
 8004140:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004144:	00d9      	lsls	r1, r3, #3
 8004146:	460b      	mov	r3, r1
 8004148:	4614      	mov	r4, r2
 800414a:	195b      	adds	r3, r3, r5
 800414c:	eb44 0406 	adc.w	r4, r4, r6
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	02a2      	lsls	r2, r4, #10
 800415a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800415e:	0299      	lsls	r1, r3, #10
 8004160:	460b      	mov	r3, r1
 8004162:	4614      	mov	r4, r2
 8004164:	4618      	mov	r0, r3
 8004166:	4621      	mov	r1, r4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f04f 0400 	mov.w	r4, #0
 800416e:	461a      	mov	r2, r3
 8004170:	4623      	mov	r3, r4
 8004172:	f7fc f82f 	bl	80001d4 <__aeabi_uldivmod>
 8004176:	4603      	mov	r3, r0
 8004178:	460c      	mov	r4, r1
 800417a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	3301      	adds	r3, #1
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	60bb      	str	r3, [r7, #8]
      break;
 8004196:	e002      	b.n	800419e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800419a:	60bb      	str	r3, [r7, #8]
      break;
 800419c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800419e:	68bb      	ldr	r3, [r7, #8]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	00f42400 	.word	0x00f42400
 80041b0:	007a1200 	.word	0x007a1200

080041b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b8:	4b02      	ldr	r3, [pc, #8]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80041ce:	f7ff fff1 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 80041d2:	4601      	mov	r1, r0
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80041dc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80041e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	fa92 f2a2 	rbit	r2, r2
 80041e8:	603a      	str	r2, [r7, #0]
  return result;
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	fab2 f282 	clz	r2, r2
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	40d3      	lsrs	r3, r2
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x40>)
 80041f6:	5cd3      	ldrb	r3, [r2, r3]
 80041f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	0800d94c 	.word	0x0800d94c

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8004212:	f7ff ffcf 	bl	80041b4 <HAL_RCC_GetHCLKFreq>
 8004216:	4601      	mov	r1, r0
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004220:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004224:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	fa92 f2a2 	rbit	r2, r2
 800422c:	603a      	str	r2, [r7, #0]
  return result;
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	40d3      	lsrs	r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_RCC_GetPCLK2Freq+0x40>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	0800d94c 	.word	0x0800d94c

08004250 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e022      	b.n	80042a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d105      	bne.n	800427a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fc fcfd 	bl	8000c74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f814 	bl	80042b0 <HAL_SD_InitCard>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e00a      	b.n	80042a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af04      	add	r7, sp, #16
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80042cc:	2376      	movs	r3, #118	; 0x76
 80042ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681d      	ldr	r5, [r3, #0]
 80042d4:	466c      	mov	r4, sp
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80042e2:	f107 0308 	add.w	r3, r7, #8
 80042e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e8:	4628      	mov	r0, r5
 80042ea:	f001 fcfb 	bl	8005ce4 <SDIO_Init>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80042f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e031      	b.n	8004364 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004300:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_SD_InitCard+0xbc>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f001 fd30 	bl	8005d70 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <HAL_SD_InitCard+0xbc>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 f8f0 	bl	80054fc <SD_PowerON>
 800431c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e013      	b.n	8004364 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 f80f 	bl	8005360 <SD_InitCard>
 8004342:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bdb0      	pop	{r4, r5, r7, pc}
 800436c:	422580a0 	.word	0x422580a0

08004370 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b092      	sub	sp, #72	; 0x48
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800437e:	f7fc ff13 	bl	80011a8 <HAL_GetTick>
 8004382:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d107      	bne.n	80043a2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1d9      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	f040 81cc 	bne.w	8004748 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80043b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	441a      	add	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d907      	bls.n	80043d4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e1c0      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2203      	movs	r2, #3
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2200      	movs	r2, #0
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d002      	beq.n	80043f2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	025b      	lsls	r3, r3, #9
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043fa:	4618      	mov	r0, r3
 80043fc:	f001 fd46 	bl	8005e8c <SDMMC_CmdBlockLength>
 8004400:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8004402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00f      	beq.n	8004428 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a9b      	ldr	r2, [pc, #620]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 800440e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e196      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
 800442c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004434:	2390      	movs	r3, #144	; 0x90
 8004436:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004438:	2302      	movs	r3, #2
 800443a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004440:	2301      	movs	r3, #1
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f107 0214 	add.w	r2, r7, #20
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f001 fcf1 	bl	8005e36 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d90a      	bls.n	8004470 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2202      	movs	r2, #2
 800445e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004466:	4618      	mov	r0, r3
 8004468:	f001 fd54 	bl	8005f14 <SDMMC_CmdReadMultiBlock>
 800446c:	6478      	str	r0, [r7, #68]	; 0x44
 800446e:	e009      	b.n	8004484 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800447c:	4618      	mov	r0, r3
 800447e:	f001 fd27 	bl	8005ed0 <SDMMC_CmdReadSingleBlock>
 8004482:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7b      	ldr	r2, [pc, #492]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e152      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80044b4:	e061      	b.n	800457a <HAL_SD_ReadBlocks+0x20a>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d03c      	beq.n	800453e <HAL_SD_ReadBlocks+0x1ce>
 80044c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d039      	beq.n	800453e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80044ca:	2300      	movs	r3, #0
 80044cc:	643b      	str	r3, [r7, #64]	; 0x40
 80044ce:	e033      	b.n	8004538 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 fc2f 	bl	8005d38 <SDIO_ReadFIFO>
 80044da:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80044e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e6:	3301      	adds	r3, #1
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	3b01      	subs	r3, #1
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	3301      	adds	r3, #1
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	3b01      	subs	r3, #1
 8004504:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2da      	uxtb	r2, r3
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	3301      	adds	r3, #1
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004518:	3b01      	subs	r3, #1
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	0e1b      	lsrs	r3, r3, #24
 8004520:	b2da      	uxtb	r2, r3
 8004522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004524:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	3301      	adds	r3, #1
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800452c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452e:	3b01      	subs	r3, #1
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8004532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004534:	3301      	adds	r3, #1
 8004536:	643b      	str	r3, [r7, #64]	; 0x40
 8004538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453a:	2b07      	cmp	r3, #7
 800453c:	d9c8      	bls.n	80044d0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800453e:	f7fc fe33 	bl	80011a8 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800454a:	429a      	cmp	r2, r3
 800454c:	d902      	bls.n	8004554 <HAL_SD_ReadBlocks+0x1e4>
 800454e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004550:	2b00      	cmp	r3, #0
 8004552:	d112      	bne.n	800457a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a48      	ldr	r2, [pc, #288]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 800455a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0ed      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004580:	f240 332a 	movw	r3, #810	; 0x32a
 8004584:	4013      	ands	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d095      	beq.n	80044b6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d022      	beq.n	80045de <HAL_SD_ReadBlocks+0x26e>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d91f      	bls.n	80045de <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d01b      	beq.n	80045de <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fd18 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 80045b0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80045b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2f      	ldr	r2, [pc, #188]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 80045be:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	431a      	orrs	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e0bb      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	f043 0208 	orr.w	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e0a1      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f043 0202 	orr.w	r2, r3, #2
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e087      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d064      	beq.n	800471e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a08      	ldr	r2, [pc, #32]	; (800467c <HAL_SD_ReadBlocks+0x30c>)
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e06d      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
 800467a:	bf00      	nop
 800467c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f001 fb57 	bl	8005d38 <SDIO_ReadFIFO>
 800468a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468e:	b2da      	uxtb	r2, r3
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004696:	3301      	adds	r3, #1
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800469a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469c:	3b01      	subs	r3, #1
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80046aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ac:	3301      	adds	r3, #1
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80046b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b2:	3b01      	subs	r3, #1
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046be:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	3301      	adds	r3, #1
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	3b01      	subs	r3, #1
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	0e1b      	lsrs	r3, r3, #24
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	3301      	adds	r3, #1
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80046dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046de:	3b01      	subs	r3, #1
 80046e0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80046e2:	f7fc fd61 	bl	80011a8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d902      	bls.n	80046f8 <HAL_SD_ReadBlocks+0x388>
 80046f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d112      	bne.n	800471e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a18      	ldr	r2, [pc, #96]	; (8004760 <HAL_SD_ReadBlocks+0x3f0>)
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e01b      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d002      	beq.n	8004732 <HAL_SD_ReadBlocks+0x3c2>
 800472c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1a6      	bne.n	8004680 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f240 523a 	movw	r2, #1338	; 0x53a
 800473a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e006      	b.n	8004756 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3748      	adds	r7, #72	; 0x48
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	004005ff 	.word	0x004005ff

08004764 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b092      	sub	sp, #72	; 0x48
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004772:	f7fc fd19 	bl	80011a8 <HAL_GetTick>
 8004776:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e184      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	f040 8177 	bne.w	8004a92 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80047aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	441a      	add	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d907      	bls.n	80047c8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e16b      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2203      	movs	r2, #3
 80047cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2200      	movs	r2, #0
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d002      	beq.n	80047e6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	025b      	lsls	r3, r3, #9
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 fb4c 	bl	8005e8c <SDMMC_CmdBlockLength>
 80047f4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00f      	beq.n	800481c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a9d      	ldr	r2, [pc, #628]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480a:	431a      	orrs	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e141      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004828:	2390      	movs	r3, #144	; 0x90
 800482a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800482c:	2300      	movs	r3, #0
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004830:	2300      	movs	r3, #0
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004834:	2301      	movs	r3, #1
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f107 0218 	add.w	r2, r7, #24
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 faf7 	bl	8005e36 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d90a      	bls.n	8004864 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800485a:	4618      	mov	r0, r3
 800485c:	f001 fb9e 	bl	8005f9c <SDMMC_CmdWriteMultiBlock>
 8004860:	6478      	str	r0, [r7, #68]	; 0x44
 8004862:	e009      	b.n	8004878 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2210      	movs	r2, #16
 8004868:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004870:	4618      	mov	r0, r3
 8004872:	f001 fb71 	bl	8005f58 <SDMMC_CmdWriteSingleBlock>
 8004876:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487a:	2b00      	cmp	r3, #0
 800487c:	d012      	beq.n	80048a4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7d      	ldr	r2, [pc, #500]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0fd      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80048a8:	e065      	b.n	8004976 <HAL_SD_WriteBlocks+0x212>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d040      	beq.n	800493a <HAL_SD_WriteBlocks+0x1d6>
 80048b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d03d      	beq.n	800493a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80048be:	2300      	movs	r3, #0
 80048c0:	643b      	str	r3, [r7, #64]	; 0x40
 80048c2:	e037      	b.n	8004934 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80048c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80048ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048cc:	3301      	adds	r3, #1
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80048d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d2:	3b01      	subs	r3, #1
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e4:	3301      	adds	r3, #1
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80048e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ea:	3b01      	subs	r3, #1
 80048ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	041a      	lsls	r2, r3, #16
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80048fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fc:	3301      	adds	r3, #1
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	3b01      	subs	r3, #1
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	061a      	lsls	r2, r3, #24
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	3301      	adds	r3, #1
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	3b01      	subs	r3, #1
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f107 0214 	add.w	r2, r7, #20
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fa11 	bl	8005d50 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800492e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004930:	3301      	adds	r3, #1
 8004932:	643b      	str	r3, [r7, #64]	; 0x40
 8004934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004936:	2b07      	cmp	r3, #7
 8004938:	d9c4      	bls.n	80048c4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800493a:	f7fc fc35 	bl	80011a8 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004946:	429a      	cmp	r2, r3
 8004948:	d902      	bls.n	8004950 <HAL_SD_WriteBlocks+0x1ec>
 800494a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494c:	2b00      	cmp	r3, #0
 800494e:	d112      	bne.n	8004976 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a48      	ldr	r2, [pc, #288]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495e:	431a      	orrs	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e094      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497c:	f240 331a 	movw	r3, #794	; 0x31a
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d091      	beq.n	80048aa <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d022      	beq.n	80049da <HAL_SD_WriteBlocks+0x276>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d91f      	bls.n	80049da <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d01b      	beq.n	80049da <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fb1a 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 80049ac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80049ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2f      	ldr	r2, [pc, #188]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	431a      	orrs	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e062      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	f043 0208 	orr.w	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e048      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d012      	beq.n	8004a42 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f043 0202 	orr.w	r2, r3, #2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e02e      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <HAL_SD_WriteBlocks+0x314>)
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f043 0210 	orr.w	r2, r3, #16
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e014      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
 8004a76:	bf00      	nop
 8004a78:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e006      	b.n	8004aa0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3748      	adds	r7, #72	; 0x48
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_SD_IRQHandler+0x2e>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 ff2a 	bl	8005928 <SD_Read_IT>
 8004ad4:	e157      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 808f 	beq.w	8004c04 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8004afe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004b02:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d039      	beq.n	8004b92 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_SD_IRQHandler+0x8a>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d011      	beq.n	8004b56 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 fa52 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 8004b3c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f921 	bl	8004d98 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <HAL_SD_IRQHandler+0xda>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f003 f9b6 	bl	8007ef4 <HAL_SD_RxCpltCallback>
 8004b88:	e0fd      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f003 f9a8 	bl	8007ee0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b90:	e0f9      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80f4 	beq.w	8004d86 <HAL_SD_IRQHandler+0x2de>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d011      	beq.n	8004bcc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fa17 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 8004bb2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8e6 	bl	8004d98 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f040 80d7 	bne.w	8004d86 <HAL_SD_IRQHandler+0x2de>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80d1 	bne.w	8004d86 <HAL_SD_IRQHandler+0x2de>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0208 	bic.w	r2, r2, #8
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f003 f96f 	bl	8007ee0 <HAL_SD_TxCpltCallback>
}
 8004c02:	e0c0      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_SD_IRQHandler+0x17c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fed4 	bl	80059ca <SD_Write_IT>
 8004c22:	e0b0      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a9 	beq.w	8004d86 <HAL_SD_IRQHandler+0x2de>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	f043 0202 	orr.w	r2, r3, #2
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	f043 0208 	orr.w	r2, r3, #8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	f043 0220 	orr.w	r2, r3, #32
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f043 0210 	orr.w	r2, r3, #16
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f240 723a 	movw	r2, #1850	; 0x73a
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004cb4:	f023 0302 	bic.w	r3, r3, #2
 8004cb8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f98e 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_SD_IRQHandler+0x248>
      hsd->State = HAL_SD_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f855 	bl	8004d98 <HAL_SD_ErrorCallback>
}
 8004cee:	e04a      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d045      	beq.n	8004d86 <HAL_SD_IRQHandler+0x2de>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_SD_IRQHandler+0x266>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d011      	beq.n	8004d32 <HAL_SD_IRQHandler+0x28a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <HAL_SD_IRQHandler+0x2e8>)
 8004d14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fc fc2c 	bl	8001578 <HAL_DMA_Abort_IT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d02f      	beq.n	8004d86 <HAL_SD_IRQHandler+0x2de>
          SD_DMATxAbort(hsd->hdmatx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 faaa 	bl	8005284 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004d30:	e029      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <HAL_SD_IRQHandler+0x29e>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d011      	beq.n	8004d6a <HAL_SD_IRQHandler+0x2c2>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <HAL_SD_IRQHandler+0x2ec>)
 8004d4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc fc10 	bl	8001578 <HAL_DMA_Abort_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d013      	beq.n	8004d86 <HAL_SD_IRQHandler+0x2de>
          SD_DMARxAbort(hsd->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fac5 	bl	80052f2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004d68:	e00d      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f003 f8a4 	bl	8007ecc <HAL_SD_AbortCallback>
}
 8004d84:	e7ff      	b.n	8004d86 <HAL_SD_IRQHandler+0x2de>
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	08005285 	.word	0x08005285
 8004d94:	080052f3 	.word	0x080052f3

08004d98 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	0f9b      	lsrs	r3, r3, #30
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc6:	0e9b      	lsrs	r3, r3, #26
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd8:	0e1b      	lsrs	r3, r3, #24
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dea:	0c1b      	lsrs	r3, r3, #16
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e0c:	0d1b      	lsrs	r3, r3, #20
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e18:	0c1b      	lsrs	r3, r3, #16
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e2a:	0bdb      	lsrs	r3, r3, #15
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3c:	0b9b      	lsrs	r3, r3, #14
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e4e:	0b5b      	lsrs	r3, r3, #13
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e60:	0b1b      	lsrs	r3, r3, #12
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d163      	bne.n	8004f44 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e80:	009a      	lsls	r2, r3, #2
 8004e82:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e86:	4013      	ands	r3, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004e8c:	0f92      	lsrs	r2, r2, #30
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e98:	0edb      	lsrs	r3, r3, #27
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ebc:	0d5b      	lsrs	r3, r3, #21
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ece:	0c9b      	lsrs	r3, r3, #18
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee0:	0bdb      	lsrs	r3, r3, #15
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	7e1b      	ldrb	r3, [r3, #24]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	3302      	adds	r3, #2
 8004f04:	2201      	movs	r2, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004f0e:	fb02 f203 	mul.w	r2, r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	7a1b      	ldrb	r3, [r3, #8]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	2201      	movs	r2, #1
 8004f22:	409a      	lsls	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004f30:	0a52      	lsrs	r2, r2, #9
 8004f32:	fb02 f203 	mul.w	r2, r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f40:	661a      	str	r2, [r3, #96]	; 0x60
 8004f42:	e031      	b.n	8004fa8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d11d      	bne.n	8004f88 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	3301      	adds	r3, #1
 8004f68:	029a      	lsls	r2, r3, #10
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60
 8004f86:	e00f      	b.n	8004fa8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a58      	ldr	r2, [pc, #352]	; (80050f0 <HAL_SD_GetCardCSD+0x344>)
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e09d      	b.n	80050e4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fac:	0b9b      	lsrs	r3, r3, #14
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbe:	09db      	lsrs	r3, r3, #7
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	0fdb      	lsrs	r3, r3, #31
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	0f5b      	lsrs	r3, r3, #29
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	0e9b      	lsrs	r3, r3, #26
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	b2da      	uxtb	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005010:	0d9b      	lsrs	r3, r3, #22
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	b2da      	uxtb	r2, r3
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	0d5b      	lsrs	r3, r3, #21
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	b2da      	uxtb	r2, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	0bdb      	lsrs	r3, r3, #15
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	b2da      	uxtb	r2, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	0b9b      	lsrs	r3, r3, #14
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	0b5b      	lsrs	r3, r3, #13
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508e:	0b1b      	lsrs	r3, r3, #12
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	0a9b      	lsrs	r3, r3, #10
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0303 	and.w	r3, r3, #3
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	004005ff 	.word	0x004005ff

080050f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
	...

0800514c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800514c:	b5b0      	push	{r4, r5, r7, lr}
 800514e:	b08e      	sub	sp, #56	; 0x38
 8005150:	af04      	add	r7, sp, #16
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2203      	movs	r2, #3
 800515a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	2b03      	cmp	r3, #3
 8005164:	d02e      	beq.n	80051c4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516c:	d106      	bne.n	800517c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	639a      	str	r2, [r3, #56]	; 0x38
 800517a:	e029      	b.n	80051d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d10a      	bne.n	800519a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fa6f 	bl	8005668 <SD_WideBus_Enable>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
 8005198:	e01a      	b.n	80051d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 faac 	bl	80056fe <SD_WideBus_Disable>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
 80051b4:	e00c      	b.n	80051d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
 80051c2:	e005      	b.n	80051d0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e024      	b.n	8005236 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	466c      	mov	r4, sp
 8005214:	f107 0318 	add.w	r3, r7, #24
 8005218:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800521c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005220:	f107 030c 	add.w	r3, r7, #12
 8005224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005226:	4628      	mov	r0, r5
 8005228:	f000 fd5c 	bl	8005ce4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3728      	adds	r7, #40	; 0x28
 800523a:	46bd      	mov	sp, r7
 800523c:	bdb0      	pop	{r4, r5, r7, pc}
 800523e:	bf00      	nop
 8005240:	004005ff 	.word	0x004005ff

08005244 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9de 	bl	8005618 <SD_SendStatus>
 800525c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	0a5b      	lsrs	r3, r3, #9
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800527a:	693b      	ldr	r3, [r7, #16]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f240 523a 	movw	r2, #1338	; 0x53a
 800529a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ffd1 	bl	8005244 <HAL_SD_GetCardState>
 80052a2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d002      	beq.n	80052be <SD_DMATxAbort+0x3a>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d10a      	bne.n	80052d4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fe8c 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f002 fdf5 	bl	8007ecc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80052e2:	e002      	b.n	80052ea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f7ff fd57 	bl	8004d98 <HAL_SD_ErrorCallback>
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f240 523a 	movw	r2, #1338	; 0x53a
 8005308:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff ff9a 	bl	8005244 <HAL_SD_GetCardState>
 8005310:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b06      	cmp	r3, #6
 8005324:	d002      	beq.n	800532c <SD_DMARxAbort+0x3a>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b05      	cmp	r3, #5
 800532a:	d10a      	bne.n	8005342 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fe55 	bl	8005fe0 <SDMMC_CmdStopTransfer>
 8005336:	4602      	mov	r2, r0
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f002 fdbe 	bl	8007ecc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005350:	e002      	b.n	8005358 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f7ff fd20 	bl	8004d98 <HAL_SD_ErrorCallback>
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005360:	b5b0      	push	{r4, r5, r7, lr}
 8005362:	b094      	sub	sp, #80	; 0x50
 8005364:	af04      	add	r7, sp, #16
 8005366:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005368:	2301      	movs	r3, #1
 800536a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fd0c 	bl	8005d8e <SDIO_GetPowerState>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800537c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005380:	e0b7      	b.n	80054f2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	2b03      	cmp	r3, #3
 8005388:	d02f      	beq.n	80053ea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff30 	bl	80061f4 <SDMMC_CmdSendCID>
 8005394:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800539c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539e:	e0a8      	b.n	80054f2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fd33 	bl	8005e12 <SDIO_GetResponse>
 80053ac:	4602      	mov	r2, r0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2104      	movs	r1, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fd2a 	bl	8005e12 <SDIO_GetResponse>
 80053be:	4602      	mov	r2, r0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2108      	movs	r1, #8
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fd21 	bl	8005e12 <SDIO_GetResponse>
 80053d0:	4602      	mov	r2, r0
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	210c      	movs	r1, #12
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fd18 	bl	8005e12 <SDIO_GetResponse>
 80053e2:	4602      	mov	r2, r0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d00d      	beq.n	800540e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f107 020e 	add.w	r2, r7, #14
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 ff36 	bl	800626e <SDMMC_CmdSetRelAdd>
 8005402:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <SD_InitCard+0xae>
    {
      return errorstate;
 800540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540c:	e071      	b.n	80054f2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	2b03      	cmp	r3, #3
 8005414:	d036      	beq.n	8005484 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005416:	89fb      	ldrh	r3, [r7, #14]
 8005418:	461a      	mov	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005426:	041b      	lsls	r3, r3, #16
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 ff00 	bl	8006230 <SDMMC_CmdSendCSD>
 8005430:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	e05a      	b.n	80054f2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fce5 	bl	8005e12 <SDIO_GetResponse>
 8005448:	4602      	mov	r2, r0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2104      	movs	r1, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fcdc 	bl	8005e12 <SDIO_GetResponse>
 800545a:	4602      	mov	r2, r0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2108      	movs	r1, #8
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fcd3 	bl	8005e12 <SDIO_GetResponse>
 800546c:	4602      	mov	r2, r0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	210c      	movs	r1, #12
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fcca 	bl	8005e12 <SDIO_GetResponse>
 800547e:	4602      	mov	r2, r0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2104      	movs	r1, #4
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fcc1 	bl	8005e12 <SDIO_GetResponse>
 8005490:	4603      	mov	r3, r0
 8005492:	0d1a      	lsrs	r2, r3, #20
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005498:	f107 0310 	add.w	r3, r7, #16
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fc84 	bl	8004dac <HAL_SD_GetCardCSD>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054ae:	e020      	b.n	80054f2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	f04f 0400 	mov.w	r4, #0
 80054be:	461a      	mov	r2, r3
 80054c0:	4623      	mov	r3, r4
 80054c2:	4608      	mov	r0, r1
 80054c4:	f000 fdae 	bl	8006024 <SDMMC_CmdSelDesel>
 80054c8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80054ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <SD_InitCard+0x174>
  {
    return errorstate;
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	e00e      	b.n	80054f2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681d      	ldr	r5, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	466c      	mov	r4, sp
 80054dc:	f103 0210 	add.w	r2, r3, #16
 80054e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80054e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054e6:	3304      	adds	r3, #4
 80054e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 fbfa 	bl	8005ce4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3740      	adds	r7, #64	; 0x40
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080054fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fda8 	bl	800606a <SDMMC_CmdGoIdleState>
 800551a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	e072      	b.n	800560c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fdbb 	bl	80060a6 <SDMMC_CmdOperCond>
 8005530:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fd91 	bl	800606a <SDMMC_CmdGoIdleState>
 8005548:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e05b      	b.n	800560c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555e:	2b01      	cmp	r3, #1
 8005560:	d137      	bne.n	80055d2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fdbb 	bl	80060e4 <SDMMC_CmdAppCommand>
 800556e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d02d      	beq.n	80055d2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005576:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800557a:	e047      	b.n	800560c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2100      	movs	r1, #0
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fdae 	bl	80060e4 <SDMMC_CmdAppCommand>
 8005588:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <SD_PowerON+0x98>
    {
      return errorstate;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	e03b      	b.n	800560c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	491e      	ldr	r1, [pc, #120]	; (8005614 <SD_PowerON+0x118>)
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fdc4 	bl	8006128 <SDMMC_CmdAppOperCommand>
 80055a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055ac:	e02e      	b.n	800560c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2100      	movs	r1, #0
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fc2c 	bl	8005e12 <SDIO_GetResponse>
 80055ba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	0fdb      	lsrs	r3, r3, #31
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <SD_PowerON+0xcc>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <SD_PowerON+0xce>
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]

    count++;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	3301      	adds	r3, #1
 80055d0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055d8:	4293      	cmp	r3, r2
 80055da:	d802      	bhi.n	80055e2 <SD_PowerON+0xe6>
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0cc      	beq.n	800557c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d902      	bls.n	80055f2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80055ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055f0:	e00c      	b.n	800560c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
 8005602:	e002      	b.n	800560a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	c1100000 	.word	0xc1100000

08005618 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d102      	bne.n	800562e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005628:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800562c:	e018      	b.n	8005660 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f000 fe38 	bl	80062b0 <SDMMC_CmdSendStatus>
 8005640:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	e009      	b.n	8005660 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fbdd 	bl	8005e12 <SDIO_GetResponse>
 8005658:	4602      	mov	r2, r0
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2100      	movs	r1, #0
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fbc7 	bl	8005e12 <SDIO_GetResponse>
 8005684:	4603      	mov	r3, r0
 8005686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800568e:	d102      	bne.n	8005696 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005694:	e02f      	b.n	80056f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005696:	f107 030c 	add.w	r3, r7, #12
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f879 	bl	8005794 <SD_FindSCR>
 80056a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e023      	b.n	80056f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01c      	beq.n	80056f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 fd0d 	bl	80060e4 <SDMMC_CmdAppCommand>
 80056ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	e00f      	b.n	80056f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fd46 	bl	800616e <SDMMC_CmdBusWidth>
 80056e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	e003      	b.n	80056f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e001      	b.n	80056f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fb7c 	bl	8005e12 <SDIO_GetResponse>
 800571a:	4603      	mov	r3, r0
 800571c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005724:	d102      	bne.n	800572c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005726:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800572a:	e02f      	b.n	800578c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f82e 	bl	8005794 <SD_FindSCR>
 8005738:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	e023      	b.n	800578c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01c      	beq.n	8005788 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f000 fcc2 	bl	80060e4 <SDMMC_CmdAppCommand>
 8005760:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	e00f      	b.n	800578c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fcfb 	bl	800616e <SDMMC_CmdBusWidth>
 8005778:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	e003      	b.n	800578c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	e001      	b.n	800578c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005788:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800578c:	4618      	mov	r0, r3
 800578e:	3718      	adds	r7, #24
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b08f      	sub	sp, #60	; 0x3c
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800579e:	f7fb fd03 	bl	80011a8 <HAL_GetTick>
 80057a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80057a8:	2300      	movs	r3, #0
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2108      	movs	r1, #8
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fb66 	bl	8005e8c <SDMMC_CmdBlockLength>
 80057c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <SD_FindSCR+0x38>
  {
    return errorstate;
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	e0a9      	b.n	8005920 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 fc83 	bl	80060e4 <SDMMC_CmdAppCommand>
 80057de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <SD_FindSCR+0x56>
  {
    return errorstate;
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	e09a      	b.n	8005920 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80057f0:	2308      	movs	r3, #8
 80057f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80057f4:	2330      	movs	r3, #48	; 0x30
 80057f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80057f8:	2302      	movs	r3, #2
 80057fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005800:	2301      	movs	r3, #1
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f107 0210 	add.w	r2, r7, #16
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fb11 	bl	8005e36 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fcca 	bl	80061b2 <SDMMC_CmdSendSCR>
 800581e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d022      	beq.n	800586c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	e07a      	b.n	8005920 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6819      	ldr	r1, [r3, #0]
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	f107 0208 	add.w	r2, r7, #8
 8005844:	18d4      	adds	r4, r2, r3
 8005846:	4608      	mov	r0, r1
 8005848:	f000 fa76 	bl	8005d38 <SDIO_ReadFIFO>
 800584c:	4603      	mov	r3, r0
 800584e:	6023      	str	r3, [r4, #0]
      index++;
 8005850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005852:	3301      	adds	r3, #1
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005856:	f7fb fca7 	bl	80011a8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d102      	bne.n	800586c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800586a:	e059      	b.n	8005920 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005872:	f240 432a 	movw	r3, #1066	; 0x42a
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0d6      	beq.n	800582a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2208      	movs	r2, #8
 8005890:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005892:	2308      	movs	r3, #8
 8005894:	e044      	b.n	8005920 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2202      	movs	r2, #2
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80058ac:	2302      	movs	r3, #2
 80058ae:	e037      	b.n	8005920 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2220      	movs	r2, #32
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80058c6:	2320      	movs	r3, #32
 80058c8:	e02a      	b.n	8005920 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	061a      	lsls	r2, r3, #24
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	0a1b      	lsrs	r3, r3, #8
 80058e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	0e1b      	lsrs	r3, r3, #24
 80058f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	601a      	str	r2, [r3, #0]
    scr++;
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	3304      	adds	r3, #4
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	061a      	lsls	r2, r3, #24
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005908:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005912:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	0e1b      	lsrs	r3, r3, #24
 8005918:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	373c      	adds	r7, #60	; 0x3c
 8005924:	46bd      	mov	sp, r7
 8005926:	bd90      	pop	{r4, r7, pc}

08005928 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d03f      	beq.n	80059c2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e033      	b.n	80059b0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 f9f3 	bl	8005d38 <SDIO_ReadFIFO>
 8005952:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	b2da      	uxtb	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3b01      	subs	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b2da      	uxtb	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3b01      	subs	r3, #1
 800597c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	3b01      	subs	r3, #1
 8005992:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	0e1b      	lsrs	r3, r3, #24
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	3301      	adds	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	d9c8      	bls.n	8005948 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d043      	beq.n	8005a6c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e037      	b.n	8005a5a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	021a      	lsls	r2, r3, #8
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	041a      	lsls	r2, r3, #16
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3301      	adds	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	061a      	lsls	r2, r3, #24
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f107 0208 	add.w	r2, r7, #8
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f97e 	bl	8005d50 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3301      	adds	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b07      	cmp	r3, #7
 8005a5e:	d9c4      	bls.n	80059ea <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e03f      	b.n	8005b06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fb f9da 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2224      	movs	r2, #36	; 0x24
 8005aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f829 	bl	8005b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b50:	f023 030c 	bic.w	r3, r3, #12
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a57      	ldr	r2, [pc, #348]	; (8005cd8 <UART_SetConfig+0x1c8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <UART_SetConfig+0x78>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a56      	ldr	r2, [pc, #344]	; (8005cdc <UART_SetConfig+0x1cc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d103      	bne.n	8005b90 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7fe fb40 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	e002      	b.n	8005b96 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fb1a 	bl	80041c8 <HAL_RCC_GetPCLK1Freq>
 8005b94:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9e:	d14c      	bne.n	8005c3a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009a      	lsls	r2, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	4a4a      	ldr	r2, [pc, #296]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	0119      	lsls	r1, r3, #4
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009a      	lsls	r2, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bd6:	4b42      	ldr	r3, [pc, #264]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005bd8:	fba3 0302 	umull	r0, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	2064      	movs	r0, #100	; 0x64
 8005be0:	fb00 f303 	mul.w	r3, r0, r3
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	3332      	adds	r3, #50	; 0x32
 8005bea:	4a3d      	ldr	r2, [pc, #244]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bf8:	4419      	add	r1, r3
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009a      	lsls	r2, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c10:	4b33      	ldr	r3, [pc, #204]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005c12:	fba3 0302 	umull	r0, r3, r3, r2
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	2064      	movs	r0, #100	; 0x64
 8005c1a:	fb00 f303 	mul.w	r3, r0, r3
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	3332      	adds	r3, #50	; 0x32
 8005c24:	4a2e      	ldr	r2, [pc, #184]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	f003 0207 	and.w	r2, r3, #7
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	440a      	add	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c38:	e04a      	b.n	8005cd0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009a      	lsls	r2, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	4a23      	ldr	r2, [pc, #140]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	0119      	lsls	r1, r3, #4
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009a      	lsls	r2, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c70:	4b1b      	ldr	r3, [pc, #108]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005c72:	fba3 0302 	umull	r0, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2064      	movs	r0, #100	; 0x64
 8005c7a:	fb00 f303 	mul.w	r3, r0, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	3332      	adds	r3, #50	; 0x32
 8005c84:	4a16      	ldr	r2, [pc, #88]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c90:	4419      	add	r1, r3
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009a      	lsls	r2, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005caa:	fba3 0302 	umull	r0, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	2064      	movs	r0, #100	; 0x64
 8005cb2:	fb00 f303 	mul.w	r3, r0, r3
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	3332      	adds	r3, #50	; 0x32
 8005cbc:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <UART_SetConfig+0x1d0>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	440a      	add	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40011000 	.word	0x40011000
 8005cdc:	40011400 	.word	0x40011400
 8005ce0:	51eb851f 	.word	0x51eb851f

08005ce4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	f107 001c 	add.w	r0, r7, #28
 8005cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005cfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005cfe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005d02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005d06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005d0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005d0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005d1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	b004      	add	sp, #16
 8005d36:	4770      	bx	lr

08005d38 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005d7e:	2002      	movs	r0, #2
 8005d80:	f7fb fa1c 	bl	80011bc <HAL_Delay>
  
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bc80      	pop	{r7}
 8005da6:	4770      	bx	lr

08005da8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dc6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005dcc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005dd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr

08005dfa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	b2db      	uxtb	r3, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3314      	adds	r3, #20
 8005e20:	461a      	mov	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
}  
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e5c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e62:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0

}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e9a:	2310      	movs	r3, #16
 8005e9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e9e:	2340      	movs	r3, #64	; 0x40
 8005ea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff ff78 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	2110      	movs	r1, #16
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa40 	bl	8006344 <SDMMC_GetCmdResp1>
 8005ec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3720      	adds	r7, #32
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ede:	2311      	movs	r3, #17
 8005ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff ff56 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	2111      	movs	r1, #17
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa1e 	bl	8006344 <SDMMC_GetCmdResp1>
 8005f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3720      	adds	r7, #32
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b088      	sub	sp, #32
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f22:	2312      	movs	r3, #18
 8005f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f26:	2340      	movs	r3, #64	; 0x40
 8005f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f34:	f107 0308 	add.w	r3, r7, #8
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff ff34 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f44:	2112      	movs	r1, #18
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9fc 	bl	8006344 <SDMMC_GetCmdResp1>
 8005f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f66:	2318      	movs	r3, #24
 8005f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff12 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	2118      	movs	r1, #24
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9da 	bl	8006344 <SDMMC_GetCmdResp1>
 8005f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f92:	69fb      	ldr	r3, [r7, #28]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005faa:	2319      	movs	r3, #25
 8005fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fbc:	f107 0308 	add.w	r3, r7, #8
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fef0 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fcc:	2119      	movs	r1, #25
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9b8 	bl	8006344 <SDMMC_GetCmdResp1>
 8005fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005fec:	230c      	movs	r3, #12
 8005fee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ffc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fecf 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800600a:	4a05      	ldr	r2, [pc, #20]	; (8006020 <SDMMC_CmdStopTransfer+0x40>)
 800600c:	210c      	movs	r1, #12
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f998 	bl	8006344 <SDMMC_GetCmdResp1>
 8006014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006016:	69fb      	ldr	r3, [r7, #28]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	05f5e100 	.word	0x05f5e100

08006024 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006034:	2307      	movs	r3, #7
 8006036:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006038:	2340      	movs	r3, #64	; 0x40
 800603a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006044:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006046:	f107 0310 	add.w	r3, r7, #16
 800604a:	4619      	mov	r1, r3
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff feab 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006052:	f241 3288 	movw	r2, #5000	; 0x1388
 8006056:	2107      	movs	r1, #7
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f973 	bl	8006344 <SDMMC_GetCmdResp1>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	; 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b088      	sub	sp, #32
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800607a:	2300      	movs	r3, #0
 800607c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800607e:	2300      	movs	r3, #0
 8006080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006088:	f107 0308 	add.w	r3, r7, #8
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fe8a 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f92d 	bl	80062f4 <SDMMC_GetCmdError>
 800609a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800609c:	69fb      	ldr	r3, [r7, #28]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b088      	sub	sp, #32
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80060ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80060b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80060b4:	2308      	movs	r3, #8
 80060b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060bc:	2300      	movs	r3, #0
 80060be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fe6b 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fb16 	bl	8006704 <SDMMC_GetCmdResp7>
 80060d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060da:	69fb      	ldr	r3, [r7, #28]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060f2:	2337      	movs	r3, #55	; 0x37
 80060f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060f6:	2340      	movs	r3, #64	; 0x40
 80060f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006102:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006104:	f107 0308 	add.w	r3, r7, #8
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fe4c 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	2137      	movs	r1, #55	; 0x37
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f914 	bl	8006344 <SDMMC_GetCmdResp1>
 800611c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800611e:	69fb      	ldr	r3, [r7, #28]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3720      	adds	r7, #32
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800613c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800613e:	2329      	movs	r3, #41	; 0x29
 8006140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006142:	2340      	movs	r3, #64	; 0x40
 8006144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800614a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006150:	f107 0308 	add.w	r3, r7, #8
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fe26 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa23 	bl	80065a8 <SDMMC_GetCmdResp3>
 8006162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006164:	69fb      	ldr	r3, [r7, #28]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b088      	sub	sp, #32
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800617c:	2306      	movs	r3, #6
 800617e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006180:	2340      	movs	r3, #64	; 0x40
 8006182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800618e:	f107 0308 	add.w	r3, r7, #8
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fe07 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	2106      	movs	r1, #6
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8cf 	bl	8006344 <SDMMC_GetCmdResp1>
 80061a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a8:	69fb      	ldr	r3, [r7, #28]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b088      	sub	sp, #32
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80061be:	2333      	movs	r3, #51	; 0x33
 80061c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061d0:	f107 0308 	add.w	r3, r7, #8
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fde6 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80061dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e0:	2133      	movs	r1, #51	; 0x33
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8ae 	bl	8006344 <SDMMC_GetCmdResp1>
 80061e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ea:	69fb      	ldr	r3, [r7, #28]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006200:	2302      	movs	r3, #2
 8006202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006204:	23c0      	movs	r3, #192	; 0xc0
 8006206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800620c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006210:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006212:	f107 0308 	add.w	r3, r7, #8
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff fdc5 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f97c 	bl	800651c <SDMMC_GetCmdResp2>
 8006224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006226:	69fb      	ldr	r3, [r7, #28]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800623e:	2309      	movs	r3, #9
 8006240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006242:	23c0      	movs	r3, #192	; 0xc0
 8006244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800624a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800624e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fda6 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f95d 	bl	800651c <SDMMC_GetCmdResp2>
 8006262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006264:	69fb      	ldr	r3, [r7, #28]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b088      	sub	sp, #32
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800627c:	2303      	movs	r3, #3
 800627e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006280:	2340      	movs	r3, #64	; 0x40
 8006282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fd87 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	2103      	movs	r1, #3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9bc 	bl	800661c <SDMMC_GetCmdResp6>
 80062a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a6:	69fb      	ldr	r3, [r7, #28]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b088      	sub	sp, #32
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062be:	230d      	movs	r3, #13
 80062c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062c2:	2340      	movs	r3, #64	; 0x40
 80062c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062d0:	f107 0308 	add.w	r3, r7, #8
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fd66 	bl	8005da8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	210d      	movs	r1, #13
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f82e 	bl	8006344 <SDMMC_GetCmdResp1>
 80062e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ea:	69fb      	ldr	r3, [r7, #28]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80062f4:	b490      	push	{r4, r7}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <SDMMC_GetCmdError+0x48>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0f      	ldr	r2, [pc, #60]	; (8006340 <SDMMC_GetCmdError+0x4c>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	0a5b      	lsrs	r3, r3, #9
 8006308:	f241 3288 	movw	r2, #5000	; 0x1388
 800630c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006310:	4623      	mov	r3, r4
 8006312:	1e5c      	subs	r4, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800631c:	e009      	b.n	8006332 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f2      	beq.n	8006310 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	22c5      	movs	r2, #197	; 0xc5
 800632e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bc90      	pop	{r4, r7}
 800633a:	4770      	bx	lr
 800633c:	20000000 	.word	0x20000000
 8006340:	10624dd3 	.word	0x10624dd3

08006344 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006344:	b590      	push	{r4, r7, lr}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	460b      	mov	r3, r1
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006352:	4b6f      	ldr	r3, [pc, #444]	; (8006510 <SDMMC_GetCmdResp1+0x1cc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a6f      	ldr	r2, [pc, #444]	; (8006514 <SDMMC_GetCmdResp1+0x1d0>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	0a5b      	lsrs	r3, r3, #9
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006364:	4623      	mov	r3, r4
 8006366:	1e5c      	subs	r4, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800636c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006370:	e0c9      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f0      	beq.n	8006364 <SDMMC_GetCmdResp1+0x20>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1eb      	bne.n	8006364 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2204      	movs	r2, #4
 800639c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800639e:	2304      	movs	r3, #4
 80063a0:	e0b1      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0a6      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	22c5      	movs	r2, #197	; 0xc5
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fd1b 	bl	8005dfa <SDIO_GetCommandResponse>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	7afb      	ldrb	r3, [r7, #11]
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d001      	beq.n	80063d2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e099      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80063d2:	2100      	movs	r1, #0
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7ff fd1c 	bl	8005e12 <SDIO_GetResponse>
 80063da:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4b4e      	ldr	r3, [pc, #312]	; (8006518 <SDMMC_GetCmdResp1+0x1d4>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e08d      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	da02      	bge.n	80063f6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80063f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063f4:	e087      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006400:	2340      	movs	r3, #64	; 0x40
 8006402:	e080      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	e079      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800641c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006420:	e071      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800642c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006430:	e069      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800643c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006440:	e061      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800644c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006450:	e059      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800645c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006460:	e051      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800646c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006470:	e049      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800647c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006480:	e041      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800648c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006490:	e039      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800649c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064a0:	e031      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80064ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80064b0:	e029      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80064bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80064c0:	e021      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80064cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064d0:	e019      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80064dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064e0:	e011      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80064ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064f0:	e009      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006500:	e001      	b.n	8006506 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006506:	4618      	mov	r0, r3
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}
 800650e:	bf00      	nop
 8006510:	20000000 	.word	0x20000000
 8006514:	10624dd3 	.word	0x10624dd3
 8006518:	fdffe008 	.word	0xfdffe008

0800651c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800651c:	b490      	push	{r4, r7}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <SDMMC_GetCmdResp2+0x84>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <SDMMC_GetCmdResp2+0x88>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	0a5b      	lsrs	r3, r3, #9
 8006530:	f241 3288 	movw	r2, #5000	; 0x1388
 8006534:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006538:	4623      	mov	r3, r4
 800653a:	1e5c      	subs	r4, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006544:	e026      	b.n	8006594 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0f0      	beq.n	8006538 <SDMMC_GetCmdResp2+0x1c>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1eb      	bne.n	8006538 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2204      	movs	r2, #4
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006572:	2304      	movs	r3, #4
 8006574:	e00e      	b.n	8006594 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006588:	2301      	movs	r3, #1
 800658a:	e003      	b.n	8006594 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	22c5      	movs	r2, #197	; 0xc5
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bc90      	pop	{r4, r7}
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000000 	.word	0x20000000
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80065a8:	b490      	push	{r4, r7}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065b0:	4b18      	ldr	r3, [pc, #96]	; (8006614 <SDMMC_GetCmdResp3+0x6c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a18      	ldr	r2, [pc, #96]	; (8006618 <SDMMC_GetCmdResp3+0x70>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	0a5b      	lsrs	r3, r3, #9
 80065bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80065c4:	4623      	mov	r3, r4
 80065c6:	1e5c      	subs	r4, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065d0:	e01b      	b.n	800660a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <SDMMC_GetCmdResp3+0x1c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1eb      	bne.n	80065c4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d004      	beq.n	8006602 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065fe:	2304      	movs	r3, #4
 8006600:	e003      	b.n	800660a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	22c5      	movs	r2, #197	; 0xc5
 8006606:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bc90      	pop	{r4, r7}
 8006612:	4770      	bx	lr
 8006614:	20000000 	.word	0x20000000
 8006618:	10624dd3 	.word	0x10624dd3

0800661c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800661c:	b590      	push	{r4, r7, lr}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	460b      	mov	r3, r1
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <SDMMC_GetCmdResp6+0xe0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a34      	ldr	r2, [pc, #208]	; (8006700 <SDMMC_GetCmdResp6+0xe4>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	0a5b      	lsrs	r3, r3, #9
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800663e:	4623      	mov	r3, r4
 8006640:	1e5c      	subs	r4, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d102      	bne.n	800664c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006646:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800664a:	e052      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <SDMMC_GetCmdResp6+0x22>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1eb      	bne.n	800663e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2204      	movs	r2, #4
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006678:	2304      	movs	r3, #4
 800667a:	e03a      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800668e:	2301      	movs	r3, #1
 8006690:	e02f      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fbb1 	bl	8005dfa <SDIO_GetCommandResponse>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	4293      	cmp	r3, r2
 80066a0:	d001      	beq.n	80066a6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e025      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	22c5      	movs	r2, #197	; 0xc5
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066ac:	2100      	movs	r1, #0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fbaf 	bl	8005e12 <SDIO_GetResponse>
 80066b4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	0c1b      	lsrs	r3, r3, #16
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e011      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066dc:	e009      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066ec:	e001      	b.n	80066f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20000000 	.word	0x20000000
 8006700:	10624dd3 	.word	0x10624dd3

08006704 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006704:	b490      	push	{r4, r7}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800670c:	4b21      	ldr	r3, [pc, #132]	; (8006794 <SDMMC_GetCmdResp7+0x90>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a21      	ldr	r2, [pc, #132]	; (8006798 <SDMMC_GetCmdResp7+0x94>)
 8006712:	fba2 2303 	umull	r2, r3, r2, r3
 8006716:	0a5b      	lsrs	r3, r3, #9
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006720:	4623      	mov	r3, r4
 8006722:	1e5c      	subs	r4, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800672c:	e02c      	b.n	8006788 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <SDMMC_GetCmdResp7+0x1c>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1eb      	bne.n	8006720 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2204      	movs	r2, #4
 8006758:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800675a:	2304      	movs	r3, #4
 800675c:	e014      	b.n	8006788 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d004      	beq.n	8006774 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006770:	2301      	movs	r3, #1
 8006772:	e009      	b.n	8006788 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2240      	movs	r2, #64	; 0x40
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006786:	2300      	movs	r3, #0
  
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bc90      	pop	{r4, r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000000 	.word	0x20000000
 8006798:	10624dd3 	.word	0x10624dd3

0800679c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800679c:	b084      	sub	sp, #16
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	f107 001c 	add.w	r0, r7, #28
 80067aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d122      	bne.n	80067fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d105      	bne.n	80067ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 faa0 	bl	8007d34 <USB_CoreReset>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e010      	b.n	800681c <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fa94 	bl	8007d34 <USB_CoreReset>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	2b01      	cmp	r3, #1
 8006820:	d10b      	bne.n	800683a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f043 0206 	orr.w	r2, r3, #6
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f043 0220 	orr.w	r2, r3, #32
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006846:	b004      	add	sp, #16
 8006848:	4770      	bx	lr
	...

0800684c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d165      	bne.n	800692c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4a41      	ldr	r2, [pc, #260]	; (8006968 <USB_SetTurnaroundTime+0x11c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d906      	bls.n	8006876 <USB_SetTurnaroundTime+0x2a>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a40      	ldr	r2, [pc, #256]	; (800696c <USB_SetTurnaroundTime+0x120>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d802      	bhi.n	8006876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006870:	230f      	movs	r3, #15
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e062      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4a3c      	ldr	r2, [pc, #240]	; (800696c <USB_SetTurnaroundTime+0x120>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d906      	bls.n	800688c <USB_SetTurnaroundTime+0x40>
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4a3b      	ldr	r2, [pc, #236]	; (8006970 <USB_SetTurnaroundTime+0x124>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d802      	bhi.n	800688c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006886:	230e      	movs	r3, #14
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	e057      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4a38      	ldr	r2, [pc, #224]	; (8006970 <USB_SetTurnaroundTime+0x124>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d906      	bls.n	80068a2 <USB_SetTurnaroundTime+0x56>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4a37      	ldr	r2, [pc, #220]	; (8006974 <USB_SetTurnaroundTime+0x128>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d802      	bhi.n	80068a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800689c:	230d      	movs	r3, #13
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e04c      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	4a33      	ldr	r2, [pc, #204]	; (8006974 <USB_SetTurnaroundTime+0x128>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d906      	bls.n	80068b8 <USB_SetTurnaroundTime+0x6c>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4a32      	ldr	r2, [pc, #200]	; (8006978 <USB_SetTurnaroundTime+0x12c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d802      	bhi.n	80068b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068b2:	230c      	movs	r3, #12
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e041      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4a2f      	ldr	r2, [pc, #188]	; (8006978 <USB_SetTurnaroundTime+0x12c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d906      	bls.n	80068ce <USB_SetTurnaroundTime+0x82>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4a2e      	ldr	r2, [pc, #184]	; (800697c <USB_SetTurnaroundTime+0x130>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d802      	bhi.n	80068ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068c8:	230b      	movs	r3, #11
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e036      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4a2a      	ldr	r2, [pc, #168]	; (800697c <USB_SetTurnaroundTime+0x130>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d906      	bls.n	80068e4 <USB_SetTurnaroundTime+0x98>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <USB_SetTurnaroundTime+0x134>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d802      	bhi.n	80068e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068de:	230a      	movs	r3, #10
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	e02b      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4a26      	ldr	r2, [pc, #152]	; (8006980 <USB_SetTurnaroundTime+0x134>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d906      	bls.n	80068fa <USB_SetTurnaroundTime+0xae>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4a25      	ldr	r2, [pc, #148]	; (8006984 <USB_SetTurnaroundTime+0x138>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d802      	bhi.n	80068fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068f4:	2309      	movs	r3, #9
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	e020      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4a21      	ldr	r2, [pc, #132]	; (8006984 <USB_SetTurnaroundTime+0x138>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d906      	bls.n	8006910 <USB_SetTurnaroundTime+0xc4>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4a20      	ldr	r2, [pc, #128]	; (8006988 <USB_SetTurnaroundTime+0x13c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d802      	bhi.n	8006910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800690a:	2308      	movs	r3, #8
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	e015      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <USB_SetTurnaroundTime+0x13c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d906      	bls.n	8006926 <USB_SetTurnaroundTime+0xda>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <USB_SetTurnaroundTime+0x140>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d802      	bhi.n	8006926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006920:	2307      	movs	r3, #7
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	e00a      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006926:	2306      	movs	r3, #6
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e007      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d102      	bne.n	8006938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006932:	2309      	movs	r3, #9
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	e001      	b.n	800693c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006938:	2309      	movs	r3, #9
 800693a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006954:	431a      	orrs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	00d8acbf 	.word	0x00d8acbf
 800696c:	00e4e1bf 	.word	0x00e4e1bf
 8006970:	00f423ff 	.word	0x00f423ff
 8006974:	0106737f 	.word	0x0106737f
 8006978:	011a499f 	.word	0x011a499f
 800697c:	01312cff 	.word	0x01312cff
 8006980:	014ca43f 	.word	0x014ca43f
 8006984:	016e35ff 	.word	0x016e35ff
 8006988:	01a6ab1f 	.word	0x01a6ab1f
 800698c:	01e847ff 	.word	0x01e847ff

08006990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f043 0201 	orr.w	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 0201 	bic.w	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d106      	bne.n	80069fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e00b      	b.n	8006a14 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	60da      	str	r2, [r3, #12]
 8006a0e:	e001      	b.n	8006a14 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e003      	b.n	8006a1c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006a14:	2032      	movs	r0, #50	; 0x32
 8006a16:	f7fa fbd1 	bl	80011bc <HAL_Delay>

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a24:	b084      	sub	sp, #16
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	e009      	b.n	8006a58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3340      	adds	r3, #64	; 0x40
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3301      	adds	r3, #1
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b0e      	cmp	r3, #14
 8006a5c:	d9f2      	bls.n	8006a44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d11c      	bne.n	8006a9e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a72:	f043 0302 	orr.w	r3, r3, #2
 8006a76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a9c:	e00b      	b.n	8006ab6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006abc:	461a      	mov	r2, r3
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	4619      	mov	r1, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	680b      	ldr	r3, [r1, #0]
 8006ad4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10c      	bne.n	8006af6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f945 	bl	8006d74 <USB_SetDevSpeed>
 8006aea:	e008      	b.n	8006afe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006aec:	2101      	movs	r1, #1
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f940 	bl	8006d74 <USB_SetDevSpeed>
 8006af4:	e003      	b.n	8006afe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006af6:	2103      	movs	r1, #3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f93b 	bl	8006d74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006afe:	2110      	movs	r1, #16
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8f3 	bl	8006cec <USB_FlushTxFifo>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f90f 	bl	8006d34 <USB_FlushRxFifo>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	461a      	mov	r2, r3
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	461a      	mov	r2, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2300      	movs	r3, #0
 8006b42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	e043      	b.n	8006bd2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b60:	d118      	bne.n	8006b94 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	461a      	mov	r2, r3
 8006b76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	e013      	b.n	8006ba6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e008      	b.n	8006ba6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d3b7      	bcc.n	8006b4a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	e043      	b.n	8006c68 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf6:	d118      	bne.n	8006c2a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e013      	b.n	8006c3c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	e008      	b.n	8006c3c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	461a      	mov	r2, r3
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	461a      	mov	r2, r3
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3301      	adds	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d3b7      	bcc.n	8006be0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f043 0210 	orr.w	r2, r3, #16
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699a      	ldr	r2, [r3, #24]
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <USB_DevInit+0x2c4>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f043 0208 	orr.w	r2, r3, #8
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d107      	bne.n	8006cd8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cd0:	f043 0304 	orr.w	r3, r3, #4
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ce4:	b004      	add	sp, #16
 8006ce6:	4770      	bx	lr
 8006ce8:	803c3800 	.word	0x803c3800

08006cec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	019b      	lsls	r3, r3, #6
 8006cfe:	f043 0220 	orr.w	r2, r3, #32
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a08      	ldr	r2, [pc, #32]	; (8006d30 <USB_FlushTxFifo+0x44>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d901      	bls.n	8006d18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e006      	b.n	8006d26 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0320 	and.w	r3, r3, #32
 8006d20:	2b20      	cmp	r3, #32
 8006d22:	d0f0      	beq.n	8006d06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr
 8006d30:	00030d40 	.word	0x00030d40

08006d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2210      	movs	r2, #16
 8006d44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <USB_FlushRxFifo+0x3c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d901      	bls.n	8006d58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e006      	b.n	8006d66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d0f0      	beq.n	8006d46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr
 8006d70:	00030d40 	.word	0x00030d40

08006d74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	68f9      	ldr	r1, [r7, #12]
 8006d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d94:	4313      	orrs	r3, r2
 8006d96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 0306 	and.w	r3, r3, #6
 8006dbc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	75fb      	strb	r3, [r7, #23]
 8006dc8:	e00a      	b.n	8006de0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d002      	beq.n	8006dd6 <USB_GetDevSpeed+0x32>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b06      	cmp	r3, #6
 8006dd4:	d102      	bne.n	8006ddc <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	75fb      	strb	r3, [r7, #23]
 8006dda:	e001      	b.n	8006de0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ddc:	230f      	movs	r3, #15
 8006dde:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d13a      	bne.n	8006e7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	2101      	movs	r1, #1
 8006e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	68f9      	ldr	r1, [r7, #12]
 8006e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e26:	4313      	orrs	r3, r2
 8006e28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d155      	bne.n	8006eec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	78db      	ldrb	r3, [r3, #3]
 8006e5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	059b      	lsls	r3, r3, #22
 8006e62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e64:	4313      	orrs	r3, r2
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	e036      	b.n	8006eec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e84:	69da      	ldr	r2, [r3, #28]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	2101      	movs	r1, #1
 8006e90:	fa01 f303 	lsl.w	r3, r1, r3
 8006e94:	041b      	lsls	r3, r3, #16
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11a      	bne.n	8006eec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	78db      	ldrb	r3, [r3, #3]
 8006ed0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr

08006ef8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d161      	bne.n	8006fd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f2a:	d11f      	bne.n	8006f6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	43db      	mvns	r3, r3
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	0159      	lsls	r1, r3, #5
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	440b      	add	r3, r1
 8006fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4b35      	ldr	r3, [pc, #212]	; (80070a8 <USB_DeactivateEndpoint+0x1b0>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]
 8006fd6:	e060      	b.n	800709a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fee:	d11f      	bne.n	8007030 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	0151      	lsls	r1, r2, #5
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	440a      	add	r2, r1
 8007006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800700a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800700e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800702a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800702e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	2101      	movs	r1, #1
 8007042:	fa01 f303 	lsl.w	r3, r1, r3
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	43db      	mvns	r3, r3
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007050:	4013      	ands	r3, r2
 8007052:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	69da      	ldr	r2, [r3, #28]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	f003 030f 	and.w	r3, r3, #15
 8007064:	2101      	movs	r1, #1
 8007066:	fa01 f303 	lsl.w	r3, r1, r3
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	43db      	mvns	r3, r3
 800706e:	68f9      	ldr	r1, [r7, #12]
 8007070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007074:	4013      	ands	r3, r2
 8007076:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	0159      	lsls	r1, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	440b      	add	r3, r1
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	4619      	mov	r1, r3
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <USB_DeactivateEndpoint+0x1b4>)
 8007096:	4013      	ands	r3, r2
 8007098:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	ec337800 	.word	0xec337800
 80070ac:	eff37800 	.word	0xeff37800

080070b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	; 0x28
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	f040 815c 	bne.w	800738a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d132      	bne.n	8007140 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800711c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007138:	0cdb      	lsrs	r3, r3, #19
 800713a:	04db      	lsls	r3, r3, #19
 800713c:	6113      	str	r3, [r2, #16]
 800713e:	e074      	b.n	800722a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715a:	0cdb      	lsrs	r3, r3, #19
 800715c:	04db      	lsls	r3, r3, #19
 800715e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800717e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6959      	ldr	r1, [r3, #20]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	440b      	add	r3, r1
 800719c:	1e59      	subs	r1, r3, #1
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80071a6:	04d9      	lsls	r1, r3, #19
 80071a8:	4b9d      	ldr	r3, [pc, #628]	; (8007420 <USB_EPStartXfer+0x370>)
 80071aa:	400b      	ands	r3, r1
 80071ac:	69b9      	ldr	r1, [r7, #24]
 80071ae:	0148      	lsls	r0, r1, #5
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	4401      	add	r1, r0
 80071b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071b8:	4313      	orrs	r3, r2
 80071ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d2:	69b9      	ldr	r1, [r7, #24]
 80071d4:	0148      	lsls	r0, r1, #5
 80071d6:	69f9      	ldr	r1, [r7, #28]
 80071d8:	4401      	add	r1, r0
 80071da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071de:	4313      	orrs	r3, r2
 80071e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	78db      	ldrb	r3, [r3, #3]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11f      	bne.n	800722a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007204:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007208:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	440a      	add	r2, r1
 8007220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007228:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d14b      	bne.n	80072c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	461a      	mov	r2, r3
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	78db      	ldrb	r3, [r3, #3]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d128      	bne.n	80072a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	2b00      	cmp	r3, #0
 8007262:	d110      	bne.n	8007286 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	e00f      	b.n	80072a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	e12f      	b.n	8007528 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	78db      	ldrb	r3, [r3, #3]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d015      	beq.n	800731c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8117 	beq.w	8007528 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	2101      	movs	r1, #1
 800730c:	fa01 f303 	lsl.w	r3, r1, r3
 8007310:	69f9      	ldr	r1, [r7, #28]
 8007312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007316:	4313      	orrs	r3, r2
 8007318:	634b      	str	r3, [r1, #52]	; 0x34
 800731a:	e105      	b.n	8007528 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007328:	2b00      	cmp	r3, #0
 800732a:	d110      	bne.n	800734e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e00f      	b.n	800736e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	68d9      	ldr	r1, [r3, #12]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	b298      	uxth	r0, r3
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4603      	mov	r3, r0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fa2a 	bl	80077dc <USB_WritePacket>
 8007388:	e0ce      	b.n	8007528 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a4:	0cdb      	lsrs	r3, r3, #19
 80073a6:	04db      	lsls	r3, r3, #19
 80073a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d126      	bne.n	8007424 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ec:	69b9      	ldr	r1, [r7, #24]
 80073ee:	0148      	lsls	r0, r1, #5
 80073f0:	69f9      	ldr	r1, [r7, #28]
 80073f2:	4401      	add	r1, r0
 80073f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073f8:	4313      	orrs	r3, r2
 80073fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	440a      	add	r2, r1
 8007412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800741a:	6113      	str	r3, [r2, #16]
 800741c:	e036      	b.n	800748c <USB_EPStartXfer+0x3dc>
 800741e:	bf00      	nop
 8007420:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	4413      	add	r3, r2
 800742e:	1e5a      	subs	r2, r3, #1
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	8afb      	ldrh	r3, [r7, #22]
 800744a:	04d9      	lsls	r1, r3, #19
 800744c:	4b39      	ldr	r3, [pc, #228]	; (8007534 <USB_EPStartXfer+0x484>)
 800744e:	400b      	ands	r3, r1
 8007450:	69b9      	ldr	r1, [r7, #24]
 8007452:	0148      	lsls	r0, r1, #5
 8007454:	69f9      	ldr	r1, [r7, #28]
 8007456:	4401      	add	r1, r0
 8007458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800745c:	4313      	orrs	r3, r2
 800745e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	8af9      	ldrh	r1, [r7, #22]
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800747c:	69b9      	ldr	r1, [r7, #24]
 800747e:	0148      	lsls	r0, r1, #5
 8007480:	69f9      	ldr	r1, [r7, #28]
 8007482:	4401      	add	r1, r0
 8007484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007488:	4313      	orrs	r3, r2
 800748a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d10d      	bne.n	80074ae <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	68d9      	ldr	r1, [r3, #12]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	460a      	mov	r2, r1
 80074ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	78db      	ldrb	r3, [r3, #3]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d128      	bne.n	8007508 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d110      	bne.n	80074e8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	e00f      	b.n	8007508 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007506:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007522:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3720      	adds	r7, #32
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	1ff80000 	.word	0x1ff80000

08007538 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b01      	cmp	r3, #1
 8007556:	f040 80cd 	bne.w	80076f4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d132      	bne.n	80075c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007580:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	0cdb      	lsrs	r3, r3, #19
 80075c2:	04db      	lsls	r3, r3, #19
 80075c4:	6113      	str	r3, [r2, #16]
 80075c6:	e04e      	b.n	8007666 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	0cdb      	lsrs	r3, r3, #19
 80075e4:	04db      	lsls	r3, r3, #19
 80075e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800760a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	429a      	cmp	r2, r3
 8007616:	d903      	bls.n	8007620 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	0151      	lsls	r1, r2, #5
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	440a      	add	r2, r1
 8007636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800763e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764c:	691a      	ldr	r2, [r3, #16]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007656:	6939      	ldr	r1, [r7, #16]
 8007658:	0148      	lsls	r0, r1, #5
 800765a:	6979      	ldr	r1, [r7, #20]
 800765c:	4401      	add	r1, r0
 800765e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007662:	4313      	orrs	r3, r2
 8007664:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d11e      	bne.n	80076aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007680:	461a      	mov	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	e092      	b.n	80077d0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d07e      	beq.n	80077d0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 030f 	and.w	r3, r3, #15
 80076e2:	2101      	movs	r1, #1
 80076e4:	fa01 f303 	lsl.w	r3, r1, r3
 80076e8:	6979      	ldr	r1, [r7, #20]
 80076ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ee:	4313      	orrs	r3, r2
 80076f0:	634b      	str	r3, [r1, #52]	; 0x34
 80076f2:	e06d      	b.n	80077d0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770e:	0cdb      	lsrs	r3, r3, #19
 8007710:	04db      	lsls	r3, r3, #19
 8007712:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007736:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007766:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800777e:	6939      	ldr	r1, [r7, #16]
 8007780:	0148      	lsls	r0, r1, #5
 8007782:	6979      	ldr	r1, [r7, #20]
 8007784:	4401      	add	r1, r0
 8007786:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800778a:	4313      	orrs	r3, r2
 800778c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10d      	bne.n	80077b0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	68d9      	ldr	r1, [r3, #12]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ac:	460a      	mov	r2, r1
 80077ae:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077dc:	b480      	push	{r7}
 80077de:	b089      	sub	sp, #36	; 0x24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4611      	mov	r1, r2
 80077e8:	461a      	mov	r2, r3
 80077ea:	460b      	mov	r3, r1
 80077ec:	71fb      	strb	r3, [r7, #7]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80077fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d11a      	bne.n	8007838 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007802:	88bb      	ldrh	r3, [r7, #4]
 8007804:	3303      	adds	r3, #3
 8007806:	089b      	lsrs	r3, r3, #2
 8007808:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800780a:	2300      	movs	r3, #0
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	e00f      	b.n	8007830 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	031a      	lsls	r2, r3, #12
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	4413      	add	r3, r2
 8007818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781c:	461a      	mov	r2, r3
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	3304      	adds	r3, #4
 8007828:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	3301      	adds	r3, #1
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	429a      	cmp	r2, r3
 8007836:	d3eb      	bcc.n	8007810 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3724      	adds	r7, #36	; 0x24
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr

08007844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007844:	b480      	push	{r7}
 8007846:	b089      	sub	sp, #36	; 0x24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	3303      	adds	r3, #3
 800785e:	089b      	lsrs	r3, r3, #2
 8007860:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e00b      	b.n	8007880 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	601a      	str	r2, [r3, #0]
    pDest++;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3304      	adds	r3, #4
 8007878:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	3301      	adds	r3, #1
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	429a      	cmp	r2, r3
 8007886:	d3ef      	bcc.n	8007868 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007888:	69fb      	ldr	r3, [r7, #28]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3724      	adds	r7, #36	; 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	785b      	ldrb	r3, [r3, #1]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d12c      	bne.n	800790a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	db12      	blt.n	80078e8 <USB_EPSetStall+0x54>
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00f      	beq.n	80078e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	0151      	lsls	r1, r2, #5
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	440a      	add	r2, r1
 80078fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	e02b      	b.n	8007962 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	db12      	blt.n	8007942 <USB_EPSetStall+0xae>
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00f      	beq.n	8007942 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	440a      	add	r2, r1
 8007938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800793c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007940:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007960:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr

0800796e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d128      	bne.n	80079dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	78db      	ldrb	r3, [r3, #3]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d003      	beq.n	80079ba <USB_EPClearStall+0x4c>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	78db      	ldrb	r3, [r3, #3]
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d138      	bne.n	8007a2c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	0151      	lsls	r1, r2, #5
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	440a      	add	r2, r1
 80079d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e027      	b.n	8007a2c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	78db      	ldrb	r3, [r3, #3]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d003      	beq.n	8007a0c <USB_EPClearStall+0x9e>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d10f      	bne.n	8007a2c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a2a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a56:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a5a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a6c:	68f9      	ldr	r1, [r7, #12]
 8007a6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a72:	4313      	orrs	r3, r2
 8007a74:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a9c:	f023 0303 	bic.w	r3, r3, #3
 8007aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ab0:	f023 0302 	bic.w	r3, r3, #2
 8007ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007af0:	f043 0302 	orr.w	r3, r3, #2
 8007af4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4013      	ands	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b42:	69db      	ldr	r3, [r3, #28]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4013      	ands	r3, r2
 8007b48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	0c1b      	lsrs	r3, r3, #16
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr

08007b58 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	b29b      	uxth	r3, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf4:	01db      	lsls	r3, r3, #7
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c12:	68bb      	ldr	r3, [r7, #8]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c56:	f023 0307 	bic.w	r3, r3, #7
 8007c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	460b      	mov	r3, r1
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	333c      	adds	r3, #60	; 0x3c
 8007c92:	3304      	adds	r3, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	4a25      	ldr	r2, [pc, #148]	; (8007d30 <USB_EP0_OutStart+0xb4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d90a      	bls.n	8007cb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb0:	d101      	bne.n	8007cb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e037      	b.n	8007d26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce4:	f043 0318 	orr.w	r3, r3, #24
 8007ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d10f      	bne.n	8007d24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	4f54300a 	.word	0x4f54300a

08007d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3301      	adds	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4a12      	ldr	r2, [pc, #72]	; (8007d94 <USB_CoreReset+0x60>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e01b      	b.n	8007d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	daf2      	bge.n	8007d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f043 0201 	orr.w	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a08      	ldr	r2, [pc, #32]	; (8007d94 <USB_CoreReset+0x60>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d901      	bls.n	8007d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e006      	b.n	8007d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d0f0      	beq.n	8007d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr
 8007d94:	00030d40 	.word	0x00030d40

08007d98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007d9c:	4904      	ldr	r1, [pc, #16]	; (8007db0 <MX_FATFS_Init+0x18>)
 8007d9e:	4805      	ldr	r0, [pc, #20]	; (8007db4 <MX_FATFS_Init+0x1c>)
 8007da0:	f004 fa4c 	bl	800c23c <FATFS_LinkDriver>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <MX_FATFS_Init+0x20>)
 8007daa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007dac:	bf00      	nop
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	2000040c 	.word	0x2000040c
 8007db4:	0800d96c 	.word	0x0800d96c
 8007db8:	20000408 	.word	0x20000408

08007dbc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007dc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr
	...

08007dcc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007dd6:	f000 f8a9 	bl	8007f2c <BSP_SD_IsDetected>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d001      	beq.n	8007de4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e012      	b.n	8007e0a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007de4:	480b      	ldr	r0, [pc, #44]	; (8007e14 <BSP_SD_Init+0x48>)
 8007de6:	f7fc fa33 	bl	8004250 <HAL_SD_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007df8:	4806      	ldr	r0, [pc, #24]	; (8007e14 <BSP_SD_Init+0x48>)
 8007dfa:	f7fd f9a7 	bl	800514c <HAL_SD_ConfigWideBusOperation>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007e08:	79fb      	ldrb	r3, [r7, #7]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000338 	.word	0x20000338

08007e18 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	4806      	ldr	r0, [pc, #24]	; (8007e50 <BSP_SD_ReadBlocks+0x38>)
 8007e36:	f7fc fa9b 	bl	8004370 <HAL_SD_ReadBlocks>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000338 	.word	0x20000338

08007e54 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	4806      	ldr	r0, [pc, #24]	; (8007e8c <BSP_SD_WriteBlocks+0x38>)
 8007e72:	f7fc fc77 	bl	8004764 <HAL_SD_WriteBlocks>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000338 	.word	0x20000338

08007e90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007e94:	4805      	ldr	r0, [pc, #20]	; (8007eac <BSP_SD_GetCardState+0x1c>)
 8007e96:	f7fd f9d5 	bl	8005244 <HAL_SD_GetCardState>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	bf14      	ite	ne
 8007ea0:	2301      	movne	r3, #1
 8007ea2:	2300      	moveq	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000338 	.word	0x20000338

08007eb0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4803      	ldr	r0, [pc, #12]	; (8007ec8 <BSP_SD_GetCardInfo+0x18>)
 8007ebc:	f7fd f91a 	bl	80050f4 <HAL_SD_GetCardInfo>
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	20000338 	.word	0x20000338

08007ecc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007ed4:	f000 f818 	bl	8007f08 <BSP_SD_AbortCallback>
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007ee8:	f000 f814 	bl	8007f14 <BSP_SD_WriteCpltCallback>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007efc:	f000 f810 	bl	8007f20 <BSP_SD_ReadCpltCallback>
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	af00      	add	r7, sp, #0

}
 8007f0c:	bf00      	nop
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr

08007f14 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0

}
 8007f18:	bf00      	nop
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr

08007f20 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0

}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007f32:	2301      	movs	r3, #1
 8007f34:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007f36:	f000 f80b 	bl	8007f50 <BSP_PlatformIsDetected>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007f40:	2300      	movs	r3, #0
 8007f42:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	b2db      	uxtb	r3, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007f56:	2301      	movs	r3, #1
 8007f58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007f5a:	2104      	movs	r1, #4
 8007f5c:	4806      	ldr	r0, [pc, #24]	; (8007f78 <BSP_PlatformIsDetected+0x28>)
 8007f5e:	f7fa fb5f 	bl	8002620 <HAL_GPIO_ReadPin>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40021800 	.word	0x40021800

08007f7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7c1b      	ldrb	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d115      	bne.n	8007fc0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f98:	2202      	movs	r2, #2
 8007f9a:	2181      	movs	r1, #129	; 0x81
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f004 fe74 	bl	800cc8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fac:	2202      	movs	r2, #2
 8007fae:	2101      	movs	r1, #1
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f004 fe6a 	bl	800cc8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007fbe:	e012      	b.n	8007fe6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fc0:	2340      	movs	r3, #64	; 0x40
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	2181      	movs	r1, #129	; 0x81
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f004 fe5f 	bl	800cc8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fd2:	2340      	movs	r3, #64	; 0x40
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f004 fe56 	bl	800cc8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	2203      	movs	r2, #3
 8007fea:	2182      	movs	r1, #130	; 0x82
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f004 fe4c 	bl	800cc8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ff8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ffc:	f004 ffc2 	bl	800cf84 <malloc>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d102      	bne.n	800801a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e026      	b.n	8008068 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008020:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7c1b      	ldrb	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800804a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804e:	2101      	movs	r1, #1
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f004 ff0a 	bl	800ce6a <USBD_LL_PrepareReceive>
 8008056:	e007      	b.n	8008068 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800805e:	2340      	movs	r3, #64	; 0x40
 8008060:	2101      	movs	r1, #1
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f004 ff01 	bl	800ce6a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	460b      	mov	r3, r1
 800807c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008082:	2181      	movs	r1, #129	; 0x81
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f004 fe26 	bl	800ccd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008090:	2101      	movs	r1, #1
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f004 fe1f 	bl	800ccd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080a0:	2182      	movs	r1, #130	; 0x82
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f004 fe17 	bl	800ccd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00e      	beq.n	80080d6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c8:	4618      	mov	r0, r3
 80080ca:	f004 ff63 	bl	800cf94 <free>
    pdev->pClassData = NULL;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008106:	2b00      	cmp	r3, #0
 8008108:	d039      	beq.n	800817e <USBD_CDC_Setup+0x9e>
 800810a:	2b20      	cmp	r3, #32
 800810c:	d17c      	bne.n	8008208 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d029      	beq.n	800816a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	b25b      	sxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	da11      	bge.n	8008144 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800812c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	88d2      	ldrh	r2, [r2, #6]
 8008132:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008134:	6939      	ldr	r1, [r7, #16]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	461a      	mov	r2, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fa03 	bl	8009548 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008142:	e068      	b.n	8008216 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	785a      	ldrb	r2, [r3, #1]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	88db      	ldrh	r3, [r3, #6]
 8008152:	b2da      	uxtb	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800815a:	6939      	ldr	r1, [r7, #16]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	88db      	ldrh	r3, [r3, #6]
 8008160:	461a      	mov	r2, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 fa1e 	bl	80095a4 <USBD_CtlPrepareRx>
      break;
 8008168:	e055      	b.n	8008216 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	7850      	ldrb	r0, [r2, #1]
 8008176:	2200      	movs	r2, #0
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	4798      	blx	r3
      break;
 800817c:	e04b      	b.n	8008216 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	785b      	ldrb	r3, [r3, #1]
 8008182:	2b0a      	cmp	r3, #10
 8008184:	d017      	beq.n	80081b6 <USBD_CDC_Setup+0xd6>
 8008186:	2b0b      	cmp	r3, #11
 8008188:	d029      	beq.n	80081de <USBD_CDC_Setup+0xfe>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d133      	bne.n	80081f6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008194:	2b03      	cmp	r3, #3
 8008196:	d107      	bne.n	80081a8 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008198:	f107 030c 	add.w	r3, r7, #12
 800819c:	2202      	movs	r2, #2
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f9d1 	bl	8009548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081a6:	e02e      	b.n	8008206 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 f962 	bl	8009474 <USBD_CtlError>
            ret = USBD_FAIL;
 80081b0:	2302      	movs	r3, #2
 80081b2:	75fb      	strb	r3, [r7, #23]
          break;
 80081b4:	e027      	b.n	8008206 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d107      	bne.n	80081d0 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081c0:	f107 030f 	add.w	r3, r7, #15
 80081c4:	2201      	movs	r2, #1
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f9bd 	bl	8009548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081ce:	e01a      	b.n	8008206 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 f94e 	bl	8009474 <USBD_CtlError>
            ret = USBD_FAIL;
 80081d8:	2302      	movs	r3, #2
 80081da:	75fb      	strb	r3, [r7, #23]
          break;
 80081dc:	e013      	b.n	8008206 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d00d      	beq.n	8008204 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 f942 	bl	8009474 <USBD_CtlError>
            ret = USBD_FAIL;
 80081f0:	2302      	movs	r3, #2
 80081f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081f4:	e006      	b.n	8008204 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 f93b 	bl	8009474 <USBD_CtlError>
          ret = USBD_FAIL;
 80081fe:	2302      	movs	r3, #2
 8008200:	75fb      	strb	r3, [r7, #23]
          break;
 8008202:	e000      	b.n	8008206 <USBD_CDC_Setup+0x126>
          break;
 8008204:	bf00      	nop
      }
      break;
 8008206:	e006      	b.n	8008216 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f932 	bl	8009474 <USBD_CtlError>
      ret = USBD_FAIL;
 8008210:	2302      	movs	r3, #2
 8008212:	75fb      	strb	r3, [r7, #23]
      break;
 8008214:	bf00      	nop
  }

  return ret;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008232:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800823a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d03a      	beq.n	80082bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008246:	78fa      	ldrb	r2, [r7, #3]
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	331c      	adds	r3, #28
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d029      	beq.n	80082b0 <USBD_CDC_DataIn+0x90>
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	331c      	adds	r3, #28
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	78f9      	ldrb	r1, [r7, #3]
 8008270:	68b8      	ldr	r0, [r7, #8]
 8008272:	460b      	mov	r3, r1
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	1a5b      	subs	r3, r3, r1
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4403      	add	r3, r0
 800827c:	3344      	adds	r3, #68	; 0x44
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	fbb2 f1f3 	udiv	r1, r2, r3
 8008284:	fb03 f301 	mul.w	r3, r3, r1
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d110      	bne.n	80082b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	440b      	add	r3, r1
 800829c:	331c      	adds	r3, #28
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082a2:	78f9      	ldrb	r1, [r7, #3]
 80082a4:	2300      	movs	r3, #0
 80082a6:	2200      	movs	r2, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f004 fdbb 	bl	800ce24 <USBD_LL_Transmit>
 80082ae:	e003      	b.n	80082b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082bc:	2302      	movs	r3, #2
  }
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082da:	78fb      	ldrb	r3, [r7, #3]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f004 fde6 	bl	800ceb0 <USBD_LL_GetRxDataSize>
 80082e4:	4602      	mov	r2, r0
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800830a:	4611      	mov	r1, r2
 800830c:	4798      	blx	r3

    return USBD_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	e000      	b.n	8008314 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008312:	2302      	movs	r3, #2
  }
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800832a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	2b00      	cmp	r3, #0
 8008334:	d015      	beq.n	8008362 <USBD_CDC_EP0_RxReady+0x46>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800833c:	2bff      	cmp	r3, #255	; 0xff
 800833e:	d010      	beq.n	8008362 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800834e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008356:	b292      	uxth	r2, r2
 8008358:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	22ff      	movs	r2, #255	; 0xff
 800835e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2243      	movs	r2, #67	; 0x43
 8008378:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800837a:	4b03      	ldr	r3, [pc, #12]	; (8008388 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000094 	.word	0x20000094

0800838c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2243      	movs	r2, #67	; 0x43
 8008398:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800839a:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	20000050 	.word	0x20000050

080083ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2243      	movs	r2, #67	; 0x43
 80083b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083ba:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	200000d8 	.word	0x200000d8

080083cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	220a      	movs	r2, #10
 80083d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80083da:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	2000000c 	.word	0x2000000c

080083ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083f6:	2302      	movs	r3, #2
 80083f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	bc80      	pop	{r7}
 8008448:	4770      	bx	lr

0800844a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	bc80      	pop	{r7}
 800846e:	4770      	bx	lr

08008470 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d017      	beq.n	80084ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7c1b      	ldrb	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800849c:	2101      	movs	r1, #1
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f004 fce3 	bl	800ce6a <USBD_LL_PrepareReceive>
 80084a4:	e007      	b.n	80084b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	2101      	movs	r1, #1
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f004 fcda 	bl	800ce6a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e000      	b.n	80084bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80084ba:	2302      	movs	r3, #2
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084d8:	2302      	movs	r3, #2
 80084da:	e01a      	b.n	8008512 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	79fa      	ldrb	r2, [r7, #7]
 8008508:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f004 fb58 	bl	800cbc0 <USBD_LL_Init>

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d006      	beq.n	800853c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
 800853a:	e001      	b.n	8008540 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800853c:	2302      	movs	r3, #2
 800853e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr

0800854c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f004 fb7d 	bl	800cc54 <USBD_LL_Start>

  return USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008584:	2302      	movs	r3, #2
 8008586:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00c      	beq.n	80085ac <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	4611      	mov	r1, r2
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	4611      	mov	r1, r2
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 ff04 	bl	80093fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008602:	461a      	mov	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008610:	f003 031f 	and.w	r3, r3, #31
 8008614:	2b01      	cmp	r3, #1
 8008616:	d00c      	beq.n	8008632 <USBD_LL_SetupStage+0x56>
 8008618:	2b01      	cmp	r3, #1
 800861a:	d302      	bcc.n	8008622 <USBD_LL_SetupStage+0x46>
 800861c:	2b02      	cmp	r3, #2
 800861e:	d010      	beq.n	8008642 <USBD_LL_SetupStage+0x66>
 8008620:	e017      	b.n	8008652 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa04 	bl	8008a38 <USBD_StdDevReq>
      break;
 8008630:	e01a      	b.n	8008668 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa66 	bl	8008b0c <USBD_StdItfReq>
      break;
 8008640:	e012      	b.n	8008668 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 faa4 	bl	8008b98 <USBD_StdEPReq>
      break;
 8008650:	e00a      	b.n	8008668 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008658:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800865c:	b2db      	uxtb	r3, r3
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f004 fb57 	bl	800cd14 <USBD_LL_StallEP>
      break;
 8008666:	bf00      	nop
  }

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b086      	sub	sp, #24
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	460b      	mov	r3, r1
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d14b      	bne.n	800871e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800868c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008694:	2b03      	cmp	r3, #3
 8008696:	d134      	bne.n	8008702 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d919      	bls.n	80086d8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	1ad2      	subs	r2, r2, r3
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d203      	bcs.n	80086c6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	e002      	b.n	80086cc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 ff85 	bl	80095e0 <USBD_CtlContinueRx>
 80086d6:	e038      	b.n	800874a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d105      	bne.n	80086fa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 ff82 	bl	8009604 <USBD_CtlSendStatus>
 8008700:	e023      	b.n	800874a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008708:	2b05      	cmp	r3, #5
 800870a:	d11e      	bne.n	800874a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008714:	2100      	movs	r1, #0
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f004 fafc 	bl	800cd14 <USBD_LL_StallEP>
 800871c:	e015      	b.n	800874a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00d      	beq.n	8008746 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008730:	2b03      	cmp	r3, #3
 8008732:	d108      	bne.n	8008746 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	7afa      	ldrb	r2, [r7, #11]
 800873e:	4611      	mov	r1, r2
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	4798      	blx	r3
 8008744:	e001      	b.n	800874a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008746:	2302      	movs	r3, #2
 8008748:	e000      	b.n	800874c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	460b      	mov	r3, r1
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d17f      	bne.n	8008868 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3314      	adds	r3, #20
 800876c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008774:	2b02      	cmp	r3, #2
 8008776:	d15c      	bne.n	8008832 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	d915      	bls.n	80087b0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	1ad2      	subs	r2, r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	b29b      	uxth	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 feef 	bl	8009580 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087a2:	2300      	movs	r3, #0
 80087a4:	2200      	movs	r2, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f004 fb5e 	bl	800ce6a <USBD_LL_PrepareReceive>
 80087ae:	e04e      	b.n	800884e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	6912      	ldr	r2, [r2, #16]
 80087b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80087bc:	fb02 f201 	mul.w	r2, r2, r1
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d11c      	bne.n	8008800 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d316      	bcc.n	8008800 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087dc:	429a      	cmp	r2, r3
 80087de:	d20f      	bcs.n	8008800 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087e0:	2200      	movs	r2, #0
 80087e2:	2100      	movs	r1, #0
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 fecb 	bl	8009580 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087f2:	2300      	movs	r3, #0
 80087f4:	2200      	movs	r2, #0
 80087f6:	2100      	movs	r1, #0
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f004 fb36 	bl	800ce6a <USBD_LL_PrepareReceive>
 80087fe:	e026      	b.n	800884e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008812:	2b03      	cmp	r3, #3
 8008814:	d105      	bne.n	8008822 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f004 fa75 	bl	800cd14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 fefd 	bl	800962a <USBD_CtlReceiveStatus>
 8008830:	e00d      	b.n	800884e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008838:	2b04      	cmp	r3, #4
 800883a:	d004      	beq.n	8008846 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008842:	2b00      	cmp	r3, #0
 8008844:	d103      	bne.n	800884e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008846:	2180      	movs	r1, #128	; 0x80
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f004 fa63 	bl	800cd14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008854:	2b01      	cmp	r3, #1
 8008856:	d11d      	bne.n	8008894 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff fe83 	bl	8008564 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008866:	e015      	b.n	8008894 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00d      	beq.n	8008890 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800887a:	2b03      	cmp	r3, #3
 800887c:	d108      	bne.n	8008890 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	7afa      	ldrb	r2, [r7, #11]
 8008888:	4611      	mov	r1, r2
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	4798      	blx	r3
 800888e:	e001      	b.n	8008894 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008890:	2302      	movs	r3, #2
 8008892:	e000      	b.n	8008896 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088a6:	2340      	movs	r3, #64	; 0x40
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f004 f9ec 	bl	800cc8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2240      	movs	r2, #64	; 0x40
 80088be:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	2200      	movs	r2, #0
 80088c6:	2180      	movs	r1, #128	; 0x80
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f004 f9de 	bl	800cc8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2240      	movs	r2, #64	; 0x40
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	6852      	ldr	r2, [r2, #4]
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	4611      	mov	r1, r2
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
  }

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr

0800893e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2204      	movs	r2, #4
 8008956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr

08008966 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008974:	2b04      	cmp	r3, #4
 8008976:	d105      	bne.n	8008984 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d10b      	bne.n	80089ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d005      	beq.n	80089ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bc80      	pop	{r7}
 80089da:	4770      	bx	lr

080089dc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr

08008a08 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6852      	ldr	r2, [r2, #4]
 8008a24:	b2d2      	uxtb	r2, r2
 8008a26:	4611      	mov	r1, r2
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
	...

08008a38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d004      	beq.n	8008a5c <USBD_StdDevReq+0x24>
 8008a52:	2b40      	cmp	r3, #64	; 0x40
 8008a54:	d002      	beq.n	8008a5c <USBD_StdDevReq+0x24>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <USBD_StdDevReq+0x34>
 8008a5a:	e04c      	b.n	8008af6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
      break;
 8008a6a:	e049      	b.n	8008b00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b09      	cmp	r3, #9
 8008a72:	d83a      	bhi.n	8008aea <USBD_StdDevReq+0xb2>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USBD_StdDevReq+0x44>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008acd 	.word	0x08008acd
 8008a80:	08008ae1 	.word	0x08008ae1
 8008a84:	08008aeb 	.word	0x08008aeb
 8008a88:	08008ad7 	.word	0x08008ad7
 8008a8c:	08008aeb 	.word	0x08008aeb
 8008a90:	08008aaf 	.word	0x08008aaf
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008aeb 	.word	0x08008aeb
 8008a9c:	08008ac3 	.word	0x08008ac3
 8008aa0:	08008ab9 	.word	0x08008ab9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f9d4 	bl	8008e54 <USBD_GetDescriptor>
          break;
 8008aac:	e022      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fb37 	bl	8009124 <USBD_SetAddress>
          break;
 8008ab6:	e01d      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fb74 	bl	80091a8 <USBD_SetConfig>
          break;
 8008ac0:	e018      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fbfd 	bl	80092c4 <USBD_GetConfig>
          break;
 8008aca:	e013      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fc2c 	bl	800932c <USBD_GetStatus>
          break;
 8008ad4:	e00e      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fc5a 	bl	8009392 <USBD_SetFeature>
          break;
 8008ade:	e009      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fc69 	bl	80093ba <USBD_ClrFeature>
          break;
 8008ae8:	e004      	b.n	8008af4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fcc1 	bl	8009474 <USBD_CtlError>
          break;
 8008af2:	bf00      	nop
      }
      break;
 8008af4:	e004      	b.n	8008b00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fcbb 	bl	8009474 <USBD_CtlError>
      break;
 8008afe:	bf00      	nop
  }

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop

08008b0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d003      	beq.n	8008b2e <USBD_StdItfReq+0x22>
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d001      	beq.n	8008b2e <USBD_StdItfReq+0x22>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d12a      	bne.n	8008b84 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	3b01      	subs	r3, #1
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d81d      	bhi.n	8008b76 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	889b      	ldrh	r3, [r3, #4]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d813      	bhi.n	8008b6c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	4798      	blx	r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d110      	bne.n	8008b80 <USBD_StdItfReq+0x74>
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10d      	bne.n	8008b80 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fd4d 	bl	8009604 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b6a:	e009      	b.n	8008b80 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fc80 	bl	8009474 <USBD_CtlError>
          break;
 8008b74:	e004      	b.n	8008b80 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fc7b 	bl	8009474 <USBD_CtlError>
          break;
 8008b7e:	e000      	b.n	8008b82 <USBD_StdItfReq+0x76>
          break;
 8008b80:	bf00      	nop
      }
      break;
 8008b82:	e004      	b.n	8008b8e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fc74 	bl	8009474 <USBD_CtlError>
      break;
 8008b8c:	bf00      	nop
  }

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	889b      	ldrh	r3, [r3, #4]
 8008baa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	d004      	beq.n	8008bc2 <USBD_StdEPReq+0x2a>
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d002      	beq.n	8008bc2 <USBD_StdEPReq+0x2a>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d008      	beq.n	8008bd2 <USBD_StdEPReq+0x3a>
 8008bc0:	e13d      	b.n	8008e3e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4798      	blx	r3
      break;
 8008bd0:	e13a      	b.n	8008e48 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d10a      	bne.n	8008bf4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	4798      	blx	r3
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	e12a      	b.n	8008e4a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d03e      	beq.n	8008c7a <USBD_StdEPReq+0xe2>
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d002      	beq.n	8008c06 <USBD_StdEPReq+0x6e>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d070      	beq.n	8008ce6 <USBD_StdEPReq+0x14e>
 8008c04:	e115      	b.n	8008e32 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d002      	beq.n	8008c16 <USBD_StdEPReq+0x7e>
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d015      	beq.n	8008c40 <USBD_StdEPReq+0xa8>
 8008c14:	e02b      	b.n	8008c6e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <USBD_StdEPReq+0x9e>
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b80      	cmp	r3, #128	; 0x80
 8008c20:	d009      	beq.n	8008c36 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c22:	7bbb      	ldrb	r3, [r7, #14]
 8008c24:	4619      	mov	r1, r3
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f004 f874 	bl	800cd14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f004 f870 	bl	800cd14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c34:	e020      	b.n	8008c78 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fc1b 	bl	8009474 <USBD_CtlError>
              break;
 8008c3e:	e01b      	b.n	8008c78 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	885b      	ldrh	r3, [r3, #2]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10e      	bne.n	8008c66 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <USBD_StdEPReq+0xce>
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b80      	cmp	r3, #128	; 0x80
 8008c52:	d008      	beq.n	8008c66 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	88db      	ldrh	r3, [r3, #6]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f004 f857 	bl	800cd14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fccc 	bl	8009604 <USBD_CtlSendStatus>

              break;
 8008c6c:	e004      	b.n	8008c78 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fbff 	bl	8009474 <USBD_CtlError>
              break;
 8008c76:	bf00      	nop
          }
          break;
 8008c78:	e0e0      	b.n	8008e3c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d002      	beq.n	8008c8a <USBD_StdEPReq+0xf2>
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d015      	beq.n	8008cb4 <USBD_StdEPReq+0x11c>
 8008c88:	e026      	b.n	8008cd8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00c      	beq.n	8008caa <USBD_StdEPReq+0x112>
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b80      	cmp	r3, #128	; 0x80
 8008c94:	d009      	beq.n	8008caa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f004 f83a 	bl	800cd14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ca0:	2180      	movs	r1, #128	; 0x80
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f004 f836 	bl	800cd14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ca8:	e01c      	b.n	8008ce4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fbe1 	bl	8009474 <USBD_CtlError>
              break;
 8008cb2:	e017      	b.n	8008ce4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d112      	bne.n	8008ce2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f004 f841 	bl	800cd52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fc97 	bl	8009604 <USBD_CtlSendStatus>
              }
              break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fbca 	bl	8009474 <USBD_CtlError>
              break;
 8008ce0:	e000      	b.n	8008ce4 <USBD_StdEPReq+0x14c>
              break;
 8008ce2:	bf00      	nop
          }
          break;
 8008ce4:	e0aa      	b.n	8008e3c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d002      	beq.n	8008cf6 <USBD_StdEPReq+0x15e>
 8008cf0:	2b03      	cmp	r3, #3
 8008cf2:	d032      	beq.n	8008d5a <USBD_StdEPReq+0x1c2>
 8008cf4:	e097      	b.n	8008e26 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d007      	beq.n	8008d0c <USBD_StdEPReq+0x174>
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	2b80      	cmp	r3, #128	; 0x80
 8008d00:	d004      	beq.n	8008d0c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fbb5 	bl	8009474 <USBD_CtlError>
                break;
 8008d0a:	e091      	b.n	8008e30 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	da0b      	bge.n	8008d2c <USBD_StdEPReq+0x194>
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	3310      	adds	r3, #16
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	4413      	add	r3, r2
 8008d28:	3304      	adds	r3, #4
 8008d2a:	e00b      	b.n	8008d44 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	4413      	add	r3, r2
 8008d42:	3304      	adds	r3, #4
 8008d44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fbf8 	bl	8009548 <USBD_CtlSendData>
              break;
 8008d58:	e06a      	b.n	8008e30 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	da11      	bge.n	8008d86 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	f003 020f 	and.w	r2, r3, #15
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	3318      	adds	r3, #24
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d117      	bne.n	8008dac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fb78 	bl	8009474 <USBD_CtlError>
                  break;
 8008d84:	e054      	b.n	8008e30 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d104      	bne.n	8008dac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb65 	bl	8009474 <USBD_CtlError>
                  break;
 8008daa:	e041      	b.n	8008e30 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da0b      	bge.n	8008dcc <USBD_StdEPReq+0x234>
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dba:	4613      	mov	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	3310      	adds	r3, #16
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	3304      	adds	r3, #4
 8008dca:	e00b      	b.n	8008de4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	4413      	add	r3, r2
 8008de2:	3304      	adds	r3, #4
 8008de4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <USBD_StdEPReq+0x25a>
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	2b80      	cmp	r3, #128	; 0x80
 8008df0:	d103      	bne.n	8008dfa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e00e      	b.n	8008e18 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f003 ffc6 	bl	800cd90 <USBD_LL_IsStallEP>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e002      	b.n	8008e18 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fb92 	bl	8009548 <USBD_CtlSendData>
              break;
 8008e24:	e004      	b.n	8008e30 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008e26:	6839      	ldr	r1, [r7, #0]
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fb23 	bl	8009474 <USBD_CtlError>
              break;
 8008e2e:	bf00      	nop
          }
          break;
 8008e30:	e004      	b.n	8008e3c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fb1d 	bl	8009474 <USBD_CtlError>
          break;
 8008e3a:	bf00      	nop
      }
      break;
 8008e3c:	e004      	b.n	8008e48 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fb17 	bl	8009474 <USBD_CtlError>
      break;
 8008e46:	bf00      	nop
  }

  return ret;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b06      	cmp	r3, #6
 8008e76:	f200 8128 	bhi.w	80090ca <USBD_GetDescriptor+0x276>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <USBD_GetDescriptor+0x2c>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008ef5 	.word	0x08008ef5
 8008e8c:	080090cb 	.word	0x080090cb
 8008e90:	080090cb 	.word	0x080090cb
 8008e94:	0800906b 	.word	0x0800906b
 8008e98:	08009097 	.word	0x08009097
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7c12      	ldrb	r2, [r2, #16]
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
      break;
 8008eb2:	e112      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7c1b      	ldrb	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10d      	bne.n	8008ed8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	f107 0208 	add.w	r2, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ed6:	e100      	b.n	80090da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3301      	adds	r3, #1
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
      break;
 8008ef2:	e0f2      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	885b      	ldrh	r3, [r3, #2]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	f200 80ac 	bhi.w	8009058 <USBD_GetDescriptor+0x204>
 8008f00:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <USBD_GetDescriptor+0xb4>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f89 	.word	0x08008f89
 8008f14:	08008fbd 	.word	0x08008fbd
 8008f18:	08008ff1 	.word	0x08008ff1
 8008f1c:	08009025 	.word	0x08009025
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e091      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa94 	bl	8009474 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e089      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e077      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa7a 	bl	8009474 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e06f      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008faa:	e05d      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa60 	bl	8009474 <USBD_CtlError>
            err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fba:	e055      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	7c12      	ldrb	r2, [r2, #16]
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fde:	e043      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa46 	bl	8009474 <USBD_CtlError>
            err++;
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	3301      	adds	r3, #1
 8008fec:	72fb      	strb	r3, [r7, #11]
          break;
 8008fee:	e03b      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	7c12      	ldrb	r2, [r2, #16]
 8009008:	f107 0108 	add.w	r1, r7, #8
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009012:	e029      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa2c 	bl	8009474 <USBD_CtlError>
            err++;
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	3301      	adds	r3, #1
 8009020:	72fb      	strb	r3, [r7, #11]
          break;
 8009022:	e021      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	7c12      	ldrb	r2, [r2, #16]
 800903c:	f107 0108 	add.w	r1, r7, #8
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
 8009044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009046:	e00f      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa12 	bl	8009474 <USBD_CtlError>
            err++;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	3301      	adds	r3, #1
 8009054:	72fb      	strb	r3, [r7, #11]
          break;
 8009056:	e007      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa0a 	bl	8009474 <USBD_CtlError>
          err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009066:	e038      	b.n	80090da <USBD_GetDescriptor+0x286>
 8009068:	e037      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7c1b      	ldrb	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	f107 0208 	add.w	r2, r7, #8
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
 8009082:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009084:	e029      	b.n	80090da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f9f3 	bl	8009474 <USBD_CtlError>
        err++;
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	3301      	adds	r3, #1
 8009092:	72fb      	strb	r3, [r7, #11]
      break;
 8009094:	e021      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7c1b      	ldrb	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a6:	f107 0208 	add.w	r2, r7, #8
 80090aa:	4610      	mov	r0, r2
 80090ac:	4798      	blx	r3
 80090ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3301      	adds	r3, #1
 80090b4:	2207      	movs	r2, #7
 80090b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b8:	e00f      	b.n	80090da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9d9 	bl	8009474 <USBD_CtlError>
        err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
      break;
 80090c8:	e007      	b.n	80090da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f9d1 	bl	8009474 <USBD_CtlError>
      err++;
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	3301      	adds	r3, #1
 80090d6:	72fb      	strb	r3, [r7, #11]
      break;
 80090d8:	bf00      	nop
  }

  if (err != 0U)
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d11c      	bne.n	800911a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090e0:	893b      	ldrh	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d011      	beq.n	800910a <USBD_GetDescriptor+0x2b6>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	88db      	ldrh	r3, [r3, #6]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00d      	beq.n	800910a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88da      	ldrh	r2, [r3, #6]
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bf28      	it	cs
 80090f8:	4613      	movcs	r3, r2
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090fe:	893b      	ldrh	r3, [r7, #8]
 8009100:	461a      	mov	r2, r3
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa1f 	bl	8009548 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	88db      	ldrh	r3, [r3, #6]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa76 	bl	8009604 <USBD_CtlSendStatus>
 8009118:	e000      	b.n	800911c <USBD_GetDescriptor+0x2c8>
    return;
 800911a:	bf00      	nop
    }
  }
}
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop

08009124 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	889b      	ldrh	r3, [r3, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d130      	bne.n	8009198 <USBD_SetAddress+0x74>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	88db      	ldrh	r3, [r3, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d12c      	bne.n	8009198 <USBD_SetAddress+0x74>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	885b      	ldrh	r3, [r3, #2]
 8009142:	2b7f      	cmp	r3, #127	; 0x7f
 8009144:	d828      	bhi.n	8009198 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009150:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009158:	2b03      	cmp	r3, #3
 800915a:	d104      	bne.n	8009166 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f988 	bl	8009474 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009164:	e01c      	b.n	80091a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	7bfa      	ldrb	r2, [r7, #15]
 800916a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	4619      	mov	r1, r3
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f003 fe37 	bl	800cde6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa43 	bl	8009604 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d004      	beq.n	800918e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918c:	e008      	b.n	80091a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	e003      	b.n	80091a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f96a 	bl	8009474 <USBD_CtlError>
  }
}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	885b      	ldrh	r3, [r3, #2]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	4b41      	ldr	r3, [pc, #260]	; (80092c0 <USBD_SetConfig+0x118>)
 80091ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091bc:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <USBD_SetConfig+0x118>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d904      	bls.n	80091ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f954 	bl	8009474 <USBD_CtlError>
 80091cc:	e075      	b.n	80092ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d002      	beq.n	80091de <USBD_SetConfig+0x36>
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d023      	beq.n	8009224 <USBD_SetConfig+0x7c>
 80091dc:	e062      	b.n	80092a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091de:	4b38      	ldr	r3, [pc, #224]	; (80092c0 <USBD_SetConfig+0x118>)
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d01a      	beq.n	800921c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091e6:	4b36      	ldr	r3, [pc, #216]	; (80092c0 <USBD_SetConfig+0x118>)
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	461a      	mov	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2203      	movs	r2, #3
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091f8:	4b31      	ldr	r3, [pc, #196]	; (80092c0 <USBD_SetConfig+0x118>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff f9ba 	bl	8008578 <USBD_SetClassConfig>
 8009204:	4603      	mov	r3, r0
 8009206:	2b02      	cmp	r3, #2
 8009208:	d104      	bne.n	8009214 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f931 	bl	8009474 <USBD_CtlError>
            return;
 8009212:	e052      	b.n	80092ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f9f5 	bl	8009604 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800921a:	e04e      	b.n	80092ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f9f1 	bl	8009604 <USBD_CtlSendStatus>
        break;
 8009222:	e04a      	b.n	80092ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009224:	4b26      	ldr	r3, [pc, #152]	; (80092c0 <USBD_SetConfig+0x118>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d112      	bne.n	8009252 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009234:	4b22      	ldr	r3, [pc, #136]	; (80092c0 <USBD_SetConfig+0x118>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800923e:	4b20      	ldr	r3, [pc, #128]	; (80092c0 <USBD_SetConfig+0x118>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff f9b6 	bl	80085b6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f9da 	bl	8009604 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009250:	e033      	b.n	80092ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009252:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <USBD_SetConfig+0x118>)
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	d01d      	beq.n	800929c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	b2db      	uxtb	r3, r3
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff f9a4 	bl	80085b6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800926e:	4b14      	ldr	r3, [pc, #80]	; (80092c0 <USBD_SetConfig+0x118>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <USBD_SetConfig+0x118>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff f97a 	bl	8008578 <USBD_SetClassConfig>
 8009284:	4603      	mov	r3, r0
 8009286:	2b02      	cmp	r3, #2
 8009288:	d104      	bne.n	8009294 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f8f1 	bl	8009474 <USBD_CtlError>
            return;
 8009292:	e012      	b.n	80092ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f9b5 	bl	8009604 <USBD_CtlSendStatus>
        break;
 800929a:	e00e      	b.n	80092ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f9b1 	bl	8009604 <USBD_CtlSendStatus>
        break;
 80092a2:	e00a      	b.n	80092ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8e4 	bl	8009474 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092ac:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <USBD_SetConfig+0x118>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7ff f97f 	bl	80085b6 <USBD_ClrClassConfig>
        break;
 80092b8:	bf00      	nop
    }
  }
}
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000200 	.word	0x20000200

080092c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d004      	beq.n	80092e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f8cb 	bl	8009474 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092de:	e021      	b.n	8009324 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	db17      	blt.n	800931a <USBD_GetConfig+0x56>
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	dd02      	ble.n	80092f4 <USBD_GetConfig+0x30>
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d00b      	beq.n	800930a <USBD_GetConfig+0x46>
 80092f2:	e012      	b.n	800931a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	3308      	adds	r3, #8
 80092fe:	2201      	movs	r2, #1
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f920 	bl	8009548 <USBD_CtlSendData>
        break;
 8009308:	e00c      	b.n	8009324 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3304      	adds	r3, #4
 800930e:	2201      	movs	r2, #1
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f918 	bl	8009548 <USBD_CtlSendData>
        break;
 8009318:	e004      	b.n	8009324 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8a9 	bl	8009474 <USBD_CtlError>
        break;
 8009322:	bf00      	nop
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800933c:	3b01      	subs	r3, #1
 800933e:	2b02      	cmp	r3, #2
 8009340:	d81e      	bhi.n	8009380 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	88db      	ldrh	r3, [r3, #6]
 8009346:	2b02      	cmp	r3, #2
 8009348:	d004      	beq.n	8009354 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f891 	bl	8009474 <USBD_CtlError>
        break;
 8009352:	e01a      	b.n	800938a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f043 0202 	orr.w	r2, r3, #2
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	330c      	adds	r3, #12
 8009374:	2202      	movs	r2, #2
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f8e5 	bl	8009548 <USBD_CtlSendData>
      break;
 800937e:	e004      	b.n	800938a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f876 	bl	8009474 <USBD_CtlError>
      break;
 8009388:	bf00      	nop
  }
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d106      	bne.n	80093b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f929 	bl	8009604 <USBD_CtlSendStatus>
  }
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ca:	3b01      	subs	r3, #1
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d80b      	bhi.n	80093e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	885b      	ldrh	r3, [r3, #2]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d10c      	bne.n	80093f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f90f 	bl	8009604 <USBD_CtlSendStatus>
      }
      break;
 80093e6:	e004      	b.n	80093f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f842 	bl	8009474 <USBD_CtlError>
      break;
 80093f0:	e000      	b.n	80093f4 <USBD_ClrFeature+0x3a>
      break;
 80093f2:	bf00      	nop
  }
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	785a      	ldrb	r2, [r3, #1]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	3302      	adds	r3, #2
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b29a      	uxth	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	3303      	adds	r3, #3
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	b29b      	uxth	r3, r3
 800942a:	4413      	add	r3, r2
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	3304      	adds	r3, #4
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	b29a      	uxth	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	3305      	adds	r3, #5
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	b29b      	uxth	r3, r3
 8009446:	4413      	add	r3, r2
 8009448:	b29a      	uxth	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	3306      	adds	r3, #6
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b29a      	uxth	r2, r3
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	3307      	adds	r3, #7
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	b29b      	uxth	r3, r3
 800945e:	021b      	lsls	r3, r3, #8
 8009460:	b29b      	uxth	r3, r3
 8009462:	4413      	add	r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	80da      	strh	r2, [r3, #6]

}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr

08009474 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800947e:	2180      	movs	r1, #128	; 0x80
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f003 fc47 	bl	800cd14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009486:	2100      	movs	r1, #0
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f003 fc43 	bl	800cd14 <USBD_LL_StallEP>
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b086      	sub	sp, #24
 800949a:	af00      	add	r7, sp, #0
 800949c:	60f8      	str	r0, [r7, #12]
 800949e:	60b9      	str	r1, [r7, #8]
 80094a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d032      	beq.n	8009512 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f834 	bl	800951a <USBD_GetLen>
 80094b2:	4603      	mov	r3, r0
 80094b4:	3301      	adds	r3, #1
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	75fa      	strb	r2, [r7, #23]
 80094c6:	461a      	mov	r2, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	4413      	add	r3, r2
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	7812      	ldrb	r2, [r2, #0]
 80094d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	75fa      	strb	r2, [r7, #23]
 80094d8:	461a      	mov	r2, r3
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	2203      	movs	r2, #3
 80094e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094e2:	e012      	b.n	800950a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	1c5a      	adds	r2, r3, #1
 80094e8:	60fa      	str	r2, [r7, #12]
 80094ea:	7dfa      	ldrb	r2, [r7, #23]
 80094ec:	1c51      	adds	r1, r2, #1
 80094ee:	75f9      	strb	r1, [r7, #23]
 80094f0:	4611      	mov	r1, r2
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	440a      	add	r2, r1
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	75fa      	strb	r2, [r7, #23]
 8009500:	461a      	mov	r2, r3
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4413      	add	r3, r2
 8009506:	2200      	movs	r2, #0
 8009508:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e8      	bne.n	80094e4 <USBD_GetString+0x4e>
    }
  }
}
 8009512:	bf00      	nop
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009526:	e005      	b.n	8009534 <USBD_GetLen+0x1a>
  {
    len++;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	3301      	adds	r3, #1
 800952c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3301      	adds	r3, #1
 8009532:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1f5      	bne.n	8009528 <USBD_GetLen+0xe>
  }

  return len;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2202      	movs	r2, #2
 800955a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800956a:	88fb      	ldrh	r3, [r7, #6]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	2100      	movs	r1, #0
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f003 fc57 	bl	800ce24 <USBD_LL_Transmit>

  return USBD_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800958e:	88fb      	ldrh	r3, [r7, #6]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f003 fc45 	bl	800ce24 <USBD_LL_Transmit>

  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2203      	movs	r2, #3
 80095b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095ba:	88fa      	ldrh	r2, [r7, #6]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	2100      	movs	r1, #0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f003 fc4a 	bl	800ce6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	2100      	movs	r1, #0
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f003 fc38 	bl	800ce6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2204      	movs	r2, #4
 8009610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009614:	2300      	movs	r3, #0
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f003 fc02 	bl	800ce24 <USBD_LL_Transmit>

  return USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2205      	movs	r2, #5
 8009636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800963a:	2300      	movs	r3, #0
 800963c:	2200      	movs	r2, #0
 800963e:	2100      	movs	r1, #0
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f003 fc12 	bl	800ce6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800965a:	79fb      	ldrb	r3, [r7, #7]
 800965c:	4a08      	ldr	r2, [pc, #32]	; (8009680 <disk_status+0x30>)
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	79fa      	ldrb	r2, [r7, #7]
 8009668:	4905      	ldr	r1, [pc, #20]	; (8009680 <disk_status+0x30>)
 800966a:	440a      	add	r2, r1
 800966c:	7a12      	ldrb	r2, [r2, #8]
 800966e:	4610      	mov	r0, r2
 8009670:	4798      	blx	r3
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20000224 	.word	0x20000224

08009684 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	4603      	mov	r3, r0
 800968c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	4a0d      	ldr	r2, [pc, #52]	; (80096cc <disk_initialize+0x48>)
 8009696:	5cd3      	ldrb	r3, [r2, r3]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d111      	bne.n	80096c0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	4a0b      	ldr	r2, [pc, #44]	; (80096cc <disk_initialize+0x48>)
 80096a0:	2101      	movs	r1, #1
 80096a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	4a09      	ldr	r2, [pc, #36]	; (80096cc <disk_initialize+0x48>)
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	79fa      	ldrb	r2, [r7, #7]
 80096b2:	4906      	ldr	r1, [pc, #24]	; (80096cc <disk_initialize+0x48>)
 80096b4:	440a      	add	r2, r1
 80096b6:	7a12      	ldrb	r2, [r2, #8]
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
 80096bc:	4603      	mov	r3, r0
 80096be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20000224 	.word	0x20000224

080096d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80096d0:	b590      	push	{r4, r7, lr}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4a0a      	ldr	r2, [pc, #40]	; (800970c <disk_read+0x3c>)
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	689c      	ldr	r4, [r3, #8]
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4a07      	ldr	r2, [pc, #28]	; (800970c <disk_read+0x3c>)
 80096f0:	4413      	add	r3, r2
 80096f2:	7a18      	ldrb	r0, [r3, #8]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	68b9      	ldr	r1, [r7, #8]
 80096fa:	47a0      	blx	r4
 80096fc:	4603      	mov	r3, r0
 80096fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
}
 8009702:	4618      	mov	r0, r3
 8009704:	371c      	adds	r7, #28
 8009706:	46bd      	mov	sp, r7
 8009708:	bd90      	pop	{r4, r7, pc}
 800970a:	bf00      	nop
 800970c:	20000224 	.word	0x20000224

08009710 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009710:	b590      	push	{r4, r7, lr}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607a      	str	r2, [r7, #4]
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009720:	7bfb      	ldrb	r3, [r7, #15]
 8009722:	4a0a      	ldr	r2, [pc, #40]	; (800974c <disk_write+0x3c>)
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	68dc      	ldr	r4, [r3, #12]
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	4a07      	ldr	r2, [pc, #28]	; (800974c <disk_write+0x3c>)
 8009730:	4413      	add	r3, r2
 8009732:	7a18      	ldrb	r0, [r3, #8]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	68b9      	ldr	r1, [r7, #8]
 800973a:	47a0      	blx	r4
 800973c:	4603      	mov	r3, r0
 800973e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009740:	7dfb      	ldrb	r3, [r7, #23]
}
 8009742:	4618      	mov	r0, r3
 8009744:	371c      	adds	r7, #28
 8009746:	46bd      	mov	sp, r7
 8009748:	bd90      	pop	{r4, r7, pc}
 800974a:	bf00      	nop
 800974c:	20000224 	.word	0x20000224

08009750 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	603a      	str	r2, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
 800975c:	460b      	mov	r3, r1
 800975e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	4a09      	ldr	r2, [pc, #36]	; (8009788 <disk_ioctl+0x38>)
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	79fa      	ldrb	r2, [r7, #7]
 800976e:	4906      	ldr	r1, [pc, #24]	; (8009788 <disk_ioctl+0x38>)
 8009770:	440a      	add	r2, r1
 8009772:	7a10      	ldrb	r0, [r2, #8]
 8009774:	79b9      	ldrb	r1, [r7, #6]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	73fb      	strb	r3, [r7, #15]
  return res;
 800977e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20000224 	.word	0x20000224

0800978c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	613b      	str	r3, [r7, #16]

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
 80097a0:	e00c      	b.n	80097bc <mem_cpy+0x30>
		*(int*)d = *(int*)s;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	601a      	str	r2, [r3, #0]
		d += sizeof (int); s += sizeof (int);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	3304      	adds	r3, #4
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	3304      	adds	r3, #4
 80097b4:	613b      	str	r3, [r7, #16]
		cnt -= sizeof (int);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3b04      	subs	r3, #4
 80097ba:	607b      	str	r3, [r7, #4]
	while (cnt >= sizeof (int)) {
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d8ef      	bhi.n	80097a2 <mem_cpy+0x16>
	}
#endif
	while (cnt--)
 80097c2:	e007      	b.n	80097d4 <mem_cpy+0x48>
		*d++ = *s++;
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	1c53      	adds	r3, r2, #1
 80097c8:	613b      	str	r3, [r7, #16]
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	1c59      	adds	r1, r3, #1
 80097ce:	6179      	str	r1, [r7, #20]
 80097d0:	7812      	ldrb	r2, [r2, #0]
 80097d2:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	1e5a      	subs	r2, r3, #1
 80097d8:	607a      	str	r2, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1f2      	bne.n	80097c4 <mem_cpy+0x38>
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bc80      	pop	{r7}
 80097e6:	4770      	bx	lr

080097e8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80097f8:	e005      	b.n	8009806 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	617a      	str	r2, [r7, #20]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	b2d2      	uxtb	r2, r2
 8009804:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	1e5a      	subs	r2, r3, #1
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1f4      	bne.n	80097fa <mem_set+0x12>
}
 8009810:	bf00      	nop
 8009812:	371c      	adds	r7, #28
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr

0800981a <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800981a:	b480      	push	{r7}
 800981c:	b089      	sub	sp, #36	; 0x24
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	61fb      	str	r3, [r7, #28]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009832:	bf00      	nop
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	1e5a      	subs	r2, r3, #1
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00d      	beq.n	800985a <mem_cmp+0x40>
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	61fa      	str	r2, [r7, #28]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	4619      	mov	r1, r3
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	61ba      	str	r2, [r7, #24]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	1acb      	subs	r3, r1, r3
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0ec      	beq.n	8009834 <mem_cmp+0x1a>
	return r;
 800985a:	697b      	ldr	r3, [r7, #20]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3724      	adds	r7, #36	; 0x24
 8009860:	46bd      	mov	sp, r7
 8009862:	bc80      	pop	{r7}
 8009864:	4770      	bx	lr

08009866 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009870:	e002      	b.n	8009878 <chk_chr+0x12>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	3301      	adds	r3, #1
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d005      	beq.n	800988c <chk_chr+0x26>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	461a      	mov	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	4293      	cmp	r3, r2
 800988a:	d1f2      	bne.n	8009872 <chk_chr+0xc>
	return *str;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	781b      	ldrb	r3, [r3, #0]
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	bc80      	pop	{r7}
 8009898:	4770      	bx	lr
	...

0800989c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80098a6:	2300      	movs	r3, #0
 80098a8:	60bb      	str	r3, [r7, #8]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	e038      	b.n	8009922 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80098b0:	492f      	ldr	r1, [pc, #188]	; (8009970 <chk_lock+0xd4>)
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4613      	mov	r3, r2
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	440b      	add	r3, r1
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d029      	beq.n	8009918 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80098c4:	492a      	ldr	r1, [pc, #168]	; (8009970 <chk_lock+0xd4>)
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	005b      	lsls	r3, r3, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098da:	429a      	cmp	r2, r3
 80098dc:	d11e      	bne.n	800991c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80098de:	4924      	ldr	r1, [pc, #144]	; (8009970 <chk_lock+0xd4>)
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4613      	mov	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	3304      	adds	r3, #4
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d110      	bne.n	800991c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80098fa:	491d      	ldr	r1, [pc, #116]	; (8009970 <chk_lock+0xd4>)
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	4613      	mov	r3, r2
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	3308      	adds	r3, #8
 800990a:	881a      	ldrh	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8009912:	429a      	cmp	r2, r3
 8009914:	d102      	bne.n	800991c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009916:	e007      	b.n	8009928 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8009918:	2301      	movs	r3, #1
 800991a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d9c3      	bls.n	80098b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b02      	cmp	r3, #2
 800992c:	d109      	bne.n	8009942 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <chk_lock+0x9e>
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d101      	bne.n	800993e <chk_lock+0xa2>
 800993a:	2300      	movs	r3, #0
 800993c:	e013      	b.n	8009966 <chk_lock+0xca>
 800993e:	2312      	movs	r3, #18
 8009940:	e011      	b.n	8009966 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10b      	bne.n	8009960 <chk_lock+0xc4>
 8009948:	4909      	ldr	r1, [pc, #36]	; (8009970 <chk_lock+0xd4>)
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4613      	mov	r3, r2
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	4413      	add	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	330a      	adds	r3, #10
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800995e:	d101      	bne.n	8009964 <chk_lock+0xc8>
 8009960:	2310      	movs	r3, #16
 8009962:	e000      	b.n	8009966 <chk_lock+0xca>
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	bc80      	pop	{r7}
 800996e:	4770      	bx	lr
 8009970:	2000020c 	.word	0x2000020c

08009974 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800997a:	2300      	movs	r3, #0
 800997c:	607b      	str	r3, [r7, #4]
 800997e:	e002      	b.n	8009986 <enq_lock+0x12>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3301      	adds	r3, #1
 8009984:	607b      	str	r3, [r7, #4]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d809      	bhi.n	80099a0 <enq_lock+0x2c>
 800998c:	490a      	ldr	r1, [pc, #40]	; (80099b8 <enq_lock+0x44>)
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	440b      	add	r3, r1
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1ef      	bne.n	8009980 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	bf14      	ite	ne
 80099a6:	2301      	movne	r3, #1
 80099a8:	2300      	moveq	r3, #0
 80099aa:	b2db      	uxtb	r3, r3
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	2000020c 	.word	0x2000020c

080099bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	e02b      	b.n	8009a24 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80099cc:	4955      	ldr	r1, [pc, #340]	; (8009b24 <inc_lock+0x168>)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d11b      	bne.n	8009a1e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80099e6:	494f      	ldr	r1, [pc, #316]	; (8009b24 <inc_lock+0x168>)
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	4613      	mov	r3, r2
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	4413      	add	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	3304      	adds	r3, #4
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d10d      	bne.n	8009a1e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009a02:	4948      	ldr	r1, [pc, #288]	; (8009b24 <inc_lock+0x168>)
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4613      	mov	r3, r2
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	440b      	add	r3, r1
 8009a10:	3308      	adds	r3, #8
 8009a12:	881a      	ldrh	r2, [r3, #0]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d006      	beq.n	8009a2c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3301      	adds	r3, #1
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d9d0      	bls.n	80099cc <inc_lock+0x10>
 8009a2a:	e000      	b.n	8009a2e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009a2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d145      	bne.n	8009ac0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	e002      	b.n	8009a40 <inc_lock+0x84>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d809      	bhi.n	8009a5a <inc_lock+0x9e>
 8009a46:	4937      	ldr	r1, [pc, #220]	; (8009b24 <inc_lock+0x168>)
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1ef      	bne.n	8009a3a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d101      	bne.n	8009a64 <inc_lock+0xa8>
 8009a60:	2300      	movs	r3, #0
 8009a62:	e05a      	b.n	8009b1a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009a6a:	482e      	ldr	r0, [pc, #184]	; (8009b24 <inc_lock+0x168>)
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	005b      	lsls	r3, r3, #1
 8009a72:	4413      	add	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4403      	add	r3, r0
 8009a78:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009a80:	4828      	ldr	r0, [pc, #160]	; (8009b24 <inc_lock+0x168>)
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4613      	mov	r3, r2
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4403      	add	r3, r0
 8009a8e:	3304      	adds	r3, #4
 8009a90:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009a98:	4922      	ldr	r1, [pc, #136]	; (8009b24 <inc_lock+0x168>)
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009aac:	491d      	ldr	r1, [pc, #116]	; (8009b24 <inc_lock+0x168>)
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	4413      	add	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	330a      	adds	r3, #10
 8009abc:	2200      	movs	r2, #0
 8009abe:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00c      	beq.n	8009ae0 <inc_lock+0x124>
 8009ac6:	4917      	ldr	r1, [pc, #92]	; (8009b24 <inc_lock+0x168>)
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4613      	mov	r3, r2
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	440b      	add	r3, r1
 8009ad4:	330a      	adds	r3, #10
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <inc_lock+0x124>
 8009adc:	2300      	movs	r3, #0
 8009ade:	e01c      	b.n	8009b1a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10b      	bne.n	8009afe <inc_lock+0x142>
 8009ae6:	490f      	ldr	r1, [pc, #60]	; (8009b24 <inc_lock+0x168>)
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4613      	mov	r3, r2
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	330a      	adds	r3, #10
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	3301      	adds	r3, #1
 8009afa:	b299      	uxth	r1, r3
 8009afc:	e001      	b.n	8009b02 <inc_lock+0x146>
 8009afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b02:	4808      	ldr	r0, [pc, #32]	; (8009b24 <inc_lock+0x168>)
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4613      	mov	r3, r2
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4403      	add	r3, r0
 8009b10:	330a      	adds	r3, #10
 8009b12:	460a      	mov	r2, r1
 8009b14:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	3301      	adds	r3, #1
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3714      	adds	r7, #20
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bc80      	pop	{r7}
 8009b22:	4770      	bx	lr
 8009b24:	2000020c 	.word	0x2000020c

08009b28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	607b      	str	r3, [r7, #4]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d82e      	bhi.n	8009b9a <dec_lock+0x72>
		n = Files[i].ctr;
 8009b3c:	491b      	ldr	r1, [pc, #108]	; (8009bac <dec_lock+0x84>)
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	4613      	mov	r3, r2
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	440b      	add	r3, r1
 8009b4a:	330a      	adds	r3, #10
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009b50:	89fb      	ldrh	r3, [r7, #14]
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b56:	d101      	bne.n	8009b5c <dec_lock+0x34>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009b5c:	89fb      	ldrh	r3, [r7, #14]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <dec_lock+0x40>
 8009b62:	89fb      	ldrh	r3, [r7, #14]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009b68:	4910      	ldr	r1, [pc, #64]	; (8009bac <dec_lock+0x84>)
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	440b      	add	r3, r1
 8009b76:	330a      	adds	r3, #10
 8009b78:	89fa      	ldrh	r2, [r7, #14]
 8009b7a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009b7c:	89fb      	ldrh	r3, [r7, #14]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d108      	bne.n	8009b94 <dec_lock+0x6c>
 8009b82:	490a      	ldr	r1, [pc, #40]	; (8009bac <dec_lock+0x84>)
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	737b      	strb	r3, [r7, #13]
 8009b98:	e001      	b.n	8009b9e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009b9e:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	2000020c 	.word	0x2000020c

08009bb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e016      	b.n	8009bec <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009bbe:	490f      	ldr	r1, [pc, #60]	; (8009bfc <clear_lock+0x4c>)
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d108      	bne.n	8009be6 <clear_lock+0x36>
 8009bd4:	4909      	ldr	r1, [pc, #36]	; (8009bfc <clear_lock+0x4c>)
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	440b      	add	r3, r1
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3301      	adds	r3, #1
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d9e5      	bls.n	8009bbe <clear_lock+0xe>
	}
}
 8009bf2:	bf00      	nop
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr
 8009bfc:	2000020c 	.word	0x2000020c

08009c00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d038      	beq.n	8009c88 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009c1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	2301      	movs	r3, #1
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	f7ff fd71 	bl	8009710 <disk_write>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
 8009c38:	e026      	b.n	8009c88 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	1ad2      	subs	r2, r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d218      	bcs.n	8009c88 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009c5c:	613b      	str	r3, [r7, #16]
 8009c5e:	e010      	b.n	8009c82 <sync_window+0x82>
					wsect += fs->fsize;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	4413      	add	r3, r2
 8009c6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	2301      	movs	r3, #1
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	f7ff fd4a 	bl	8009710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d8eb      	bhi.n	8009c60 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d01b      	beq.n	8009ce4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff ffa7 	bl	8009c00 <sync_window>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d113      	bne.n	8009ce4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	f7ff fd02 	bl	80096d0 <disk_read>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d004      	beq.n	8009cdc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff ff81 	bl	8009c00 <sync_window>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d14e      	bne.n	8009da6 <sync_fs+0xb6>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d13c      	bne.n	8009d8c <sync_fs+0x9c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d137      	bne.n	8009d8c <sync_fs+0x9c>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d22:	2100      	movs	r1, #0
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff fd5f 	bl	80097e8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d30:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8009d34:	801a      	strh	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a1d      	ldr	r2, [pc, #116]	; (8009db0 <sync_fs+0xc0>)
 8009d3a:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d42:	4a1c      	ldr	r2, [pc, #112]	; (8009db4 <sync_fs+0xc4>)
 8009d44:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	f8d2 2210 	ldr.w	r2, [r2, #528]	; 0x210
 8009d52:	601a      	str	r2, [r3, #0]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 8009d60:	601a      	str	r2, [r3, #0]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f7ff fcc6 	bl	8009710 <disk_write>
			fs->fsi_flag = 0;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009d92:	2200      	movs	r2, #0
 8009d94:	2100      	movs	r1, #0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff fcda 	bl	8009750 <disk_ioctl>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <sync_fs+0xb6>
			res = FR_DISK_ERR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	41615252 	.word	0x41615252
 8009db4:	61417272 	.word	0x61417272

08009db8 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	3b02      	subs	r3, #2
 8009dc6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009dce:	3b02      	subs	r3, #2
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d301      	bcc.n	8009dda <clust2sect+0x22>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e00a      	b.n	8009df0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009de0:	461a      	mov	r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	fb03 f202 	mul.w	r2, r3, r2
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009dee:	4413      	add	r3, r2
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr

08009dfa <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b086      	sub	sp, #24
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
 8009e02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d905      	bls.n	8009e16 <get_fat+0x1c>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d302      	bcc.n	8009e1c <get_fat+0x22>
		val = 1;	/* Internal error */
 8009e16:	2301      	movs	r3, #1
 8009e18:	617b      	str	r3, [r7, #20]
 8009e1a:	e087      	b.n	8009f2c <get_fat+0x132>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e20:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d043      	beq.n	8009eb4 <get_fat+0xba>
 8009e2c:	2b03      	cmp	r3, #3
 8009e2e:	d059      	beq.n	8009ee4 <get_fat+0xea>
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d171      	bne.n	8009f18 <get_fat+0x11e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4413      	add	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	0a5b      	lsrs	r3, r3, #9
 8009e4c:	4413      	add	r3, r2
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff ff1e 	bl	8009c92 <move_window>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d160      	bne.n	8009f1e <get_fat+0x124>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	1c5a      	adds	r2, r3, #1
 8009e60:	60fa      	str	r2, [r7, #12]
 8009e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	5cd3      	ldrb	r3, [r2, r3]
 8009e6a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	0a5b      	lsrs	r3, r3, #9
 8009e76:	4413      	add	r3, r2
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ff09 	bl	8009c92 <move_window>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d14d      	bne.n	8009f22 <get_fat+0x128>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	5cd3      	ldrb	r3, [r2, r3]
 8009e90:	021b      	lsls	r3, r3, #8
 8009e92:	461a      	mov	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <get_fat+0xb0>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	091b      	lsrs	r3, r3, #4
 8009ea8:	e002      	b.n	8009eb0 <get_fat+0xb6>
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb0:	617b      	str	r3, [r7, #20]
			break;
 8009eb2:	e03b      	b.n	8009f2c <get_fat+0x132>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	0a1b      	lsrs	r3, r3, #8
 8009ebe:	4413      	add	r3, r2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fee5 	bl	8009c92 <move_window>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d12b      	bne.n	8009f26 <get_fat+0x12c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	4413      	add	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	617b      	str	r3, [r7, #20]
			break;
 8009ee2:	e023      	b.n	8009f2c <get_fat+0x132>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	09db      	lsrs	r3, r3, #7
 8009eee:	4413      	add	r3, r2
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fecd 	bl	8009c92 <move_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d115      	bne.n	8009f2a <get_fat+0x130>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	4413      	add	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009f14:	617b      	str	r3, [r7, #20]
			break;
 8009f16:	e009      	b.n	8009f2c <get_fat+0x132>

		default:
			val = 1;	/* Internal error */
 8009f18:	2301      	movs	r3, #1
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	e006      	b.n	8009f2c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f1e:	bf00      	nop
 8009f20:	e004      	b.n	8009f2c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f22:	bf00      	nop
 8009f24:	e002      	b.n	8009f2c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f26:	bf00      	nop
 8009f28:	e000      	b.n	8009f2c <get_fat+0x132>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009f2a:	bf00      	nop
		}
	}

	return val;
 8009f2c:	697b      	ldr	r3, [r7, #20]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3718      	adds	r7, #24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b088      	sub	sp, #32
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d905      	bls.n	8009f54 <put_fat+0x1e>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d302      	bcc.n	8009f5a <put_fat+0x24>
		res = FR_INT_ERR;
 8009f54:	2302      	movs	r3, #2
 8009f56:	77fb      	strb	r3, [r7, #31]
 8009f58:	e0c6      	b.n	800a0e8 <put_fat+0x1b2>

	} else {
		switch (fs->fs_type) {
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d073      	beq.n	800a04c <put_fat+0x116>
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	f000 8090 	beq.w	800a08a <put_fat+0x154>
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	f040 80b2 	bne.w	800a0d4 <put_fat+0x19e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	617b      	str	r3, [r7, #20]
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	085b      	lsrs	r3, r3, #1
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	4413      	add	r3, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fe80 	bl	8009c92 <move_window>
 8009f92:	4603      	mov	r3, r0
 8009f94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f96:	7ffb      	ldrb	r3, [r7, #31]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f040 809e 	bne.w	800a0da <put_fat+0x1a4>
			p = &fs->win.d8[bc++ % SS(fs)];
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	617a      	str	r2, [r7, #20]
 8009fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f003 0301 	and.w	r3, r3, #1
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00d      	beq.n	8009fd4 <put_fat+0x9e>
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	b25b      	sxtb	r3, r3
 8009fbe:	f003 030f 	and.w	r3, r3, #15
 8009fc2:	b25a      	sxtb	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	b25b      	sxtb	r3, r3
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	b25b      	sxtb	r3, r3
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	e001      	b.n	8009fd8 <put_fat+0xa2>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	0a5b      	lsrs	r3, r3, #9
 8009fee:	4413      	add	r3, r2
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f7ff fe4d 	bl	8009c92 <move_window>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ffc:	7ffb      	ldrb	r3, [r7, #31]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d16d      	bne.n	800a0de <put_fat+0x1a8>
			p = &fs->win.d8[bc % SS(fs)];
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	4413      	add	r3, r2
 800a00c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <put_fat+0xea>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	091b      	lsrs	r3, r3, #4
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	e00e      	b.n	800a03e <put_fat+0x108>
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	b25b      	sxtb	r3, r3
 800a026:	f023 030f 	bic.w	r3, r3, #15
 800a02a:	b25a      	sxtb	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b25b      	sxtb	r3, r3
 800a032:	f003 030f 	and.w	r3, r3, #15
 800a036:	b25b      	sxtb	r3, r3
 800a038:	4313      	orrs	r3, r2
 800a03a:	b25b      	sxtb	r3, r3
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a04a:	e04d      	b.n	800a0e8 <put_fat+0x1b2>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	0a1b      	lsrs	r3, r3, #8
 800a056:	4413      	add	r3, r2
 800a058:	4619      	mov	r1, r3
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f7ff fe19 	bl	8009c92 <move_window>
 800a060:	4603      	mov	r3, r0
 800a062:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a064:	7ffb      	ldrb	r3, [r7, #31]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d13b      	bne.n	800a0e2 <put_fat+0x1ac>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	4413      	add	r3, r2
 800a076:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	801a      	strh	r2, [r3, #0]
			fs->wflag = 1;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a088:	e02e      	b.n	800a0e8 <put_fat+0x1b2>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	09db      	lsrs	r3, r3, #7
 800a094:	4413      	add	r3, r2
 800a096:	4619      	mov	r1, r3
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f7ff fdfa 	bl	8009c92 <move_window>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0a2:	7ffb      	ldrb	r3, [r7, #31]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d11e      	bne.n	800a0e6 <put_fat+0x1b0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
			fs->wflag = 1;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a0d2:	e009      	b.n	800a0e8 <put_fat+0x1b2>

		default :
			res = FR_INT_ERR;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e006      	b.n	800a0e8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a0da:	bf00      	nop
 800a0dc:	e004      	b.n	800a0e8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a0de:	bf00      	nop
 800a0e0:	e002      	b.n	800a0e8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a0e2:	bf00      	nop
 800a0e4:	e000      	b.n	800a0e8 <put_fat+0x1b2>
			if (res != FR_OK) break;
 800a0e6:	bf00      	nop
		}
	}

	return res;
 800a0e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d905      	bls.n	800a10e <remove_chain+0x1c>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d302      	bcc.n	800a114 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a10e:	2302      	movs	r3, #2
 800a110:	73fb      	strb	r3, [r7, #15]
 800a112:	e043      	b.n	800a19c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a118:	e036      	b.n	800a188 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7ff fe6c 	bl	8009dfa <get_fat>
 800a122:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d035      	beq.n	800a196 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d102      	bne.n	800a136 <remove_chain+0x44>
 800a130:	2302      	movs	r3, #2
 800a132:	73fb      	strb	r3, [r7, #15]
 800a134:	e032      	b.n	800a19c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13c:	d102      	bne.n	800a144 <remove_chain+0x52>
 800a13e:	2301      	movs	r3, #1
 800a140:	73fb      	strb	r3, [r7, #15]
 800a142:	e02b      	b.n	800a19c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a144:	2200      	movs	r2, #0
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff fef4 	bl	8009f36 <put_fat>
 800a14e:	4603      	mov	r3, r0
 800a150:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d120      	bne.n	800a19a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d00f      	beq.n	800a184 <remove_chain+0x92>
				fs->free_clust++;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a178:	f043 0301 	orr.w	r3, r3, #1
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3c2      	bcc.n	800a11a <remove_chain+0x28>
 800a194:	e002      	b.n	800a19c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a196:	bf00      	nop
 800a198:	e000      	b.n	800a19c <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a19a:	bf00      	nop
		}
	}

	return res;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10f      	bne.n	800a1d6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a1bc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <create_chain+0x2a>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d31c      	bcc.n	800a20a <create_chain+0x64>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	e019      	b.n	800a20a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7ff fe0e 	bl	8009dfa <get_fat>
 800a1de:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d801      	bhi.n	800a1ea <create_chain+0x44>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e076      	b.n	800a2d8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f0:	d101      	bne.n	800a1f6 <create_chain+0x50>
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	e070      	b.n	800a2d8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d201      	bcs.n	800a206 <create_chain+0x60>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	e068      	b.n	800a2d8 <create_chain+0x132>
		scl = clst;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	3301      	adds	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d307      	bcc.n	800a230 <create_chain+0x8a>
			ncl = 2;
 800a220:	2302      	movs	r3, #2
 800a222:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d901      	bls.n	800a230 <create_chain+0x8a>
 800a22c:	2300      	movs	r3, #0
 800a22e:	e053      	b.n	800a2d8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a230:	6979      	ldr	r1, [r7, #20]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fde1 	bl	8009dfa <get_fat>
 800a238:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a246:	d002      	beq.n	800a24e <create_chain+0xa8>
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <create_chain+0xac>
			return cs;
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	e042      	b.n	800a2d8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	429a      	cmp	r2, r3
 800a258:	d1d9      	bne.n	800a20e <create_chain+0x68>
 800a25a:	2300      	movs	r3, #0
 800a25c:	e03c      	b.n	800a2d8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a25e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a260:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff fe65 	bl	8009f36 <put_fat>
 800a26c:	4603      	mov	r3, r0
 800a26e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d109      	bne.n	800a28a <create_chain+0xe4>
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f7ff fe58 	bl	8009f36 <put_fat>
 800a286:	4603      	mov	r3, r0
 800a288:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d11a      	bne.n	800a2c6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a2:	d018      	beq.n	800a2d6 <create_chain+0x130>
			fs->free_clust--;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a2aa:	1e5a      	subs	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a2b8:	f043 0301 	orr.w	r3, r3, #1
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a2c4:	e007      	b.n	800a2d6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d102      	bne.n	800a2d2 <create_chain+0x12c>
 800a2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d0:	e000      	b.n	800a2d4 <create_chain+0x12e>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a2d6:	697b      	ldr	r3, [r7, #20]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	0a5b      	lsrs	r3, r3, #9
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a2fe:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a302:	fbb3 f3f2 	udiv	r3, r3, r2
 800a306:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	1d1a      	adds	r2, r3, #4
 800a30c:	613a      	str	r2, [r7, #16]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <clmt_clust+0x3c>
 800a318:	2300      	movs	r3, #0
 800a31a:	e010      	b.n	800a33e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	429a      	cmp	r2, r3
 800a322:	d307      	bcc.n	800a334 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	3304      	adds	r3, #4
 800a330:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a332:	e7e9      	b.n	800a308 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a334:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	4413      	add	r3, r2
}
 800a33e:	4618      	mov	r0, r3
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	bc80      	pop	{r7}
 800a346:	4770      	bx	lr

0800a348 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	b29a      	uxth	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a362:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d007      	beq.n	800a37a <dir_sdi+0x32>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	429a      	cmp	r2, r3
 800a378:	d301      	bcc.n	800a37e <dir_sdi+0x36>
		return FR_INT_ERR;
 800a37a:	2302      	movs	r3, #2
 800a37c:	e074      	b.n	800a468 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10c      	bne.n	800a39e <dir_sdi+0x56>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a38a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d105      	bne.n	800a39e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a398:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a39c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d111      	bne.n	800a3c8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3aa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d301      	bcc.n	800a3ba <dir_sdi+0x72>
			return FR_INT_ERR;
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e056      	b.n	800a468 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3c0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a3c4:	613b      	str	r3, [r7, #16]
 800a3c6:	e032      	b.n	800a42e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3ce:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a3d6:	e01e      	b.n	800a416 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3de:	6979      	ldr	r1, [r7, #20]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff fd0a 	bl	8009dfa <get_fat>
 800a3e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d101      	bne.n	800a3f4 <dir_sdi+0xac>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e039      	b.n	800a468 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d907      	bls.n	800a40a <dir_sdi+0xc2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a400:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	429a      	cmp	r2, r3
 800a408:	d301      	bcc.n	800a40e <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a40a:	2302      	movs	r3, #2
 800a40c:	e02c      	b.n	800a468 <dir_sdi+0x120>
			idx -= ic;
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d2dc      	bcs.n	800a3d8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a424:	6979      	ldr	r1, [r7, #20]
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff fcc6 	bl	8009db8 <clust2sect>
 800a42c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <dir_sdi+0xf8>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e013      	b.n	800a468 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	091a      	lsrs	r2, r3, #4
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	441a      	add	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a454:	461a      	mov	r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	f003 030f 	and.w	r3, r3, #15
 800a45c:	015b      	lsls	r3, r3, #5
 800a45e:	441a      	add	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a470:	b590      	push	{r4, r7, lr}
 800a472:	b087      	sub	sp, #28
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a480:	3301      	adds	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	b29b      	uxth	r3, r3
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <dir_next+0x26>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <dir_next+0x2a>
		return FR_NO_FILE;
 800a496:	2304      	movs	r3, #4
 800a498:	e0dd      	b.n	800a656 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f003 030f 	and.w	r3, r3, #15
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f040 80c6 	bne.w	800a632 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10b      	bne.n	800a4d6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a4c4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	f0c0 80b0 	bcc.w	800a632 <dir_next+0x1c2>
				return FR_NO_FILE;
 800a4d2:	2304      	movs	r3, #4
 800a4d4:	e0bf      	b.n	800a656 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	091b      	lsrs	r3, r3, #4
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a4e0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a4e4:	3a01      	subs	r2, #1
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 80a2 	bne.w	800a632 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	f7ff fc7c 	bl	8009dfa <get_fat>
 800a502:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d801      	bhi.n	800a50e <dir_next+0x9e>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e0a3      	b.n	800a656 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d101      	bne.n	800a51a <dir_next+0xaa>
 800a516:	2301      	movs	r3, #1
 800a518:	e09d      	b.n	800a656 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	429a      	cmp	r2, r3
 800a528:	d374      	bcc.n	800a614 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <dir_next+0xc4>
 800a530:	2304      	movs	r3, #4
 800a532:	e090      	b.n	800a656 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a540:	4619      	mov	r1, r3
 800a542:	4610      	mov	r0, r2
 800a544:	f7ff fe2f 	bl	800a1a6 <create_chain>
 800a548:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <dir_next+0xe4>
 800a550:	2307      	movs	r3, #7
 800a552:	e080      	b.n	800a656 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <dir_next+0xee>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e07b      	b.n	800a656 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a564:	d101      	bne.n	800a56a <dir_next+0xfa>
 800a566:	2301      	movs	r3, #1
 800a568:	e075      	b.n	800a656 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fb45 	bl	8009c00 <sync_window>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <dir_next+0x110>
 800a57c:	2301      	movs	r3, #1
 800a57e:	e06a      	b.n	800a656 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a58a:	2100      	movs	r1, #0
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff f92b 	bl	80097e8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800a59e:	6979      	ldr	r1, [r7, #20]
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7ff fc09 	bl	8009db8 <clust2sect>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	613b      	str	r3, [r7, #16]
 800a5b0:	e01b      	b.n	800a5ea <dir_next+0x17a>
						dp->fs->wflag = 1;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7ff fb1b 	bl	8009c00 <sync_window>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <dir_next+0x164>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e040      	b.n	800a656 <dir_next+0x1e6>
						dp->fs->winsect++;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5da:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a5de:	3201      	adds	r2, #1
 800a5e0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	613b      	str	r3, [r7, #16]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5f0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d3da      	bcc.n	800a5b2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a602:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	1a8a      	subs	r2, r1, r2
 800a610:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a622:	6979      	ldr	r1, [r7, #20]
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fbc7 	bl	8009db8 <clust2sect>
 800a62a:	4602      	mov	r2, r0
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f003 030f 	and.w	r3, r3, #15
 800a64a:	015b      	lsls	r3, r3, #5
 800a64c:	441a      	add	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	371c      	adds	r7, #28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd90      	pop	{r4, r7, pc}

0800a65e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a668:	2100      	movs	r1, #0
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff fe6c 	bl	800a348 <dir_sdi>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d131      	bne.n	800a6de <dir_alloc+0x80>
		n = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f7ff fb00 	bl	8009c92 <move_window>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d11f      	bne.n	800a6dc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	2be5      	cmp	r3, #229	; 0xe5
 800a6a6:	d005      	beq.n	800a6b4 <dir_alloc+0x56>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d107      	bne.n	800a6c4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60bb      	str	r3, [r7, #8]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d102      	bne.n	800a6c8 <dir_alloc+0x6a>
 800a6c2:	e00c      	b.n	800a6de <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff fed0 	bl	800a470 <dir_next>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0d1      	beq.n	800a67e <dir_alloc+0x20>
 800a6da:	e000      	b.n	800a6de <dir_alloc+0x80>
			if (res != FR_OK) break;
 800a6dc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2b04      	cmp	r3, #4
 800a6e2:	d101      	bne.n	800a6e8 <dir_alloc+0x8a>
 800a6e4:	2307      	movs	r3, #7
 800a6e6:	73fb      	strb	r3, [r7, #15]
	return res;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b085      	sub	sp, #20
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	331a      	adds	r3, #26
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d106      	bne.n	800a71c <ld_clust+0x2a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	3314      	adds	r3, #20
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	041b      	lsls	r3, r3, #16
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60fb      	str	r3, [r7, #12]

	return cl;
 800a71c:	68fb      	ldr	r3, [r7, #12]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	bc80      	pop	{r7}
 800a726:	4770      	bx	lr

0800a728 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	331a      	adds	r3, #26
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	b292      	uxth	r2, r2
 800a73a:	801a      	strh	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	0c1a      	lsrs	r2, r3, #16
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3314      	adds	r3, #20
 800a744:	b292      	uxth	r2, r2
 800a746:	801a      	strh	r2, [r3, #0]
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bc80      	pop	{r7}
 800a750:	4770      	bx	lr
	...

0800a754 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a766:	1e5a      	subs	r2, r3, #1
 800a768:	4613      	mov	r3, r2
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	4413      	add	r3, r2
 800a76e:	009b      	lsls	r3, r3, #2
 800a770:	4413      	add	r3, r2
 800a772:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a774:	2300      	movs	r3, #0
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	2301      	movs	r3, #1
 800a77a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a77c:	4a24      	ldr	r2, [pc, #144]	; (800a810 <cmp_lfn+0xbc>)
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	4413      	add	r3, r2
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	4413      	add	r3, r2
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a78e:	89fb      	ldrh	r3, [r7, #14]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d019      	beq.n	800a7c8 <cmp_lfn+0x74>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a794:	89bb      	ldrh	r3, [r7, #12]
 800a796:	4618      	mov	r0, r3
 800a798:	f001 feac 	bl	800c4f4 <ff_wtoupper>
 800a79c:	4603      	mov	r3, r0
 800a79e:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2bfe      	cmp	r3, #254	; 0xfe
 800a7a4:	d80e      	bhi.n	800a7c4 <cmp_lfn+0x70>
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	617a      	str	r2, [r7, #20]
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 fe9d 	bl	800c4f4 <ff_wtoupper>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	89fb      	ldrh	r3, [r7, #14]
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d008      	beq.n	800a7d6 <cmp_lfn+0x82>
				return 0;				/* Not matched */
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e01f      	b.n	800a808 <cmp_lfn+0xb4>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a7c8:	89bb      	ldrh	r3, [r7, #12]
 800a7ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d001      	beq.n	800a7d6 <cmp_lfn+0x82>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	e018      	b.n	800a808 <cmp_lfn+0xb4>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b0c      	cmp	r3, #12
 800a7e0:	d9cc      	bls.n	800a77c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00b      	beq.n	800a806 <cmp_lfn+0xb2>
 800a7ee:	89fb      	ldrh	r3, [r7, #14]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <cmp_lfn+0xb2>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <cmp_lfn+0xb2>
		return 0;
 800a802:	2300      	movs	r3, #0
 800a804:	e000      	b.n	800a808 <cmp_lfn+0xb4>

	return 1;						/* The part of LFN matched */
 800a806:	2301      	movs	r3, #1
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	0800d95c 	.word	0x0800d95c

0800a814 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a814:	b480      	push	{r7}
 800a816:	b089      	sub	sp, #36	; 0x24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	4611      	mov	r1, r2
 800a820:	461a      	mov	r2, r3
 800a822:	460b      	mov	r3, r1
 800a824:	71fb      	strb	r3, [r7, #7]
 800a826:	4613      	mov	r3, r2
 800a828:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	330d      	adds	r3, #13
 800a82e:	79ba      	ldrb	r2, [r7, #6]
 800a830:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	330b      	adds	r3, #11
 800a836:	220f      	movs	r2, #15
 800a838:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	330c      	adds	r3, #12
 800a83e:	2200      	movs	r2, #0
 800a840:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	331a      	adds	r3, #26
 800a846:	2200      	movs	r2, #0
 800a848:	801a      	strh	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	1e5a      	subs	r2, r3, #1
 800a84e:	4613      	mov	r3, r2
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	4413      	add	r3, r2
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4413      	add	r3, r2
 800a858:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	82fb      	strh	r3, [r7, #22]
 800a85e:	2300      	movs	r3, #0
 800a860:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a862:	8afb      	ldrh	r3, [r7, #22]
 800a864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a868:	4293      	cmp	r3, r2
 800a86a:	d007      	beq.n	800a87c <fit_lfn+0x68>
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	1c5a      	adds	r2, r3, #1
 800a870:	61fa      	str	r2, [r7, #28]
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a87c:	4a16      	ldr	r2, [pc, #88]	; (800a8d8 <fit_lfn+0xc4>)
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	4413      	add	r3, r2
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	461a      	mov	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4413      	add	r3, r2
 800a88a:	8afa      	ldrh	r2, [r7, #22]
 800a88c:	801a      	strh	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a88e:	8afb      	ldrh	r3, [r7, #22]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <fit_lfn+0x86>
 800a894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a898:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	3301      	adds	r3, #1
 800a89e:	61bb      	str	r3, [r7, #24]
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b0c      	cmp	r3, #12
 800a8a4:	d9dd      	bls.n	800a862 <fit_lfn+0x4e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a8a6:	8afb      	ldrh	r3, [r7, #22]
 800a8a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d006      	beq.n	800a8be <fit_lfn+0xaa>
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	881b      	ldrh	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <fit_lfn+0xb2>
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c4:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	79fa      	ldrb	r2, [r7, #7]
 800a8ca:	701a      	strb	r2, [r3, #0]
}
 800a8cc:	bf00      	nop
 800a8ce:	3724      	adds	r7, #36	; 0x24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bc80      	pop	{r7}
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	0800d95c 	.word	0x0800d95c

0800a8dc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08c      	sub	sp, #48	; 0x30
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a8ea:	220b      	movs	r2, #11
 800a8ec:	68b9      	ldr	r1, [r7, #8]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f7fe ff4c 	bl	800978c <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d92b      	bls.n	800a952 <gen_numname+0x76>
		sr = seq;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a8fe:	e022      	b.n	800a946 <gen_numname+0x6a>
			wc = *lfn++;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	1c9a      	adds	r2, r3, #2
 800a904:	607a      	str	r2, [r7, #4]
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a90a:	2300      	movs	r3, #0
 800a90c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a90e:	e017      	b.n	800a940 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	005a      	lsls	r2, r3, #1
 800a914:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	4413      	add	r3, r2
 800a91c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a91e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d005      	beq.n	800a93a <gen_numname+0x5e>
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a934:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a938:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	3301      	adds	r3, #1
 800a93e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	2b0f      	cmp	r3, #15
 800a944:	d9e4      	bls.n	800a910 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1d8      	bne.n	800a900 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a952:	2307      	movs	r3, #7
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	f003 030f 	and.w	r3, r3, #15
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	3330      	adds	r3, #48	; 0x30
 800a962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a96a:	2b39      	cmp	r3, #57	; 0x39
 800a96c:	d904      	bls.n	800a978 <gen_numname+0x9c>
 800a96e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a972:	3307      	adds	r3, #7
 800a974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	1e5a      	subs	r2, r3, #1
 800a97c:	62ba      	str	r2, [r7, #40]	; 0x28
 800a97e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a982:	4413      	add	r3, r2
 800a984:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a988:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	091b      	lsrs	r3, r3, #4
 800a990:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1de      	bne.n	800a956 <gen_numname+0x7a>
	ns[i] = '~';
 800a998:	f107 0214 	add.w	r2, r7, #20
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	4413      	add	r3, r2
 800a9a0:	227e      	movs	r2, #126	; 0x7e
 800a9a2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a8:	e016      	b.n	800a9d8 <gen_numname+0xfc>
		if (IsDBCS1(dst[j])) {
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ae:	4413      	add	r3, r2
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b80      	cmp	r3, #128	; 0x80
 800a9b4:	d90d      	bls.n	800a9d2 <gen_numname+0xf6>
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ba:	4413      	add	r3, r2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2bff      	cmp	r3, #255	; 0xff
 800a9c0:	d007      	beq.n	800a9d2 <gen_numname+0xf6>
			if (j == i - 1) break;
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d010      	beq.n	800a9ee <gen_numname+0x112>
			j++;
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d207      	bcs.n	800a9f0 <gen_numname+0x114>
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	4413      	add	r3, r2
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b20      	cmp	r3, #32
 800a9ea:	d1de      	bne.n	800a9aa <gen_numname+0xce>
 800a9ec:	e000      	b.n	800a9f0 <gen_numname+0x114>
			if (j == i - 1) break;
 800a9ee:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	2b07      	cmp	r3, #7
 800a9f4:	d808      	bhi.n	800aa08 <gen_numname+0x12c>
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	1c5a      	adds	r2, r3, #1
 800a9fa:	62ba      	str	r2, [r7, #40]	; 0x28
 800a9fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aa00:	4413      	add	r3, r2
 800aa02:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aa06:	e000      	b.n	800aa0a <gen_numname+0x12e>
 800aa08:	2120      	movs	r1, #32
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	627a      	str	r2, [r7, #36]	; 0x24
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	460a      	mov	r2, r1
 800aa16:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	2b07      	cmp	r3, #7
 800aa1c:	d9e8      	bls.n	800a9f0 <gen_numname+0x114>
}
 800aa1e:	bf00      	nop
 800aa20:	3730      	adds	r7, #48	; 0x30
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800aa32:	230b      	movs	r3, #11
 800aa34:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	b2da      	uxtb	r2, r3
 800aa3a:	0852      	lsrs	r2, r2, #1
 800aa3c:	01db      	lsls	r3, r3, #7
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	1c59      	adds	r1, r3, #1
 800aa46:	6079      	str	r1, [r7, #4]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	73fb      	strb	r3, [r7, #15]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	60bb      	str	r3, [r7, #8]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1ed      	bne.n	800aa36 <sum_sfn+0x10>
	return sum;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr

0800aa66 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa6e:	2100      	movs	r1, #0
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7ff fc69 	bl	800a348 <dir_sdi>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <dir_find+0x1e>
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	e0ac      	b.n	800abde <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aa84:	23ff      	movs	r3, #255	; 0xff
 800aa86:	753b      	strb	r3, [r7, #20]
 800aa88:	7d3b      	ldrb	r3, [r7, #20]
 800aa8a:	757b      	strb	r3, [r7, #21]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa92:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7ff f8f4 	bl	8009c92 <move_window>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f040 808e 	bne.w	800abd2 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aabc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aac4:	7dbb      	ldrb	r3, [r7, #22]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <dir_find+0x6a>
 800aaca:	2304      	movs	r3, #4
 800aacc:	75fb      	strb	r3, [r7, #23]
 800aace:	e085      	b.n	800abdc <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	330b      	adds	r3, #11
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aada:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aadc:	7dbb      	ldrb	r3, [r7, #22]
 800aade:	2be5      	cmp	r3, #229	; 0xe5
 800aae0:	d007      	beq.n	800aaf2 <dir_find+0x8c>
 800aae2:	7bfb      	ldrb	r3, [r7, #15]
 800aae4:	f003 0308 	and.w	r3, r3, #8
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <dir_find+0x9c>
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	2b0f      	cmp	r3, #15
 800aaf0:	d007      	beq.n	800ab02 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800aaf2:	23ff      	movs	r3, #255	; 0xff
 800aaf4:	757b      	strb	r3, [r7, #21]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aafc:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800ab00:	e05c      	b.n	800abbc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b0f      	cmp	r3, #15
 800ab06:	d133      	bne.n	800ab70 <dir_find+0x10a>
				if (dp->lfn) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d054      	beq.n	800abbc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ab12:	7dbb      	ldrb	r3, [r7, #22]
 800ab14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00e      	beq.n	800ab3a <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	7b5b      	ldrb	r3, [r3, #13]
 800ab20:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800ab22:	7dbb      	ldrb	r3, [r7, #22]
 800ab24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab28:	75bb      	strb	r3, [r7, #22]
 800ab2a:	7dbb      	ldrb	r3, [r7, #22]
 800ab2c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800ab3a:	7dba      	ldrb	r2, [r7, #22]
 800ab3c:	7d7b      	ldrb	r3, [r7, #21]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d113      	bne.n	800ab6a <dir_find+0x104>
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	330d      	adds	r3, #13
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	7d3a      	ldrb	r2, [r7, #20]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d10d      	bne.n	800ab6a <dir_find+0x104>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ab54:	6939      	ldr	r1, [r7, #16]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fdfc 	bl	800a754 <cmp_lfn>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <dir_find+0x104>
 800ab62:	7d7b      	ldrb	r3, [r7, #21]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	e000      	b.n	800ab6c <dir_find+0x106>
 800ab6a:	23ff      	movs	r3, #255	; 0xff
 800ab6c:	757b      	strb	r3, [r7, #21]
 800ab6e:	e025      	b.n	800abbc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800ab70:	7d7b      	ldrb	r3, [r7, #21]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d107      	bne.n	800ab86 <dir_find+0x120>
 800ab76:	6938      	ldr	r0, [r7, #16]
 800ab78:	f7ff ff55 	bl	800aa26 <sum_sfn>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	461a      	mov	r2, r3
 800ab80:	7d3b      	ldrb	r3, [r7, #20]
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d027      	beq.n	800abd6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ab8c:	330b      	adds	r3, #11
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <dir_find+0x148>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ab9e:	220b      	movs	r2, #11
 800aba0:	4619      	mov	r1, r3
 800aba2:	6938      	ldr	r0, [r7, #16]
 800aba4:	f7fe fe39 	bl	800981a <mem_cmp>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d015      	beq.n	800abda <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800abae:	23ff      	movs	r3, #255	; 0xff
 800abb0:	757b      	strb	r3, [r7, #21]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abb8:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800abbc:	2100      	movs	r1, #0
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff fc56 	bl	800a470 <dir_next>
 800abc4:	4603      	mov	r3, r0
 800abc6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f43f af63 	beq.w	800aa96 <dir_find+0x30>
 800abd0:	e004      	b.n	800abdc <dir_find+0x176>
		if (res != FR_OK) break;
 800abd2:	bf00      	nop
 800abd4:	e002      	b.n	800abdc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800abda:	bf00      	nop

	return res;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08c      	sub	sp, #48	; 0x30
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800abf6:	623b      	str	r3, [r7, #32]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800abfe:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800ac00:	f107 030c 	add.w	r3, r7, #12
 800ac04:	220c      	movs	r2, #12
 800ac06:	6a39      	ldr	r1, [r7, #32]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe fdbf 	bl	800978c <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d037      	beq.n	800ac88 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	330b      	adds	r3, #11
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 800ac28:	2301      	movs	r3, #1
 800ac2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac2c:	e013      	b.n	800ac56 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800ac2e:	f107 010c 	add.w	r1, r7, #12
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	6a38      	ldr	r0, [r7, #32]
 800ac38:	f7ff fe50 	bl	800a8dc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff ff12 	bl	800aa66 <dir_find>
 800ac42:	4603      	mov	r3, r0
 800ac44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ac48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800ac50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac52:	3301      	adds	r3, #1
 800ac54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	2b63      	cmp	r3, #99	; 0x63
 800ac5a:	d9e8      	bls.n	800ac2e <dir_register+0x46>
 800ac5c:	e000      	b.n	800ac60 <dir_register+0x78>
			if (res != FR_OK) break;
 800ac5e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	2b64      	cmp	r3, #100	; 0x64
 800ac64:	d101      	bne.n	800ac6a <dir_register+0x82>
 800ac66:	2307      	movs	r3, #7
 800ac68:	e0c5      	b.n	800adf6 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ac6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d002      	beq.n	800ac78 <dir_register+0x90>
 800ac72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac76:	e0be      	b.n	800adf6 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	330b      	adds	r3, #11
 800ac7c:	7dfa      	ldrb	r2, [r7, #23]
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d014      	beq.n	800acbc <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800ac92:	2300      	movs	r3, #0
 800ac94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac96:	e002      	b.n	800ac9e <dir_register+0xb6>
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f5      	bne.n	800ac98 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acae:	3319      	adds	r3, #25
 800acb0:	4a53      	ldr	r2, [pc, #332]	; (800ae00 <dir_register+0x218>)
 800acb2:	fba2 2303 	umull	r2, r3, r2, r3
 800acb6:	089b      	lsrs	r3, r3, #2
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
 800acba:	e001      	b.n	800acc0 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800acbc:	2301      	movs	r3, #1
 800acbe:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800acc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff fccb 	bl	800a65e <dir_alloc>
 800acc8:	4603      	mov	r3, r0
 800acca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800acce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d153      	bne.n	800ad7e <dir_register+0x196>
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	3b01      	subs	r3, #1
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d04d      	beq.n	800ad7e <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800ace8:	461a      	mov	r2, r3
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fb29 	bl	800a348 <dir_sdi>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800acfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d13c      	bne.n	800ad7e <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff fe8b 	bl	800aa26 <sum_sfn>
 800ad10:	4603      	mov	r3, r0
 800ad12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f7fe ffb5 	bl	8009c92 <move_window>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ad2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d122      	bne.n	800ad7c <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	7efb      	ldrb	r3, [r7, #27]
 800ad48:	f7ff fd64 	bl	800a814 <fit_lfn>
				dp->fs->wflag = 1;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800ad58:	2100      	movs	r1, #0
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff fb88 	bl	800a470 <dir_next>
 800ad60:	4603      	mov	r3, r0
 800ad62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ad66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d107      	bne.n	800ad7e <dir_register+0x196>
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	3b01      	subs	r3, #1
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1cc      	bne.n	800ad14 <dir_register+0x12c>
 800ad7a:	e000      	b.n	800ad7e <dir_register+0x196>
				if (res != FR_OK) break;
 800ad7c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800ad7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d135      	bne.n	800adf2 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7fe ff7c 	bl	8009c92 <move_window>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ada0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d124      	bne.n	800adf2 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800adae:	2220      	movs	r2, #32
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fd18 	bl	80097e8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800adc4:	220b      	movs	r2, #11
 800adc6:	4619      	mov	r1, r3
 800adc8:	f7fe fce0 	bl	800978c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800add2:	330b      	adds	r3, #11
 800add4:	781a      	ldrb	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800addc:	330c      	adds	r3, #12
 800adde:	f002 0218 	and.w	r2, r2, #24
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800adf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3730      	adds	r7, #48	; 0x30
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	4ec4ec4f 	.word	0x4ec4ec4f

0800ae04 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08a      	sub	sp, #40	; 0x28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	613b      	str	r3, [r7, #16]
 800ae14:	e002      	b.n	800ae1c <create_name+0x18>
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b2f      	cmp	r3, #47	; 0x2f
 800ae22:	d0f8      	beq.n	800ae16 <create_name+0x12>
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b5c      	cmp	r3, #92	; 0x5c
 800ae2a:	d0f4      	beq.n	800ae16 <create_name+0x12>
	lfn = dp->lfn;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ae32:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	61ba      	str	r2, [r7, #24]
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	4413      	add	r3, r2
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800ae4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae4c:	2b1f      	cmp	r3, #31
 800ae4e:	d961      	bls.n	800af14 <create_name+0x110>
 800ae50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae52:	2b2f      	cmp	r3, #47	; 0x2f
 800ae54:	d05e      	beq.n	800af14 <create_name+0x110>
 800ae56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae58:	2b5c      	cmp	r3, #92	; 0x5c
 800ae5a:	d05b      	beq.n	800af14 <create_name+0x110>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2bfe      	cmp	r3, #254	; 0xfe
 800ae60:	d901      	bls.n	800ae66 <create_name+0x62>
			return FR_INVALID_NAME;
 800ae62:	2306      	movs	r3, #6
 800ae64:	e1cc      	b.n	800b200 <create_name+0x3fc>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ae66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
 800ae6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	2b80      	cmp	r3, #128	; 0x80
 800ae72:	d92d      	bls.n	800aed0 <create_name+0xcc>
 800ae74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2bff      	cmp	r3, #255	; 0xff
 800ae7a:	d029      	beq.n	800aed0 <create_name+0xcc>
#if _DF1S
			b = (BYTE)p[si++];			/* Get 2nd byte */
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	61ba      	str	r2, [r7, #24]
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			w = (w << 8) + b;			/* Create a DBC */
 800ae8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	4413      	add	r3, r2
 800ae9a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (!IsDBCS2(b))
 800ae9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea0:	2b40      	cmp	r3, #64	; 0x40
 800aea2:	d903      	bls.n	800aeac <create_name+0xa8>
 800aea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea8:	2b5a      	cmp	r3, #90	; 0x5a
 800aeaa:	d911      	bls.n	800aed0 <create_name+0xcc>
 800aeac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb0:	2b60      	cmp	r3, #96	; 0x60
 800aeb2:	d903      	bls.n	800aebc <create_name+0xb8>
 800aeb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb8:	2b7a      	cmp	r3, #122	; 0x7a
 800aeba:	d909      	bls.n	800aed0 <create_name+0xcc>
 800aebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aec0:	2b80      	cmp	r3, #128	; 0x80
 800aec2:	d903      	bls.n	800aecc <create_name+0xc8>
 800aec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aec8:	2bff      	cmp	r3, #255	; 0xff
 800aeca:	d101      	bne.n	800aed0 <create_name+0xcc>
				return FR_INVALID_NAME;	/* Reject invalid sequence */
 800aecc:	2306      	movs	r3, #6
 800aece:	e197      	b.n	800b200 <create_name+0x3fc>
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aed2:	2101      	movs	r1, #1
 800aed4:	4618      	mov	r0, r3
 800aed6:	f001 faaf 	bl	800c438 <ff_convert>
 800aeda:	4603      	mov	r3, r0
 800aedc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <create_name+0xe4>
 800aee4:	2306      	movs	r3, #6
 800aee6:	e18b      	b.n	800b200 <create_name+0x3fc>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800aee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeea:	2b7f      	cmp	r3, #127	; 0x7f
 800aeec:	d809      	bhi.n	800af02 <create_name+0xfe>
 800aeee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aef0:	4619      	mov	r1, r3
 800aef2:	489b      	ldr	r0, [pc, #620]	; (800b160 <create_name+0x35c>)
 800aef4:	f7fe fcb7 	bl	8009866 <chk_chr>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <create_name+0xfe>
			return FR_INVALID_NAME;
 800aefe:	2306      	movs	r3, #6
 800af00:	e17e      	b.n	800b200 <create_name+0x3fc>
		lfn[di++] = w;					/* Store the Unicode character */
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	617a      	str	r2, [r7, #20]
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4413      	add	r3, r2
 800af0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af10:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800af12:	e793      	b.n	800ae3c <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	441a      	add	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800af1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af20:	2b1f      	cmp	r3, #31
 800af22:	d801      	bhi.n	800af28 <create_name+0x124>
 800af24:	2304      	movs	r3, #4
 800af26:	e000      	b.n	800af2a <create_name+0x126>
 800af28:	2300      	movs	r3, #0
 800af2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800af2e:	e011      	b.n	800af54 <create_name+0x150>
		w = lfn[di - 1];
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af36:	3b01      	subs	r3, #1
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	4413      	add	r3, r2
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800af42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af44:	2b20      	cmp	r3, #32
 800af46:	d002      	beq.n	800af4e <create_name+0x14a>
 800af48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af4a:	2b2e      	cmp	r3, #46	; 0x2e
 800af4c:	d106      	bne.n	800af5c <create_name+0x158>
		di--;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	3b01      	subs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1ea      	bne.n	800af30 <create_name+0x12c>
 800af5a:	e000      	b.n	800af5e <create_name+0x15a>
		if (w != ' ' && w != '.') break;
 800af5c:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <create_name+0x164>
 800af64:	2306      	movs	r3, #6
 800af66:	e14b      	b.n	800b200 <create_name+0x3fc>

	lfn[di] = 0;						/* LFN is created */
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	005b      	lsls	r3, r3, #1
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	2200      	movs	r2, #0
 800af72:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800af7a:	220b      	movs	r2, #11
 800af7c:	2120      	movs	r1, #32
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fc32 	bl	80097e8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800af84:	2300      	movs	r3, #0
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	e002      	b.n	800af90 <create_name+0x18c>
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	3301      	adds	r3, #1
 800af8e:	61bb      	str	r3, [r7, #24]
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4413      	add	r3, r2
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	d0f5      	beq.n	800af8a <create_name+0x186>
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	4413      	add	r3, r2
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	2b2e      	cmp	r3, #46	; 0x2e
 800afaa:	d0ee      	beq.n	800af8a <create_name+0x186>
	if (si) cf |= NS_LOSS | NS_LFN;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d009      	beq.n	800afc6 <create_name+0x1c2>
 800afb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afb6:	f043 0303 	orr.w	r3, r3, #3
 800afba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800afbe:	e002      	b.n	800afc6 <create_name+0x1c2>
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	617b      	str	r3, [r7, #20]
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d009      	beq.n	800afe0 <create_name+0x1dc>
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afd2:	3b01      	subs	r3, #1
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4413      	add	r3, r2
 800afda:	881b      	ldrh	r3, [r3, #0]
 800afdc:	2b2e      	cmp	r3, #46	; 0x2e
 800afde:	d1ef      	bne.n	800afc0 <create_name+0x1bc>

	b = i = 0; ni = 8;
 800afe0:	2300      	movs	r3, #0
 800afe2:	623b      	str	r3, [r7, #32]
 800afe4:	2300      	movs	r3, #0
 800afe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afea:	2308      	movs	r3, #8
 800afec:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	61ba      	str	r2, [r7, #24]
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	4413      	add	r3, r2
 800affa:	881b      	ldrh	r3, [r3, #0]
 800affc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800affe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 80aa 	beq.w	800b15a <create_name+0x356>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b008:	2b20      	cmp	r3, #32
 800b00a:	d006      	beq.n	800b01a <create_name+0x216>
 800b00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b00e:	2b2e      	cmp	r3, #46	; 0x2e
 800b010:	d10a      	bne.n	800b028 <create_name+0x224>
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	429a      	cmp	r2, r3
 800b018:	d006      	beq.n	800b028 <create_name+0x224>
			cf |= NS_LOSS | NS_LFN; continue;
 800b01a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b01e:	f043 0303 	orr.w	r3, r3, #3
 800b022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b026:	e097      	b.n	800b158 <create_name+0x354>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b028:	6a3a      	ldr	r2, [r7, #32]
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d203      	bcs.n	800b038 <create_name+0x234>
 800b030:	69ba      	ldr	r2, [r7, #24]
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	429a      	cmp	r2, r3
 800b036:	d123      	bne.n	800b080 <create_name+0x27c>
			if (ni == 11) {				/* Long extension */
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2b0b      	cmp	r3, #11
 800b03c:	d106      	bne.n	800b04c <create_name+0x248>
				cf |= NS_LOSS | NS_LFN; break;
 800b03e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b042:	f043 0303 	orr.w	r3, r3, #3
 800b046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b04a:	e08e      	b.n	800b16a <create_name+0x366>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	429a      	cmp	r2, r3
 800b052:	d005      	beq.n	800b060 <create_name+0x25c>
 800b054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b058:	f043 0303 	orr.w	r3, r3, #3
 800b05c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	429a      	cmp	r2, r3
 800b066:	d87f      	bhi.n	800b168 <create_name+0x364>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	2308      	movs	r3, #8
 800b06e:	623b      	str	r3, [r7, #32]
 800b070:	230b      	movs	r3, #11
 800b072:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b07e:	e06b      	b.n	800b158 <create_name+0x354>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b082:	2b7f      	cmp	r3, #127	; 0x7f
 800b084:	d910      	bls.n	800b0a8 <create_name+0x2a4>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
 800b086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b088:	4618      	mov	r0, r3
 800b08a:	f001 fa33 	bl	800c4f4 <ff_wtoupper>
 800b08e:	4603      	mov	r3, r0
 800b090:	2100      	movs	r1, #0
 800b092:	4618      	mov	r0, r3
 800b094:	f001 f9d0 	bl	800c438 <ff_convert>
 800b098:	4603      	mov	r3, r0
 800b09a:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b09c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0a0:	f043 0302 	orr.w	r3, r3, #2
 800b0a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
 800b0a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0aa:	2bff      	cmp	r3, #255	; 0xff
 800b0ac:	d91a      	bls.n	800b0e4 <create_name+0x2e0>
			if (i >= ni - 1) {
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	6a3a      	ldr	r2, [r7, #32]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d308      	bcc.n	800b0ca <create_name+0x2c6>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
 800b0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b0bc:	f043 0303 	orr.w	r3, r3, #3
 800b0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	623b      	str	r3, [r7, #32]
 800b0c8:	e046      	b.n	800b158 <create_name+0x354>
			}
			dp->fn[i++] = (BYTE)(w >> 8);
 800b0ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0cc:	0a1b      	lsrs	r3, r3, #8
 800b0ce:	b298      	uxth	r0, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	1c59      	adds	r1, r3, #1
 800b0da:	6239      	str	r1, [r7, #32]
 800b0dc:	4413      	add	r3, r2
 800b0de:	b2c2      	uxtb	r2, r0
 800b0e0:	701a      	strb	r2, [r3, #0]
 800b0e2:	e02f      	b.n	800b144 <create_name+0x340>
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b0e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d007      	beq.n	800b0fa <create_name+0x2f6>
 800b0ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	481d      	ldr	r0, [pc, #116]	; (800b164 <create_name+0x360>)
 800b0f0:	f7fe fbb9 	bl	8009866 <chk_chr>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d008      	beq.n	800b10c <create_name+0x308>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b0fa:	235f      	movs	r3, #95	; 0x5f
 800b0fc:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b0fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b102:	f043 0303 	orr.w	r3, r3, #3
 800b106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b10a:	e01b      	b.n	800b144 <create_name+0x340>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b10e:	2b40      	cmp	r3, #64	; 0x40
 800b110:	d909      	bls.n	800b126 <create_name+0x322>
 800b112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b114:	2b5a      	cmp	r3, #90	; 0x5a
 800b116:	d806      	bhi.n	800b126 <create_name+0x322>
					b |= 2;
 800b118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b11c:	f043 0302 	orr.w	r3, r3, #2
 800b120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b124:	e00e      	b.n	800b144 <create_name+0x340>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b128:	2b60      	cmp	r3, #96	; 0x60
 800b12a:	d90b      	bls.n	800b144 <create_name+0x340>
 800b12c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b12e:	2b7a      	cmp	r3, #122	; 0x7a
 800b130:	d808      	bhi.n	800b144 <create_name+0x340>
						b |= 1; w -= 0x20;
 800b132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b136:	f043 0301 	orr.w	r3, r3, #1
 800b13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b13e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b140:	3b20      	subs	r3, #32
 800b142:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	1c59      	adds	r1, r3, #1
 800b14e:	6239      	str	r1, [r7, #32]
 800b150:	4413      	add	r3, r2
 800b152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b154:	b2d2      	uxtb	r2, r2
 800b156:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800b158:	e749      	b.n	800afee <create_name+0x1ea>
		if (!w) break;					/* Break on end of the LFN */
 800b15a:	bf00      	nop
 800b15c:	e005      	b.n	800b16a <create_name+0x366>
 800b15e:	bf00      	nop
 800b160:	0800d8ac 	.word	0x0800d8ac
 800b164:	0800d8b8 	.word	0x0800d8b8
			if (si > di) break;			/* No extension */
 800b168:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2be5      	cmp	r3, #229	; 0xe5
 800b174:	d104      	bne.n	800b180 <create_name+0x37c>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b17c:	2205      	movs	r2, #5
 800b17e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	2b08      	cmp	r3, #8
 800b184:	d104      	bne.n	800b190 <create_name+0x38c>
 800b186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800b190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b194:	f003 030c 	and.w	r3, r3, #12
 800b198:	2b0c      	cmp	r3, #12
 800b19a:	d005      	beq.n	800b1a8 <create_name+0x3a4>
 800b19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1a0:	f003 0303 	and.w	r3, r3, #3
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d105      	bne.n	800b1b4 <create_name+0x3b0>
		cf |= NS_LFN;
 800b1a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1ac:	f043 0302 	orr.w	r3, r3, #2
 800b1b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b1b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d117      	bne.n	800b1f0 <create_name+0x3ec>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1c4:	f003 0303 	and.w	r3, r3, #3
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d105      	bne.n	800b1d8 <create_name+0x3d4>
 800b1cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1d0:	f043 0310 	orr.w	r3, r3, #16
 800b1d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1dc:	f003 030c 	and.w	r3, r3, #12
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d105      	bne.n	800b1f0 <create_name+0x3ec>
 800b1e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b1e8:	f043 0308 	orr.w	r3, r3, #8
 800b1ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b1f6:	330b      	adds	r3, #11
 800b1f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b1fc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b1fe:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800b200:	4618      	mov	r0, r3
 800b202:	3728      	adds	r7, #40	; 0x28
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b2f      	cmp	r3, #47	; 0x2f
 800b218:	d003      	beq.n	800b222 <follow_path+0x1a>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	2b5c      	cmp	r3, #92	; 0x5c
 800b220:	d102      	bne.n	800b228 <follow_path+0x20>
		path++;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b1f      	cmp	r3, #31
 800b236:	d80a      	bhi.n	800b24e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800b238:	2100      	movs	r1, #0
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff f884 	bl	800a348 <dir_sdi>
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b24c:	e045      	b.n	800b2da <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b24e:	463b      	mov	r3, r7
 800b250:	4619      	mov	r1, r3
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff fdd6 	bl	800ae04 <create_name>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d136      	bne.n	800b2d0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff fbff 	bl	800aa66 <dir_find>
 800b268:	4603      	mov	r3, r0
 800b26a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b272:	7adb      	ldrb	r3, [r3, #11]
 800b274:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b276:	7bfb      	ldrb	r3, [r7, #15]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d128      	bne.n	800b2d4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d123      	bne.n	800b2d4 <follow_path+0xcc>
 800b28c:	2305      	movs	r3, #5
 800b28e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b290:	e020      	b.n	800b2d4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b292:	7bbb      	ldrb	r3, [r7, #14]
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d11d      	bne.n	800b2d8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2a2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	330b      	adds	r3, #11
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f003 0310 	and.w	r3, r3, #16
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d102      	bne.n	800b2b8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b2b2:	2305      	movs	r3, #5
 800b2b4:	73fb      	strb	r3, [r7, #15]
 800b2b6:	e010      	b.n	800b2da <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7ff fa16 	bl	800a6f2 <ld_clust>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2ce:	e7be      	b.n	800b24e <follow_path+0x46>
			if (res != FR_OK) break;
 800b2d0:	bf00      	nop
 800b2d2:	e002      	b.n	800b2da <follow_path+0xd2>
				break;
 800b2d4:	bf00      	nop
 800b2d6:	e000      	b.n	800b2da <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2d8:	bf00      	nop
		}
	}

	return res;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d031      	beq.n	800b35e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e002      	b.n	800b308 <get_ldnumber+0x24>
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	3301      	adds	r3, #1
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	2b1f      	cmp	r3, #31
 800b30e:	d903      	bls.n	800b318 <get_ldnumber+0x34>
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b3a      	cmp	r3, #58	; 0x3a
 800b316:	d1f4      	bne.n	800b302 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b3a      	cmp	r3, #58	; 0x3a
 800b31e:	d11c      	bne.n	800b35a <get_ldnumber+0x76>
			tp = *path;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1c5a      	adds	r2, r3, #1
 800b32a:	60fa      	str	r2, [r7, #12]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	3b30      	subs	r3, #48	; 0x30
 800b330:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	2b09      	cmp	r3, #9
 800b336:	d80e      	bhi.n	800b356 <get_ldnumber+0x72>
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d10a      	bne.n	800b356 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d107      	bne.n	800b356 <get_ldnumber+0x72>
					vol = (int)i;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	3301      	adds	r3, #1
 800b34e:	617b      	str	r3, [r7, #20]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	e002      	b.n	800b360 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b35a:	2300      	movs	r3, #0
 800b35c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b35e:	693b      	ldr	r3, [r7, #16]
}
 800b360:	4618      	mov	r0, r3
 800b362:	371c      	adds	r7, #28
 800b364:	46bd      	mov	sp, r7
 800b366:	bc80      	pop	{r7}
 800b368:	4770      	bx	lr
	...

0800b36c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f04f 32ff 	mov.w	r2, #4294967295
 800b384:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7fe fc81 	bl	8009c92 <move_window>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <check_fs+0x2e>
		return 3;
 800b396:	2303      	movs	r3, #3
 800b398:	e01e      	b.n	800b3d8 <check_fs+0x6c>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d001      	beq.n	800b3ae <check_fs+0x42>
		return 2;
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e014      	b.n	800b3d8 <check_fs+0x6c>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3336      	adds	r3, #54	; 0x36
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3b8:	4a09      	ldr	r2, [pc, #36]	; (800b3e0 <check_fs+0x74>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d101      	bne.n	800b3c2 <check_fs+0x56>
		return 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e00a      	b.n	800b3d8 <check_fs+0x6c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3352      	adds	r3, #82	; 0x52
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3cc:	4a04      	ldr	r2, [pc, #16]	; (800b3e0 <check_fs+0x74>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d101      	bne.n	800b3d6 <check_fs+0x6a>
		return 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e000      	b.n	800b3d8 <check_fs+0x6c>

	return 1;
 800b3d6:	2301      	movs	r3, #1
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	00544146 	.word	0x00544146

0800b3e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b096      	sub	sp, #88	; 0x58
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b3f8:	68b8      	ldr	r0, [r7, #8]
 800b3fa:	f7ff ff73 	bl	800b2e4 <get_ldnumber>
 800b3fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b402:	2b00      	cmp	r3, #0
 800b404:	da01      	bge.n	800b40a <find_volume+0x26>
 800b406:	230b      	movs	r3, #11
 800b408:	e209      	b.n	800b81e <find_volume+0x43a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b40a:	4a9e      	ldr	r2, [pc, #632]	; (800b684 <find_volume+0x2a0>)
 800b40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b412:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <find_volume+0x3a>
 800b41a:	230c      	movs	r3, #12
 800b41c:	e1ff      	b.n	800b81e <find_volume+0x43a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b422:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d01b      	beq.n	800b466 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe f90b 	bl	8009650 <disk_status>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b440:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10c      	bne.n	800b466 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d007      	beq.n	800b462 <find_volume+0x7e>
 800b452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b456:	f003 0304 	and.w	r3, r3, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800b45e:	230a      	movs	r3, #10
 800b460:	e1dd      	b.n	800b81e <find_volume+0x43a>
			return FR_OK;				/* The file system object is valid */
 800b462:	2300      	movs	r3, #0
 800b464:	e1db      	b.n	800b81e <find_volume+0x43a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b46e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b470:	b2da      	uxtb	r2, r3
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe f900 	bl	8009684 <disk_initialize>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800b48a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b496:	2303      	movs	r3, #3
 800b498:	e1c1      	b.n	800b81e <find_volume+0x43a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d007      	beq.n	800b4b0 <find_volume+0xcc>
 800b4a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800b4ac:	230a      	movs	r3, #10
 800b4ae:	e1b6      	b.n	800b81e <find_volume+0x43a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800b4b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4b8:	f7ff ff58 	bl	800b36c <check_fs>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800b4c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d146      	bne.n	800b558 <find_volume+0x174>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ce:	e01a      	b.n	800b506 <find_volume+0x122>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800b4d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4d4:	011b      	lsls	r3, r3, #4
 800b4d6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b4da:	4413      	add	r3, r2
 800b4dc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800b4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d003      	beq.n	800b4f0 <find_volume+0x10c>
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	e000      	b.n	800b4f2 <find_volume+0x10e>
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b4fa:	440b      	add	r3, r1
 800b4fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800b500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b502:	3301      	adds	r3, #1
 800b504:	643b      	str	r3, [r7, #64]	; 0x40
 800b506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d9e1      	bls.n	800b4d0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800b50c:	2300      	movs	r3, #0
 800b50e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <find_volume+0x138>
 800b516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b518:	3b01      	subs	r3, #1
 800b51a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800b51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b524:	4413      	add	r3, r2
 800b526:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b52a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800b52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <find_volume+0x15a>
 800b532:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b534:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b536:	f7ff ff19 	bl	800b36c <check_fs>
 800b53a:	4603      	mov	r3, r0
 800b53c:	e000      	b.n	800b540 <find_volume+0x15c>
 800b53e:	2302      	movs	r3, #2
 800b540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800b544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <find_volume+0x174>
 800b54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b54e:	3301      	adds	r3, #1
 800b550:	643b      	str	r3, [r7, #64]	; 0x40
 800b552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b554:	2b03      	cmp	r3, #3
 800b556:	d9e1      	bls.n	800b51c <find_volume+0x138>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d101      	bne.n	800b564 <find_volume+0x180>
 800b560:	2301      	movs	r3, #1
 800b562:	e15c      	b.n	800b81e <find_volume+0x43a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <find_volume+0x18c>
 800b56c:	230d      	movs	r3, #13
 800b56e:	e156      	b.n	800b81e <find_volume+0x43a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	330b      	adds	r3, #11
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b57a:	d001      	beq.n	800b580 <find_volume+0x19c>
		return FR_NO_FILESYSTEM;
 800b57c:	230d      	movs	r3, #13
 800b57e:	e14e      	b.n	800b81e <find_volume+0x43a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	3316      	adds	r3, #22
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d103      	bne.n	800b596 <find_volume+0x1b2>
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	3324      	adds	r3, #36	; 0x24
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b59a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a0:	7c1a      	ldrb	r2, [r3, #16]
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a4:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d006      	beq.n	800b5c0 <find_volume+0x1dc>
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d001      	beq.n	800b5c0 <find_volume+0x1dc>
		return FR_NO_FILESYSTEM;
 800b5bc:	230d      	movs	r3, #13
 800b5be:	e12e      	b.n	800b81e <find_volume+0x43a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5ca:	fb02 f303 	mul.w	r3, r2, r3
 800b5ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	7b5a      	ldrb	r2, [r3, #13]
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00a      	beq.n	800b5fa <find_volume+0x216>
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <find_volume+0x21a>
		return FR_NO_FILESYSTEM;
 800b5fa:	230d      	movs	r3, #13
 800b5fc:	e10f      	b.n	800b81e <find_volume+0x43a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b600:	3311      	adds	r3, #17
 800b602:	881a      	ldrh	r2, [r3, #0]
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b610:	f003 030f 	and.w	r3, r3, #15
 800b614:	b29b      	uxth	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <find_volume+0x23a>
		return FR_NO_FILESYSTEM;
 800b61a:	230d      	movs	r3, #13
 800b61c:	e0ff      	b.n	800b81e <find_volume+0x43a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	3313      	adds	r3, #19
 800b622:	881b      	ldrh	r3, [r3, #0]
 800b624:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d103      	bne.n	800b634 <find_volume+0x250>
 800b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62e:	3320      	adds	r3, #32
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	330e      	adds	r3, #14
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b63c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <find_volume+0x262>
 800b642:	230d      	movs	r3, #13
 800b644:	e0eb      	b.n	800b81e <find_volume+0x43a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b646:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64a:	4413      	add	r3, r2
 800b64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b64e:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b652:	0912      	lsrs	r2, r2, #4
 800b654:	b292      	uxth	r2, r2
 800b656:	4413      	add	r3, r2
 800b658:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b65a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	429a      	cmp	r2, r3
 800b660:	d201      	bcs.n	800b666 <find_volume+0x282>
 800b662:	230d      	movs	r3, #13
 800b664:	e0db      	b.n	800b81e <find_volume+0x43a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b66e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b672:	fbb3 f3f2 	udiv	r3, r3, r2
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d104      	bne.n	800b688 <find_volume+0x2a4>
 800b67e:	230d      	movs	r3, #13
 800b680:	e0cd      	b.n	800b81e <find_volume+0x43a>
 800b682:	bf00      	nop
 800b684:	20000204 	.word	0x20000204
	fmt = FS_FAT12;
 800b688:	2301      	movs	r3, #1
 800b68a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b690:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b694:	4293      	cmp	r3, r2
 800b696:	d902      	bls.n	800b69e <find_volume+0x2ba>
 800b698:	2302      	movs	r3, #2
 800b69a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d902      	bls.n	800b6ae <find_volume+0x2ca>
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	1c9a      	adds	r2, r3, #2
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b6c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c4:	441a      	add	r2, r3
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800b6cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	441a      	add	r2, r3
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800b6d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d112      	bne.n	800b706 <find_volume+0x322>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <find_volume+0x30a>
 800b6ea:	230d      	movs	r3, #13
 800b6ec:	e097      	b.n	800b81e <find_volume+0x43a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f0:	332c      	adds	r3, #44	; 0x2c
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	647b      	str	r3, [r7, #68]	; 0x44
 800b704:	e025      	b.n	800b752 <find_volume+0x36e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <find_volume+0x330>
 800b710:	230d      	movs	r3, #13
 800b712:	e084      	b.n	800b81e <find_volume+0x43a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71c:	441a      	add	r2, r3
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d104      	bne.n	800b736 <find_volume+0x352>
 800b72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	e00c      	b.n	800b750 <find_volume+0x36c>
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b73c:	4613      	mov	r3, r2
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	4413      	add	r3, r2
 800b742:	085a      	lsrs	r2, r3, #1
 800b744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b750:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b754:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b75a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b75e:	0a5b      	lsrs	r3, r3, #9
 800b760:	429a      	cmp	r2, r3
 800b762:	d201      	bcs.n	800b768 <find_volume+0x384>
		return FR_NO_FILESYSTEM;
 800b764:	230d      	movs	r3, #13
 800b766:	e05a      	b.n	800b81e <find_volume+0x43a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	f04f 32ff 	mov.w	r2, #4294967295
 800b76e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	2280      	movs	r2, #128	; 0x80
 800b782:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d133      	bne.n	800b7f6 <find_volume+0x412>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	3330      	adds	r3, #48	; 0x30
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d12e      	bne.n	800b7f6 <find_volume+0x412>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79a:	3301      	adds	r3, #1
 800b79c:	4619      	mov	r1, r3
 800b79e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7a0:	f7fe fa77 	bl	8009c92 <move_window>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d125      	bne.n	800b7f6 <find_volume+0x412>
	{
		fs->fsi_flag = 0;
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d119      	bne.n	800b7f6 <find_volume+0x412>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a18      	ldr	r2, [pc, #96]	; (800b828 <find_volume+0x444>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d114      	bne.n	800b7f6 <find_volume+0x412>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a15      	ldr	r2, [pc, #84]	; (800b82c <find_volume+0x448>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d10d      	bne.n	800b7f6 <find_volume+0x412>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b7fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b800:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <find_volume+0x44c>)
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	3301      	adds	r3, #1
 800b806:	b29a      	uxth	r2, r3
 800b808:	4b09      	ldr	r3, [pc, #36]	; (800b830 <find_volume+0x44c>)
 800b80a:	801a      	strh	r2, [r3, #0]
 800b80c:	4b08      	ldr	r3, [pc, #32]	; (800b830 <find_volume+0x44c>)
 800b80e:	881a      	ldrh	r2, [r3, #0]
 800b810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b812:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b816:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b818:	f7fe f9ca 	bl	8009bb0 <clear_lock>
#endif

	return FR_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3758      	adds	r7, #88	; 0x58
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	41615252 	.word	0x41615252
 800b82c:	61417272 	.word	0x61417272
 800b830:	20000208 	.word	0x20000208

0800b834 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d022      	beq.n	800b88c <validate+0x58>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d01d      	beq.n	800b88c <validate+0x58>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b856:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d016      	beq.n	800b88c <validate+0x58>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b864:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800b86e:	429a      	cmp	r2, r3
 800b870:	d10c      	bne.n	800b88c <validate+0x58>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b878:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fd fee7 	bl	8009650 <disk_status>
 800b882:	4603      	mov	r3, r0
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b88c:	2309      	movs	r3, #9
 800b88e:	e000      	b.n	800b892 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b8ae:	f107 0310 	add.w	r3, r7, #16
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff fd16 	bl	800b2e4 <get_ldnumber>
 800b8b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	da01      	bge.n	800b8c4 <f_mount+0x28>
 800b8c0:	230b      	movs	r3, #11
 800b8c2:	e02d      	b.n	800b920 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b8c4:	4a18      	ldr	r2, [pc, #96]	; (800b928 <f_mount+0x8c>)
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d006      	beq.n	800b8e2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800b8d4:	69b8      	ldr	r0, [r7, #24]
 800b8d6:	f7fe f96b 	bl	8009bb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	490d      	ldr	r1, [pc, #52]	; (800b928 <f_mount+0x8c>)
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d002      	beq.n	800b906 <f_mount+0x6a>
 800b900:	79fb      	ldrb	r3, [r7, #7]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d001      	beq.n	800b90a <f_mount+0x6e>
 800b906:	2300      	movs	r3, #0
 800b908:	e00a      	b.n	800b920 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b90a:	f107 0108 	add.w	r1, r7, #8
 800b90e:	f107 030c 	add.w	r3, r7, #12
 800b912:	2200      	movs	r2, #0
 800b914:	4618      	mov	r0, r3
 800b916:	f7ff fd65 	bl	800b3e4 <find_volume>
 800b91a:	4603      	mov	r3, r0
 800b91c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000204 	.word	0x20000204

0800b92c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800b932:	af00      	add	r7, sp, #0
 800b934:	f107 030c 	add.w	r3, r7, #12
 800b938:	6018      	str	r0, [r3, #0]
 800b93a:	f107 0308 	add.w	r3, r7, #8
 800b93e:	6019      	str	r1, [r3, #0]
 800b940:	1dfb      	adds	r3, r7, #7
 800b942:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b944:	f107 030c 	add.w	r3, r7, #12
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d101      	bne.n	800b952 <f_open+0x26>
 800b94e:	2309      	movs	r3, #9
 800b950:	e1cb      	b.n	800bcea <f_open+0x3be>
	fp->fs = 0;			/* Clear file object */
 800b952:	f107 030c 	add.w	r3, r7, #12
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b95e:	1dfb      	adds	r3, r7, #7
 800b960:	1dfa      	adds	r2, r7, #7
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	f002 021f 	and.w	r2, r2, #31
 800b968:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b96a:	1dfb      	adds	r3, r7, #7
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	f023 0301 	bic.w	r3, r3, #1
 800b972:	b2da      	uxtb	r2, r3
 800b974:	f107 0108 	add.w	r1, r7, #8
 800b978:	f107 031c 	add.w	r3, r7, #28
 800b97c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b980:	4618      	mov	r0, r3
 800b982:	f7ff fd2f 	bl	800b3e4 <find_volume>
 800b986:	4603      	mov	r3, r0
 800b988:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b98c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800b990:	2b00      	cmp	r3, #0
 800b992:	f040 81a8 	bne.w	800bce6 <f_open+0x3ba>
		INIT_BUF(dj);
 800b996:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b99a:	f000 fdd9 	bl	800c550 <ff_memalloc>
 800b99e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800b9a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <f_open+0x82>
 800b9aa:	2311      	movs	r3, #17
 800b9ac:	e19d      	b.n	800bcea <f_open+0x3be>
 800b9ae:	f107 031c 	add.w	r3, r7, #28
 800b9b2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800b9b6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 800b9ba:	f107 031c 	add.w	r3, r7, #28
 800b9be:	f107 0210 	add.w	r2, r7, #16
 800b9c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800b9c6:	f107 0308 	add.w	r3, r7, #8
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	f107 031c 	add.w	r3, r7, #28
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fc18 	bl	800b208 <follow_path>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 800b9de:	f107 031c 	add.w	r3, r7, #28
 800b9e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9e6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b9ea:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d11a      	bne.n	800ba28 <f_open+0xfc>
			if (!dir)	/* Default directory itself */
 800b9f2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d103      	bne.n	800ba02 <f_open+0xd6>
				res = FR_INVALID_NAME;
 800b9fa:	2306      	movs	r3, #6
 800b9fc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800ba00:	e012      	b.n	800ba28 <f_open+0xfc>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba02:	1dfb      	adds	r3, r7, #7
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f023 0301 	bic.w	r3, r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bf14      	ite	ne
 800ba0e:	2301      	movne	r3, #1
 800ba10:	2300      	moveq	r3, #0
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	461a      	mov	r2, r3
 800ba16:	f107 031c 	add.w	r3, r7, #28
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fd ff3d 	bl	800989c <chk_lock>
 800ba22:	4603      	mov	r3, r0
 800ba24:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba28:	1dfb      	adds	r3, r7, #7
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 031c 	and.w	r3, r3, #28
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f000 80a1 	beq.w	800bb78 <f_open+0x24c>
			if (res != FR_OK) {					/* No file, create new */
 800ba36:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d01f      	beq.n	800ba7e <f_open+0x152>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800ba3e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	d10e      	bne.n	800ba64 <f_open+0x138>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba46:	f7fd ff95 	bl	8009974 <enq_lock>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d006      	beq.n	800ba5e <f_open+0x132>
 800ba50:	f107 031c 	add.w	r3, r7, #28
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7ff f8c7 	bl	800abe8 <dir_register>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	e000      	b.n	800ba60 <f_open+0x134>
 800ba5e:	2312      	movs	r3, #18
 800ba60:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba64:	1dfb      	adds	r3, r7, #7
 800ba66:	1dfa      	adds	r2, r7, #7
 800ba68:	7812      	ldrb	r2, [r2, #0]
 800ba6a:	f042 0208 	orr.w	r2, r2, #8
 800ba6e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800ba70:	f107 031c 	add.w	r3, r7, #28
 800ba74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba78:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800ba7c:	e014      	b.n	800baa8 <f_open+0x17c>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba7e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800ba82:	330b      	adds	r3, #11
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	f003 0311 	and.w	r3, r3, #17
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <f_open+0x16a>
					res = FR_DENIED;
 800ba8e:	2307      	movs	r3, #7
 800ba90:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800ba94:	e008      	b.n	800baa8 <f_open+0x17c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ba96:	1dfb      	adds	r3, r7, #7
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	f003 0304 	and.w	r3, r3, #4
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <f_open+0x17c>
						res = FR_EXIST;
 800baa2:	2308      	movs	r3, #8
 800baa4:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800baa8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800baac:	2b00      	cmp	r3, #0
 800baae:	f040 8084 	bne.w	800bbba <f_open+0x28e>
 800bab2:	1dfb      	adds	r3, r7, #7
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	f003 0308 	and.w	r3, r3, #8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d07d      	beq.n	800bbba <f_open+0x28e>
				dw = GET_FATTIME();				/* Created time */
 800babe:	f7fc f97d 	bl	8007dbc <get_fattime>
 800bac2:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				ST_DWORD(dir + DIR_CrtTime, dw);
 800bac6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800baca:	330e      	adds	r3, #14
 800bacc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800bad0:	601a      	str	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800bad2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bad6:	330b      	adds	r3, #11
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800badc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bae0:	331c      	adds	r3, #28
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800bae6:	f107 031c 	add.w	r3, r7, #28
 800baea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baee:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe fdfd 	bl	800a6f2 <ld_clust>
 800baf8:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				st_clust(dir, 0);				/* cluster = 0 */
 800bafc:	2100      	movs	r1, #0
 800bafe:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800bb02:	f7fe fe11 	bl	800a728 <st_clust>
				dj.fs->wflag = 1;
 800bb06:	f107 031c 	add.w	r3, r7, #28
 800bb0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800bb14:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d04e      	beq.n	800bbba <f_open+0x28e>
					dw = dj.fs->winsect;
 800bb1c:	f107 031c 	add.w	r3, r7, #28
 800bb20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb24:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800bb28:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
					res = remove_chain(dj.fs, cl);
 800bb2c:	f107 031c 	add.w	r3, r7, #28
 800bb30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb34:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe fada 	bl	800a0f2 <remove_chain>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 800bb44:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d136      	bne.n	800bbba <f_open+0x28e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800bb4c:	f107 031c 	add.w	r3, r7, #28
 800bb50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb54:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800bb58:	3a01      	subs	r2, #1
 800bb5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800bb5e:	f107 031c 	add.w	r3, r7, #28
 800bb62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb66:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe f891 	bl	8009c92 <move_window>
 800bb70:	4603      	mov	r3, r0
 800bb72:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bb76:	e020      	b.n	800bbba <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800bb78:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11c      	bne.n	800bbba <f_open+0x28e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800bb80:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bb84:	330b      	adds	r3, #11
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f003 0310 	and.w	r3, r3, #16
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <f_open+0x26c>
					res = FR_NO_FILE;
 800bb90:	2304      	movs	r3, #4
 800bb92:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800bb96:	e010      	b.n	800bbba <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800bb98:	1dfb      	adds	r3, r7, #7
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00a      	beq.n	800bbba <f_open+0x28e>
 800bba4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bba8:	330b      	adds	r3, #11
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d002      	beq.n	800bbba <f_open+0x28e>
						res = FR_DENIED;
 800bbb4:	2307      	movs	r3, #7
 800bbb6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800bbba:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d13d      	bne.n	800bc3e <f_open+0x312>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bbc2:	1dfb      	adds	r3, r7, #7
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f003 0308 	and.w	r3, r3, #8
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d005      	beq.n	800bbda <f_open+0x2ae>
				mode |= FA__WRITTEN;
 800bbce:	1dfb      	adds	r3, r7, #7
 800bbd0:	1dfa      	adds	r2, r7, #7
 800bbd2:	7812      	ldrb	r2, [r2, #0]
 800bbd4:	f042 0220 	orr.w	r2, r2, #32
 800bbd8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800bbda:	f107 031c 	add.w	r3, r7, #28
 800bbde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbe2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800bbe6:	f107 030c 	add.w	r3, r7, #12
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800bbf0:	f107 030c 	add.w	r3, r7, #12
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800bbfa:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bbfe:	1dfb      	adds	r3, r7, #7
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f023 0301 	bic.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	bf14      	ite	ne
 800bc0a:	2301      	movne	r3, #1
 800bc0c:	2300      	moveq	r3, #0
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	461a      	mov	r2, r3
 800bc12:	f107 031c 	add.w	r3, r7, #28
 800bc16:	4611      	mov	r1, r2
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fd fecf 	bl	80099bc <inc_lock>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800bc2a:	f107 030c 	add.w	r3, r7, #12
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <f_open+0x312>
 800bc38:	2302      	movs	r3, #2
 800bc3a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 800bc3e:	f8d7 024c 	ldr.w	r0, [r7, #588]	; 0x24c
 800bc42:	f000 fc91 	bl	800c568 <ff_memfree>

		if (res == FR_OK) {
 800bc46:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d14b      	bne.n	800bce6 <f_open+0x3ba>
			fp->flag = mode;					/* File access mode */
 800bc4e:	f107 030c 	add.w	r3, r7, #12
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	1dfa      	adds	r2, r7, #7
 800bc56:	7812      	ldrb	r2, [r2, #0]
 800bc58:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800bc5c:	f107 030c 	add.w	r3, r7, #12
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800bc68:	f107 031c 	add.w	r3, r7, #28
 800bc6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc70:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe fd3c 	bl	800a6f2 <ld_clust>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f107 030c 	add.w	r3, r7, #12
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800bc86:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800bc8a:	331c      	adds	r3, #28
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	f107 030c 	add.w	r3, r7, #12
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800bc98:	f107 030c 	add.w	r3, r7, #12
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800bca4:	f107 030c 	add.w	r3, r7, #12
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800bcb0:	f107 030c 	add.w	r3, r7, #12
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bcbc:	f107 031c 	add.w	r3, r7, #28
 800bcc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bcc4:	f107 030c 	add.w	r3, r7, #12
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800bcce:	f107 030c 	add.w	r3, r7, #12
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bcd8:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800bcdc:	f107 030c 	add.w	r3, r7, #12
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800bce6:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08a      	sub	sp, #40	; 0x28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
 800bd00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7ff fd91 	bl	800b834 <validate>
 800bd12:	4603      	mov	r3, r0
 800bd14:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <f_write+0x2c>
 800bd1c:	7dfb      	ldrb	r3, [r7, #23]
 800bd1e:	e192      	b.n	800c046 <f_write+0x352>
	if (fp->err)							/* Check error */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800bd30:	e189      	b.n	800c046 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd38:	f003 0302 	and.w	r3, r3, #2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bd40:	2307      	movs	r3, #7
 800bd42:	e180      	b.n	800c046 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	441a      	add	r2, r3
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd54:	429a      	cmp	r2, r3
 800bd56:	f080 8158 	bcs.w	800c00a <f_write+0x316>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bd5e:	e154      	b.n	800c00a <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f040 8114 	bne.w	800bf98 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd76:	0a5b      	lsrs	r3, r3, #9
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd80:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bd84:	3b01      	subs	r3, #1
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	4013      	ands	r3, r2
 800bd8a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800bd8c:	7dbb      	ldrb	r3, [r7, #22]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d151      	bne.n	800be36 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10f      	bne.n	800bdbc <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bda2:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d121      	bne.n	800bdee <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe f9f7 	bl	800a1a6 <create_chain>
 800bdb8:	6278      	str	r0, [r7, #36]	; 0x24
 800bdba:	e018      	b.n	800bdee <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d008      	beq.n	800bdd8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bdcc:	4619      	mov	r1, r3
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f7fe fa86 	bl	800a2e0 <clmt_clust>
 800bdd4:	6278      	str	r0, [r7, #36]	; 0x24
 800bdd6:	e00a      	b.n	800bdee <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f7fe f9dd 	bl	800a1a6 <create_chain>
 800bdec:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 810f 	beq.w	800c014 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d105      	bne.n	800be08 <f_write+0x114>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2202      	movs	r2, #2
 800be00:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be04:	2302      	movs	r3, #2
 800be06:	e11e      	b.n	800c046 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be0e:	d105      	bne.n	800be1c <f_write+0x128>
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be18:	2301      	movs	r3, #1
 800be1a:	e114      	b.n	800c046 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d103      	bne.n	800be36 <f_write+0x142>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d01d      	beq.n	800be80 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be4a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800be4e:	68f9      	ldr	r1, [r7, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800be56:	2301      	movs	r3, #1
 800be58:	f7fd fc5a 	bl	8009710 <disk_write>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d005      	beq.n	800be6e <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800be6a:	2301      	movs	r3, #1
 800be6c:	e0eb      	b.n	800c046 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800be8c:	4619      	mov	r1, r3
 800be8e:	4610      	mov	r0, r2
 800be90:	f7fd ff92 	bl	8009db8 <clust2sect>
 800be94:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d105      	bne.n	800bea8 <f_write+0x1b4>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2202      	movs	r2, #2
 800bea0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bea4:	2302      	movs	r3, #2
 800bea6:	e0ce      	b.n	800c046 <f_write+0x352>
			sect += csect;
 800bea8:	7dbb      	ldrb	r3, [r7, #22]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4413      	add	r3, r2
 800beae:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	0a5b      	lsrs	r3, r3, #9
 800beb4:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d048      	beq.n	800bf4e <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bebc:	7dba      	ldrb	r2, [r7, #22]
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	4413      	add	r3, r2
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bec8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800becc:	4293      	cmp	r3, r2
 800bece:	d908      	bls.n	800bee2 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bed6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800beda:	461a      	mov	r2, r3
 800bedc:	7dbb      	ldrb	r3, [r7, #22]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bee8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	69b9      	ldr	r1, [r7, #24]
 800bef2:	f7fd fc0d 	bl	8009710 <disk_write>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d005      	beq.n	800bf08 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf04:	2301      	movs	r3, #1
 800bf06:	e09e      	b.n	800c046 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	69fa      	ldr	r2, [r7, #28]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d916      	bls.n	800bf46 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	025b      	lsls	r3, r3, #9
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	4413      	add	r3, r2
 800bf2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf2e:	4619      	mov	r1, r3
 800bf30:	f7fd fc2c 	bl	800978c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bf3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	025b      	lsls	r3, r3, #9
 800bf4a:	623b      	str	r3, [r7, #32]
				continue;
 800bf4c:	e047      	b.n	800bfde <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d01a      	beq.n	800bf90 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d212      	bcs.n	800bf90 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bf70:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bf74:	68f9      	ldr	r1, [r7, #12]
 800bf76:	2301      	movs	r3, #1
 800bf78:	693a      	ldr	r2, [r7, #16]
 800bf7a:	f7fd fba9 	bl	80096d0 <disk_read>
 800bf7e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d005      	beq.n	800bf90 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e05a      	b.n	800c046 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bfa6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bfa8:	6a3a      	ldr	r2, [r7, #32]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d901      	bls.n	800bfb4 <f_write+0x2c0>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	6a3a      	ldr	r2, [r7, #32]
 800bfc4:	69b9      	ldr	r1, [r7, #24]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd fbe0 	bl	800978c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bfd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	61bb      	str	r3, [r7, #24]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	441a      	add	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	6a3b      	ldr	r3, [r7, #32]
 800bffc:	441a      	add	r2, r3
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f47f aea7 	bne.w	800bd60 <f_write+0x6c>
 800c012:	e000      	b.n	800c016 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c014:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c022:	429a      	cmp	r2, r3
 800c024:	d905      	bls.n	800c032 <f_write+0x33e>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c038:	f043 0320 	orr.w	r3, r3, #32
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3728      	adds	r7, #40	; 0x28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b086      	sub	sp, #24
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7ff fbec 	bl	800b834 <validate>
 800c05c:	4603      	mov	r3, r0
 800c05e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d172      	bne.n	800c14c <f_sync+0xfe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c06c:	f003 0320 	and.w	r3, r3, #32
 800c070:	2b00      	cmp	r3, #0
 800c072:	d06b      	beq.n	800c14c <f_sync+0xfe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d019      	beq.n	800c0b6 <f_sync+0x68>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c088:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c094:	2301      	movs	r3, #1
 800c096:	f7fd fb3b 	bl	8009710 <disk_write>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <f_sync+0x56>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e054      	b.n	800c14e <f_sync+0x100>
				fp->flag &= ~FA__DIRTY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c0aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	f7fd fde4 	bl	8009c92 <move_window>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d13b      	bne.n	800c14c <f_sync+0xfe>
				dir = fp->dir_ptr;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800c0da:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	330b      	adds	r3, #11
 800c0e0:	781a      	ldrb	r2, [r3, #0]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	330b      	adds	r3, #11
 800c0e6:	f042 0220 	orr.w	r2, r2, #32
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	331c      	adds	r3, #28
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 800c0f8:	601a      	str	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c100:	4619      	mov	r1, r3
 800c102:	6938      	ldr	r0, [r7, #16]
 800c104:	f7fe fb10 	bl	800a728 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c108:	f7fb fe58 	bl	8007dbc <get_fattime>
 800c10c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	3316      	adds	r3, #22
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	601a      	str	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	3312      	adds	r3, #18
 800c11a:	2200      	movs	r2, #0
 800c11c:	801a      	strh	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c124:	f023 0320 	bic.w	r3, r3, #32
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c136:	2201      	movs	r2, #1
 800c138:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c142:	4618      	mov	r0, r3
 800c144:	f7fd fdd4 	bl	8009cf0 <sync_fs>
 800c148:	4603      	mov	r3, r0
 800c14a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b084      	sub	sp, #16
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff ff75 	bl	800c04e <f_sync>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d116      	bne.n	800c19c <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff fb60 	bl	800b834 <validate>
 800c174:	4603      	mov	r3, r0
 800c176:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c178:	7bfb      	ldrb	r3, [r7, #15]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10e      	bne.n	800c19c <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c184:	4618      	mov	r0, r3
 800c186:	f7fd fccf 	bl	8009b28 <dec_lock>
 800c18a:	4603      	mov	r3, r0
 800c18c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d103      	bne.n	800c19c <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c1be:	4b1e      	ldr	r3, [pc, #120]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1c0:	7a5b      	ldrb	r3, [r3, #9]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d831      	bhi.n	800c22c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c1c8:	4b1b      	ldr	r3, [pc, #108]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1ca:	7a5b      	ldrb	r3, [r3, #9]
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	4b19      	ldr	r3, [pc, #100]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c1d6:	4b18      	ldr	r3, [pc, #96]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1d8:	7a5b      	ldrb	r3, [r3, #9]
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	4a16      	ldr	r2, [pc, #88]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c1e6:	4b14      	ldr	r3, [pc, #80]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1e8:	7a5b      	ldrb	r3, [r3, #9]
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	4b12      	ldr	r3, [pc, #72]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1f0:	4413      	add	r3, r2
 800c1f2:	79fa      	ldrb	r2, [r7, #7]
 800c1f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c1f8:	7a5b      	ldrb	r3, [r3, #9]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	1c5a      	adds	r2, r3, #1
 800c1fe:	b2d1      	uxtb	r1, r2
 800c200:	4a0d      	ldr	r2, [pc, #52]	; (800c238 <FATFS_LinkDriverEx+0x90>)
 800c202:	7251      	strb	r1, [r2, #9]
 800c204:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c206:	7dbb      	ldrb	r3, [r7, #22]
 800c208:	3330      	adds	r3, #48	; 0x30
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	3301      	adds	r3, #1
 800c214:	223a      	movs	r2, #58	; 0x3a
 800c216:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3302      	adds	r3, #2
 800c21c:	222f      	movs	r2, #47	; 0x2f
 800c21e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	3303      	adds	r3, #3
 800c224:	2200      	movs	r2, #0
 800c226:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	371c      	adds	r7, #28
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr
 800c238:	20000224 	.word	0x20000224

0800c23c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c246:	2200      	movs	r2, #0
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff ffac 	bl	800c1a8 <FATFS_LinkDriverEx>
 800c250:	4603      	mov	r3, r0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
	...

0800c25c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	4603      	mov	r3, r0
 800c264:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c266:	4b0b      	ldr	r3, [pc, #44]	; (800c294 <SD_initialize+0x38>)
 800c268:	2201      	movs	r2, #1
 800c26a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 800c26c:	f7fb fdae 	bl	8007dcc <BSP_SD_Init>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d107      	bne.n	800c286 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c276:	4b07      	ldr	r3, [pc, #28]	; (800c294 <SD_initialize+0x38>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	f023 0301 	bic.w	r3, r3, #1
 800c280:	b2da      	uxtb	r2, r3
 800c282:	4b04      	ldr	r3, [pc, #16]	; (800c294 <SD_initialize+0x38>)
 800c284:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c286:	4b03      	ldr	r3, [pc, #12]	; (800c294 <SD_initialize+0x38>)
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	b2db      	uxtb	r3, r3
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	2000011b 	.word	0x2000011b

0800c298 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	4603      	mov	r3, r0
 800c2a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c2a2:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <SD_status+0x38>)
 800c2a4:	2201      	movs	r2, #1
 800c2a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c2a8:	f7fb fdf2 	bl	8007e90 <BSP_SD_GetCardState>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d107      	bne.n	800c2c2 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c2b2:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <SD_status+0x38>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	f023 0301 	bic.w	r3, r3, #1
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b04      	ldr	r3, [pc, #16]	; (800c2d0 <SD_status+0x38>)
 800c2c0:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c2c2:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <SD_status+0x38>)
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b2db      	uxtb	r3, r3
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	2000011b 	.word	0x2000011b

0800c2d4 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
 800c2de:	603b      	str	r3, [r7, #0]
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c2e8:	4b0f      	ldr	r3, [pc, #60]	; (800c328 <SD_read+0x54>)
 800c2ea:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 800c2ec:	4b0f      	ldr	r3, [pc, #60]	; (800c32c <SD_read+0x58>)
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	68b8      	ldr	r0, [r7, #8]
 800c2f4:	f7fb fd90 	bl	8007e18 <BSP_SD_ReadBlocks>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10e      	bne.n	800c31c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c2fe:	e006      	b.n	800c30e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	1e5a      	subs	r2, r3, #1
 800c304:	613a      	str	r2, [r7, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <SD_read+0x3a>
      {
        return RES_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e007      	b.n	800c31e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c30e:	f7fb fdbf 	bl	8007e90 <BSP_SD_GetCardState>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1f3      	bne.n	800c300 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3718      	adds	r7, #24
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	000186a0 	.word	0x000186a0
 800c32c:	05f5e100 	.word	0x05f5e100

0800c330 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60b9      	str	r1, [r7, #8]
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 800c344:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <SD_write+0x54>)
 800c346:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <SD_write+0x58>)
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	68b8      	ldr	r0, [r7, #8]
 800c350:	f7fb fd80 	bl	8007e54 <BSP_SD_WriteBlocks>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10e      	bne.n	800c378 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c35a:	e006      	b.n	800c36a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	1e5a      	subs	r2, r3, #1
 800c360:	613a      	str	r2, [r7, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <SD_write+0x3a>
      {
        return RES_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e007      	b.n	800c37a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c36a:	f7fb fd91 	bl	8007e90 <BSP_SD_GetCardState>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1f3      	bne.n	800c35c <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c378:	7dfb      	ldrb	r3, [r7, #23]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3718      	adds	r7, #24
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	000186a0 	.word	0x000186a0
 800c388:	05f5e100 	.word	0x05f5e100

0800c38c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b08c      	sub	sp, #48	; 0x30
 800c390:	af00      	add	r7, sp, #0
 800c392:	4603      	mov	r3, r0
 800c394:	603a      	str	r2, [r7, #0]
 800c396:	71fb      	strb	r3, [r7, #7]
 800c398:	460b      	mov	r3, r1
 800c39a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c3a2:	4b24      	ldr	r3, [pc, #144]	; (800c434 <SD_ioctl+0xa8>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	b2db      	uxtb	r3, r3
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <SD_ioctl+0x28>
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e03b      	b.n	800c42c <SD_ioctl+0xa0>
  
  switch (cmd)
 800c3b4:	79bb      	ldrb	r3, [r7, #6]
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d833      	bhi.n	800c422 <SD_ioctl+0x96>
 800c3ba:	a201      	add	r2, pc, #4	; (adr r2, 800c3c0 <SD_ioctl+0x34>)
 800c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c0:	0800c3d1 	.word	0x0800c3d1
 800c3c4:	0800c3d9 	.word	0x0800c3d9
 800c3c8:	0800c3f1 	.word	0x0800c3f1
 800c3cc:	0800c40b 	.word	0x0800c40b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3d6:	e027      	b.n	800c428 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3d8:	f107 030c 	add.w	r3, r7, #12
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fb fd67 	bl	8007eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c3ee:	e01b      	b.n	800c428 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c3f0:	f107 030c 	add.w	r3, r7, #12
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fb fd5b 	bl	8007eb0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c408:	e00e      	b.n	800c428 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c40a:	f107 030c 	add.w	r3, r7, #12
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fb fd4e 	bl	8007eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c420:	e002      	b.n	800c428 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 800c422:	2304      	movs	r3, #4
 800c424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 800c428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3730      	adds	r7, #48	; 0x30
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	2000011b 	.word	0x2000011b

0800c438 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c438:	b480      	push	{r7}
 800c43a:	b089      	sub	sp, #36	; 0x24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	4603      	mov	r3, r0
 800c440:	6039      	str	r1, [r7, #0]
 800c442:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (chr < 0x80) {	/* ASCII */
 800c444:	88fb      	ldrh	r3, [r7, #6]
 800c446:	2b7f      	cmp	r3, #127	; 0x7f
 800c448:	d802      	bhi.n	800c450 <ff_convert+0x18>
		c = chr;
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	837b      	strh	r3, [r7, #26]
 800c44e:	e047      	b.n	800c4e0 <ff_convert+0xa8>
	} else {
		if (dir) {		/* OEMCP to unicode */
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d005      	beq.n	800c462 <ff_convert+0x2a>
			p = oem2uni;
 800c456:	4b25      	ldr	r3, [pc, #148]	; (800c4ec <ff_convert+0xb4>)
 800c458:	61fb      	str	r3, [r7, #28]
			hi = sizeof oem2uni / 4 - 1;
 800c45a:	f244 2398 	movw	r3, #17048	; 0x4298
 800c45e:	60bb      	str	r3, [r7, #8]
 800c460:	e004      	b.n	800c46c <ff_convert+0x34>
		} else {		/* Unicode to OEMCP */
			p = uni2oem;
 800c462:	4b23      	ldr	r3, [pc, #140]	; (800c4f0 <ff_convert+0xb8>)
 800c464:	61fb      	str	r3, [r7, #28]
			hi = sizeof uni2oem / 4 - 1;
 800c466:	f244 2398 	movw	r3, #17048	; 0x4298
 800c46a:	60bb      	str	r3, [r7, #8]
		}
		li = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	60fb      	str	r3, [r7, #12]
		for (n = 16; n; n--) {
 800c470:	2310      	movs	r3, #16
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	e023      	b.n	800c4be <ff_convert+0x86>
			i = li + (hi - li) / 2;
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	1ad3      	subs	r3, r2, r3
 800c47c:	0fda      	lsrs	r2, r3, #31
 800c47e:	4413      	add	r3, r2
 800c480:	105b      	asrs	r3, r3, #1
 800c482:	461a      	mov	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4413      	add	r3, r2
 800c488:	617b      	str	r3, [r7, #20]
			if (chr == p[i * 2]) break;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	461a      	mov	r2, r3
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	4413      	add	r3, r2
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	88fa      	ldrh	r2, [r7, #6]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d014      	beq.n	800c4c6 <ff_convert+0x8e>
			if (chr > p[i * 2])
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	88fa      	ldrh	r2, [r7, #6]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d902      	bls.n	800c4b4 <ff_convert+0x7c>
				li = i;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	e001      	b.n	800c4b8 <ff_convert+0x80>
			else
				hi = i;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	60bb      	str	r3, [r7, #8]
		for (n = 16; n; n--) {
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	613b      	str	r3, [r7, #16]
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1d8      	bne.n	800c476 <ff_convert+0x3e>
 800c4c4:	e000      	b.n	800c4c8 <ff_convert+0x90>
			if (chr == p[i * 2]) break;
 800c4c6:	bf00      	nop
		}
		c = n ? p[i * 2 + 1] : 0;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d006      	beq.n	800c4dc <ff_convert+0xa4>
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	3302      	adds	r3, #2
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	e000      	b.n	800c4de <ff_convert+0xa6>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	837b      	strh	r3, [r7, #26]
	}

	return c;
 800c4e0:	8b7b      	ldrh	r3, [r7, #26]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3724      	adds	r7, #36	; 0x24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bc80      	pop	{r7}
 800c4ea:	4770      	bx	lr
 800c4ec:	0801e3e4 	.word	0x0801e3e4
 800c4f0:	0800d980 	.word	0x0800d980

0800c4f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	e002      	b.n	800c50a <ff_wtoupper+0x16>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3301      	adds	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
 800c50a:	4a0f      	ldr	r2, [pc, #60]	; (800c548 <ff_wtoupper+0x54>)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d006      	beq.n	800c524 <ff_wtoupper+0x30>
 800c516:	4a0c      	ldr	r2, [pc, #48]	; (800c548 <ff_wtoupper+0x54>)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c51e:	88fa      	ldrh	r2, [r7, #6]
 800c520:	429a      	cmp	r2, r3
 800c522:	d1ef      	bne.n	800c504 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c524:	4a08      	ldr	r2, [pc, #32]	; (800c548 <ff_wtoupper+0x54>)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d004      	beq.n	800c53a <ff_wtoupper+0x46>
 800c530:	4a06      	ldr	r2, [pc, #24]	; (800c54c <ff_wtoupper+0x58>)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c538:	e000      	b.n	800c53c <ff_wtoupper+0x48>
 800c53a:	88fb      	ldrh	r3, [r7, #6]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bc80      	pop	{r7}
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	0802ee48 	.word	0x0802ee48
 800c54c:	0802f028 	.word	0x0802f028

0800c550 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fd13 	bl	800cf84 <malloc>
 800c55e:	4603      	mov	r3, r0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fd0f 	bl	800cf94 <free>
}
 800c576:	bf00      	nop
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c584:	2200      	movs	r2, #0
 800c586:	4912      	ldr	r1, [pc, #72]	; (800c5d0 <MX_USB_DEVICE_Init+0x50>)
 800c588:	4812      	ldr	r0, [pc, #72]	; (800c5d4 <MX_USB_DEVICE_Init+0x54>)
 800c58a:	f7fb ff9b 	bl	80084c4 <USBD_Init>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c594:	f7f4 fa7c 	bl	8000a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c598:	490f      	ldr	r1, [pc, #60]	; (800c5d8 <MX_USB_DEVICE_Init+0x58>)
 800c59a:	480e      	ldr	r0, [pc, #56]	; (800c5d4 <MX_USB_DEVICE_Init+0x54>)
 800c59c:	f7fb ffbd 	bl	800851a <USBD_RegisterClass>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c5a6:	f7f4 fa73 	bl	8000a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c5aa:	490c      	ldr	r1, [pc, #48]	; (800c5dc <MX_USB_DEVICE_Init+0x5c>)
 800c5ac:	4809      	ldr	r0, [pc, #36]	; (800c5d4 <MX_USB_DEVICE_Init+0x54>)
 800c5ae:	f7fb ff1d 	bl	80083ec <USBD_CDC_RegisterInterface>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5b8:	f7f4 fa6a 	bl	8000a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5bc:	4805      	ldr	r0, [pc, #20]	; (800c5d4 <MX_USB_DEVICE_Init+0x54>)
 800c5be:	f7fb ffc5 	bl	800854c <USBD_Start>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5c8:	f7f4 fa62 	bl	8000a90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5cc:	bf00      	nop
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	2000012c 	.word	0x2000012c
 800c5d4:	2000086c 	.word	0x2000086c
 800c5d8:	20000018 	.word	0x20000018
 800c5dc:	2000011c 	.word	0x2000011c

0800c5e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	4905      	ldr	r1, [pc, #20]	; (800c5fc <CDC_Init_FS+0x1c>)
 800c5e8:	4805      	ldr	r0, [pc, #20]	; (800c600 <CDC_Init_FS+0x20>)
 800c5ea:	f7fb ff15 	bl	8008418 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5ee:	4905      	ldr	r1, [pc, #20]	; (800c604 <CDC_Init_FS+0x24>)
 800c5f0:	4803      	ldr	r0, [pc, #12]	; (800c600 <CDC_Init_FS+0x20>)
 800c5f2:	f7fb ff2a 	bl	800844a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	20001330 	.word	0x20001330
 800c600:	2000086c 	.word	0x2000086c
 800c604:	20000b30 	.word	0x20000b30

0800c608 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c608:	b480      	push	{r7}
 800c60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c60c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c60e:	4618      	mov	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	bc80      	pop	{r7}
 800c614:	4770      	bx	lr
	...

0800c618 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4603      	mov	r3, r0
 800c620:	6039      	str	r1, [r7, #0]
 800c622:	71fb      	strb	r3, [r7, #7]
 800c624:	4613      	mov	r3, r2
 800c626:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2b23      	cmp	r3, #35	; 0x23
 800c62c:	d84a      	bhi.n	800c6c4 <CDC_Control_FS+0xac>
 800c62e:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <CDC_Control_FS+0x1c>)
 800c630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c634:	0800c6c5 	.word	0x0800c6c5
 800c638:	0800c6c5 	.word	0x0800c6c5
 800c63c:	0800c6c5 	.word	0x0800c6c5
 800c640:	0800c6c5 	.word	0x0800c6c5
 800c644:	0800c6c5 	.word	0x0800c6c5
 800c648:	0800c6c5 	.word	0x0800c6c5
 800c64c:	0800c6c5 	.word	0x0800c6c5
 800c650:	0800c6c5 	.word	0x0800c6c5
 800c654:	0800c6c5 	.word	0x0800c6c5
 800c658:	0800c6c5 	.word	0x0800c6c5
 800c65c:	0800c6c5 	.word	0x0800c6c5
 800c660:	0800c6c5 	.word	0x0800c6c5
 800c664:	0800c6c5 	.word	0x0800c6c5
 800c668:	0800c6c5 	.word	0x0800c6c5
 800c66c:	0800c6c5 	.word	0x0800c6c5
 800c670:	0800c6c5 	.word	0x0800c6c5
 800c674:	0800c6c5 	.word	0x0800c6c5
 800c678:	0800c6c5 	.word	0x0800c6c5
 800c67c:	0800c6c5 	.word	0x0800c6c5
 800c680:	0800c6c5 	.word	0x0800c6c5
 800c684:	0800c6c5 	.word	0x0800c6c5
 800c688:	0800c6c5 	.word	0x0800c6c5
 800c68c:	0800c6c5 	.word	0x0800c6c5
 800c690:	0800c6c5 	.word	0x0800c6c5
 800c694:	0800c6c5 	.word	0x0800c6c5
 800c698:	0800c6c5 	.word	0x0800c6c5
 800c69c:	0800c6c5 	.word	0x0800c6c5
 800c6a0:	0800c6c5 	.word	0x0800c6c5
 800c6a4:	0800c6c5 	.word	0x0800c6c5
 800c6a8:	0800c6c5 	.word	0x0800c6c5
 800c6ac:	0800c6c5 	.word	0x0800c6c5
 800c6b0:	0800c6c5 	.word	0x0800c6c5
 800c6b4:	0800c6c5 	.word	0x0800c6c5
 800c6b8:	0800c6c5 	.word	0x0800c6c5
 800c6bc:	0800c6c5 	.word	0x0800c6c5
 800c6c0:	0800c6c5 	.word	0x0800c6c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6c4:	bf00      	nop
  }

  return (USBD_OK);
 800c6c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bc80      	pop	{r7}
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop

0800c6d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6de:	6879      	ldr	r1, [r7, #4]
 800c6e0:	4805      	ldr	r0, [pc, #20]	; (800c6f8 <CDC_Receive_FS+0x24>)
 800c6e2:	f7fb feb2 	bl	800844a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6e6:	4804      	ldr	r0, [pc, #16]	; (800c6f8 <CDC_Receive_FS+0x24>)
 800c6e8:	f7fb fec2 	bl	8008470 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	2000086c 	.word	0x2000086c

0800c6fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	6039      	str	r1, [r7, #0]
 800c706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	2212      	movs	r2, #18
 800c70c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c70e:	4b03      	ldr	r3, [pc, #12]	; (800c71c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	bc80      	pop	{r7}
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	20000148 	.word	0x20000148

0800c720 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	6039      	str	r1, [r7, #0]
 800c72a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2204      	movs	r2, #4
 800c730:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c732:	4b03      	ldr	r3, [pc, #12]	; (800c740 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c734:	4618      	mov	r0, r3
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	bc80      	pop	{r7}
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	2000015c 	.word	0x2000015c

0800c744 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d105      	bne.n	800c762 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	4907      	ldr	r1, [pc, #28]	; (800c778 <USBD_FS_ProductStrDescriptor+0x34>)
 800c75a:	4808      	ldr	r0, [pc, #32]	; (800c77c <USBD_FS_ProductStrDescriptor+0x38>)
 800c75c:	f7fc fe9b 	bl	8009496 <USBD_GetString>
 800c760:	e004      	b.n	800c76c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	4904      	ldr	r1, [pc, #16]	; (800c778 <USBD_FS_ProductStrDescriptor+0x34>)
 800c766:	4805      	ldr	r0, [pc, #20]	; (800c77c <USBD_FS_ProductStrDescriptor+0x38>)
 800c768:	f7fc fe95 	bl	8009496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c76c:	4b02      	ldr	r3, [pc, #8]	; (800c778 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	20001b30 	.word	0x20001b30
 800c77c:	0800d8f4 	.word	0x0800d8f4

0800c780 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	6039      	str	r1, [r7, #0]
 800c78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	4904      	ldr	r1, [pc, #16]	; (800c7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c790:	4804      	ldr	r0, [pc, #16]	; (800c7a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c792:	f7fc fe80 	bl	8009496 <USBD_GetString>
  return USBD_StrDesc;
 800c796:	4b02      	ldr	r3, [pc, #8]	; (800c7a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	20001b30 	.word	0x20001b30
 800c7a4:	0800d90c 	.word	0x0800d90c

0800c7a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	6039      	str	r1, [r7, #0]
 800c7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	221a      	movs	r2, #26
 800c7b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ba:	f000 f843 	bl	800c844 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c7be:	4b02      	ldr	r3, [pc, #8]	; (800c7c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20000160 	.word	0x20000160

0800c7cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	6039      	str	r1, [r7, #0]
 800c7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d105      	bne.n	800c7ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	4907      	ldr	r1, [pc, #28]	; (800c800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7e2:	4808      	ldr	r0, [pc, #32]	; (800c804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7e4:	f7fc fe57 	bl	8009496 <USBD_GetString>
 800c7e8:	e004      	b.n	800c7f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	4904      	ldr	r1, [pc, #16]	; (800c800 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c7ee:	4805      	ldr	r0, [pc, #20]	; (800c804 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c7f0:	f7fc fe51 	bl	8009496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7f4:	4b02      	ldr	r3, [pc, #8]	; (800c800 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop
 800c800:	20001b30 	.word	0x20001b30
 800c804:	0800d920 	.word	0x0800d920

0800c808 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	6039      	str	r1, [r7, #0]
 800c812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d105      	bne.n	800c826 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	4907      	ldr	r1, [pc, #28]	; (800c83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c81e:	4808      	ldr	r0, [pc, #32]	; (800c840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c820:	f7fc fe39 	bl	8009496 <USBD_GetString>
 800c824:	e004      	b.n	800c830 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	4904      	ldr	r1, [pc, #16]	; (800c83c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c82a:	4805      	ldr	r0, [pc, #20]	; (800c840 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c82c:	f7fc fe33 	bl	8009496 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c830:	4b02      	ldr	r3, [pc, #8]	; (800c83c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c832:	4618      	mov	r0, r3
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20001b30 	.word	0x20001b30
 800c840:	0800d92c 	.word	0x0800d92c

0800c844 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c84a:	4b0f      	ldr	r3, [pc, #60]	; (800c888 <Get_SerialNum+0x44>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c850:	4b0e      	ldr	r3, [pc, #56]	; (800c88c <Get_SerialNum+0x48>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c856:	4b0e      	ldr	r3, [pc, #56]	; (800c890 <Get_SerialNum+0x4c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	4413      	add	r3, r2
 800c862:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d009      	beq.n	800c87e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c86a:	2208      	movs	r2, #8
 800c86c:	4909      	ldr	r1, [pc, #36]	; (800c894 <Get_SerialNum+0x50>)
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 f814 	bl	800c89c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c874:	2204      	movs	r2, #4
 800c876:	4908      	ldr	r1, [pc, #32]	; (800c898 <Get_SerialNum+0x54>)
 800c878:	68b8      	ldr	r0, [r7, #8]
 800c87a:	f000 f80f 	bl	800c89c <IntToUnicode>
  }
}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	1fff7a10 	.word	0x1fff7a10
 800c88c:	1fff7a14 	.word	0x1fff7a14
 800c890:	1fff7a18 	.word	0x1fff7a18
 800c894:	20000162 	.word	0x20000162
 800c898:	20000172 	.word	0x20000172

0800c89c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	75fb      	strb	r3, [r7, #23]
 800c8b2:	e027      	b.n	800c904 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	0f1b      	lsrs	r3, r3, #28
 800c8b8:	2b09      	cmp	r3, #9
 800c8ba:	d80b      	bhi.n	800c8d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	0f1b      	lsrs	r3, r3, #28
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
 800c8c4:	005b      	lsls	r3, r3, #1
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	440b      	add	r3, r1
 800c8cc:	3230      	adds	r2, #48	; 0x30
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	e00a      	b.n	800c8ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	0f1b      	lsrs	r3, r3, #28
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4619      	mov	r1, r3
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	440b      	add	r3, r1
 800c8e4:	3237      	adds	r2, #55	; 0x37
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	011b      	lsls	r3, r3, #4
 800c8ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c8f0:	7dfb      	ldrb	r3, [r7, #23]
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c8fe:	7dfb      	ldrb	r3, [r7, #23]
 800c900:	3301      	adds	r3, #1
 800c902:	75fb      	strb	r3, [r7, #23]
 800c904:	7dfa      	ldrb	r2, [r7, #23]
 800c906:	79fb      	ldrb	r3, [r7, #7]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d3d3      	bcc.n	800c8b4 <IntToUnicode+0x18>
  }
}
 800c90c:	bf00      	nop
 800c90e:	371c      	adds	r7, #28
 800c910:	46bd      	mov	sp, r7
 800c912:	bc80      	pop	{r7}
 800c914:	4770      	bx	lr
	...

0800c918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08a      	sub	sp, #40	; 0x28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c920:	f107 0314 	add.w	r3, r7, #20
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]
 800c928:	605a      	str	r2, [r3, #4]
 800c92a:	609a      	str	r2, [r3, #8]
 800c92c:	60da      	str	r2, [r3, #12]
 800c92e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c938:	d147      	bne.n	800c9ca <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c93a:	2300      	movs	r3, #0
 800c93c:	613b      	str	r3, [r7, #16]
 800c93e:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c942:	4a24      	ldr	r2, [pc, #144]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c944:	f043 0301 	orr.w	r3, r3, #1
 800c948:	6313      	str	r3, [r2, #48]	; 0x30
 800c94a:	4b22      	ldr	r3, [pc, #136]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	613b      	str	r3, [r7, #16]
 800c954:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c956:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c95a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c95c:	2302      	movs	r3, #2
 800c95e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c960:	2300      	movs	r3, #0
 800c962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c964:	2303      	movs	r3, #3
 800c966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c968:	230a      	movs	r3, #10
 800c96a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c96c:	f107 0314 	add.w	r3, r7, #20
 800c970:	4619      	mov	r1, r3
 800c972:	4819      	ldr	r0, [pc, #100]	; (800c9d8 <HAL_PCD_MspInit+0xc0>)
 800c974:	f7f5 fcb6 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c97c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c97e:	2300      	movs	r3, #0
 800c980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c982:	2300      	movs	r3, #0
 800c984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c986:	f107 0314 	add.w	r3, r7, #20
 800c98a:	4619      	mov	r1, r3
 800c98c:	4812      	ldr	r0, [pc, #72]	; (800c9d8 <HAL_PCD_MspInit+0xc0>)
 800c98e:	f7f5 fca9 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c992:	4b10      	ldr	r3, [pc, #64]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c996:	4a0f      	ldr	r2, [pc, #60]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99c:	6353      	str	r3, [r2, #52]	; 0x34
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9a6:	4a0b      	ldr	r2, [pc, #44]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c9a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9ac:	6453      	str	r3, [r2, #68]	; 0x44
 800c9ae:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <HAL_PCD_MspInit+0xbc>)
 800c9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	2100      	movs	r1, #0
 800c9be:	2043      	movs	r0, #67	; 0x43
 800c9c0:	f7f4 fcf5 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c9c4:	2043      	movs	r0, #67	; 0x43
 800c9c6:	f7f4 fd0e 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c9ca:	bf00      	nop
 800c9cc:	3728      	adds	r7, #40	; 0x28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	40023800 	.word	0x40023800
 800c9d8:	40020000 	.word	0x40020000

0800c9dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	f7fb fdf2 	bl	80085dc <USBD_LL_SetupStage>
}
 800c9f8:	bf00      	nop
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ca12:	78fa      	ldrb	r2, [r7, #3]
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	1a9b      	subs	r3, r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	440b      	add	r3, r1
 800ca20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	78fb      	ldrb	r3, [r7, #3]
 800ca28:	4619      	mov	r1, r3
 800ca2a:	f7fb fe22 	bl	8008672 <USBD_LL_DataOutStage>
}
 800ca2e:	bf00      	nop
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b082      	sub	sp, #8
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	460b      	mov	r3, r1
 800ca40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800ca48:	78fa      	ldrb	r2, [r7, #3]
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	1a9b      	subs	r3, r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	440b      	add	r3, r1
 800ca56:	3348      	adds	r3, #72	; 0x48
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	78fb      	ldrb	r3, [r7, #3]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	f7fb fe79 	bl	8008754 <USBD_LL_DataInStage>
}
 800ca62:	bf00      	nop
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fb ff89 	bl	8008990 <USBD_LL_SOF>
}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73fb      	strb	r3, [r7, #15]
 800ca9e:	e008      	b.n	800cab2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d102      	bne.n	800caae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800caa8:	2301      	movs	r3, #1
 800caaa:	73fb      	strb	r3, [r7, #15]
 800caac:	e001      	b.n	800cab2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800caae:	f7f3 ffef 	bl	8000a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cab8:	7bfa      	ldrb	r2, [r7, #15]
 800caba:	4611      	mov	r1, r2
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fb ff2f 	bl	8008920 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fb fee8 	bl	800889e <USBD_LL_Reset>
}
 800cace:	bf00      	nop
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
	...

0800cad8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fb ff29 	bl	800893e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	6812      	ldr	r2, [r2, #0]
 800cafa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cafe:	f043 0301 	orr.w	r3, r3, #1
 800cb02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d005      	beq.n	800cb18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <HAL_PCD_SuspendCallback+0x48>)
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	4a03      	ldr	r2, [pc, #12]	; (800cb20 <HAL_PCD_SuspendCallback+0x48>)
 800cb12:	f043 0306 	orr.w	r3, r3, #6
 800cb16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb18:	bf00      	nop
 800cb1a:	3708      	adds	r7, #8
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	e000ed00 	.word	0xe000ed00

0800cb24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fb ff17 	bl	8008966 <USBD_LL_Resume>
}
 800cb38:	bf00      	nop
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cb52:	78fa      	ldrb	r2, [r7, #3]
 800cb54:	4611      	mov	r1, r2
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fb ff40 	bl	80089dc <USBD_LL_IsoOUTIncomplete>
}
 800cb5c:	bf00      	nop
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cb76:	78fa      	ldrb	r2, [r7, #3]
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fb ff22 	bl	80089c4 <USBD_LL_IsoINIncomplete>
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fb ff2c 	bl	80089f4 <USBD_LL_DevConnected>
}
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fb ff28 	bl	8008a08 <USBD_LL_DevDisconnected>
}
 800cbb8:	bf00      	nop
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d139      	bne.n	800cc44 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cbd0:	4a1f      	ldr	r2, [pc, #124]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a1d      	ldr	r2, [pc, #116]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbdc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cbe0:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbe2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cbe6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cbe8:	4b19      	ldr	r3, [pc, #100]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbea:	2204      	movs	r2, #4
 800cbec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cbee:	4b18      	ldr	r3, [pc, #96]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cbf4:	4b16      	ldr	r3, [pc, #88]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cbfa:	4b15      	ldr	r3, [pc, #84]	; (800cc50 <USBD_LL_Init+0x90>)
 800cbfc:	2202      	movs	r2, #2
 800cbfe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc00:	4b13      	ldr	r3, [pc, #76]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cc06:	4b12      	ldr	r3, [pc, #72]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cc0c:	4b10      	ldr	r3, [pc, #64]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc0e:	2201      	movs	r2, #1
 800cc10:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cc12:	4b0f      	ldr	r3, [pc, #60]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cc18:	480d      	ldr	r0, [pc, #52]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc1a:	f7f5 fd61 	bl	80026e0 <HAL_PCD_Init>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800cc24:	f7f3 ff34 	bl	8000a90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cc28:	2180      	movs	r1, #128	; 0x80
 800cc2a:	4809      	ldr	r0, [pc, #36]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc2c:	f7f6 fe9e 	bl	800396c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cc30:	2240      	movs	r2, #64	; 0x40
 800cc32:	2100      	movs	r1, #0
 800cc34:	4806      	ldr	r0, [pc, #24]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc36:	f7f6 fe53 	bl	80038e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cc3a:	2280      	movs	r2, #128	; 0x80
 800cc3c:	2101      	movs	r1, #1
 800cc3e:	4804      	ldr	r0, [pc, #16]	; (800cc50 <USBD_LL_Init+0x90>)
 800cc40:	f7f6 fe4e 	bl	80038e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20001d30 	.word	0x20001d30

0800cc54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f5 fe55 	bl	800291a <HAL_PCD_Start>
 800cc70:	4603      	mov	r3, r0
 800cc72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 f92e 	bl	800ced8 <USBD_Get_USB_Status>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b084      	sub	sp, #16
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	4608      	mov	r0, r1
 800cc94:	4611      	mov	r1, r2
 800cc96:	461a      	mov	r2, r3
 800cc98:	4603      	mov	r3, r0
 800cc9a:	70fb      	strb	r3, [r7, #3]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70bb      	strb	r3, [r7, #2]
 800cca0:	4613      	mov	r3, r2
 800cca2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccb2:	78bb      	ldrb	r3, [r7, #2]
 800ccb4:	883a      	ldrh	r2, [r7, #0]
 800ccb6:	78f9      	ldrb	r1, [r7, #3]
 800ccb8:	f7f6 fa1a 	bl	80030f0 <HAL_PCD_EP_Open>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 f908 	bl	800ced8 <USBD_Get_USB_Status>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b084      	sub	sp, #16
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccf0:	78fa      	ldrb	r2, [r7, #3]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f6 fa63 	bl	80031c0 <HAL_PCD_EP_Close>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f8e9 	bl	800ced8 <USBD_Get_USB_Status>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd2e:	78fa      	ldrb	r2, [r7, #3]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7f6 fb3a 	bl	80033ac <HAL_PCD_EP_SetStall>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f000 f8ca 	bl	800ced8 <USBD_Get_USB_Status>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b084      	sub	sp, #16
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	460b      	mov	r3, r1
 800cd5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd6c:	78fa      	ldrb	r2, [r7, #3]
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f6 fb7f 	bl	8003474 <HAL_PCD_EP_ClrStall>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f000 f8ab 	bl	800ced8 <USBD_Get_USB_Status>
 800cd82:	4603      	mov	r3, r0
 800cd84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd86:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	460b      	mov	r3, r1
 800cd9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cda2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cda4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da0b      	bge.n	800cdc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdb2:	68f9      	ldr	r1, [r7, #12]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	1a9b      	subs	r3, r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	440b      	add	r3, r1
 800cdbe:	333e      	adds	r3, #62	; 0x3e
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	e00b      	b.n	800cddc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cdc4:	78fb      	ldrb	r3, [r7, #3]
 800cdc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdca:	68f9      	ldr	r1, [r7, #12]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	1a9b      	subs	r3, r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	440b      	add	r3, r1
 800cdd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bc80      	pop	{r7}
 800cde4:	4770      	bx	lr

0800cde6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce00:	78fa      	ldrb	r2, [r7, #3]
 800ce02:	4611      	mov	r1, r2
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f6 f94e 	bl	80030a6 <HAL_PCD_SetAddress>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f861 	bl	800ced8 <USBD_Get_USB_Status>
 800ce16:	4603      	mov	r3, r0
 800ce18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b086      	sub	sp, #24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	607a      	str	r2, [r7, #4]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	460b      	mov	r3, r1
 800ce32:	72fb      	strb	r3, [r7, #11]
 800ce34:	4613      	mov	r3, r2
 800ce36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce46:	893b      	ldrh	r3, [r7, #8]
 800ce48:	7af9      	ldrb	r1, [r7, #11]
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	f7f6 fa64 	bl	8003318 <HAL_PCD_EP_Transmit>
 800ce50:	4603      	mov	r3, r0
 800ce52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce54:	7dfb      	ldrb	r3, [r7, #23]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 f83e 	bl	800ced8 <USBD_Get_USB_Status>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce60:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b086      	sub	sp, #24
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	461a      	mov	r2, r3
 800ce76:	460b      	mov	r3, r1
 800ce78:	72fb      	strb	r3, [r7, #11]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce8c:	893b      	ldrh	r3, [r7, #8]
 800ce8e:	7af9      	ldrb	r1, [r7, #11]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	f7f6 f9df 	bl	8003254 <HAL_PCD_EP_Receive>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 f81b 	bl	800ced8 <USBD_Get_USB_Status>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cea6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cec2:	78fa      	ldrb	r2, [r7, #3]
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7f6 fa0f 	bl	80032ea <HAL_PCD_EP_GetRxCount>
 800cecc:	4603      	mov	r3, r0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d817      	bhi.n	800cf1c <USBD_Get_USB_Status+0x44>
 800ceec:	a201      	add	r2, pc, #4	; (adr r2, 800cef4 <USBD_Get_USB_Status+0x1c>)
 800ceee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef2:	bf00      	nop
 800cef4:	0800cf05 	.word	0x0800cf05
 800cef8:	0800cf0b 	.word	0x0800cf0b
 800cefc:	0800cf11 	.word	0x0800cf11
 800cf00:	0800cf17 	.word	0x0800cf17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73fb      	strb	r3, [r7, #15]
    break;
 800cf08:	e00b      	b.n	800cf22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0e:	e008      	b.n	800cf22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf10:	2301      	movs	r3, #1
 800cf12:	73fb      	strb	r3, [r7, #15]
    break;
 800cf14:	e005      	b.n	800cf22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf16:	2302      	movs	r3, #2
 800cf18:	73fb      	strb	r3, [r7, #15]
    break;
 800cf1a:	e002      	b.n	800cf22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf20:	bf00      	nop
  }
  return usb_status;
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3714      	adds	r7, #20
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bc80      	pop	{r7}
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop

0800cf30 <__errno>:
 800cf30:	4b01      	ldr	r3, [pc, #4]	; (800cf38 <__errno+0x8>)
 800cf32:	6818      	ldr	r0, [r3, #0]
 800cf34:	4770      	bx	lr
 800cf36:	bf00      	nop
 800cf38:	2000017c 	.word	0x2000017c

0800cf3c <__libc_init_array>:
 800cf3c:	b570      	push	{r4, r5, r6, lr}
 800cf3e:	2500      	movs	r5, #0
 800cf40:	4e0c      	ldr	r6, [pc, #48]	; (800cf74 <__libc_init_array+0x38>)
 800cf42:	4c0d      	ldr	r4, [pc, #52]	; (800cf78 <__libc_init_array+0x3c>)
 800cf44:	1ba4      	subs	r4, r4, r6
 800cf46:	10a4      	asrs	r4, r4, #2
 800cf48:	42a5      	cmp	r5, r4
 800cf4a:	d109      	bne.n	800cf60 <__libc_init_array+0x24>
 800cf4c:	f000 fc46 	bl	800d7dc <_init>
 800cf50:	2500      	movs	r5, #0
 800cf52:	4e0a      	ldr	r6, [pc, #40]	; (800cf7c <__libc_init_array+0x40>)
 800cf54:	4c0a      	ldr	r4, [pc, #40]	; (800cf80 <__libc_init_array+0x44>)
 800cf56:	1ba4      	subs	r4, r4, r6
 800cf58:	10a4      	asrs	r4, r4, #2
 800cf5a:	42a5      	cmp	r5, r4
 800cf5c:	d105      	bne.n	800cf6a <__libc_init_array+0x2e>
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf64:	4798      	blx	r3
 800cf66:	3501      	adds	r5, #1
 800cf68:	e7ee      	b.n	800cf48 <__libc_init_array+0xc>
 800cf6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cf6e:	4798      	blx	r3
 800cf70:	3501      	adds	r5, #1
 800cf72:	e7f2      	b.n	800cf5a <__libc_init_array+0x1e>
 800cf74:	0802f244 	.word	0x0802f244
 800cf78:	0802f244 	.word	0x0802f244
 800cf7c:	0802f244 	.word	0x0802f244
 800cf80:	0802f248 	.word	0x0802f248

0800cf84 <malloc>:
 800cf84:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <malloc+0xc>)
 800cf86:	4601      	mov	r1, r0
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	f000 b86b 	b.w	800d064 <_malloc_r>
 800cf8e:	bf00      	nop
 800cf90:	2000017c 	.word	0x2000017c

0800cf94 <free>:
 800cf94:	4b02      	ldr	r3, [pc, #8]	; (800cfa0 <free+0xc>)
 800cf96:	4601      	mov	r1, r0
 800cf98:	6818      	ldr	r0, [r3, #0]
 800cf9a:	f000 b817 	b.w	800cfcc <_free_r>
 800cf9e:	bf00      	nop
 800cfa0:	2000017c 	.word	0x2000017c

0800cfa4 <memcpy>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	1e43      	subs	r3, r0, #1
 800cfa8:	440a      	add	r2, r1
 800cfaa:	4291      	cmp	r1, r2
 800cfac:	d100      	bne.n	800cfb0 <memcpy+0xc>
 800cfae:	bd10      	pop	{r4, pc}
 800cfb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfb8:	e7f7      	b.n	800cfaa <memcpy+0x6>

0800cfba <memset>:
 800cfba:	4603      	mov	r3, r0
 800cfbc:	4402      	add	r2, r0
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d100      	bne.n	800cfc4 <memset+0xa>
 800cfc2:	4770      	bx	lr
 800cfc4:	f803 1b01 	strb.w	r1, [r3], #1
 800cfc8:	e7f9      	b.n	800cfbe <memset+0x4>
	...

0800cfcc <_free_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4605      	mov	r5, r0
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	d043      	beq.n	800d05c <_free_r+0x90>
 800cfd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd8:	1f0c      	subs	r4, r1, #4
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	bfb8      	it	lt
 800cfde:	18e4      	addlt	r4, r4, r3
 800cfe0:	f000 f8ca 	bl	800d178 <__malloc_lock>
 800cfe4:	4a1e      	ldr	r2, [pc, #120]	; (800d060 <_free_r+0x94>)
 800cfe6:	6813      	ldr	r3, [r2, #0]
 800cfe8:	4610      	mov	r0, r2
 800cfea:	b933      	cbnz	r3, 800cffa <_free_r+0x2e>
 800cfec:	6063      	str	r3, [r4, #4]
 800cfee:	6014      	str	r4, [r2, #0]
 800cff0:	4628      	mov	r0, r5
 800cff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cff6:	f000 b8c0 	b.w	800d17a <__malloc_unlock>
 800cffa:	42a3      	cmp	r3, r4
 800cffc:	d90b      	bls.n	800d016 <_free_r+0x4a>
 800cffe:	6821      	ldr	r1, [r4, #0]
 800d000:	1862      	adds	r2, r4, r1
 800d002:	4293      	cmp	r3, r2
 800d004:	bf01      	itttt	eq
 800d006:	681a      	ldreq	r2, [r3, #0]
 800d008:	685b      	ldreq	r3, [r3, #4]
 800d00a:	1852      	addeq	r2, r2, r1
 800d00c:	6022      	streq	r2, [r4, #0]
 800d00e:	6063      	str	r3, [r4, #4]
 800d010:	6004      	str	r4, [r0, #0]
 800d012:	e7ed      	b.n	800cff0 <_free_r+0x24>
 800d014:	4613      	mov	r3, r2
 800d016:	685a      	ldr	r2, [r3, #4]
 800d018:	b10a      	cbz	r2, 800d01e <_free_r+0x52>
 800d01a:	42a2      	cmp	r2, r4
 800d01c:	d9fa      	bls.n	800d014 <_free_r+0x48>
 800d01e:	6819      	ldr	r1, [r3, #0]
 800d020:	1858      	adds	r0, r3, r1
 800d022:	42a0      	cmp	r0, r4
 800d024:	d10b      	bne.n	800d03e <_free_r+0x72>
 800d026:	6820      	ldr	r0, [r4, #0]
 800d028:	4401      	add	r1, r0
 800d02a:	1858      	adds	r0, r3, r1
 800d02c:	4282      	cmp	r2, r0
 800d02e:	6019      	str	r1, [r3, #0]
 800d030:	d1de      	bne.n	800cff0 <_free_r+0x24>
 800d032:	6810      	ldr	r0, [r2, #0]
 800d034:	6852      	ldr	r2, [r2, #4]
 800d036:	4401      	add	r1, r0
 800d038:	6019      	str	r1, [r3, #0]
 800d03a:	605a      	str	r2, [r3, #4]
 800d03c:	e7d8      	b.n	800cff0 <_free_r+0x24>
 800d03e:	d902      	bls.n	800d046 <_free_r+0x7a>
 800d040:	230c      	movs	r3, #12
 800d042:	602b      	str	r3, [r5, #0]
 800d044:	e7d4      	b.n	800cff0 <_free_r+0x24>
 800d046:	6820      	ldr	r0, [r4, #0]
 800d048:	1821      	adds	r1, r4, r0
 800d04a:	428a      	cmp	r2, r1
 800d04c:	bf01      	itttt	eq
 800d04e:	6811      	ldreq	r1, [r2, #0]
 800d050:	6852      	ldreq	r2, [r2, #4]
 800d052:	1809      	addeq	r1, r1, r0
 800d054:	6021      	streq	r1, [r4, #0]
 800d056:	6062      	str	r2, [r4, #4]
 800d058:	605c      	str	r4, [r3, #4]
 800d05a:	e7c9      	b.n	800cff0 <_free_r+0x24>
 800d05c:	bd38      	pop	{r3, r4, r5, pc}
 800d05e:	bf00      	nop
 800d060:	20000230 	.word	0x20000230

0800d064 <_malloc_r>:
 800d064:	b570      	push	{r4, r5, r6, lr}
 800d066:	1ccd      	adds	r5, r1, #3
 800d068:	f025 0503 	bic.w	r5, r5, #3
 800d06c:	3508      	adds	r5, #8
 800d06e:	2d0c      	cmp	r5, #12
 800d070:	bf38      	it	cc
 800d072:	250c      	movcc	r5, #12
 800d074:	2d00      	cmp	r5, #0
 800d076:	4606      	mov	r6, r0
 800d078:	db01      	blt.n	800d07e <_malloc_r+0x1a>
 800d07a:	42a9      	cmp	r1, r5
 800d07c:	d903      	bls.n	800d086 <_malloc_r+0x22>
 800d07e:	230c      	movs	r3, #12
 800d080:	6033      	str	r3, [r6, #0]
 800d082:	2000      	movs	r0, #0
 800d084:	bd70      	pop	{r4, r5, r6, pc}
 800d086:	f000 f877 	bl	800d178 <__malloc_lock>
 800d08a:	4a21      	ldr	r2, [pc, #132]	; (800d110 <_malloc_r+0xac>)
 800d08c:	6814      	ldr	r4, [r2, #0]
 800d08e:	4621      	mov	r1, r4
 800d090:	b991      	cbnz	r1, 800d0b8 <_malloc_r+0x54>
 800d092:	4c20      	ldr	r4, [pc, #128]	; (800d114 <_malloc_r+0xb0>)
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	b91b      	cbnz	r3, 800d0a0 <_malloc_r+0x3c>
 800d098:	4630      	mov	r0, r6
 800d09a:	f000 f83d 	bl	800d118 <_sbrk_r>
 800d09e:	6020      	str	r0, [r4, #0]
 800d0a0:	4629      	mov	r1, r5
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f000 f838 	bl	800d118 <_sbrk_r>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d124      	bne.n	800d0f6 <_malloc_r+0x92>
 800d0ac:	230c      	movs	r3, #12
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	6033      	str	r3, [r6, #0]
 800d0b2:	f000 f862 	bl	800d17a <__malloc_unlock>
 800d0b6:	e7e4      	b.n	800d082 <_malloc_r+0x1e>
 800d0b8:	680b      	ldr	r3, [r1, #0]
 800d0ba:	1b5b      	subs	r3, r3, r5
 800d0bc:	d418      	bmi.n	800d0f0 <_malloc_r+0x8c>
 800d0be:	2b0b      	cmp	r3, #11
 800d0c0:	d90f      	bls.n	800d0e2 <_malloc_r+0x7e>
 800d0c2:	600b      	str	r3, [r1, #0]
 800d0c4:	18cc      	adds	r4, r1, r3
 800d0c6:	50cd      	str	r5, [r1, r3]
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f000 f856 	bl	800d17a <__malloc_unlock>
 800d0ce:	f104 000b 	add.w	r0, r4, #11
 800d0d2:	1d23      	adds	r3, r4, #4
 800d0d4:	f020 0007 	bic.w	r0, r0, #7
 800d0d8:	1ac3      	subs	r3, r0, r3
 800d0da:	d0d3      	beq.n	800d084 <_malloc_r+0x20>
 800d0dc:	425a      	negs	r2, r3
 800d0de:	50e2      	str	r2, [r4, r3]
 800d0e0:	e7d0      	b.n	800d084 <_malloc_r+0x20>
 800d0e2:	684b      	ldr	r3, [r1, #4]
 800d0e4:	428c      	cmp	r4, r1
 800d0e6:	bf16      	itet	ne
 800d0e8:	6063      	strne	r3, [r4, #4]
 800d0ea:	6013      	streq	r3, [r2, #0]
 800d0ec:	460c      	movne	r4, r1
 800d0ee:	e7eb      	b.n	800d0c8 <_malloc_r+0x64>
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	6849      	ldr	r1, [r1, #4]
 800d0f4:	e7cc      	b.n	800d090 <_malloc_r+0x2c>
 800d0f6:	1cc4      	adds	r4, r0, #3
 800d0f8:	f024 0403 	bic.w	r4, r4, #3
 800d0fc:	42a0      	cmp	r0, r4
 800d0fe:	d005      	beq.n	800d10c <_malloc_r+0xa8>
 800d100:	1a21      	subs	r1, r4, r0
 800d102:	4630      	mov	r0, r6
 800d104:	f000 f808 	bl	800d118 <_sbrk_r>
 800d108:	3001      	adds	r0, #1
 800d10a:	d0cf      	beq.n	800d0ac <_malloc_r+0x48>
 800d10c:	6025      	str	r5, [r4, #0]
 800d10e:	e7db      	b.n	800d0c8 <_malloc_r+0x64>
 800d110:	20000230 	.word	0x20000230
 800d114:	20000234 	.word	0x20000234

0800d118 <_sbrk_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	2300      	movs	r3, #0
 800d11c:	4c05      	ldr	r4, [pc, #20]	; (800d134 <_sbrk_r+0x1c>)
 800d11e:	4605      	mov	r5, r0
 800d120:	4608      	mov	r0, r1
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	f7f3 ff4e 	bl	8000fc4 <_sbrk>
 800d128:	1c43      	adds	r3, r0, #1
 800d12a:	d102      	bne.n	800d132 <_sbrk_r+0x1a>
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	b103      	cbz	r3, 800d132 <_sbrk_r+0x1a>
 800d130:	602b      	str	r3, [r5, #0]
 800d132:	bd38      	pop	{r3, r4, r5, pc}
 800d134:	20002130 	.word	0x20002130

0800d138 <siprintf>:
 800d138:	b40e      	push	{r1, r2, r3}
 800d13a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d13e:	b500      	push	{lr}
 800d140:	b09c      	sub	sp, #112	; 0x70
 800d142:	ab1d      	add	r3, sp, #116	; 0x74
 800d144:	9002      	str	r0, [sp, #8]
 800d146:	9006      	str	r0, [sp, #24]
 800d148:	9107      	str	r1, [sp, #28]
 800d14a:	9104      	str	r1, [sp, #16]
 800d14c:	4808      	ldr	r0, [pc, #32]	; (800d170 <siprintf+0x38>)
 800d14e:	4909      	ldr	r1, [pc, #36]	; (800d174 <siprintf+0x3c>)
 800d150:	f853 2b04 	ldr.w	r2, [r3], #4
 800d154:	9105      	str	r1, [sp, #20]
 800d156:	6800      	ldr	r0, [r0, #0]
 800d158:	a902      	add	r1, sp, #8
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	f000 f868 	bl	800d230 <_svfiprintf_r>
 800d160:	2200      	movs	r2, #0
 800d162:	9b02      	ldr	r3, [sp, #8]
 800d164:	701a      	strb	r2, [r3, #0]
 800d166:	b01c      	add	sp, #112	; 0x70
 800d168:	f85d eb04 	ldr.w	lr, [sp], #4
 800d16c:	b003      	add	sp, #12
 800d16e:	4770      	bx	lr
 800d170:	2000017c 	.word	0x2000017c
 800d174:	ffff0208 	.word	0xffff0208

0800d178 <__malloc_lock>:
 800d178:	4770      	bx	lr

0800d17a <__malloc_unlock>:
 800d17a:	4770      	bx	lr

0800d17c <__ssputs_r>:
 800d17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d180:	688e      	ldr	r6, [r1, #8]
 800d182:	4682      	mov	sl, r0
 800d184:	429e      	cmp	r6, r3
 800d186:	460c      	mov	r4, r1
 800d188:	4690      	mov	r8, r2
 800d18a:	4699      	mov	r9, r3
 800d18c:	d837      	bhi.n	800d1fe <__ssputs_r+0x82>
 800d18e:	898a      	ldrh	r2, [r1, #12]
 800d190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d194:	d031      	beq.n	800d1fa <__ssputs_r+0x7e>
 800d196:	2302      	movs	r3, #2
 800d198:	6825      	ldr	r5, [r4, #0]
 800d19a:	6909      	ldr	r1, [r1, #16]
 800d19c:	1a6f      	subs	r7, r5, r1
 800d19e:	6965      	ldr	r5, [r4, #20]
 800d1a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1a4:	fb95 f5f3 	sdiv	r5, r5, r3
 800d1a8:	f109 0301 	add.w	r3, r9, #1
 800d1ac:	443b      	add	r3, r7
 800d1ae:	429d      	cmp	r5, r3
 800d1b0:	bf38      	it	cc
 800d1b2:	461d      	movcc	r5, r3
 800d1b4:	0553      	lsls	r3, r2, #21
 800d1b6:	d530      	bpl.n	800d21a <__ssputs_r+0x9e>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7ff ff53 	bl	800d064 <_malloc_r>
 800d1be:	4606      	mov	r6, r0
 800d1c0:	b950      	cbnz	r0, 800d1d8 <__ssputs_r+0x5c>
 800d1c2:	230c      	movs	r3, #12
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c8:	f8ca 3000 	str.w	r3, [sl]
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d8:	463a      	mov	r2, r7
 800d1da:	6921      	ldr	r1, [r4, #16]
 800d1dc:	f7ff fee2 	bl	800cfa4 <memcpy>
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	6126      	str	r6, [r4, #16]
 800d1ee:	443e      	add	r6, r7
 800d1f0:	6026      	str	r6, [r4, #0]
 800d1f2:	464e      	mov	r6, r9
 800d1f4:	6165      	str	r5, [r4, #20]
 800d1f6:	1bed      	subs	r5, r5, r7
 800d1f8:	60a5      	str	r5, [r4, #8]
 800d1fa:	454e      	cmp	r6, r9
 800d1fc:	d900      	bls.n	800d200 <__ssputs_r+0x84>
 800d1fe:	464e      	mov	r6, r9
 800d200:	4632      	mov	r2, r6
 800d202:	4641      	mov	r1, r8
 800d204:	6820      	ldr	r0, [r4, #0]
 800d206:	f000 faa1 	bl	800d74c <memmove>
 800d20a:	68a3      	ldr	r3, [r4, #8]
 800d20c:	2000      	movs	r0, #0
 800d20e:	1b9b      	subs	r3, r3, r6
 800d210:	60a3      	str	r3, [r4, #8]
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	441e      	add	r6, r3
 800d216:	6026      	str	r6, [r4, #0]
 800d218:	e7dc      	b.n	800d1d4 <__ssputs_r+0x58>
 800d21a:	462a      	mov	r2, r5
 800d21c:	f000 faaf 	bl	800d77e <_realloc_r>
 800d220:	4606      	mov	r6, r0
 800d222:	2800      	cmp	r0, #0
 800d224:	d1e2      	bne.n	800d1ec <__ssputs_r+0x70>
 800d226:	6921      	ldr	r1, [r4, #16]
 800d228:	4650      	mov	r0, sl
 800d22a:	f7ff fecf 	bl	800cfcc <_free_r>
 800d22e:	e7c8      	b.n	800d1c2 <__ssputs_r+0x46>

0800d230 <_svfiprintf_r>:
 800d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	461d      	mov	r5, r3
 800d236:	898b      	ldrh	r3, [r1, #12]
 800d238:	b09d      	sub	sp, #116	; 0x74
 800d23a:	061f      	lsls	r7, r3, #24
 800d23c:	4680      	mov	r8, r0
 800d23e:	460c      	mov	r4, r1
 800d240:	4616      	mov	r6, r2
 800d242:	d50f      	bpl.n	800d264 <_svfiprintf_r+0x34>
 800d244:	690b      	ldr	r3, [r1, #16]
 800d246:	b96b      	cbnz	r3, 800d264 <_svfiprintf_r+0x34>
 800d248:	2140      	movs	r1, #64	; 0x40
 800d24a:	f7ff ff0b 	bl	800d064 <_malloc_r>
 800d24e:	6020      	str	r0, [r4, #0]
 800d250:	6120      	str	r0, [r4, #16]
 800d252:	b928      	cbnz	r0, 800d260 <_svfiprintf_r+0x30>
 800d254:	230c      	movs	r3, #12
 800d256:	f8c8 3000 	str.w	r3, [r8]
 800d25a:	f04f 30ff 	mov.w	r0, #4294967295
 800d25e:	e0c8      	b.n	800d3f2 <_svfiprintf_r+0x1c2>
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	6163      	str	r3, [r4, #20]
 800d264:	2300      	movs	r3, #0
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	2320      	movs	r3, #32
 800d26a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d26e:	2330      	movs	r3, #48	; 0x30
 800d270:	f04f 0b01 	mov.w	fp, #1
 800d274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d278:	9503      	str	r5, [sp, #12]
 800d27a:	4637      	mov	r7, r6
 800d27c:	463d      	mov	r5, r7
 800d27e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d282:	b10b      	cbz	r3, 800d288 <_svfiprintf_r+0x58>
 800d284:	2b25      	cmp	r3, #37	; 0x25
 800d286:	d13e      	bne.n	800d306 <_svfiprintf_r+0xd6>
 800d288:	ebb7 0a06 	subs.w	sl, r7, r6
 800d28c:	d00b      	beq.n	800d2a6 <_svfiprintf_r+0x76>
 800d28e:	4653      	mov	r3, sl
 800d290:	4632      	mov	r2, r6
 800d292:	4621      	mov	r1, r4
 800d294:	4640      	mov	r0, r8
 800d296:	f7ff ff71 	bl	800d17c <__ssputs_r>
 800d29a:	3001      	adds	r0, #1
 800d29c:	f000 80a4 	beq.w	800d3e8 <_svfiprintf_r+0x1b8>
 800d2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2a2:	4453      	add	r3, sl
 800d2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a6:	783b      	ldrb	r3, [r7, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 809d 	beq.w	800d3e8 <_svfiprintf_r+0x1b8>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	9307      	str	r3, [sp, #28]
 800d2bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2c0:	931a      	str	r3, [sp, #104]	; 0x68
 800d2c2:	462f      	mov	r7, r5
 800d2c4:	2205      	movs	r2, #5
 800d2c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d2ca:	4850      	ldr	r0, [pc, #320]	; (800d40c <_svfiprintf_r+0x1dc>)
 800d2cc:	f000 fa30 	bl	800d730 <memchr>
 800d2d0:	9b04      	ldr	r3, [sp, #16]
 800d2d2:	b9d0      	cbnz	r0, 800d30a <_svfiprintf_r+0xda>
 800d2d4:	06d9      	lsls	r1, r3, #27
 800d2d6:	bf44      	itt	mi
 800d2d8:	2220      	movmi	r2, #32
 800d2da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d2de:	071a      	lsls	r2, r3, #28
 800d2e0:	bf44      	itt	mi
 800d2e2:	222b      	movmi	r2, #43	; 0x2b
 800d2e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d2e8:	782a      	ldrb	r2, [r5, #0]
 800d2ea:	2a2a      	cmp	r2, #42	; 0x2a
 800d2ec:	d015      	beq.n	800d31a <_svfiprintf_r+0xea>
 800d2ee:	462f      	mov	r7, r5
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	250a      	movs	r5, #10
 800d2f4:	9a07      	ldr	r2, [sp, #28]
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2fc:	3b30      	subs	r3, #48	; 0x30
 800d2fe:	2b09      	cmp	r3, #9
 800d300:	d94d      	bls.n	800d39e <_svfiprintf_r+0x16e>
 800d302:	b1b8      	cbz	r0, 800d334 <_svfiprintf_r+0x104>
 800d304:	e00f      	b.n	800d326 <_svfiprintf_r+0xf6>
 800d306:	462f      	mov	r7, r5
 800d308:	e7b8      	b.n	800d27c <_svfiprintf_r+0x4c>
 800d30a:	4a40      	ldr	r2, [pc, #256]	; (800d40c <_svfiprintf_r+0x1dc>)
 800d30c:	463d      	mov	r5, r7
 800d30e:	1a80      	subs	r0, r0, r2
 800d310:	fa0b f000 	lsl.w	r0, fp, r0
 800d314:	4318      	orrs	r0, r3
 800d316:	9004      	str	r0, [sp, #16]
 800d318:	e7d3      	b.n	800d2c2 <_svfiprintf_r+0x92>
 800d31a:	9a03      	ldr	r2, [sp, #12]
 800d31c:	1d11      	adds	r1, r2, #4
 800d31e:	6812      	ldr	r2, [r2, #0]
 800d320:	9103      	str	r1, [sp, #12]
 800d322:	2a00      	cmp	r2, #0
 800d324:	db01      	blt.n	800d32a <_svfiprintf_r+0xfa>
 800d326:	9207      	str	r2, [sp, #28]
 800d328:	e004      	b.n	800d334 <_svfiprintf_r+0x104>
 800d32a:	4252      	negs	r2, r2
 800d32c:	f043 0302 	orr.w	r3, r3, #2
 800d330:	9207      	str	r2, [sp, #28]
 800d332:	9304      	str	r3, [sp, #16]
 800d334:	783b      	ldrb	r3, [r7, #0]
 800d336:	2b2e      	cmp	r3, #46	; 0x2e
 800d338:	d10c      	bne.n	800d354 <_svfiprintf_r+0x124>
 800d33a:	787b      	ldrb	r3, [r7, #1]
 800d33c:	2b2a      	cmp	r3, #42	; 0x2a
 800d33e:	d133      	bne.n	800d3a8 <_svfiprintf_r+0x178>
 800d340:	9b03      	ldr	r3, [sp, #12]
 800d342:	3702      	adds	r7, #2
 800d344:	1d1a      	adds	r2, r3, #4
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	9203      	str	r2, [sp, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	bfb8      	it	lt
 800d34e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d352:	9305      	str	r3, [sp, #20]
 800d354:	4d2e      	ldr	r5, [pc, #184]	; (800d410 <_svfiprintf_r+0x1e0>)
 800d356:	2203      	movs	r2, #3
 800d358:	7839      	ldrb	r1, [r7, #0]
 800d35a:	4628      	mov	r0, r5
 800d35c:	f000 f9e8 	bl	800d730 <memchr>
 800d360:	b138      	cbz	r0, 800d372 <_svfiprintf_r+0x142>
 800d362:	2340      	movs	r3, #64	; 0x40
 800d364:	1b40      	subs	r0, r0, r5
 800d366:	fa03 f000 	lsl.w	r0, r3, r0
 800d36a:	9b04      	ldr	r3, [sp, #16]
 800d36c:	3701      	adds	r7, #1
 800d36e:	4303      	orrs	r3, r0
 800d370:	9304      	str	r3, [sp, #16]
 800d372:	7839      	ldrb	r1, [r7, #0]
 800d374:	2206      	movs	r2, #6
 800d376:	4827      	ldr	r0, [pc, #156]	; (800d414 <_svfiprintf_r+0x1e4>)
 800d378:	1c7e      	adds	r6, r7, #1
 800d37a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d37e:	f000 f9d7 	bl	800d730 <memchr>
 800d382:	2800      	cmp	r0, #0
 800d384:	d038      	beq.n	800d3f8 <_svfiprintf_r+0x1c8>
 800d386:	4b24      	ldr	r3, [pc, #144]	; (800d418 <_svfiprintf_r+0x1e8>)
 800d388:	bb13      	cbnz	r3, 800d3d0 <_svfiprintf_r+0x1a0>
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	3307      	adds	r3, #7
 800d38e:	f023 0307 	bic.w	r3, r3, #7
 800d392:	3308      	adds	r3, #8
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d398:	444b      	add	r3, r9
 800d39a:	9309      	str	r3, [sp, #36]	; 0x24
 800d39c:	e76d      	b.n	800d27a <_svfiprintf_r+0x4a>
 800d39e:	fb05 3202 	mla	r2, r5, r2, r3
 800d3a2:	2001      	movs	r0, #1
 800d3a4:	460f      	mov	r7, r1
 800d3a6:	e7a6      	b.n	800d2f6 <_svfiprintf_r+0xc6>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	250a      	movs	r5, #10
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	3701      	adds	r7, #1
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b8:	3a30      	subs	r2, #48	; 0x30
 800d3ba:	2a09      	cmp	r2, #9
 800d3bc:	d903      	bls.n	800d3c6 <_svfiprintf_r+0x196>
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0c8      	beq.n	800d354 <_svfiprintf_r+0x124>
 800d3c2:	9105      	str	r1, [sp, #20]
 800d3c4:	e7c6      	b.n	800d354 <_svfiprintf_r+0x124>
 800d3c6:	fb05 2101 	mla	r1, r5, r1, r2
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	e7f0      	b.n	800d3b2 <_svfiprintf_r+0x182>
 800d3d0:	ab03      	add	r3, sp, #12
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	4622      	mov	r2, r4
 800d3d6:	4b11      	ldr	r3, [pc, #68]	; (800d41c <_svfiprintf_r+0x1ec>)
 800d3d8:	a904      	add	r1, sp, #16
 800d3da:	4640      	mov	r0, r8
 800d3dc:	f3af 8000 	nop.w
 800d3e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d3e4:	4681      	mov	r9, r0
 800d3e6:	d1d6      	bne.n	800d396 <_svfiprintf_r+0x166>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	065b      	lsls	r3, r3, #25
 800d3ec:	f53f af35 	bmi.w	800d25a <_svfiprintf_r+0x2a>
 800d3f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3f2:	b01d      	add	sp, #116	; 0x74
 800d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f8:	ab03      	add	r3, sp, #12
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4b07      	ldr	r3, [pc, #28]	; (800d41c <_svfiprintf_r+0x1ec>)
 800d400:	a904      	add	r1, sp, #16
 800d402:	4640      	mov	r0, r8
 800d404:	f000 f882 	bl	800d50c <_printf_i>
 800d408:	e7ea      	b.n	800d3e0 <_svfiprintf_r+0x1b0>
 800d40a:	bf00      	nop
 800d40c:	0802f208 	.word	0x0802f208
 800d410:	0802f20e 	.word	0x0802f20e
 800d414:	0802f212 	.word	0x0802f212
 800d418:	00000000 	.word	0x00000000
 800d41c:	0800d17d 	.word	0x0800d17d

0800d420 <_printf_common>:
 800d420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d424:	4691      	mov	r9, r2
 800d426:	461f      	mov	r7, r3
 800d428:	688a      	ldr	r2, [r1, #8]
 800d42a:	690b      	ldr	r3, [r1, #16]
 800d42c:	4606      	mov	r6, r0
 800d42e:	4293      	cmp	r3, r2
 800d430:	bfb8      	it	lt
 800d432:	4613      	movlt	r3, r2
 800d434:	f8c9 3000 	str.w	r3, [r9]
 800d438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d43c:	460c      	mov	r4, r1
 800d43e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d442:	b112      	cbz	r2, 800d44a <_printf_common+0x2a>
 800d444:	3301      	adds	r3, #1
 800d446:	f8c9 3000 	str.w	r3, [r9]
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	0699      	lsls	r1, r3, #26
 800d44e:	bf42      	ittt	mi
 800d450:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d454:	3302      	addmi	r3, #2
 800d456:	f8c9 3000 	strmi.w	r3, [r9]
 800d45a:	6825      	ldr	r5, [r4, #0]
 800d45c:	f015 0506 	ands.w	r5, r5, #6
 800d460:	d107      	bne.n	800d472 <_printf_common+0x52>
 800d462:	f104 0a19 	add.w	sl, r4, #25
 800d466:	68e3      	ldr	r3, [r4, #12]
 800d468:	f8d9 2000 	ldr.w	r2, [r9]
 800d46c:	1a9b      	subs	r3, r3, r2
 800d46e:	42ab      	cmp	r3, r5
 800d470:	dc29      	bgt.n	800d4c6 <_printf_common+0xa6>
 800d472:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d476:	6822      	ldr	r2, [r4, #0]
 800d478:	3300      	adds	r3, #0
 800d47a:	bf18      	it	ne
 800d47c:	2301      	movne	r3, #1
 800d47e:	0692      	lsls	r2, r2, #26
 800d480:	d42e      	bmi.n	800d4e0 <_printf_common+0xc0>
 800d482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d486:	4639      	mov	r1, r7
 800d488:	4630      	mov	r0, r6
 800d48a:	47c0      	blx	r8
 800d48c:	3001      	adds	r0, #1
 800d48e:	d021      	beq.n	800d4d4 <_printf_common+0xb4>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	68e5      	ldr	r5, [r4, #12]
 800d494:	f003 0306 	and.w	r3, r3, #6
 800d498:	2b04      	cmp	r3, #4
 800d49a:	bf18      	it	ne
 800d49c:	2500      	movne	r5, #0
 800d49e:	f8d9 2000 	ldr.w	r2, [r9]
 800d4a2:	f04f 0900 	mov.w	r9, #0
 800d4a6:	bf08      	it	eq
 800d4a8:	1aad      	subeq	r5, r5, r2
 800d4aa:	68a3      	ldr	r3, [r4, #8]
 800d4ac:	6922      	ldr	r2, [r4, #16]
 800d4ae:	bf08      	it	eq
 800d4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	bfc4      	itt	gt
 800d4b8:	1a9b      	subgt	r3, r3, r2
 800d4ba:	18ed      	addgt	r5, r5, r3
 800d4bc:	341a      	adds	r4, #26
 800d4be:	454d      	cmp	r5, r9
 800d4c0:	d11a      	bne.n	800d4f8 <_printf_common+0xd8>
 800d4c2:	2000      	movs	r0, #0
 800d4c4:	e008      	b.n	800d4d8 <_printf_common+0xb8>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	4652      	mov	r2, sl
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	47c0      	blx	r8
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d103      	bne.n	800d4dc <_printf_common+0xbc>
 800d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4dc:	3501      	adds	r5, #1
 800d4de:	e7c2      	b.n	800d466 <_printf_common+0x46>
 800d4e0:	2030      	movs	r0, #48	; 0x30
 800d4e2:	18e1      	adds	r1, r4, r3
 800d4e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4ee:	4422      	add	r2, r4
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4f6:	e7c4      	b.n	800d482 <_printf_common+0x62>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	4622      	mov	r2, r4
 800d4fc:	4639      	mov	r1, r7
 800d4fe:	4630      	mov	r0, r6
 800d500:	47c0      	blx	r8
 800d502:	3001      	adds	r0, #1
 800d504:	d0e6      	beq.n	800d4d4 <_printf_common+0xb4>
 800d506:	f109 0901 	add.w	r9, r9, #1
 800d50a:	e7d8      	b.n	800d4be <_printf_common+0x9e>

0800d50c <_printf_i>:
 800d50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d510:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d514:	460c      	mov	r4, r1
 800d516:	7e09      	ldrb	r1, [r1, #24]
 800d518:	b085      	sub	sp, #20
 800d51a:	296e      	cmp	r1, #110	; 0x6e
 800d51c:	4617      	mov	r7, r2
 800d51e:	4606      	mov	r6, r0
 800d520:	4698      	mov	r8, r3
 800d522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d524:	f000 80b3 	beq.w	800d68e <_printf_i+0x182>
 800d528:	d822      	bhi.n	800d570 <_printf_i+0x64>
 800d52a:	2963      	cmp	r1, #99	; 0x63
 800d52c:	d036      	beq.n	800d59c <_printf_i+0x90>
 800d52e:	d80a      	bhi.n	800d546 <_printf_i+0x3a>
 800d530:	2900      	cmp	r1, #0
 800d532:	f000 80b9 	beq.w	800d6a8 <_printf_i+0x19c>
 800d536:	2958      	cmp	r1, #88	; 0x58
 800d538:	f000 8083 	beq.w	800d642 <_printf_i+0x136>
 800d53c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d540:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d544:	e032      	b.n	800d5ac <_printf_i+0xa0>
 800d546:	2964      	cmp	r1, #100	; 0x64
 800d548:	d001      	beq.n	800d54e <_printf_i+0x42>
 800d54a:	2969      	cmp	r1, #105	; 0x69
 800d54c:	d1f6      	bne.n	800d53c <_printf_i+0x30>
 800d54e:	6820      	ldr	r0, [r4, #0]
 800d550:	6813      	ldr	r3, [r2, #0]
 800d552:	0605      	lsls	r5, r0, #24
 800d554:	f103 0104 	add.w	r1, r3, #4
 800d558:	d52a      	bpl.n	800d5b0 <_printf_i+0xa4>
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	6011      	str	r1, [r2, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	da03      	bge.n	800d56a <_printf_i+0x5e>
 800d562:	222d      	movs	r2, #45	; 0x2d
 800d564:	425b      	negs	r3, r3
 800d566:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d56a:	486f      	ldr	r0, [pc, #444]	; (800d728 <_printf_i+0x21c>)
 800d56c:	220a      	movs	r2, #10
 800d56e:	e039      	b.n	800d5e4 <_printf_i+0xd8>
 800d570:	2973      	cmp	r1, #115	; 0x73
 800d572:	f000 809d 	beq.w	800d6b0 <_printf_i+0x1a4>
 800d576:	d808      	bhi.n	800d58a <_printf_i+0x7e>
 800d578:	296f      	cmp	r1, #111	; 0x6f
 800d57a:	d020      	beq.n	800d5be <_printf_i+0xb2>
 800d57c:	2970      	cmp	r1, #112	; 0x70
 800d57e:	d1dd      	bne.n	800d53c <_printf_i+0x30>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	f043 0320 	orr.w	r3, r3, #32
 800d586:	6023      	str	r3, [r4, #0]
 800d588:	e003      	b.n	800d592 <_printf_i+0x86>
 800d58a:	2975      	cmp	r1, #117	; 0x75
 800d58c:	d017      	beq.n	800d5be <_printf_i+0xb2>
 800d58e:	2978      	cmp	r1, #120	; 0x78
 800d590:	d1d4      	bne.n	800d53c <_printf_i+0x30>
 800d592:	2378      	movs	r3, #120	; 0x78
 800d594:	4865      	ldr	r0, [pc, #404]	; (800d72c <_printf_i+0x220>)
 800d596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d59a:	e055      	b.n	800d648 <_printf_i+0x13c>
 800d59c:	6813      	ldr	r3, [r2, #0]
 800d59e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5a2:	1d19      	adds	r1, r3, #4
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6011      	str	r1, [r2, #0]
 800d5a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e08c      	b.n	800d6ca <_printf_i+0x1be>
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5b6:	6011      	str	r1, [r2, #0]
 800d5b8:	bf18      	it	ne
 800d5ba:	b21b      	sxthne	r3, r3
 800d5bc:	e7cf      	b.n	800d55e <_printf_i+0x52>
 800d5be:	6813      	ldr	r3, [r2, #0]
 800d5c0:	6825      	ldr	r5, [r4, #0]
 800d5c2:	1d18      	adds	r0, r3, #4
 800d5c4:	6010      	str	r0, [r2, #0]
 800d5c6:	0628      	lsls	r0, r5, #24
 800d5c8:	d501      	bpl.n	800d5ce <_printf_i+0xc2>
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	e002      	b.n	800d5d4 <_printf_i+0xc8>
 800d5ce:	0668      	lsls	r0, r5, #25
 800d5d0:	d5fb      	bpl.n	800d5ca <_printf_i+0xbe>
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	296f      	cmp	r1, #111	; 0x6f
 800d5d6:	bf14      	ite	ne
 800d5d8:	220a      	movne	r2, #10
 800d5da:	2208      	moveq	r2, #8
 800d5dc:	4852      	ldr	r0, [pc, #328]	; (800d728 <_printf_i+0x21c>)
 800d5de:	2100      	movs	r1, #0
 800d5e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d5e4:	6865      	ldr	r5, [r4, #4]
 800d5e6:	2d00      	cmp	r5, #0
 800d5e8:	60a5      	str	r5, [r4, #8]
 800d5ea:	f2c0 8095 	blt.w	800d718 <_printf_i+0x20c>
 800d5ee:	6821      	ldr	r1, [r4, #0]
 800d5f0:	f021 0104 	bic.w	r1, r1, #4
 800d5f4:	6021      	str	r1, [r4, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d13d      	bne.n	800d676 <_printf_i+0x16a>
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	f040 808e 	bne.w	800d71c <_printf_i+0x210>
 800d600:	4665      	mov	r5, ip
 800d602:	2a08      	cmp	r2, #8
 800d604:	d10b      	bne.n	800d61e <_printf_i+0x112>
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	07db      	lsls	r3, r3, #31
 800d60a:	d508      	bpl.n	800d61e <_printf_i+0x112>
 800d60c:	6923      	ldr	r3, [r4, #16]
 800d60e:	6862      	ldr	r2, [r4, #4]
 800d610:	429a      	cmp	r2, r3
 800d612:	bfde      	ittt	le
 800d614:	2330      	movle	r3, #48	; 0x30
 800d616:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d61a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d61e:	ebac 0305 	sub.w	r3, ip, r5
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	f8cd 8000 	str.w	r8, [sp]
 800d628:	463b      	mov	r3, r7
 800d62a:	aa03      	add	r2, sp, #12
 800d62c:	4621      	mov	r1, r4
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff fef6 	bl	800d420 <_printf_common>
 800d634:	3001      	adds	r0, #1
 800d636:	d14d      	bne.n	800d6d4 <_printf_i+0x1c8>
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	b005      	add	sp, #20
 800d63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d642:	4839      	ldr	r0, [pc, #228]	; (800d728 <_printf_i+0x21c>)
 800d644:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d648:	6813      	ldr	r3, [r2, #0]
 800d64a:	6821      	ldr	r1, [r4, #0]
 800d64c:	1d1d      	adds	r5, r3, #4
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6015      	str	r5, [r2, #0]
 800d652:	060a      	lsls	r2, r1, #24
 800d654:	d50b      	bpl.n	800d66e <_printf_i+0x162>
 800d656:	07ca      	lsls	r2, r1, #31
 800d658:	bf44      	itt	mi
 800d65a:	f041 0120 	orrmi.w	r1, r1, #32
 800d65e:	6021      	strmi	r1, [r4, #0]
 800d660:	b91b      	cbnz	r3, 800d66a <_printf_i+0x15e>
 800d662:	6822      	ldr	r2, [r4, #0]
 800d664:	f022 0220 	bic.w	r2, r2, #32
 800d668:	6022      	str	r2, [r4, #0]
 800d66a:	2210      	movs	r2, #16
 800d66c:	e7b7      	b.n	800d5de <_printf_i+0xd2>
 800d66e:	064d      	lsls	r5, r1, #25
 800d670:	bf48      	it	mi
 800d672:	b29b      	uxthmi	r3, r3
 800d674:	e7ef      	b.n	800d656 <_printf_i+0x14a>
 800d676:	4665      	mov	r5, ip
 800d678:	fbb3 f1f2 	udiv	r1, r3, r2
 800d67c:	fb02 3311 	mls	r3, r2, r1, r3
 800d680:	5cc3      	ldrb	r3, [r0, r3]
 800d682:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d686:	460b      	mov	r3, r1
 800d688:	2900      	cmp	r1, #0
 800d68a:	d1f5      	bne.n	800d678 <_printf_i+0x16c>
 800d68c:	e7b9      	b.n	800d602 <_printf_i+0xf6>
 800d68e:	6813      	ldr	r3, [r2, #0]
 800d690:	6825      	ldr	r5, [r4, #0]
 800d692:	1d18      	adds	r0, r3, #4
 800d694:	6961      	ldr	r1, [r4, #20]
 800d696:	6010      	str	r0, [r2, #0]
 800d698:	0628      	lsls	r0, r5, #24
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	d501      	bpl.n	800d6a2 <_printf_i+0x196>
 800d69e:	6019      	str	r1, [r3, #0]
 800d6a0:	e002      	b.n	800d6a8 <_printf_i+0x19c>
 800d6a2:	066a      	lsls	r2, r5, #25
 800d6a4:	d5fb      	bpl.n	800d69e <_printf_i+0x192>
 800d6a6:	8019      	strh	r1, [r3, #0]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	4665      	mov	r5, ip
 800d6ac:	6123      	str	r3, [r4, #16]
 800d6ae:	e7b9      	b.n	800d624 <_printf_i+0x118>
 800d6b0:	6813      	ldr	r3, [r2, #0]
 800d6b2:	1d19      	adds	r1, r3, #4
 800d6b4:	6011      	str	r1, [r2, #0]
 800d6b6:	681d      	ldr	r5, [r3, #0]
 800d6b8:	6862      	ldr	r2, [r4, #4]
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	4628      	mov	r0, r5
 800d6be:	f000 f837 	bl	800d730 <memchr>
 800d6c2:	b108      	cbz	r0, 800d6c8 <_printf_i+0x1bc>
 800d6c4:	1b40      	subs	r0, r0, r5
 800d6c6:	6060      	str	r0, [r4, #4]
 800d6c8:	6863      	ldr	r3, [r4, #4]
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6d2:	e7a7      	b.n	800d624 <_printf_i+0x118>
 800d6d4:	6923      	ldr	r3, [r4, #16]
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	4639      	mov	r1, r7
 800d6da:	4630      	mov	r0, r6
 800d6dc:	47c0      	blx	r8
 800d6de:	3001      	adds	r0, #1
 800d6e0:	d0aa      	beq.n	800d638 <_printf_i+0x12c>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	079b      	lsls	r3, r3, #30
 800d6e6:	d413      	bmi.n	800d710 <_printf_i+0x204>
 800d6e8:	68e0      	ldr	r0, [r4, #12]
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	4298      	cmp	r0, r3
 800d6ee:	bfb8      	it	lt
 800d6f0:	4618      	movlt	r0, r3
 800d6f2:	e7a3      	b.n	800d63c <_printf_i+0x130>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	464a      	mov	r2, r9
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	47c0      	blx	r8
 800d6fe:	3001      	adds	r0, #1
 800d700:	d09a      	beq.n	800d638 <_printf_i+0x12c>
 800d702:	3501      	adds	r5, #1
 800d704:	68e3      	ldr	r3, [r4, #12]
 800d706:	9a03      	ldr	r2, [sp, #12]
 800d708:	1a9b      	subs	r3, r3, r2
 800d70a:	42ab      	cmp	r3, r5
 800d70c:	dcf2      	bgt.n	800d6f4 <_printf_i+0x1e8>
 800d70e:	e7eb      	b.n	800d6e8 <_printf_i+0x1dc>
 800d710:	2500      	movs	r5, #0
 800d712:	f104 0919 	add.w	r9, r4, #25
 800d716:	e7f5      	b.n	800d704 <_printf_i+0x1f8>
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1ac      	bne.n	800d676 <_printf_i+0x16a>
 800d71c:	7803      	ldrb	r3, [r0, #0]
 800d71e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d722:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d726:	e76c      	b.n	800d602 <_printf_i+0xf6>
 800d728:	0802f219 	.word	0x0802f219
 800d72c:	0802f22a 	.word	0x0802f22a

0800d730 <memchr>:
 800d730:	b510      	push	{r4, lr}
 800d732:	b2c9      	uxtb	r1, r1
 800d734:	4402      	add	r2, r0
 800d736:	4290      	cmp	r0, r2
 800d738:	4603      	mov	r3, r0
 800d73a:	d101      	bne.n	800d740 <memchr+0x10>
 800d73c:	2300      	movs	r3, #0
 800d73e:	e003      	b.n	800d748 <memchr+0x18>
 800d740:	781c      	ldrb	r4, [r3, #0]
 800d742:	3001      	adds	r0, #1
 800d744:	428c      	cmp	r4, r1
 800d746:	d1f6      	bne.n	800d736 <memchr+0x6>
 800d748:	4618      	mov	r0, r3
 800d74a:	bd10      	pop	{r4, pc}

0800d74c <memmove>:
 800d74c:	4288      	cmp	r0, r1
 800d74e:	b510      	push	{r4, lr}
 800d750:	eb01 0302 	add.w	r3, r1, r2
 800d754:	d807      	bhi.n	800d766 <memmove+0x1a>
 800d756:	1e42      	subs	r2, r0, #1
 800d758:	4299      	cmp	r1, r3
 800d75a:	d00a      	beq.n	800d772 <memmove+0x26>
 800d75c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d760:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d764:	e7f8      	b.n	800d758 <memmove+0xc>
 800d766:	4283      	cmp	r3, r0
 800d768:	d9f5      	bls.n	800d756 <memmove+0xa>
 800d76a:	1881      	adds	r1, r0, r2
 800d76c:	1ad2      	subs	r2, r2, r3
 800d76e:	42d3      	cmn	r3, r2
 800d770:	d100      	bne.n	800d774 <memmove+0x28>
 800d772:	bd10      	pop	{r4, pc}
 800d774:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d778:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d77c:	e7f7      	b.n	800d76e <memmove+0x22>

0800d77e <_realloc_r>:
 800d77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d780:	4607      	mov	r7, r0
 800d782:	4614      	mov	r4, r2
 800d784:	460e      	mov	r6, r1
 800d786:	b921      	cbnz	r1, 800d792 <_realloc_r+0x14>
 800d788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d78c:	4611      	mov	r1, r2
 800d78e:	f7ff bc69 	b.w	800d064 <_malloc_r>
 800d792:	b922      	cbnz	r2, 800d79e <_realloc_r+0x20>
 800d794:	f7ff fc1a 	bl	800cfcc <_free_r>
 800d798:	4625      	mov	r5, r4
 800d79a:	4628      	mov	r0, r5
 800d79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d79e:	f000 f814 	bl	800d7ca <_malloc_usable_size_r>
 800d7a2:	42a0      	cmp	r0, r4
 800d7a4:	d20f      	bcs.n	800d7c6 <_realloc_r+0x48>
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f7ff fc5b 	bl	800d064 <_malloc_r>
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	d0f2      	beq.n	800d79a <_realloc_r+0x1c>
 800d7b4:	4631      	mov	r1, r6
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	f7ff fbf4 	bl	800cfa4 <memcpy>
 800d7bc:	4631      	mov	r1, r6
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f7ff fc04 	bl	800cfcc <_free_r>
 800d7c4:	e7e9      	b.n	800d79a <_realloc_r+0x1c>
 800d7c6:	4635      	mov	r5, r6
 800d7c8:	e7e7      	b.n	800d79a <_realloc_r+0x1c>

0800d7ca <_malloc_usable_size_r>:
 800d7ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ce:	1f18      	subs	r0, r3, #4
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	bfbc      	itt	lt
 800d7d4:	580b      	ldrlt	r3, [r1, r0]
 800d7d6:	18c0      	addlt	r0, r0, r3
 800d7d8:	4770      	bx	lr
	...

0800d7dc <_init>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr

0800d7e8 <_fini>:
 800d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ea:	bf00      	nop
 800d7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ee:	bc08      	pop	{r3}
 800d7f0:	469e      	mov	lr, r3
 800d7f2:	4770      	bx	lr
